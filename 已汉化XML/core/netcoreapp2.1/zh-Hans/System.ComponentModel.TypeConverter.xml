<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>
              类型标识为适合绑定到对象 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类，并指示对象是否是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。
            </summary>
      <param name="isDataObject">
        <see langword="true" /> 如果对象是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象; 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>
              指示此类是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>
              表示默认值的 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类，该类表示的类是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>
              确定是否的此实例 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 符合另一个对象的模式。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectAttribute" />。
              </param>
      <returns>
        <see langword="true" /> 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>
              获取一个值，该值指示是否应将对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。
            </summary>
      <returns>
        <see langword="true" /> 如果应将该对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>
              获取一个值，该值指示该属性的当前值是否为该属性的默认值。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性的当前值是默认设置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>
              指示此类不是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。
               此字段为只读。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>
              表示数据字段的属性提供元数据。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，并指示字段是否为数据行的主键。
            </summary>
      <param name="primaryKey">
        <see langword="true" /> 若要指示该字段正在; 中的数据行的主键否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，并指示该字段是否为数据行的主键，并且该字段是否数据库标识字段。
            </summary>
      <param name="primaryKey">
        <see langword="true" /> 若要指示该字段正在; 中的数据行的主键否则为 <see langword="false" />。
              </param>
      <param name="isIdentity">
        <see langword="true" /> 若要指示字段是一个标识字段，它唯一地标识数据行中;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，并指示该字段是否为数据行的主键，该字段是数据库标识字段，以及是否该字段可以为 null。
            </summary>
      <param name="primaryKey">
        <see langword="true" /> 若要指示该字段正在; 中的数据行的主键否则为 <see langword="false" />。
              </param>
      <param name="isIdentity">
        <see langword="true" /> 若要指示字段是一个标识字段，它唯一地标识数据行中;否则为 <see langword="false" />。
              </param>
      <param name="isNullable">
        <see langword="true" /> 若要指示字段可以为 null 中数据存储区;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，指示该字段是否为数据行的主键，它是数据库标识字段，以及是否可以为 null 并设置字段的长度。
            </summary>
      <param name="primaryKey">
        <see langword="true" /> 若要指示该字段正在; 中的数据行的主键否则为 <see langword="false" />。
              </param>
      <param name="isIdentity">
        <see langword="true" /> 若要指示字段是一个标识字段，它唯一地标识数据行中;否则为 <see langword="false" />。
              </param>
      <param name="isNullable">
        <see langword="true" /> 若要指示字段可以为 null 中数据存储区;否则为 <see langword="false" />。
              </param>
      <param name="length">
                以字节为单位的字段的长度。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否等于指定的对象。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />。
              </param>
      <returns>
        <see langword="true" /> 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>
              获取一个值，该值指示属性是否表示基础数据中的标识字段。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性表示基础数据; 中的标识字段否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>
              获取一个值，该值指示属性是否表示可以在基础数据存储区中为空的字段。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性表示基础数据存储区; 可以为 null 的字段否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>
              获取属性的长度以字节为单位。
            </summary>
      <returns>
              个字节，或者为-1 中的属性的长度不设置。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>
              获取一个值，该值指示属性是否在基础数据中的主键。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性是中的 primary key 的数据存储区;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>
              标识由一种类型，该方法所执行的操作的类型和方法是否是默认数据方法公开的数据操作方法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类，并标识该方法所执行的数据操作的类型。
            </summary>
      <param name="methodType">
                其中一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 描述数据操作的值的方法执行。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类中，标识的数据操作，该方法执行，并标识该方法是否是数据对象公开的默认数据方法的类型。
            </summary>
      <param name="methodType">
                其中一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 描述数据操作的值的方法执行。
              </param>
      <param name="isDefault">
        <see langword="true" /> 若要指示该属性应用到方法为指定的数据对象的默认方法 <paramref name="methodType" />; 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否等于指定的对象。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />。
              </param>
      <returns>
        <see langword="true" /> 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>
              获取一个值，该值指示是否该方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 应用于是由特定的方法类型的数据对象公开的默认数据方法。
            </summary>
      <returns>
        <see langword="true" /> 如果该方法是通过某种方法; 该对象公开的默认方法否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>
              获取一个值，该值指示此实例是否具有指定属性共享一个通用模式。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />。
              </param>
      <returns>
        <see langword="true" /> 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>
              获取 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，该值指示该方法所执行的数据操作的类型。
            </summary>
      <returns>
              其中一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 标识数据执行的操作的方法的类型的值 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 应用。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>
              标识数据执行的操作的方法，由指定类型 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 应用于此方法。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>
              指示某一方法用于删除数据的数据操作。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>
              指示某一方法用于填充的数据操作 <see cref="T:System.Data.DataSet" /> 对象。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>
              指示某一方法用于将数据插入的数据操作。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>
              指示某一方法用于检索数据的数据操作。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>
              指示某一方法用于更新数据的数据操作。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.DateTime" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以转换为给定的源类型的对象 <see cref="T:System.DateTime" /> 使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果此对象可以执行转换，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的值转换为 <see cref="T:System.DateTime" />。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值转换为 <see cref="T:System.DateTime" /> 用的参数。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.DateTimeOffset" /> 结构与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回一个值，该值指示指定的源类型的对象是否可以转换到 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="context">
                日期格式上下文。
              </param>
      <param name="sourceType">
                要检查的源类型。
              </param>
      <returns>
        <see langword="true" /> 如果指定的类型可以转换为 <see cref="T:System.DateTimeOffset" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.DateTimeOffset" /> 可以转换为指定类型的对象。
            </summary>
      <param name="context">
                日期格式上下文。
              </param>
      <param name="destinationType">
                要检查的目标类型。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.DateTimeOffset" /> 可被转换为指定的类型; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定对象转换为 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="context">
                日期格式上下文。
              </param>
      <param name="culture">
                日期的区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              一个 <see cref="T:System.DateTimeOffset" /> 表示指定的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将转换 <see cref="T:System.DateTimeOffset" /> 为指定类型的对象。
            </summary>
      <param name="context">
                日期格式上下文。
              </param>
      <param name="culture">
                日期的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.DateTimeOffset" />。
              </param>
      <param name="destinationType">
                要转换为的类型。
              </param>
      <returns>
              表示指定类型的对象 <see cref="T:System.DateTimeOffset" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.Decimal" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值转换为 <see cref="T:System.Decimal" /> 使用的参数。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>
              指定组件的默认绑定属性。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类不使用任何参数。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类使用指定的属性名称。
            </summary>
      <param name="name">
                默认绑定属性的名称。
              </param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>
              表示的默认值为 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Object" /> 是否等于当前 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例。
            </summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要与当前 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例
              </param>
      <returns>
        <see langword="true" /> 如果该对象是否等于当前实例;否则为 <see langword="false" />, ，指示它们是否不相等。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>
              获取向其组件的默认绑定属性的名称 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 绑定。
            </summary>
      <returns>
              组件的默认绑定属性的名称 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 绑定。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>
              指定组件的默认事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 类的新实例。
            </summary>
      <param name="name">
                此属性绑定到该组件的默认事件的名称。
              </param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>
              指定的默认值为 <see cref="T:System.ComponentModel.DefaultEventAttribute" />, ，即 <see langword="null" />。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 如果给定对象的值是否等于当前;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>
              获取此属性绑定到的组件的默认事件的名称。
            </summary>
      <returns>
              此属性绑定到该组件的默认事件的名称。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>
              指定组件的默认属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 类的新实例。
            </summary>
      <param name="name">
                此属性绑定到组件的默认属性的名称。
              </param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>
              指定的默认值为 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, ，即 <see langword="null" />。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 如果给定对象的值是否等于当前;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>
              获取此属性绑定到的组件的默认属性的名称。
            </summary>
      <returns>
              此属性绑定到组件的默认属性的名称。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>
              为 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 类的新实例。
            </summary>
      <param name="oldDesigner">
                正在失去激活该文档。
              </param>
      <param name="newDesigner">
                正在激活的文档。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>
              获取正在激活的文档。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> ，表示正在激活的文档。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>
              获取正在失去激活的文档。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 用于表示失活文档。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>
              当签出被签入源代码管理程序的文件的尝试被取消或失败时引发的异常。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 没有关联的消息或错误代码的类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。
            </summary>
      <param name="message">
                描述异常的消息。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。
              </param>
      <param name="context">
                要用于反序列化的目标。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 带有指定的详细的说明和指定的异常类。
            </summary>
      <param name="message">
                错误的详细的说明。
              </param>
      <param name="innerException">
                对导致此异常的内部异常的引用。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类替换为指定的消息和错误代码。
            </summary>
      <param name="message">
                描述异常的消息。
              </param>
      <param name="errorCode">
                要传递的错误代码。
              </param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类，该类指定签出已取消。
               此字段为只读。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>
              表示一个命令 ID 数字组成的唯一的命令标识符和 GUID 菜单组标识符。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 类使用指定的菜单组 GUID 和命令 ID 号。
            </summary>
      <param name="menuGroup">
                此菜单命令所属的组的 GUID。
              </param>
      <param name="commandID">
                此菜单命令的数字标识符。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:System.ComponentModel.Design.CommandID" /> 实例是否相等。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定的对象是否等效于此;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>
              用作特定类型的哈希函数。
            </summary>
      <returns>
              当前 <see cref="T:System.Object" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>
              获取此标识的菜单命令的菜单组的 GUID <see cref="T:System.ComponentModel.Design.CommandID" /> 属于。
            </summary>
      <returns>
              此命令的命令组的 GUID。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>
              获取命令数字 id。
            </summary>
      <returns>
              命令 ID 号。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>
              返回 <see cref="T:System.String" /> ，表示当前对象。
            </summary>
      <returns>
              一个字符串，其中包含命令 ID 信息、 GUID 和整数标识符。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件提供数据。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 类的新实例。
            </summary>
      <param name="component">
                已更改的组件。
              </param>
      <param name="member">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，它表示已更改的成员。
              </param>
      <param name="oldValue">
                已更改成员的旧值。
              </param>
      <param name="newValue">
                已更改成员的新值。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>
              获取已修改的组件。
            </summary>
      <returns>
        <see cref="T:System.Object" /> ，表示已修改的组件。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>
              获取已更改的成员。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 指示已更改的成员。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>
              获取已更改成员的新值。
            </summary>
      <returns>
              已更改成员的新值。
               此属性可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>
              获取已更改成员的旧值。
            </summary>
      <returns>
              已更改成员的旧值。
               此属性可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>
              提供一个接口，用于提供动态自定义类型的对象的信息。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>
              返回此组件实例的自定义属性的集合。
            </summary>
      <returns>
              包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>
              返回此组件实例的类名称。
            </summary>
      <returns>
              对象的类名称，如果该类没有名称，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>
              返回某个组件的此实例的名称。
            </summary>
      <returns>
              对象的名称，如果该对象不具有名称，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>
              返回此组件实例的类型转换器。
            </summary>
      <returns>
              作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>
              返回某个组件的此实例的默认事件。
            </summary>
      <returns>
              表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>
              返回此组件实例的默认属性。
            </summary>
      <returns>
              表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>
              返回指定类型的此实例的一个组件的编辑器。
            </summary>
      <param name="editorBaseType">
                一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。
              </param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 <see langword="null" /> 如果找不到编辑器中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>
              返回此组件实例的事件。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>
              使用指定的属性数组作为筛选器，返回此组件实例的事件。
            </summary>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>
              返回此组件实例的属性。
            </summary>
      <returns>
              表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>
              使用特性数组作为筛选器，返回此组件实例的属性。
            </summary>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回一个对象，该对象包含指定的属性描述符所描述的属性。
            </summary>
      <param name="pd">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，表示指定属性的所有者。
            </returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>
              提供的功能来提供用户界面可以绑定到的自定义错误信息。
            </summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>
              获取指示与此对象的问题到底出的错误消息。
            </summary>
      <returns>
              指示与此对象的问题到底出的错误消息。
               默认值为空字符串("")。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>
              获取具有给定名称的属性的错误消息。
            </summary>
      <param name="columnName">
                若要获取其错误信息的属性的名称。
              </param>
      <returns>
              错误消息中的属性。
               默认值为空字符串("")。
            </returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>
              定义用于扩展属性添加到容器中的其他组件的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>
              指定此对象是否可以提供其扩展程序属性设置为指定的对象。
            </summary>
      <param name="extendee">
        <see cref="T:System.Object" /> 要接收扩展程序属性。
              </param>
      <returns>
        <see langword="true" /> 如果此对象可以提供扩展程序属性与指定的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>
              提供可用于促进检索生成器的名称和显示生成器的接口。
            </summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>
              获取本地化的名称。
            </summary>
      <returns>
              本地化的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>
              显示的生成器。
            </summary>
      <param name="language">
                正在调用生成器语言服务。
              </param>
      <param name="value">
                正在编辑表达式。
              </param>
      <param name="newValue">
                新值。
              </param>
      <returns>
        <see langword="true" /> 如果应使用替换值 <paramref name="newValue" />; 否则为 <see langword="false" /> （如果用户取消，例如）。
            </returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>
              提供了以下功能的对象以返回可绑定到数据源的列表。
            </summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>
              获取一个值，该值指示集合是否一套 <see cref="T:System.Collections.IList" /> 对象。
            </summary>
      <returns>
        <see langword="true" /> 如果集合是一套 <see cref="T:System.Collections.IList" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>
              返回 <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象以便为没有实现 <see cref="T:System.Collections.IList" /> 本身。
            </summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象。
            </returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>
              对于嵌套的容器，也不能在逻辑上包含零个或多个其他组件所拥有的父组件提供功能。
            </summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>
              获取嵌套容器所属的组件。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 拥有嵌套的容器。
            </returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>
              提供的功能来检索嵌套的完整组件名称。
            </summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>
              在此站点中获取该组件的完整名称。
            </summary>
      <returns>
              此站点中的组件的完整名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>
              指示是否已从基类继承此属性与关联的组件。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类具有指定的继承级别。
            </summary>
      <param name="inheritanceLevel">
        <see cref="T:System.ComponentModel.InheritanceLevel" /> 指示继承，以将此属性设置为的级别。
              </param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>
              指定的默认值为 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 是 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>
              重写来测试相等性。
            </summary>
      <param name="value">
                要测试的对象。
              </param>
      <returns>
        <see langword="true" /> 对象是否相同，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>
              返回此对象的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>
              获取或设置此属性中存储的当前继承级别。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.InheritanceLevel" /> 存储在此属性。
            </returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>
              指定该组件被继承。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>
              指定该组件被继承，并且是只读的。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>
              获取一个值，该值指示该属性的当前值是否为该属性的默认值。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性的当前值是默认设置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>
              指定不继承的组件。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>
              将此属性转换为字符串。
            </summary>
      <returns>
              表示此 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字符串。
            </returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>
              定义继承级别类型的标识符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>
              该对象继承。
            </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>
              该对象继承，但具有只读访问权限。
            </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>
              该对象不继承。
            </summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>
              指定的安装程序安装组件的类型。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 同名的组件的安装程序类型的类。
            </summary>
      <param name="typeName">
                名称 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的安装程序。
                 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 类，在给定 <see cref="T:System.Type" /> 表示组件的安装程序。
            </summary>
      <param name="installerType">
                一个 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的安装程序。
                 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 如果给定对象的值是否等于当前;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>
              返回此对象的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>
              获取与此属性关联的安装程序的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，表示与此属性关联的安装程序的类型或 <see langword="null" /> 如果安装程序不存在。
            </returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>
              从下拉列表框内创建特定类型的属性的一个实例 <see cref="T:System.Windows.Forms.PropertyGrid" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              当在派生类中重写，则返回指定类型的实例。
            </summary>
      <param name="context">
                上下文信息。
              </param>
      <param name="instanceType">
                指定的类型。
              </param>
      <returns>
              指定类型的实例或 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>
              获取指定的文本。
            </summary>
      <returns>
              指定的文本。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>
              提供用于在 16 位有符号整数对象与其他表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>
              提供用于在 32 位有符号整数对象与其他表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>
              提供用于在 64 位有符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>
              当不再存在或没有消息循环的线程应在其执行某个操作时引发。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类，具有指定的详细说明。
            </summary>
      <param name="message">
                错误的详细的说明。
              </param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类与给定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。
              </param>
      <param name="context">
                要用于反序列化的目标。
              </param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 带有指定的详细的说明和指定的异常类。
            </summary>
      <param name="message">
                错误的详细的说明。
              </param>
      <param name="innerException">
                对导致此异常的内部异常的引用。
              </param>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>
              使用由枚举器无效参数时引发的异常。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类，而一条消息。
            </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。
            </summary>
      <param name="message">
                要与此异常一起显示的消息。
              </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。
              </param>
      <param name="context">
                要用于反序列化的目标。
              </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 带有指定的详细的说明和指定的异常类。
            </summary>
      <param name="message">
                错误的详细的说明。
              </param>
      <param name="innerException">
                对导致此异常的内部异常的引用。
              </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类，具有参数、 的无效值和枚举类生成一条消息。
            </summary>
      <param name="argumentName">
                导致异常的参数的名称。
              </param>
      <param name="invalidValue">
                失败的参数的值。
              </param>
      <param name="enumClass">
                一个 <see cref="T:System.Type" /> ，它表示具有有效值枚举类。
              </param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>
              指示类是否将转换到的属性更改事件 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。
            </summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件时对它的一个属性值发生了更改; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>
              实现协作的一个组件和其依赖项属性的初始化。
            </summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>
              组件初始化完成后发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>
              获取一个值，该值指示组件是否已初始化。
            </summary>
      <returns>
              如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>
              提供与其他各种表示形式转换组件的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 类的新实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，它表示要与此组件转换器关联的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              获取由值参数指定的组件类型的属性的集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的组件类型。
              </param>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 与组件公开的属性或 <see langword="null" /> 是否存在任何属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持使用指定的上下文属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 应调用来查找此对象的属性。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>
              自定义组件编辑器中提供的基类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>
              编辑该组件，并返回一个值，该值指示是否修改了该组件。
            </summary>
      <param name="component">
                要编辑的组件。
              </param>
      <returns>
        <see langword="true" /> 如果修改了该组件;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              编辑该组件，并返回一个值，指示组件是否已修改基于给定的上下文。
            </summary>
      <param name="context">
                可以使用以获取进一步编辑有关的信息的可选上下文对象。
              </param>
      <param name="component">
                要编辑的组件。
              </param>
      <returns>
        <see langword="true" /> 如果修改了该组件;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>
              枚举资源的组件或对象提供简单的功能。
              <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类是 <see cref="T:System.Resources.ResourceManager" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>
              使用默认值初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>
              创建 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 查找基于信息从指定的附属程序集中的资源 <see cref="T:System.Type" />。
            </summary>
      <param name="t">
                一个 <see cref="T:System.Type" /> 从中 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 派生所有用于查找资源文件的信息。
              </param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>
              适用于该对象的相应属性的资源的值。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> ，其中包含要应用的属性值。
              </param>
      <param name="objectName">
                一个 <see cref="T:System.String" /> ，其中包含要查找的资源的对象的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>
              适用于该对象的相应属性的资源的值。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> ，其中包含要应用的属性值。
              </param>
      <param name="objectName">
                一个 <see cref="T:System.String" /> ，其中包含要查找的资源的对象的名称。
              </param>
      <param name="culture">
                若要将资源应用区域性。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>
              提供用于按名称检索程序集或类型的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>
              获取请求的程序集。
            </summary>
      <param name="name">
                要检索的程序集的名称。
              </param>
      <returns>
              请求的程序集的实例或 <see langword="null" /> 如果未设置程序集可以位于。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>
              获取请求的程序集。
            </summary>
      <param name="name">
                要检索的程序集的名称。
              </param>
      <param name="throwOnError">
        <see langword="true" /> 如果此方法应引发异常，如果该程序集不能定位;否则为 <see langword="false" />, ，并且此方法返回 <see langword="null" /> 如果找不到该程序集。
              </param>
      <returns>
              请求的程序集的实例或 <see langword="null" /> 如果未设置程序集可以位于。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>
              获取从中加载该程序集文件的路径。
            </summary>
      <param name="name">
                程序集的名称。
              </param>
      <returns>
              从中加载该程序集文件的路径。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>
              加载具有指定名称的类型。
            </summary>
      <param name="name">
                类型的名称。
                 如果类型名称不是用于指示程序集的完全限定的名称，此服务将搜索其内部的一套引用的程序集。
              </param>
      <returns>
              一个实例 <see cref="T:System.Type" /> 对应于指定的名称，或 <see langword="null" /> 如果找不到任何类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>
              加载具有指定名称的类型。
            </summary>
      <param name="name">
                类型的名称。
                 如果类型名称不是用于指示程序集的完全限定的名称，此服务将搜索其内部的一套引用的程序集。
              </param>
      <param name="throwOnError">
        <see langword="true" /> 如果此方法应引发异常，如果该程序集不能定位;否则为 <see langword="false" />, ，并且此方法返回 <see langword="null" /> 如果找不到该程序集。
              </param>
      <returns>
              一个实例 <see cref="T:System.Type" /> 对应于指定的名称，或 <see langword="null" /> 如果找不到任何类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
              加载具有指定名称的类型。
            </summary>
      <param name="name">
                类型的名称。
                 如果类型名称不是用于指示程序集的完全限定的名称，此服务将搜索其内部的一套引用的程序集。
              </param>
      <param name="throwOnError">
        <see langword="true" /> 如果此方法应引发异常，如果该程序集不能定位;否则为 <see langword="false" />, ，并且此方法返回 <see langword="null" /> 如果找不到该程序集。
              </param>
      <param name="ignoreCase">
        <see langword="true" /> 若要在搜索类型; 时忽略大小写否则为 <see langword="false" />。
              </param>
      <returns>
              一个实例 <see cref="T:System.Type" /> 对应于指定的名称，或 <see langword="null" /> 如果找不到任何类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>
              添加到指定的程序集的引用。
            </summary>
      <param name="name">
        <see cref="T:System.Reflection.AssemblyName" /> ，该值指示要引用的程序集。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>
              表示 Windows 菜单或工具栏命令项。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 类的新实例。
            </summary>
      <param name="handler">
                要在用户选择菜单项或工具栏按钮时引发的事件。
              </param>
      <param name="command">
                此菜单命令链接到环境的菜单唯一的命令 ID。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>
              获取或设置一个值，该值指示是否选中此菜单项。
            </summary>
      <returns>
        <see langword="true" /> 如果选中该项，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>
              菜单命令更改时发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 与此菜单命令相关联。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.CommandID" /> 与菜单命令相关联。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>
              获取一个值，该值指示此菜单项是否可用。
            </summary>
      <returns>
        <see langword="true" /> 如果启用项;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>
              调用命令。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>
              调用带有参数的给定命令。
            </summary>
      <param name="arg">
                该命令通过使用可选参数。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>
              获取此菜单项的 OLE 命令状态代码。
            </summary>
      <returns>
              包含反映此菜单项的状态的状态标志的组合的整数。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.EventArgs" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>
              获取与相关联的公共属性 <see cref="T:System.ComponentModel.Design.MenuCommand" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 包含的公共属性的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>
              获取或设置一个值，该值指示是否支持此菜单项。
            </summary>
      <returns>
        <see langword="true" /> 如果支持此项，这是默认设置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>
              返回的字符串表示形式此菜单命令。
            </summary>
      <returns>
              包含的值的字符串 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 属性会设置任何标志的名称后追加通过竖线 (|) 分隔。
               这些标志属性包括 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, ，<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, ，<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" />, ，和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>
              获取或设置一个值，该值指示此菜单项是否可见。
            </summary>
      <returns>
        <see langword="true" /> 如果该项是可见的则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>
              定义指示所选内容的类型的标识符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>
              表示将选定的组件添加到当前所选内容，维护当前所选组件的集合添加所选内容。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>
              表示正则所选内容。
               选择服务响应 CTRL 和 SHIFT 键以支持添加或删除组件到或从所选内容。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>
              表示当用户单击组件时发生的选择。
               如果已选择新选择的组件，它将提升为主选择的组件，而不是被取消。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>
              表示当鼠标指针位于在组件上时，用户按下鼠标按钮时出现的选择。
               如果已选中指针下方的组件，则它将提升为主选择组件，而不被取消。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>
              表示当用户选择组件后立即释放鼠标按钮时出现的选择。
               如果已选择新选择的组件，它将提升为主选择的组件，而不是被取消。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>
              表示正则所选内容。
               选择服务响应 CTRL 和 SHIFT 键以支持添加或删除组件到或从所选内容。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>
              表示当用户单击组件时发生的主选择。
               如果已选中选择列表中的一个组件，组件提升为主选择。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>
              表示从当前所选内容，维护当前所选组件的集合中删除所选的组件移除所选内容。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>
              表示当所选内容的内容被替换时发生的选择。
               选择服务替换替换为当前所选内容。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>
              表示当前所选内容和提供的选择项之间切换的切换选择。
               如果组件已被选中，并传递给 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> 选择类型为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, ，所选择的组件都将被取消。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>
              标识的有效选择类型为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, ，<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, ，<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, ，<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" />, ，或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>
              将一组组件或可序列化对象序列化为序列化存储区提供基类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>
              创建一个新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。
            </summary>
      <returns>
              新创建的序列化存储。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>
              反序列化给定存储区中，若要生成的对象的集合。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。
              </param>
      <returns>
              根据存储的状态创建的对象的集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>
              反序列化给定存储区并填充给定 <see cref="T:System.ComponentModel.IContainer" /> 使用反序列化 <see cref="T:System.ComponentModel.IComponent" /> 对象。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。
              </param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> 到 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。
              </param>
      <returns>
              根据存储的状态创建的对象的集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>
              反序列化给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 化为给定的容器。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。
              </param>
      <param name="container">
                到容器 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>
              反序列化给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至给定容器 （可选） 验证回收类型。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。
              </param>
      <param name="container">
                到容器 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。
              </param>
      <param name="validateRecycledTypes">
        <see langword="true" /> 若要确保如果应用于同一类型的对象时，才可行反序列化。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>
              反序列化给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至给定容器可选择应用的默认属性值。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。
              </param>
      <param name="container">
                到容器 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。
              </param>
      <param name="validateRecycledTypes">
        <see langword="true" /> 若要确保如果应用于同一类型的对象时，才可行反序列化。
              </param>
      <param name="applyDefaults">
        <see langword="true" /> 若要指示应应用的默认属性值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>
              加载 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 从流。
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 从加载存储区。
              </param>
      <returns>
              新 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 不包含任何数据保存到的以前调用 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>
              将给定的对象序列化为给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="value" /> 将写入。
              </param>
      <param name="value">
                要序列化的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。
                   使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>
              将序列化为给定的对象，包括默认属性值。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="value" /> 将序列化。
              </param>
      <param name="value">
                要序列化的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。
                   使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
              在给定对象上序列化给定成员。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="member" /> 将序列化。
              </param>
      <param name="owningObject">
                向其中的对象 <paramref name="member" /> 附加。
              </param>
      <param name="member">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 指定要序列化的成员。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。
                   使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
              序列化给定的成员给定的对象包括默认属性值。
            </summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="member" /> 将序列化。
              </param>
      <param name="owningObject">
                向其中的对象 <paramref name="member" /> 附加。
              </param>
      <param name="member">
                要序列化的成员。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。
                   使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。
                </exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>
              提供序列化程序可用于向嵌套的序列化程序提供信息的堆栈对象。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>
              将对象追加到末尾的堆栈上，而不是将其推到堆栈的顶部。
            </summary>
      <param name="context">
                要追加到堆栈的上下文对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>
              获取当前对象在堆栈上。
            </summary>
      <returns>
              在堆栈上的当前对象或 <see langword="null" /> 如果不会推送任何对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>
              获取位于指定级别的堆栈上的对象。
            </summary>
      <param name="level">
                要检索在堆栈上的对象的级别。
                 级别 0 是堆栈的顶部，级别 1 表示下一步，向下，依次类推。
                 此级别必须是大于或等于 0。
                 如果级别高于在堆栈上的级别数，它将返回 <see langword="null" />。
              </param>
      <returns>
              在指定级别的堆栈上的对象或 <see langword="null" /> 如果不存在的对象在该级别。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> 小于 0。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>
              继承自或实现指定的类型的堆栈上获取的第一个对象。
            </summary>
      <param name="type">
                要从上下文堆栈中检索的类型。
              </param>
      <returns>
              继承自或实现指定的类型的堆栈上的第一个对象或 <see langword="null" /> 如果堆栈上的没有任何对象实现的类型。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>
              删除从堆栈，并返回其值的当前对象。
            </summary>
      <returns>
              从堆栈中移除的对象 <see langword="null" /> 如果不不在堆栈上的任何对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>
              推入，或将放置到堆栈上指定的对象。
            </summary>
      <param name="context">
                要推入堆栈的上下文对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 特性被放置在一个序列化程序，以指示要为该类型的序列化程序的默认提供程序使用的类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 与命名的提供程序类型的类。
            </summary>
      <param name="providerTypeName">
                序列化提供程序类型的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 与给定的提供程序类型的类。
            </summary>
      <param name="providerType">
        <see cref="T:System.Type" /> 的序列化提供程序。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>
              获取序列化提供程序的类型名称。
            </summary>
      <returns>
              包含提供程序的名称的字符串。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>
              提供用于实现自定义设计器加载程序的基本设计器加载程序界面。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>
              开始加载设计器。
            </summary>
      <param name="host">
                此加载程序将加载组件加载程序宿主。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>
              将缓存的更改写入设计器的加载位置。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>
              获取一个值，该值指示加载程序是否正在加载文档。
            </summary>
      <returns>
        <see langword="true" /> 如果加载程序当前是否正在加载文档;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>
              指示要用来序列化此特性应用于类型的值的序列化管理器的序列化程序。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。
            </summary>
      <param name="serializerTypeName">
                数据类型的序列化程序完全限定的名称。
              </param>
      <param name="baseSerializerTypeName">
                序列化程序的基本数据类型的完全限定的名称。
                 可以为某个类提供多个序列化程序，前提是序列化程序具有不同的基类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。
            </summary>
      <param name="serializerTypeName">
                数据类型的序列化程序完全限定的名称。
              </param>
      <param name="baseSerializerType">
                基本数据类型的序列化程序。
                 可以为某个类提供多个序列化程序，前提是序列化程序具有不同的基类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。
            </summary>
      <param name="serializerType">
                序列化程序的数据类型。
              </param>
      <param name="baseSerializerType">
                基本数据类型的序列化程序。
                 可以为某个类提供多个序列化程序，前提是序列化程序具有不同的基类型。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>
              获取序列化程序的基类型的完全限定的类型名称。
            </summary>
      <returns>
              序列化程序的基类型的完全限定的类型名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>
              获取序列化程序的完全限定的类型名称。
            </summary>
      <returns>
              序列化程序完全限定的类型名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>
              指示此属性类型的唯一 ID。
            </summary>
      <returns>
              此属性类型的唯一 ID。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>
              提供有关组件，如其容器和属性描述符的上下文信息。
            </summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>
              获取表示此容器 <see cref="T:System.ComponentModel.TypeDescriptor" /> 请求。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 使用此对象集合 <see cref="T:System.ComponentModel.TypeDescriptor" />; 否则为 <see langword="null" /> 如果任何容器或者 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>
              获取与此类型说明符请求相关联的对象。
            </summary>
      <returns>
              在调用该方法的对象 <see cref="T:System.ComponentModel.TypeDescriptor" />; 否则为 <see langword="null" /> 如果没有任何对象执行了调用。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
              引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>
              引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。
            </summary>
      <returns>
        <see langword="true" /> 如果可以更改此对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>
              获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 给定的上下文项与该键相关联。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 项; 否则为描述给定的上下文 <see langword="null" /> 是否存在任何 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 执行了调用。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>
              提供功能以发现可绑定列表，其中可用于绑定的属性不同于要将绑定到的对象的公共属性的架构。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 表示每一项用于将数据绑定的属性。
            </summary>
      <param name="listAccessors">
                一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为可绑定集合中找到的对象。
                 这可能是 <see langword="null" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 表示每一项用于将数据绑定的属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              返回列表的名称。
            </summary>
      <param name="listAccessors">
                一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，为其返回的列表名称。
                 这可能是 <see langword="null" />。
              </param>
      <returns>
              列表的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>
              提供了 <see langword="abstract" /> 基类的所有许可证。
               对组件的特定实例授予许可证。
            </summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.License" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>
              当在派生类中重写，将释放该许可证使用的资源。
            </summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>
              当在派生类中重写时获取授予该组件的许可证密钥。
            </summary>
      <returns>
              授予该组件许可证密钥。
            </returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>
              指定何时可以使用授权的对象并提供一种方法获取支持许可证在其域内运行所需的其他服务。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>
              当在派生类中重写，从指定的资源程序集返回指定类型的已保存的许可证密钥。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> 表示个分量的类型。
              </param>
      <param name="resourceAssembly">
        <see cref="T:System.Reflection.Assembly" /> 使用许可证密钥。
              </param>
      <returns>
        <see cref="P:System.ComponentModel.License.LicenseKey" /> 为指定的类型。
               此方法返回 <see langword="null" /> 除非重写它。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>
              获取请求的服务是否可用。
            </summary>
      <param name="type">
                要检索的服务类型。
              </param>
      <returns>
              该服务的实例或 <see langword="null" /> 如果找不到该服务。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>
              当在派生类中重写设置指定类型的许可密钥。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示与许可证密钥相关联的组件。
              </param>
      <param name="key">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> 保存以供个分量的类型。
              </param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>
              当在派生类中重写时获取一个值，指定何时可以使用许可证。
            </summary>
      <returns>
              其中一个 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值，该值指定何时可以使用许可证。
               默认值为 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>
              表示当无法授予组件许可证时引发的异常。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 拒绝了许可证的组件的类型的类。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类与给定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。
              </param>
      <param name="context">
                要用于反序列化的目标。
              </param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的类型和被拒绝许可该组件的实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。
              </param>
      <param name="instance">
                未被授予许可证的组件的实例。
              </param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的类型和被拒绝的许可证，以及一条消息，以显示该组件的实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。
              </param>
      <param name="instance">
                未被授予许可证的组件的实例。
              </param>
      <param name="message">
                要显示的异常消息。
              </param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的类型和被拒绝的许可证，以及要显示的消息和引发原始异常的组件的实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。
              </param>
      <param name="instance">
                未被授予许可证的组件的实例。
              </param>
      <param name="message">
                要显示的异常消息。
              </param>
      <param name="innerException">
        <see cref="T:System.Exception" /> ，表示原始异常。
              </param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。
              </param>
      <param name="context">
                要用于反序列化的目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>
              获取未被授予许可证的组件的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。
            </returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>
              提供属性和方法来将许可证添加到组件以及管理 <see cref="T:System.ComponentModel.LicenseProvider" />。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>
              创建指定类型的实例可以在其中使用已授权的实例的上下文。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，它表示要创建的类型。
              </param>
      <param name="creationContext">
                一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定何时可以使用已授权的实例。
              </param>
      <returns>
              指定类型的实例。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>
              用指定的参数，可以在其中使用已授权的实例的上下文创建指定类型的实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，它表示要创建的类型。
              </param>
      <param name="creationContext">
                一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定何时可以使用已授权的实例。
              </param>
      <param name="args">
                类型的数组 <see cref="T:System.Object" /> ，它表示该类型的参数。
              </param>
      <returns>
              使用给定的参数的数组的指定类型的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>
              获取或设置当前 <see cref="T:System.ComponentModel.LicenseContext" />, ，它指定何时可以使用已授权的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定何时可以使用已授权的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性当前被锁定，不能更改。
                </exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>
              返回给定的类型是否具有有效的许可证。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 若要查找的有效许可证。
              </param>
      <returns>
        <see langword="true" /> 如果已授权的给定的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>
              确定是否可以为指定类型授予的有效许可证。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示请求的对象的类型 <see cref="T:System.ComponentModel.License" />。
              </param>
      <returns>
        <see langword="true" /> 如果可以授予有效的许可证。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>
              确定是否可以为该类型的指定实例授予有效许可证。
               此方法创建一个有效 <see cref="T:System.ComponentModel.License" />。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示请求许可证的对象的类型。
              </param>
      <param name="instance">
                指定的类型或类型的对象派生自指定的类型。
              </param>
      <param name="license">
                一个 <see cref="T:System.ComponentModel.License" /> ，它是有效的许可证，或 <see langword="null" /> 如果不能批准有效许可证。
              </param>
      <returns>
        <see langword="true" /> 如果提供了有效 <see cref="T:System.ComponentModel.License" /> 可授予; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>
              可防止对当前所做更改 <see cref="T:System.ComponentModel.LicenseContext" /> 给定的对象。
            </summary>
      <param name="contextUser">
                你想要锁定其当前上下文的对象。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  上下文已被锁定。
                </exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>
              允许更改不会对当前 <see cref="T:System.ComponentModel.LicenseContext" /> 给定的对象。
            </summary>
      <param name="contextUser">
                要解锁其当前上下文的对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> 表示比对上一个调用中指定的不同用户 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>
              获取 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 该选项指定何时可以使用的许可的对象 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />。
            </summary>
      <returns>
              其中一个 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值中指定 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>
              确定是否可以为指定类型授予许可证。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示请求许可证的对象的类型。
              </param>
      <exception cref="T:System.ComponentModel.LicenseException">
                  一个 <see cref="T:System.ComponentModel.License" /> 不能批准。
                </exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>
              确定是否可以为指定类型的实例授予许可证。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示请求许可证的对象的类型。
              </param>
      <param name="instance">
        <see cref="T:System.Object" /> 指定的类型或类型的派生自指定的类型。
              </param>
      <returns>
              有效的 <see cref="T:System.ComponentModel.License" />。
            </returns>
      <exception cref="T:System.ComponentModel.LicenseException">
                  该类型已授权，但 <see cref="T:System.ComponentModel.License" /> 不能批准。
                </exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>
              提供了 <see langword="abstract" /> 基类以便实现许可证提供程序。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>
              当在派生类中重写时获取许可证的实例或类型的组件，在给定上下文，并拒绝许可证是否引发异常。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定可以在其中使用已授权的对象。
              </param>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示请求该许可证的组件。
              </param>
      <param name="instance">
                一个对象，请求该许可证。
              </param>
      <param name="allowExceptions">
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.LicenseException" /> 应引发时该组件不能授予许可证; 否则为 <see langword="false" />。
              </param>
      <returns>
              有效的 <see cref="T:System.ComponentModel.License" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>
              指定 <see cref="T:System.ComponentModel.LicenseProvider" /> 若要使用的类。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 没有许可证提供程序的类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>
              使用指定的类型初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。
            </summary>
      <param name="typeName">
                许可证提供程序类的完全限定的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类，具有指定类型的许可证提供程序。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> 表示许可证提供程序类的类型。
              </param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>
              指定默认值，即无提供程序。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>
              指示此实例与指定对象是否相等。
            </summary>
      <param name="value">
                要比较的另一个对象。
              </param>
      <returns>
              如果 <see langword="true" /> 与此实例相等，则为 <paramref name="value" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>
              获取必须与关联的类一起使用的许可证提供。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 表示许可证提供程序的类型。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>
              指示此属性类型的唯一 ID。
            </summary>
      <returns>
              此属性类型的唯一 ID。
            </returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>
              指定何时 <see cref="T:System.ComponentModel.License" /> 可用。
            </summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>
              在设计时通过可视化设计器或编译器期间使用。
            </summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>
              在运行时使用。
            </summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>
              提供的实现 <see cref="T:System.ComponentModel.LicenseProvider" />。
               在类似于标准的 Microsoft.NET Framework 的许可模型，该提供程序工作正常。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>
              返回指定类型的键。
            </summary>
      <param name="type">
                要返回键的对象类型。
              </param>
      <returns>
              一条确认消息， <paramref name="type" /> 许可参数。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>
              如果有的话，则返回该组件的实例的许可证。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定可以在其中使用已授权的对象。
              </param>
      <param name="type">
                一个 <see cref="T:System.Type" /> 表示组件请求 <see cref="T:System.ComponentModel.License" />。
              </param>
      <param name="instance">
                请求的对象 <see cref="T:System.ComponentModel.License" />。
              </param>
      <param name="allowExceptions">
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.LicenseException" /> 许可证; 无法授予组件时应引发否则为 <see langword="false" />。
              </param>
      <returns>
              有效的 <see cref="T:System.ComponentModel.License" />。
               如果此方法找不到有效 <see cref="T:System.ComponentModel.License" /> 或有效 <paramref name="context" /> 参数，它将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>
              确定是否该密钥， <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法检索指定的类型无效。
            </summary>
      <param name="key">
                要检查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。
              </param>
      <param name="type">
                一个 <see cref="T:System.Type" /> 表示组件请求 <see cref="T:System.ComponentModel.License" />。
              </param>
      <returns>
        <see langword="true" /> 如果键是一个有效 <see cref="P:System.ComponentModel.License.LicenseKey" /> 为指定的类型; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>
              指定列表可以用作数据源。
               可视化设计器中应使用此属性来确定是否在数据绑定选取器中显示特定的列表。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类使用的值，指示是否可绑定列表。
            </summary>
      <param name="listBindable">
        <see langword="true" /> 如果该列表是可绑定;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类使用 <see cref="T:System.ComponentModel.BindableSupport" /> 指示列表是否为可绑定。
            </summary>
      <param name="flags">
                一个 <see cref="T:System.ComponentModel.BindableSupport" /> ，该值指示是否可绑定列表。
              </param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>
              表示的默认值为 <see cref="T:System.ComponentModel.ListBindableAttribute" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>
              返回传递的对象是否等于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />。
            </summary>
      <param name="obj">
                要测试相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 如果传递的对象是否等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>
              返回是否 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 设置为默认值。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 设置为默认值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>
              获取指示列表可绑定。
            </summary>
      <returns>
        <see langword="true" /> 如果该列表是可绑定;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>
              指定该列表不是可绑定。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>
              指定该列表是可绑定。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 给定的更改类型的类和 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 受影响。
            </summary>
      <param name="listChangedType">
                一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。
              </param>
      <param name="propDesc">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加、 删除或更改。
              </param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类在给定的更改的类型和受影响的项的索引。
            </summary>
      <param name="listChangedType">
                一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。
              </param>
      <param name="newIndex">
                已添加、 更改或删除的项的索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 给定的更改，受影响的项目的索引类型的类和一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述受影响的项目。
            </summary>
      <param name="listChangedType">
                一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。
              </param>
      <param name="newIndex">
                添加或更改的项的索引。
              </param>
      <param name="propDesc">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述项。
              </param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 给定的更改的类型和旧的和新的项的索引已移动的类。
            </summary>
      <param name="listChangedType">
                一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。
              </param>
      <param name="newIndex">
                已移动的项的新索引。
              </param>
      <param name="oldIndex">
                已移动的项旧索引。
              </param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>
              获取更改的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>
              获取受此更改影响的项的索引。
            </summary>
      <returns>
              此更改受影响的索引。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>
              获取已被移动的项的旧索引。
            </summary>
      <returns>
              旧的已移动的项的索引。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>
              获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加、 更改或删除。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 受此更改影响。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件 <see cref="T:System.ComponentModel.IBindingList" /> 类。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>
              指定列表的更改方式。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>
              添加到列表项。
              <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含已添加的项的索引。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>
              在列表中更改的项。
              <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含已更改的项的索引。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>
              从列表中删除的项。
              <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含已删除的项的索引。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>
              在列表中移动的项。
              <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含该项目的先前索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含项的新索引。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已添加，这更改了架构。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已被更改，这更改了架构。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已被删除，这更改了架构。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>
              很多列表已更改。
               任何侦听控件应刷新其从列表中的所有数据。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>
              提供应用于数据源的排序操作的说明。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 使用指定的属性说明和方向的类。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述数据源排序依据的属性。
              </param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 值之一。
              </param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>
              获取或设置与此相关的类属性的抽象说明 <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns>
              与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 关联的 <see cref="T:System.ComponentModel.ListSortDescription" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>
              获取或设置与此关联的排序操作的方向 <see cref="T:System.ComponentModel.ListSortDescription" />。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>
              表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 具有指定的数组类 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象。
            </summary>
      <param name="sorts">
                数组 <see cref="T:System.ComponentModel.ListSortDescription" /> 要包含在集合中的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>
              确定如果 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 包含特定值。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Object" /> 在集合中找到; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将集合的内容复制到指定的数组，指定的目标数组索引处开始。
            </summary>
      <param name="array">
                从集合复制的项目目标数组。
              </param>
      <param name="index">
                开始处进行复制的目标数组的索引。
              </param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>
              获取集合中的项数。
            </summary>
      <returns>
              集合中项的数目。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>
              返回集合中的指定项的索引。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>
              获取或设置指定 <see cref="T:System.ComponentModel.ListSortDescription" />。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  要获取或设置集合中。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> 具有指定的索引。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  设置项 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, ，这是只读的。
                </exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示对集合的访问是否为线程安全。
            </summary>
      <returns>
        <see langword="true " />在所有情况下。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对集合的访问的当前实例。
            </summary>
      <returns>
              当前实例 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              获取 <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问集合。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>
              向集合中添加一项。
            </summary>
      <param name="value">
                要添加到集合中的项。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在所有情况下。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>
              从集合中移除所有项。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  在所有情况下。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              将某个项插入到集合中的指定索引处。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  要获取或设置集合中
              </param>
      <param name="value">
                要插入到集合的项。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  在所有情况下。
                </exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示集合是否具有固定大小。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示集合是否为只读。
            </summary>
      <returns>
        <see langword="true " />在所有情况下。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  以获取集合中 
              </param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> 具有指定的索引。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
              从集合中移除第一个匹配项。
            </summary>
      <param name="value">
                要从集合中移除的项。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  在所有情况下。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
              从集合中的指定索引处移除项。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  若要从集合中移除
              </param>
      <exception cref="T:System.InvalidOperationException">
                  在所有情况下。
                </exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>
              指定排序操作的方向。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>
              按升序排序。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>
              按降序排序。
            </summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>
              指定支持基于查找的绑定的属性。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类不使用任何参数。
            </summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。
            </summary>
      <param name="dataSource">
                要用作数据源的属性的名称。
              </param>
      <param name="displayMember">
                要用于显示名称的属性的名称。
              </param>
      <param name="valueMember">
                要用作值源的属性的名称。
              </param>
      <param name="lookupMember">
                要用于查找的属性的名称。
              </param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>
              获取向其组件的数据源属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </summary>
      <returns>
              数据源的组件的属性 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>
              表示的默认值为 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类。
            </summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>
              获取向其组件的显示成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </summary>
      <returns>
              组件的显示成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Object" /> 是否等于当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例。
            </summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要与当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例 
              </param>
      <returns>
        <see langword="true" /> 如果该对象是否等于当前实例;否则为 <see langword="false" />, ，指示它们是否不相等。
            </returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>
              获取此属性绑定到该组件的查找成员的名称。
            </summary>
      <returns>
              向其组件的名称查找成员 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>
              获取向其组件的值成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </summary>
      <returns>
              组件的值成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。
            </returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>
              实现 <see cref="T:System.ComponentModel.IComponent" /> ，并提供了进行封送的值 （传递序列化对象的副本） 的可远程处理组件的基实现。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>
              获取组件的容器。
            </summary>
      <returns>
              一个对象，实现 <see cref="T:System.ComponentModel.IContainer" /> 表示组件的容器接口或 <see langword="null" /> 如果组件不具有一个站点。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>
              获取一个值，该值指示组件当前是否处于设计模式。
            </summary>
      <returns>
        <see langword="true" /> 如果该组件是在设计模式下;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>
              释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>
              添加一个事件处理程序，用于侦听 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 组件上的事件。
            </summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>
              获取附加到此组件的事件处理程序的列表。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" /> ，可将委托提供有关此组件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>
              在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>
              获取的实施者 <see cref="T:System.IServiceProvider" />。
            </summary>
      <param name="service">
                一个 <see cref="T:System.Type" /> ，表示所需的服务的类型。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示的实施者 <see cref="T:System.IServiceProvider" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>
              获取或设置组件的站点。
            </summary>
      <returns>
              一个对象，实现 <see cref="T:System.ComponentModel.ISite" /> 表示组件的站点的接口。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>
              返回 <see cref="T:System.String" /> 包含名称的 <see cref="T:System.ComponentModel.Component" />, ，如果有的话。
               不应重写此方法。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含名称的 <see cref="T:System.ComponentModel.Component" />, ，如果有的话。
            
              <see langword="null" /> 如果 <see cref="T:System.ComponentModel.Component" /> 是未命名。
            </returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>
              表示可由任意数量的屏蔽，如支持的控件的掩码分析服务 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码和 ASCII 限制值。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
      <param name="restrictToAscii">
        <see langword="true" /> 若要将输入限制为 ASCII 兼容字符;否则为 <see langword="false" /> 以允许整个 Unicode 字符集。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码和区域性。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 密码字符和用法提示值。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
      <param name="passwordChar">
                一个 <see cref="T:System.Char" /> ，将显示为字符输入到密码字符串。
              </param>
      <param name="allowPromptAsInput">
        <see langword="true" /> 若要允许提示字符以输入;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 区域性和 ASCII 限制值。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。
              </param>
      <param name="restrictToAscii">
        <see langword="true" /> 若要将输入限制为 ASCII 兼容字符;否则为 <see langword="false" /> 以允许整个 Unicode 字符集。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 区域性、 密码字符和用法提示值。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。
              </param>
      <param name="passwordChar">
                一个 <see cref="T:System.Char" /> ，将显示为字符输入到密码字符串。
              </param>
      <param name="allowPromptAsInput">
        <see langword="true" /> 若要允许提示字符以输入;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 区域性、 用法提示值、 提示字符、 密码字符和 ASCII 限制值。
            </summary>
      <param name="mask">
                一个 <see cref="T:System.String" /> ，表示输入的掩码。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。
              </param>
      <param name="allowPromptAsInput">
                一个 <see cref="T:System.Boolean" /> 值，该值指定是否应为有效的输入字符允许提示字符。
              </param>
      <param name="promptChar">
                一个 <see cref="T:System.Char" /> ，将显示为一个占位符，供用户输入。
              </param>
      <param name="passwordChar">
                一个 <see cref="T:System.Char" /> ，将显示为字符输入到密码字符串。
              </param>
      <param name="restrictToAscii">
        <see langword="true" /> 若要将输入限制为 ASCII 兼容字符;否则为 <see langword="false" /> 以允许整个 Unicode 字符集。
              </param>
      <exception cref="T:System.ArgumentException">
                  Mask 参数是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                
                  - 或 -
                
                  掩码包含一个或多个非打印字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              将指定的输入字符串中的字符添加到格式的字符串的末尾，然后输出位置和描述性信息。
            </summary>
      <param name="input">
                一个 <see cref="T:System.String" /> 包含要追加到带格式的字符串的字符值。
              </param>
      <param name="testPosition">
                格式化字符串中位置进行了尝试添加字符的位置从零开始。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果成功，则添加输入字符串中的所有字符否则为 <see langword="false" /> 以指示是否已添加任何字符。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              格式化字符串的末尾添加指定的输入的字符，然后输出位置和描述性信息。
            </summary>
      <param name="input">
                一个 <see cref="T:System.Char" /> 要追加到带格式的字符串值。
              </param>
      <param name="testPosition">
                格式化字符串中位置进行了尝试添加字符的位置从零开始。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果输入的字符成功，则添加否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>
              带格式的字符串的末尾添加指定的输入的字符。
            </summary>
      <param name="input">
                一个 <see cref="T:System.Char" /> 要追加到带格式的字符串值。
              </param>
      <returns>
        <see langword="true" /> 如果输入的字符成功，则添加否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>
              在指定的输入字符串中字符都添加到格式的字符串的末尾中。
            </summary>
      <param name="input">
                一个 <see cref="T:System.String" /> 包含要追加到带格式的字符串的字符值。
              </param>
      <returns>
        <see langword="true" /> 如果成功，则添加输入字符串中的所有字符否则为 <see langword="false" /> 以指示是否已添加任何字符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>
              获取一个值，该值指示是否提示字符是否应视为有效的输入字符。
            </summary>
      <returns>
        <see langword="true" /> 如果用户可以输入 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 到控件; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>
              获取一个值，该值指示掩码是否接受 ASCII 字符集以外的字符。
            </summary>
      <returns>
        <see langword="true" /> 如果仅接受 ASCII; <see langword="false" /> 如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可以接受任意 Unicode 字符。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>
              获取已成功地分配输入的值的可编辑字符位置数。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> 包含的输入掩码中已经分配了格式的字符串中的字符值的可编辑的字符位置数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>
              获取输入掩码中尚未分配输入的值的可编辑字符位置数。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> 包含的可编辑的字符数的位置尚未赋予一个字符的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>
              清除所有可编辑的输入的字符从格式字符串，用提示字符替换。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              清除所有可编辑输入中的字符格式的字符串替换与提示字符，然后输出描述性信息。
            </summary>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。
                 一个输出参数。
              </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>
              创建当前 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 的副本。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.MaskedTextProvider" /> 此方法创建的对象强制转换为一个对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>
              获取确定可本地化的分隔符和输入掩码中的占位符的值的区域性。
            </summary>
      <returns>
              一个 <see cref="T:System.Globalization.CultureInfo" /> 包含输入掩码与关联的区域性信息。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>
              获取默认的密码使用字符遮盖用户输入。
            </summary>
      <returns>
              一个 <see cref="T:System.Char" /> ，表示默认的密码字符。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>
              获取格式化字符串中的可编辑位置数。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> 包含带格式的字符串中的可编辑位置数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>
              在格式化字符串的可编辑位置获取新创建的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 带格式的字符串中的可编辑位置支持枚举。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>
              返回指定的位置使用指定的搜索方向之后分配可编辑位置的第一个位置。
            </summary>
      <param name="position">
                要开始搜索的格式化字符串中从零开始的位置。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个分配可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>
              返回分配指定的位置使用指定的搜索方向之间的可编辑位置的第一个位置。
            </summary>
      <param name="startPosition">
                格式化字符串中开始搜索的位置从零开始。
              </param>
      <param name="endPosition">
                格式化字符串中搜索的结尾处的位置从零开始。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个分配可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>
              返回使用指定的搜索方向的指定位置之后的第一个可编辑位置的位置。
            </summary>
      <param name="position">
                要开始搜索的格式化字符串中从零开始的位置。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>
              返回指定的位置使用指定的搜索方向之间的第一个可编辑位置的位置。
            </summary>
      <param name="startPosition">
                格式化字符串中开始搜索的位置从零开始。
              </param>
      <param name="endPosition">
                格式化字符串中搜索的结尾处的位置从零开始。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>
              返回使用指定的搜索方向的指定位置之后的第一个非可编辑位置的位置。
            </summary>
      <param name="position">
                要开始搜索的格式化字符串中从零开始的位置。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个文本位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>
              返回指定的位置使用指定的搜索方向之间的第一个非可编辑位置的位置。
            </summary>
      <param name="startPosition">
                格式化字符串中开始搜索的位置从零开始。
              </param>
      <param name="endPosition">
                格式化字符串中搜索的结尾处的位置从零开始。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个文本位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>
              使用指定的搜索方向的指定位置之后返回第一个未分配的可编辑位置的位置。
            </summary>
      <param name="position">
                要开始搜索的格式化字符串中从零开始的位置。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个未分配的可编辑位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>
              返回指定的位置使用指定的搜索方向之间未分配的第一个可编辑位置的位置。
            </summary>
      <param name="startPosition">
                格式化字符串中开始搜索的位置从零开始。
              </param>
      <param name="endPosition">
                格式化字符串中搜索的结尾处的位置从零开始。
              </param>
      <param name="direction">
                一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 <see langword="true" /> 向前搜索或 <see langword="false" /> 向后搜索。
              </param>
      <returns>
              如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个未分配的可编辑位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>
              确定是否指定 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 表示成功还是失败。
            </summary>
      <param name="hint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 通常作为从以前的操作的输出参数获得的值。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功完成; 否则为 <see langword="false" /> 如果表示失败。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>
              获取或设置一个值，该值指示是否应在格式化字符串中包括输入掩码中的原义字符。
            </summary>
      <returns>
        <see langword="true" /> 如果文本包含;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 用来表示缺少的用户输入时显示带格式的字符串。
            </summary>
      <returns>
        <see langword="true" /> 如果提示字符用于表示，不需要用户输入; 如果提供了的位置否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>
              格式化字符串中指定的位置处插入指定的字符。
            </summary>
      <param name="input">
                要插入的 <see cref="T:System.Char" />。
              </param>
      <param name="position">
                中要插入的字符的格式化字符串的从零开始的位置。
              </param>
      <returns>
        <see langword="true" /> 如果插入成功，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>
              格式化字符串中指定位置处插入指定的字符串。
            </summary>
      <param name="input">
                要插入的 <see cref="T:System.String" />。
              </param>
      <param name="position">
                中要插入的输入的字符串的格式化字符串的从零开始的位置。
              </param>
      <returns>
        <see langword="true" /> 如果插入成功，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              在格式化字符串中，返回最后一个的插入位置和该操作的状态的指定位置处插入指定的字符。
            </summary>
      <param name="input">
                要插入的 <see cref="T:System.Char" />。
              </param>
      <param name="position">
                中要插入的字符的格式化字符串的从零开始的位置。
              </param>
      <param name="testPosition">
                如果该方法成功，最后一个定位位置插入一个字符;否则，第一个位置，导致插入失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明插入操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果插入成功，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              在格式化字符串中，返回最后一个的插入位置和该操作的状态的指定位置处插入指定的字符串。
            </summary>
      <param name="input">
                要插入的 <see cref="T:System.String" />。
              </param>
      <param name="position">
                中要插入的输入的字符串的格式化字符串的从零开始的位置。
              </param>
      <param name="testPosition">
                如果该方法成功，最后一个定位位置插入一个字符;否则，第一个位置，导致插入失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明插入操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果插入成功，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>
              获取无效索引范围的上限。
            </summary>
      <returns>
              表示由提供程序实现的最大的无效索引的值。
               例如，如果最小的有效索引为 0，则此属性将返回-1。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>
              确定指定的位置是可用于分配。
            </summary>
      <param name="position">
                若要测试的掩码中的从零开始位置。
              </param>
      <returns>
        <see langword="true" /> 如果带格式的字符串中指定的位置是可编辑的和尚未被分配到尚未;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>
              确定指定的位置是可编辑。
            </summary>
      <param name="position">
                若要测试的掩码中的从零开始位置。
              </param>
      <returns>
        <see langword="true" /> 如果带格式的字符串中指定的位置是可编辑;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>
              获取或设置一个值，确定是否应将密码保护应用于格式化的字符串。
            </summary>
      <returns>
        <see langword="true" /> 如果输入的字符串视为密码字符串;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>
              确定指定的字符是否是有效的输入的字符。
            </summary>
      <param name="c">
        <see cref="T:System.Char" /> 要测试其值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符包含一个有效的输入的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>
              确定指定的字符是否为有效的掩码字符。
            </summary>
      <param name="c">
        <see cref="T:System.Char" /> 要测试其值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符包含一个有效的掩码值; 如果否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>
              确定指定的字符是否为有效的密码字符。
            </summary>
      <param name="c">
        <see cref="T:System.Char" /> 要测试其值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符包含一个有效的密码值; 如果否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>
              在格式化字符串中指定位置获取的元素。
            </summary>
      <param name="index">
                要检索的元素的从零开始索引。
              </param>
      <returns>
        <see cref="T:System.Char" /> 带格式的字符串中指定的位置。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于零或大于或等于 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> 蒙板。
                </exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>
              获取在掩码中的最右侧的输入字符的已分配给该掩码的索引。
            </summary>
      <returns>
              如果已经为 mask，分配至少一个输入的字符 <see cref="T:System.Int32" /> 包含索引的最右侧分配位置; 否则为如果尚未分配任何位置， <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>
              获取掩码，不包括任何掩码的长度修饰符字符。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> 包含在掩码中，不包括修改掩码输入的字符位置数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>
              获取输入的掩码。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含完整掩码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>
              获取一个值，该值指示是否已在格式化字符串中输入所有必需的输入。
            </summary>
      <returns>
        <see langword="true" /> 如果所有的必需输入已输入到掩码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>
              获取一个值，该值指示是否已在格式化字符串中输入所有必需和可选的输入。
            </summary>
      <returns>
        <see langword="true" /> 如果所有的必选和可选输入均已输入;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>
              获取或设置要将替换为实际的输入字符的字符。
            </summary>
      <returns>
        <see cref="T:System.Char" /> 用作密码字符值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当设置此属性等同于当前提示字符，则指定的密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />。
                   这两个都需要不同。
                </exception>
      <exception cref="T:System.ArgumentException">
                  当设置此属性不是有效的密码字符，根据所指定的字符 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法。
                </exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>
              获取或设置用来表示缺少的所有可用的编辑位置的用户输入的字符。
            </summary>
      <returns>
              用于提示用户进行输入的字符。
               默认为下划线 (_)。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  指定的提示字符时设置此属性等同于当前的密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />。
                   这两个都需要不同。
                </exception>
      <exception cref="T:System.ArgumentException">
                  当设置此属性不是有效的密码字符，根据所指定的字符 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>
              从带格式的字符串中删除已分配的最后一个字符。
            </summary>
      <returns>
        <see langword="true" /> 如果成功移除了该字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              从带格式的字符串中删除已分配的最后一个字符，然后输出移除位置和描述性信息。
            </summary>
      <param name="testPosition">
                格式化字符串中实际删除此字符的位置从零开始。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果成功移除了该字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>
              从格式化字符串中移除位于指定位置分配的字符。
            </summary>
      <param name="position">
                要删除的分配字符的从零开始的位置。
              </param>
      <returns>
        <see langword="true" /> 如果成功移除了该字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>
              移除指定位置从带格式的字符串之间赋值的字符。
            </summary>
      <param name="startPosition">
                要移除的第一个分配字符的从零开始的索引。
              </param>
      <param name="endPosition">
                要移除的最后一个分配字符的从零开始的索引。
              </param>
      <returns>
        <see langword="true" /> 如果成功移除了该字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              移除从格式字符串，指定的位置之间的已分配的字符，然后输出移除位置和描述性信息。
            </summary>
      <param name="startPosition">
                要移除的第一个分配字符的从零开始的索引。
              </param>
      <param name="endPosition">
                要移除的最后一个分配字符的从零开始的索引。
              </param>
      <param name="testPosition">
                如果成功，其中实际上已经移除字符; 的格式字符串中从零开始的位置否则，第一个位置的操作失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果成功移除了该字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              替换一定范围的可编辑指定的开始和结束位置使用指定的字符串之间的字符，然后输出移除位置和描述性信息。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 用来替换现有的可编辑字符值。
              </param>
      <param name="startPosition">
                格式化字符串中的替换起始位置的位置从零开始。
              </param>
      <param name="endPosition">
                格式化字符串中的替换结束位置的位置从零开始。
              </param>
      <param name="testPosition">
                如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果已成功替换，所有字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              替换指定的开始和结束与指定的字符值的位置之间的单个字符，然后输出移除位置和描述性信息。
            </summary>
      <param name="input">
        <see cref="T:System.Char" /> 替换现有的值的值。
              </param>
      <param name="startPosition">
                格式化字符串中的替换起始位置的位置从零开始。
              </param>
      <param name="endPosition">
                格式化字符串中的替换结束位置的位置从零开始。
              </param>
      <param name="testPosition">
                如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果成功替换字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              替换一定范围的可编辑的字符与指定的字符串，指定位置开始，然后输出移除位置和描述性信息。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 用来替换现有的可编辑字符值。
              </param>
      <param name="position">
                要搜索的第一个要替换的可编辑字符的从零开始位置。
              </param>
      <param name="testPosition">
                如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果已成功替换，所有字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              达到或超过指定的位置的单个字符替换为指定的字符值，然后输出移除位置和描述性信息。
            </summary>
      <param name="input">
        <see cref="T:System.Char" /> 替换现有的值的值。
              </param>
      <param name="position">
                要搜索的第一个要替换的可编辑字符的从零开始位置。
              </param>
      <param name="testPosition">
                如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果成功替换字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>
              替换一定范围的可编辑以指定字符串的指定位置开始的字符。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 用来替换现有的可编辑字符值。
              </param>
      <param name="position">
                要搜索的第一个要替换的可编辑字符的从零开始位置。
              </param>
      <returns>
        <see langword="true" /> 如果已成功替换，所有字符;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>
              使用指定的字符值替换单个字符达到或超过指定的位置。
            </summary>
      <param name="input">
        <see cref="T:System.Char" /> 替换现有的值的值。
              </param>
      <param name="position">
                要搜索的第一个要替换的可编辑字符的从零开始位置。
              </param>
      <returns>
        <see langword="true" /> 如果成功替换字符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>
              获取或设置一个值，该值确定应如何处理与提示字符匹配的输入字符。
            </summary>
      <returns>
        <see langword="true" /> 如果作为输入的提示字符输入都可能导致在掩码中要重置; 的当前可编辑位置否则为 <see langword="false" /> 指示要作为正常输入字符进行处理的提示字符。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>
              获取或设置一个值，该值确定应如何处理空白输入字符。
            </summary>
      <returns>
        <see langword="true" /> 如果空白输入的字符会导致掩码要重置; 中的当前可编辑位置否则为 <see langword="false" /> 以指示它是要作为正常输入字符进行处理。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>
              将带格式的字符串设置为指定的输入字符串。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 用于设置了格式的字符串值。
              </param>
      <returns>
        <see langword="true" /> 如果已成功设置的所有字符;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              将带格式的字符串设置为指定的输入字符串，然后输出移除位置和描述性信息。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 用于设置了格式的字符串值。
              </param>
      <param name="testPosition">
                如果成功，其中实际设置的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明设置操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果已成功设置的所有字符;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>
              获取或设置一个值，该值指示是否可以通过其相同的值覆盖掩码中的原义字符位置。
            </summary>
      <returns>
        <see langword="true" /> 若要允许文本，添加回去;否则为 <see langword="false" /> 为不允许用户覆盖原义字符。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>
              返回可显示窗体中的带格式的字符串。
            </summary>
      <returns>
              带格式 <see cref="T:System.String" /> ，包括提示和掩码原义字符。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>
              返回一个格式字符串，有选择性地包括提示、 文字，以及密码字符的子字符串。
            </summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> 若要返回的实际的可编辑字符;否则为 <see langword="false" /> 以指示 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性将会得到遵守。
              </param>
      <param name="includePrompt">
        <see langword="true" /> 若要包括在返回的字符串; 提示字符否则为 <see langword="false" />。
              </param>
      <param name="includeLiterals">
        <see langword="true" /> 若要返回原义字符中返回的字符串;否则为 <see langword="false" />。
              </param>
      <param name="startPosition">
                格式化字符串中输出的开始处的位置从零开始。
              </param>
      <param name="length">
                要返回的字符数。
              </param>
      <returns>
              如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括所有分配的字符值，还可以包括文本、 提示字符和密码字符; 否则为 <see cref="F:System.String.Empty" /> 字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>
              返回子字符串的格式字符串，有选择性地包括提示和原义字符。
            </summary>
      <param name="includePrompt">
        <see langword="true" /> 若要包括在返回的字符串; 提示字符否则为 <see langword="false" />。
              </param>
      <param name="includeLiterals">
        <see langword="true" /> 若要在返回的字符串; 包括原义字符否则为 <see langword="false" />。
              </param>
      <param name="startPosition">
                格式化字符串中输出的开始处的位置从零开始。
              </param>
      <param name="length">
                要返回的字符数。
              </param>
      <returns>
              如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括所有分配的字符值，并 （可选） 包括原义字符和提示; 否则为 <see cref="F:System.String.Empty" /> 字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>
              返回一个格式字符串，有选择性地包括密码字符的子字符串。
            </summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> 若要返回的实际的可编辑字符;否则为 <see langword="false" /> 以指示 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性将会得到遵守。
              </param>
      <param name="startPosition">
                格式化字符串中输出的开始处的位置从零开始。
              </param>
      <param name="length">
                要返回的字符数。
              </param>
      <returns>
              如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括文本、 提示字符和 （可选） 密码字符; 否则为 <see cref="F:System.String.Empty" /> 字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>
              返回格式化的字符串，并有选择性地包括密码字符。
            </summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> 若要返回的实际的可编辑字符;否则为 <see langword="false" /> 以指示 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性将会得到遵守。
              </param>
      <returns>
              带格式 <see cref="T:System.String" /> 包括文本、 提示字符和 （可选） 密码字符。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>
              返回格式化的字符串，并有选择性地包括提示和原义字符。
            </summary>
      <param name="includePrompt">
        <see langword="true" /> 若要包括在返回的字符串; 提示字符否则为 <see langword="false" />。
              </param>
      <param name="includeLiterals">
        <see langword="true" /> 若要在返回的字符串; 包括原义字符否则为 <see langword="false" />。
              </param>
      <returns>
              带格式 <see cref="T:System.String" /> ，包含所有分配的字符值，还可以包括原义字符和提示。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>
              返回包含所有已分配的字符值的格式化的字符串。
            </summary>
      <returns>
              带格式 <see cref="T:System.String" /> 包括所有分配的字符值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>
              返回一个带格式的字符串的子字符串。
            </summary>
      <param name="startPosition">
                格式化字符串中输出的开始处的位置从零开始。
              </param>
      <param name="length">
                要返回的字符数。
              </param>
      <returns>
              如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括所有分配的字符值; 否则为 <see cref="F:System.String.Empty" /> 字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              测试是否可以在指定位置成功设置指定的字符。
            </summary>
      <param name="input">
        <see cref="T:System.Char" /> 要测试其值。
              </param>
      <param name="position">
                若要测试对的输入的字符的掩码中的位置。
              </param>
      <param name="hint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符是有效的指定位置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>
              测试是否在指定的位置将转义指定的字符。
            </summary>
      <param name="input">
        <see cref="T:System.Char" /> 要测试其值。
              </param>
      <param name="position">
                若要测试对的输入的字符的掩码中的位置。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符将转义在指定的位置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>
              测试是否可以成功设置指定的字符串。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 要测试其值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符串表示有效的输入;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>
              测试指定的字符串是否可以成功，设置然后输出位置和描述性信息。
            </summary>
      <param name="input">
        <see cref="T:System.String" /> 要测试其值。
              </param>
      <param name="testPosition">
                如果成功，最后一个字符的从零开始的位置实际测试;否则，第一个位置测试失败位置。
                 一个输出参数。
              </param>
      <param name="resultHint">
                一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述测试操作的结果。
                 一个输出参数。
              </param>
      <returns>
        <see langword="true" /> 如果指定的字符串表示有效的输入;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>
              指定用于简单地描述了掩码的文本分析操作的结果的值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>
              操作未成功。输入字符中包含非字母数字字符。
               。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>
              操作未成功。输入的字符遇到包含非 ASCII 字符集的成员。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>
              成功。
               操作成功，因为为文本、 提示或空格字符是转义的字符。
               有关转义字符的详细信息，请参阅 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>
              操作未成功。
               遇到不是一个数字的输入的字符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>
              操作未成功。
               该程序时遇到了无效的输入的字符。
               有关无效的字符的详细信息，请参阅 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>
              操作未成功。
               输入字符中包含非字母字符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>
              成功。
               不执行主要操作，因为不需要它的;因此，没有任何副作用被生成。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>
              操作未成功。
               格式化字符串中的当前位置是原义字符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>
              操作未成功。
               指定的位置不在目标字符串中; 的范围内通常它是小于零或更高版本然后目标字符串的长度。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>
              操作未成功。
               提示字符不是有效的输入，可能是因为 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 属性设置为 <see langword="false" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>
              成功。
               不执行主要操作，因为不需要但该方法产生负面影响。
               例如， <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可以删除在格式化字符串将导致第二个字符的左移赋值的编辑位置。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>
              操作未成功。
               遇到不是有符号的数字的输入的字符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>
              成功。
               主操作成功。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>
              操作未成功。
               没有足够可用编辑位置来满足请求。
            </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>
              未知。
               无法确定操作的结果。
            </summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>
              表示一个类成员，例如属性或事件。
               这是一个抽象基类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
              使用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。
            </summary>
      <param name="descr">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，其中包含该成员及其属性的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类具有指定名称的成员。
            </summary>
      <param name="name">
                成员名。
              </param>
      <exception cref="T:System.ArgumentException">
                  名称为空字符串 ("") 或 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中指定的名称具有类 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和这两种旧密码属性 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组。
            </summary>
      <param name="oldMemberDescriptor">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 具有该成员及其属性的名称。
              </param>
      <param name="newAttributes">
                一个数组 <see cref="T:System.Attribute" /> 具有你想要添加到成员属性的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类具有指定名称的成员和属性的数组。
            </summary>
      <param name="name">
                成员名。
              </param>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> ，其中包含成员属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  名称为空字符串 ("") 或 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>
              获取或设置包含特性的数组。
            </summary>
      <returns>
              类型的数组 <see cref="T:System.Attribute" /> ，它包含此成员的属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>
              获取此成员的特性的集合。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> ，有关此成员或为空集合提供了各种属性，如果在没有特性 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>
              获取该成员所属的类别的名称中指定 <see cref="T:System.ComponentModel.CategoryAttribute" />。
            </summary>
      <returns>
              该成员所属的类别的名称。
               如果没有任何 <see cref="T:System.ComponentModel.CategoryAttribute" />, ，类别名称设置为默认类别 <see langword="Misc" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>
              创建使用传递给构造函数的特性的数组的属性的集合。
            </summary>
      <returns>
              一个新 <see cref="T:System.ComponentModel.AttributeCollection" /> ，其中包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>
              获取在指定将成员的说明 <see cref="T:System.ComponentModel.DescriptionAttribute" />。
            </summary>
      <returns>
              成员的说明。
               如果没有任何 <see cref="T:System.ComponentModel.DescriptionAttribute" />, ，属性值设置为默认情况下，将为空字符串 ("")。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>
              获取是否应仅在设计时，指定在设置此成员 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。
            </summary>
      <returns>
        <see langword="true" /> 如果此成员应设置只能在设计时; <see langword="false" /> 如果成员可以在运行时设置。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>
              获取可以在一个窗口，如属性窗口中显示的名称。
            </summary>
      <returns>
              要显示的成员的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>
              将此实例与给定的对象，以查看它们是否相等。
            </summary>
      <param name="obj">
                要与当前类型进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果等效;，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>
              当在派生类中重写，将继承的类的属性添加到指定列表中的父类的属性。
            </summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> 列出中的父类的属性。
                 最初，这是空的。
              </param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>
              查找给定的方法通过反射，只搜索公共方法。
            </summary>
      <param name="componentClass">
                该组件包含的方法。
              </param>
      <param name="name">
                要查找的方法的名称。
              </param>
      <param name="args">
                方法，用于选择重载方法的参数数组。
              </param>
      <param name="returnType">
                要为该方法返回的类型。
              </param>
      <returns>
              一个 <see cref="T:System.Reflection.MethodInfo" /> 表示法，或 <see langword="null" /> 如果找不到该方法。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>
              查找给定的方法，通过反射提供一个选项来仅搜索公共方法。
            </summary>
      <param name="componentClass">
                该组件包含的方法。
              </param>
      <param name="name">
                要查找的方法的名称。
              </param>
      <param name="args">
                方法，用于选择重载方法的参数数组。
              </param>
      <param name="returnType">
                要为该方法返回的类型。
              </param>
      <param name="publicOnly">
                是否将搜索限制在公共方法。
              </param>
      <returns>
              一个 <see cref="T:System.Reflection.MethodInfo" /> 表示法，或 <see langword="null" /> 如果找不到该方法。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>
              检索在成员的调用时应使用的对象。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 调用目标。
              </param>
      <param name="instance">
                潜在的调用目标。
              </param>
      <returns>
              成员调用期间使用的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>
              获取在其上调用方法的组件。
            </summary>
      <param name="componentClass">
                一个 <see cref="T:System.Type" /> 表示个分量的类型，此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 绑定到。
                 例如，如果此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述一个属性，此参数应为在声明该属性的类。
              </param>
      <param name="component">
                要调用的对象的实例。
              </param>
      <returns>
              要调用的组件的实例。
               当该属性附加到可视化设计器中，此方法返回的可视化设计器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>
              获取给定组件的组件的站点。
            </summary>
      <param name="component">
                你想要找到站点组件。
              </param>
      <returns>
              该组件的站点或 <see langword="null" /> 如果网站不存在。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>
              获取一个值，该值指示该成员是否可浏览中指定 <see cref="T:System.ComponentModel.BrowsableAttribute" />。
            </summary>
      <returns>
        <see langword="true" /> 如果该成员是可浏览;否则为 <see langword="false" />。
               如果没有任何 <see cref="T:System.ComponentModel.BrowsableAttribute" />, ，属性值设置为默认值，即 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>
              获取该成员的名称。
            </summary>
      <returns>
              成员名。
            </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>
              获取该成员中指定的名称哈希代码 <see cref="M:System.String.GetHashCode" />。
            </summary>
      <returns>
              成员名称哈希代码。
            </returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>
              提供用于将多行字符串转换成单行字符串的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              使用指定的上下文和区域性信息将给定值对象转换为指定的类型。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
                 如果传递 <see langword="null" />，则采用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
                值参数所要转换成的 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              返回指定数组类型的属性的集合 <paramref name="value" /> 参数，并使用指定的上下文和属性。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。
              </param>
      <param name="value">
                一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。
              </param>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              通过使用指定的上下文，返回此对象是否支持属性。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。
              </param>
      <returns>
              如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>
              提供的基实现 <see cref="T:System.ComponentModel.INestedContainer" /> 接口，使容器可以拥有一个所属组件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 类的新实例。
            </summary>
      <param name="owner">
        <see cref="T:System.ComponentModel.IComponent" /> 拥有此嵌套的容器。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>
              创建组件容器内的网站。
            </summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 若要创建一个站点。
              </param>
      <param name="name">
                要分配给名称 <paramref name="component" />, ，或 <see langword="null" /> 要跳过分配名称。
              </param>
      <returns>
              新创建的 <see cref="T:System.ComponentModel.ISite" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>
              释放由嵌套的容器使用的资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>
              获取指定类型的服务对象（如果可用）。
            </summary>
      <param name="service">
                要检索的服务的 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> 实现请求的服务，或 <see langword="null" /> 如果无法解析服务。
            </returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>
              获取此嵌套容器所属的组件。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 拥有此嵌套的容器。
            </returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>
              获取所属组件的名称。
            </summary>
      <returns>
              所属组件的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>
              提供可以为 null 的类型与其基础基元类型之间的自动转换。
            </summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 类的新实例。
            </summary>
      <param name="type">
                指定可以为 null 的类型。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器能否使用指定上下文将对象转换为指定类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" />，表示你希望转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              使用指定的上下文和区域性信息将给定值对象转换为指定的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
                值参数所要转换成的 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
              给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="propertyValues">
                新属性值的 <see cref="T:System.Collections.IDictionary" />。
              </param>
      <returns>
              如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。
               此方法始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              返回一个结果，即更改此对象上的某个值是否需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以使用指定的上下文创建新值。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              使用指定的上下文和特性返回由该值参数指定的数组类型的属性集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。
              </param>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              通过使用指定的上下文，返回此对象是否支持属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。
            </summary>
      <param name="context">
                提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。
                 此参数或其属性可以为 <see langword="null" />。
              </param>
      <returns>
              包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              使用指定的上下文返回从 <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果应调用 <see langword="true" /> 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              返回给定的值对象是否对此类型和对指定的上下文有效。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                要测试其有效性的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>
              获取可以为 null 的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，表示可以为 null 的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>
              获取基础类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，它表示的基础类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>
              获取基础类型转换器。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter" /> ，它表示基础类型转换器。
            </returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>
              为 <see cref="E:System.Timers.Timer.Elapsed" /> 事件提供数据。
            </summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>
              引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件时获取日期/时间。
            </summary>
      <returns>
              引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。
            </returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>
              表示将用来处理 <see cref="E:System.Timers.Timer.Elapsed" /> 的 <see cref="T:System.Timers.Timer" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Timers.ElapsedEventArgs" /> 对象。
              </param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>
              在设定的间隔之后生成事件，带有生成重复事件的选项。
            
              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
            </summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>
              初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。
            </summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>
              初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。
            </summary>
      <param name="interval">
                事件之间经过的时间（以毫秒为单位）。
                 该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>
              获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。
            </summary>
      <returns>
              如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>
              开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。
            </summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>
              释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。
            </summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>
              释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>
              达到间隔时发生。
            </summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>
              获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。
            </summary>
      <returns>
              如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  无法设置此属性，因为计时器已被释放。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Timers.Timer.Interval" /> 属性设置为一个值大于 <see cref="F:System.Int32.MaxValue" /> 启用计时器之前。
                </exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>
              结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。
            </summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>
              获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。
            </summary>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。
               该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。
               默认值为 100 毫秒。
            </returns>
      <exception cref="T:System.ArgumentException">
                  时间间隔小于或等于零。
                
                  - 或 -
                
                  间隔值大于 <see cref="F:System.Int32.MaxValue" />, ，和计时器当前处于启用状态。
                   （如果当前未启用计时器，不是引发异常之前将变为启用状态。）
                </exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>
              获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。
            </returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>
              通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。
                </exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>
              通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。
            </summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>
              获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件提供数据。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 类的新实例。
            </summary>
      <param name="component">
                是将要更改该组件。
              </param>
      <param name="member">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，该值指示是将要更改的组件的成员。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>
              获取将要更改的组件或组件，它将被更改的成员的父容器。
            </summary>
      <returns>
              将要更改成员的组件。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>
              获取将要更改的成员。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，该值指示是将被更改，如果已知的该成员或 <see langword="null" /> 否则为。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 包含事件数据的事件。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>
              将提供数据供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />, ，和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 类的新实例。
            </summary>
      <param name="component">
                事件源组件。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>
              获取与事件关联的组件。
            </summary>
      <returns>
              与事件相关联的组件。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />, ，和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 组件级别的事件引发的事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 类的新实例。
            </summary>
      <param name="component">
                要重命名的组件。
              </param>
      <param name="oldName">
                组件的旧名称。
              </param>
      <param name="newName">
                组件的新名称。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>
              获取正在重命名的组件。
            </summary>
      <returns>
              正在重命名该组件。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>
              重命名事件之后获取组件的名称。
            </summary>
      <returns>
              重命名事件后组件的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>
              获取重命名事件之前的组件的名称。
            </summary>
      <returns>
              以前的组件名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>
              指示字符，如星号遮盖对象文本表示形式。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类中，有选择地显示密码文本。
            </summary>
      <param name="password">
        <see langword="true" /> 若要指示应将属性显示作为密码文本;否则为 <see langword="false" />。
                 默认值为 <see langword="false" />。
              </param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>
              指定的默认值为 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 实例是否相等。
            </summary>
      <param name="o">
                要与当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />，则为 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>
              返回此实例的值是默认值的指示。
            </summary>
      <returns>
              如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>
              指定 text 属性不用作密码。
               这 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic) 字段是只读的。
            </summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>
              获取一个值，该值指示如果属性为其 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 定义应作为密码文本显示。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性应显示为密码文本;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>
              指定 text 属性用作密码。
               这 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic) 字段是只读的。
            </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>
              提供类的属性的抽象。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有名称和在指定的属性的类 <see cref="T:System.ComponentModel.MemberDescriptor" />。
            </summary>
      <param name="descr">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，其中包含的属性，其属性的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称的类 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和在这两属性 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组。
            </summary>
      <param name="descr">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 包含该成员及其属性的名称。
              </param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 数组，其中包含你想要与属性关联的属性。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类具有指定的名称和属性。
            </summary>
      <param name="name">
                属性的名称。
              </param>
      <param name="attrs">
                类型的数组 <see cref="T:System.Attribute" /> ，其中包含属性特性。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>
              支持此属性更改时得到通知其他对象。
            </summary>
      <param name="component">
                要添加的处理程序的组件。
              </param>
      <param name="handler">
                要作为侦听器添加的委托。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>
              当在派生类中重写返回是否重置对象更改其值。
            </summary>
      <param name="component">
                要测试其重置功能的组件。
              </param>
      <returns>
        <see langword="true" /> 如果重置组件，更改其值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>
              当在派生类中重写，获取此属性绑定到的组件的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的类型。
               当 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法调用中，指定的对象可能是这种类型的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>
              获取此属性的类型转换器。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter" /> 用于将转换 <see cref="T:System.Type" /> 此属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>
              创建指定类型的实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，它表示要创建的类型。
              </param>
      <returns>
              类型的新实例。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>
              将此与另一个对象以确定它们是否等效进行比较。
            </summary>
      <param name="obj">
                要与此比较的对象 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <returns>
        <see langword="true" /> 如果这些值是等效的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>
              添加的特性 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到指定列表中的父类的属性。
            </summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> 列出中的父类的属性。
                 最初，这是空的。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>
              返回的默认 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </summary>
      <returns>
              属性描述符的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 使用指定的特性数组作为筛选器。
            </summary>
      <param name="filter">
                要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 具有与指定的特性匹配的属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 给定对象的。
            </summary>
      <param name="instance">
                要为其获取属性的组件。
              </param>
      <returns>
              具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 给定对象使用指定的特性数组作为筛选器。
            </summary>
      <param name="instance">
                要为其获取属性的组件。
              </param>
      <param name="filter">
                要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>
              获取指定类型的编辑器。
            </summary>
      <param name="editorBaseType">
                编辑器，用于区分某个属性支持的多个编辑器的基类型。
              </param>
      <returns>
              请求的编辑器类型的实例或 <see langword="null" /> 如果找不到一个编辑器。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>
              返回该对象的哈希代码。
            </summary>
      <returns>
              此对象的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>
              此方法返回在成员的调用时应使用的对象。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 调用目标。
              </param>
      <param name="instance">
                潜在的调用目标。
              </param>
      <returns>
        <see cref="T:System.Object" /> 应在成员调用期间使用。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>
              返回使用其名称的类型。
            </summary>
      <param name="typeName">
                要检索的类型程序集限定名称。
              </param>
      <returns>
              一个 <see cref="T:System.Type" /> 给定的类型名称相匹配或 <see langword="null" /> 如果找不到匹配项。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>
              当在派生类中重写，在组件上获取的属性的当前值。
            </summary>
      <param name="component">
                若要检索的值的属性具有的组件。
              </param>
      <returns>
              给定组件属性的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>
              检索当前一套 ValueChanged 事件处理程序的特定组件
            </summary>
      <param name="component">
                要为其检索事件处理程序组件。
              </param>
      <returns>
              一个组合多路广播的事件处理程序中，或 <see langword="null" /> 如果没有事件处理程序当前分配到 <paramref name="component" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>
              获取一个值，该值指示是否应本地化该属性，根据中的指定 <see cref="T:System.ComponentModel.LocalizableAttribute" />。
            </summary>
      <returns>
        <see langword="true" /> 如果该成员标记有 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 设置为 <see langword="true" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>
              当在派生类中重写，获取一个值，指示此属性只读的。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性是只读的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>
              引发 ValueChanged 您实现的事件。
            </summary>
      <param name="component">
                引发事件的对象。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.EventArgs" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>
              当在派生类中重写时获取的属性的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，表示该属性的类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>
              支持此属性更改时得到通知其他对象。
            </summary>
      <param name="component">
                要移除的处理程序的组件。
              </param>
      <param name="handler">
                要作为侦听器移除的委托。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>
              当在派生类中重写，将该组件的此属性的值重置为默认值。
            </summary>
      <param name="component">
                具有要重置为默认值的属性值的组件。
              </param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>
              获取一个值，该值指示是否应序列化此属性，根据中的指定 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />。
            </summary>
      <returns>
              其中一个 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举值，该值指定是否应序列化此属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
              当在派生类中重写为不同的值设置个分量的值。
            </summary>
      <param name="component">
                要设置的属性值具有的组件。
              </param>
      <param name="value">
                新值。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
              当在派生类中重写，确定一个值，该值指示是否需要持久保留此属性的值。
            </summary>
      <param name="component">
                具有要检查其持久性的属性的组件。
              </param>
      <returns>
        <see langword="true" /> 如果应保留该属性;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>
              获取一个值，该值指示是否为此属性的值更改通知可能源自外部属性描述符。
            </summary>
      <returns>
        <see langword="true" /> 如果值更改通知可能源自外部属性描述符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>
              表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例。
            </summary>
      <param name="properties">
                类型的数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 提供此集合的属性。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类，它是只读的。
            </summary>
      <param name="properties">
                类型的数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 提供此集合的属性。
              </param>
      <param name="readOnly">
                如果 <see langword="true" />, ，指定不能修改该集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>
              将指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合。
            </summary>
      <param name="value">
                要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <returns>
              索引 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已添加到集合。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>
              从集合中删除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回集合中是否包含给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将整个集合复制到数组，从指定的索引号处开始。
            </summary>
      <param name="array">
                一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象复制到集合中的元素。
              </param>
      <param name="index">
                索引 <paramref name="array" /> 参数开始复制处开始。
              </param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>
              获取集合中的属性说明符的数目。
            </summary>
      <returns>
              集合中的属性说明符的数目。
            </returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>
              指定可以使用而不是创建一个具有任何项的新的空集合。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称中使用布尔型来指示是否忽略大小写。
            </summary>
      <param name="name">
                名称 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 若要从集合中返回。
              </param>
      <param name="ignoreCase">
        <see langword="true" /> 如果您想要忽略的属性名称; 的大小写否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称或 <see langword="null" /> 如果属性不存在。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>
              返回此类的枚举数。
            </summary>
      <returns>
              类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要返回的索引。
              </param>
      <returns>
              索引的给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>
              添加 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到集合中指定的索引号。
            </summary>
      <param name="index">
                在其中添加索引 <paramref name="value" /> 到集合的参数。
              </param>
      <param name="value">
                要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>
              此集合中，使用指定的成员进行排序 <see cref="T:System.Collections.IComparer" />。
            </summary>
      <param name="sorter">
                用于进行排序的比较器 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>
              对此集合的成员进行排序。
               指定的顺序是首先应用，然后为此集合，通常为字母顺序的默认排序。
            </summary>
      <param name="names">
                一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。
              </param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>
              获取或设置 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 在指定的索引号。
            </summary>
      <param name="index">
                要获取或设置的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的从零开始的索引。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定的索引号。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 参数不是有效索引 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>
              获取或设置 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称。
            </summary>
      <param name="name">
                名称 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 若要从集合中获取。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称或 <see langword="null" /> 如果属性不存在。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>
              从集合中移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </summary>
      <param name="value">
                要从该集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>
              删除 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 集合中的指定索引处。
            </summary>
      <param name="index">
                索引 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 若要从集合中移除。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>
              对此集合的成员使用默认排序，对于此集合，通常为字母顺序排序。
            </summary>
      <returns>
              一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>
              此集合中，使用指定的成员进行排序 <see cref="T:System.Collections.IComparer" />。
            </summary>
      <param name="comparer">
                用于进行排序的比较器 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。
              </param>
      <returns>
              一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>
              对此集合的成员进行排序。
               指定的顺序是首先应用，然后为此集合，通常为字母顺序的默认排序。
            </summary>
      <param name="names">
                一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。
              </param>
      <returns>
              一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>
              对此集合的成员进行排序。
               指定的顺序首先应用，然后使用指定的排序 <see cref="T:System.Collections.IComparer" />。
            </summary>
      <param name="names">
                一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。
              </param>
      <param name="comparer">
                用于进行排序的比较器 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。
              </param>
      <returns>
              一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>
              获取集合中包含的元素数。
            </summary>
      <returns>
              集合中包含的元素数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示对集合的访问是否为同步的（线程安全）。
            </summary>
      <returns>
              如果对集合的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。
            </summary>
      <param name="key">
                用作要添加的元素的键的 <see cref="T:System.Object" />。
              </param>
      <param name="value">
                用作要添加的元素的键的 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中移除所有元素。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>
              返回此类的枚举数。
            </summary>
      <returns>
              类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置具有指定键的元素。
            </summary>
      <param name="key">
                要获取或设置的元素的键。
              </param>
      <returns>
              带有指定键的元素。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.IList" /> 中。
            </summary>
      <param name="value">
                要添加到集合中的项。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>
              从集合中移除所有项。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定集合中是否包含特定值。
            </summary>
      <param name="value">
                要在集合中定位的项。
              </param>
      <returns>
        <see langword="true" /> 如果找到该项，则集合中的否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              确定集合中的指定项的索引。
            </summary>
      <param name="value">
                要在集合中定位的项。
              </param>
      <returns>
              索引 <paramref name="value" /> 如果位于列表中，否则为-1。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              将某个项插入到集合中的指定索引处。
            </summary>
      <param name="index">
                应插入 <paramref name="value" /> 的从零开始的索引。
              </param>
      <param name="value">
                要插入到集合的项。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示集合是否具有固定大小。
            </summary>
      <returns>
        <see langword="true" /> 如果集合具有固定的大小，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示集合是否为只读。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的集合中的项。
            </summary>
      <param name="index">
                要获取或设置项的从零开始索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
              从集合中移除指定的值的第一个匹配项。
            </summary>
      <param name="value">
                要从集合中移除的项。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
              移除指定索引处的项。
            </summary>
      <param name="index">
                要移除的项的从零开始的索引。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>
              标识属性选项卡或选项卡以显示指定的类或类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用指定的选项卡类名。
            </summary>
      <param name="tabClassName">
                要创建的选项卡类型的程序集限定的名称。
                 这种格式约定的示例，请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用的选项卡上指定的类型。
            </summary>
      <param name="tabClass">
                要创建的选项卡的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用指定的选项卡的类名称和选项卡上的作用域。
            </summary>
      <param name="tabClassName">
                要创建的选项卡类型的程序集限定的名称。
                 这种格式约定的示例，请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。
              </param>
      <param name="tabScope">
                一个 <see cref="T:System.ComponentModel.PropertyTabScope" /> ，该值指示此选项卡的作用域。
                 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。
                 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用的指定的类型的选项卡和选项卡上的作用域。
            </summary>
      <param name="tabClass">
                要创建的选项卡的类型。
              </param>
      <param name="tabScope">
                一个 <see cref="T:System.ComponentModel.PropertyTabScope" /> ，该值指示此选项卡的作用域。
                 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。
                 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>
              返回一个值，该值指示此实例是否等于指定的属性。
            </summary>
      <param name="other">
                一个 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 要与此实例进行比较或 <see langword="null" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例是否相等; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.TypeLoadException">
                  指定的类型 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性 <paramref name="other" /> 找不到参数。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否等于指定的对象。
            </summary>
      <param name="other">
                要与此示例比较的对象，或 <see langword="null" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="other" /> 指的是相同 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.TypeLoadException">
                  指定的类型 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性<paramref name=" other" /> 找不到参数。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>
              获取此对象的哈希代码。
            </summary>
      <returns>
              属于该属性的对象的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>
              初始化使用指定的选项卡类名称和选项卡上的作用域数组，该属性。
            </summary>
      <param name="tabClassNames">
                类型为属性窗口上的选项卡创建的完全限定的类型名称的数组。
              </param>
      <param name="tabScopes">
                每个选项卡的作用域。
                 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。
                 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。
              </param>
      <exception cref="T:System.ArgumentException">
                  一个或多个中的值 <paramref name="tabScopes" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
                
                  - 或 -
                
                  长度 <paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 数组不匹配。
                
                  - 或 -
                
                  <paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>
              初始化使用指定的选项卡类名称和选项卡上的作用域数组，该属性。
            </summary>
      <param name="tabClasses">
                选项卡来创建的类型。
              </param>
      <param name="tabScopes">
                每个选项卡的作用域。
                 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。
                 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。
              </param>
      <exception cref="T:System.ArgumentException">
                  一个或多个中的值 <paramref name="tabScopes" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。
                
                  - 或 -
                
                  长度 <paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 数组不匹配。
                
                  - 或 -
                
                  <paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>
              获取此属性使用的选项卡的类型。
            </summary>
      <returns>
              一个类型，该值指示此属性使用的选项卡的类型数组。
            </returns>
      <exception cref="T:System.TypeLoadException">
                  指定的类型 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 找不到属性。
                </exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>
              获取此属性使用的选项卡类的名称。
            </summary>
      <returns>
              此属性使用的选项卡上类的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>
              获取数组的每个选项卡的此选项卡范围 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。
            </summary>
      <returns>
              一个数组 <see cref="T:System.ComponentModel.PropertyTabScope" /> 对象，以指示选项卡的作用域。
            </returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>
              定义用于指示在属性窗口的选项卡的持久性作用域标识符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>
              此选项卡是特定于当前的组件。
               此选项卡添加到当前组件属性窗口，并且不再选择该组件时会被删除。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>
              此选项卡是特定于当前的文档。
               此选项卡添加到属性窗口，并删除当前所选的文档发生更改时。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>
              此选项卡添加到属性窗口，并可以仅将其显式移除由父组件。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>
              此选项卡添加到属性窗口，并且不能删除。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>
              指定的属性名称中的实现器 <see cref="T:System.ComponentModel.IExtenderProvider" /> 提供给其他组件。
               无法继承此类
            </summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 同名的属性以及它的接收器类型的类。
            </summary>
      <param name="propertyName">
                将扩展到指定类型的对象的属性的名称。
              </param>
      <param name="receiverTypeName">
                此属性可以扩展数据类型的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 具有名称的属性的类并将其 <see cref="T:System.Type" />。
            </summary>
      <param name="propertyName">
                将扩展到指定类型的对象的属性的名称。
              </param>
      <param name="receiverType">
        <see cref="T:System.Type" /> 可接收属性的对象的数据类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 如果给定对象的值是否等于当前;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>
              获取此类提供了一个属性的名称。
            </summary>
      <returns>
              此类提供了一个属性的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>
              获取此属性可以扩展的数据类型的名称。
            </summary>
      <returns>
              此属性可以扩展数据类型的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>
              获取此特性的唯一标识符。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 该属性的唯一标识符。
            </returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>
              指定该属性可以用作应用程序设置。
            </summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 类的新实例。
            </summary>
      <param name="recommendedAsConfigurable">
        <see langword="true" /> 如果此属性绑定到的属性可以用作应用程序设置;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>
              指定的默认值为 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, ，即 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>
              指示此实例与指定对象是否相等。
            </summary>
      <param name="obj">
                要比较的另一个对象。
              </param>
      <returns>
              如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>
              指示此实例的值是否为类的默认值。
            </summary>
      <returns>
              如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>
              指定一个属性不能用作应用程序设置。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>
              获取一个值，该值指示是否此属性是绑定到的属性可以用作应用程序设置。
            </summary>
      <returns>
        <see langword="true" /> 如果此属性绑定到的属性可以用作应用程序设置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>
              指定一个属性可以用作应用程序设置。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>
              提供了其他表示形式之间来回转换的对象引用的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 类的新实例。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，它表示要与此引用转换器关联的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以与引用的对象使用指定的上下文转换给定的源类型的对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果此对象可以执行转换，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的对象转换为引用类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定用于表示该字体的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为使用指定的上下文和参数的引用类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定用于表示该字体的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取对引用数据类型的标准值集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 为独占列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的穷举列表。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持可以从列表中选取的值的标准集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 可以调用来查找一组公共对象支持的值。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              返回一个值，该值指示是否可以将特定的值添加到标准值集合。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 提供另一个上下文。
              </param>
      <param name="value">
                要检查的值。
              </param>
      <returns>
        <see langword="true" /> 如果值允许的并且可以添加到标准值集合中; <see langword="false" /> 如果值不能添加到标准值集合。
            </returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 与已更改组件的类。
            </summary>
      <param name="componentChanged">
                已更改的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类，具有已更改组件的类型。
            </summary>
      <param name="typeChanged">
        <see cref="T:System.Type" /> 更改。
              </param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>
              获取已更改其属性、 事件或扩展程序的组件。
            </summary>
      <returns>
              已更改其属性、 事件或扩展器的组件或 <see langword="null" /> 如果更改了相同类型的所有组件。
            </returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>
              获取 <see cref="T:System.Type" /> 后更改其属性或事件。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 后更改其属性或事件。
            </returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件时引发 <see cref="T:System.Type" /> 或在设计时更改组件。
            </summary>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.RefreshEventArgs" /> ，其中包含该组件或 <see cref="T:System.Type" /> 更改。
              </param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>
              指定是否 Visual Studio 自定义操作安装程序或 Installutil.exe（安装程序工具） 时安装的程序集时要调用。
            </summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 类的新实例。
            </summary>
      <param name="runInstaller">
        <see langword="true" /> 如果程序集; 安装过程中应调用安装程序否则为 <see langword="false" />。
              </param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>
              指定默认的可见性，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>
              确定是否指定的值 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 等同于当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" />。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" />，则为 <see cref="T:System.ComponentModel.RunInstallerAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>
              生成当前的哈希代码 <see cref="T:System.ComponentModel.RunInstallerAttribute" />。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>
              确定此属性是否为默认值。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性的默认值为此属性类;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>
              指定 Visual Studio 自定义操作安装程序或 Installutil.exe（安装程序工具） 时安装的程序集不应调用。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>
              获取一个值，该值指示是否应在一个程序集的安装过程中调用安装程序。
            </summary>
      <returns>
        <see langword="true" /> 如果程序集; 安装过程中应调用安装程序否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>
              指定 Visual Studio 自定义操作安装程序或 Installutil.exe（安装程序工具） 时安装的程序集时要调用。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>
              提供用于在 8 位无符号整数对象与字符串之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>
              指定当组件属性可以绑定到应用程序设置。
            </summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 类的新实例。
            </summary>
      <param name="bindable">
        <see langword="true" /> 若要指定适合将绑定到; 设置属性否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>
              获取一个值，该值指示属性是否适合绑定到设置。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性是适合绑定设置，则受到保护。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>
              指定一个属性不是适合绑定到设置。
            </summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>
              指定适合将绑定到设置属性。
            </summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>
              提供的类型转换器来转换单精度浮点数字对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>
              提供用于在字符串对象与其他表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.StringConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为使用指定的上下文的字符串。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定的值转换为 <see cref="T:System.String" /> 对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                要使用的 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>
              提供方法以验证计算机名称和路径符合特定的语法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>
              检查以确认它不包含"\"的计算机名称的语法。
            </summary>
      <param name="value">
                包含要检查的计算机名称的字符串。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="value" /> 与正确的计算机名称格式匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>
              检查以查看它是否以"\\"开头的路径的语法。
            </summary>
      <param name="value">
                包含要检查的路径的字符串。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="value" /> 与正确的路径格式匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>
              检查以查看是否以"\"或驱动器号"c:"开头的路径的语法。
            </summary>
      <param name="value">
                包含要检查的路径的字符串。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="value" /> 与正确的路径格式匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>
              将颜色从一种数据类型转换到另一个。
               访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Drawing.ColorConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
                 此对象可用于获取有关从中调用该转换器的环境的其他信息。
              </param>
      <param name="sourceType">
                您想要转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果此对象可以执行转换，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示要转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果该转换器能够执行该操作;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的对象转换为转换器的本机类型。
            </summary>
      <param name="context">
                一个提供格式上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。
                 此对象可用于获取有关从中调用该转换器的环境的其他信息。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要表示颜色的区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
        <see cref="T:System.Object" /> 表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将指定的对象转换为另一种类型。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
                 使用此对象来提取有关从中调用该转换器的环境的附加信息。
                 始终检查该值是否 <see langword="null" />。
                 同样，上下文对象上的属性可能返回 <see langword="null" />。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要表示颜色的区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
        <see cref="T:System.Object" /> 表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              检索包含用于为其设计此验证程序的数据类型的标准值集的集合。
               这将返回 <see langword="null" /> 如果数据类型不支持标准值集。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
                 使用此对象来提取有关从中调用该转换器的环境的附加信息。
                 始终检查该值是否 <see langword="null" />。
                 同样，上下文对象上的属性可能返回 <see langword="null" />。
              </param>
      <returns>
              集合包含 <see langword="null" /> 或一组标准的有效值。
               默认实现始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定此对象是否支持可以从列表中选择的值的标准集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> 必须调用来查找一组公共对象支持的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>
              表示设计器的集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类，其中包含指定的一组设计器。
            </summary>
      <param name="designers">
                包含要添加的设计器的集合的列表。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类，其中包含指定的设计器。
            </summary>
      <param name="designers">
                一个数组 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 对象来存储。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>
              获取集合中的设计器数。
            </summary>
      <returns>
              集合中的设计器的数量。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>
              为此集合中获取新的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 枚举集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>
              获取指定索引处的设计器。
            </summary>
      <param name="index">
                要返回的设计器的索引。
              </param>
      <returns>
              设计器中的指定索引处。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 是从集合中复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>
              获取集合中包含的元素数。
            </summary>
      <returns>
              集合中包含的元素数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              为此集合中获取新的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 枚举集合。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>
              提供有关 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 类的新实例。
            </summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 的文档。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>
              获取文档的宿主。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 的文档。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 创建或释放的文档时引发的事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>
              包含设计器选项的集合。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将整个集合复制到兼容的一维 <see cref="T:System.Array" />, ，从目标数组的指定索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 是从集合复制的元素的目标。
                <paramref name="array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>
              获取子选项集的数目此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含。
            </summary>
      <returns>
              数量的子选项集合这 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> 可用来循环访问此集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用来循环访问此集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>
              返回此集合的范围中的给定值的第一个匹配项的索引。
            </summary>
      <param name="value">
                要在集合中定位的对象。
              </param>
      <returns>
              整个集合中的值的第一个匹配项的索引如果找到，则否则的下限减 1 的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>
              获取给定索引处的子集合。
            </summary>
      <param name="index">
                要获取的子集合的从零开始的索引。
              </param>
      <returns>
              指定索引处的子集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>
              获取具有给定名称的子集合。
            </summary>
      <param name="name">
                子集合的名称。
              </param>
      <returns>
              具有指定的名称的子集合 <paramref name="name" /> 参数，或 <see langword="null" /> 如果未找到的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>
              获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>
              获取父集合对象。
            </summary>
      <returns>
              父集合对象，或 <see langword="null" /> 如果没有父对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>
              获取此提供的属性的集合 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, ，以及所有子域。
            </summary>
      <returns>
              此属性的集合提供 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, ，以及所有子域。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>
              显示对话框框中的用户界面 (UI)，用户可以在此配置选项 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。
            </summary>
      <returns>
        <see langword="true" /> 如果可以显示对话框中，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对集合的访问，因此，线程安全。
            </summary>
      <returns>
        <see langword="true" /> 如果同步对集合的访问权限;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.IList" /> 中。
            </summary>
      <param name="value">
                要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>
              从集合中移除所有项。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定集合中是否包含特定值。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Object" /> 在集合中找到; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              确定集合中特定项的索引。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              将一项插入集合中指定索引处。
            </summary>
      <param name="index">
                应插入 <paramref name="value" /> 的从零开始的索引。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到集合。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示集合是否具有固定大小。
            </summary>
      <returns>
        <see langword="true" /> 如果集合具有固定的大小，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示集合是否为只读。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
              从集合中移除特定对象的第一个匹配项。
            </summary>
      <param name="value">
                要从该集合中移除的 <see cref="T:System.Object" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
              移除指定索引处的集合项。
            </summary>
      <param name="index">
                要移除的项的从零开始的索引。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>
              用于获取和设置选项值为设计器提供基类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>
              创建一个新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 具有给定名称并将其添加到给定的父级。
            </summary>
      <param name="parent">
                在父设计器的选项集合。
                 所有集合都具有除根对象集合的父级。
              </param>
      <param name="name">
                此集合的名称。
              </param>
      <param name="value">
                为此集合提供属性的对象。
                 可以是 <see langword="null" /> 如果集合不应提供的任何属性。
              </param>
      <returns>
              一个新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 具有给定名称。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> 或 <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>
              获取此服务的选项集合。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 填入可用设计器的选项。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>
              填充 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。
            </summary>
      <param name="options">
                要填充的集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>
              显示给定对象的选项对话框。
            </summary>
      <param name="options">
                包含要调用的对象选项集合。
              </param>
      <param name="optionObject">
                实际选项对象。
              </param>
      <returns>
        <see langword="true" /> 如果显示对话框中;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>
              获取此包中定义的选项的值。
            </summary>
      <param name="pageName">
                选项绑定页。
              </param>
      <param name="valueName">
                选项值的名称。
              </param>
      <returns>
              该选项值的名为 <paramref name="valueName" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>
              设置此包中定义的选项的值。
            </summary>
      <param name="pageName">
                选项绑定页
              </param>
      <param name="valueName">
                选项值的名称。
              </param>
      <param name="value">
                选项的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>
              提供一种方法来对一系列的设计时操作进行分组，从而提高性能并能撤销大多数类型的更改。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>
              在不使用说明的情况下初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>
              使用指定的事务说明初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。
            </summary>
      <param name="description">
                此事务的说明。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>
              取消事务并尝试回滚由事务的事件作出的更改。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>
              获取一个值，该值指示是否已取消事务。
            </summary>
      <returns>
              如果事务已取消，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>
              提交此事务。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>
              获取一个值，该值指示是否已提交事务。
            </summary>
      <returns>
              如果事务已提交，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>
              获取事务的说明。
            </summary>
      <returns>
              事务的说明。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>
              释放与此对象关联的资源。
               如果此事务尚未提交，则此重写方法将提交此事务。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>
              引发 <see langword="Cancel" /> 事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>
              执行提交事务的实际工作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 使用的所有资源。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>
              提供有关 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类，使用指定的值，该值指示是否在设计器调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对该事务。
            </summary>
      <param name="commit">
                一个值，该值指示是否已提交事务。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类的新实例。
            </summary>
      <param name="commit">
                一个值，该值指示是否已提交事务。
              </param>
      <param name="lastTransaction">
        <see langword="true" /> 如果这是最后一个事务以关闭;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>
              获取一个值，该值指示是否要关闭的最后一个事务。
            </summary>
      <returns>
        <see langword="true" />, 如果这是最后一个事务以关闭;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>
              该值指示是否在设计器调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对该事务。
            </summary>
      <returns>
        <see langword="true" /> 如果设计器调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对该事务中; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 设计器的事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />  包含事件数据。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>
              表示可以从设计器调用的谓词。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。
            </summary>
      <param name="text">
                向用户显示的菜单命令的文本。
              </param>
      <param name="handler">
                事件处理程序执行操作的动词。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。
            </summary>
      <param name="text">
                向用户显示的菜单命令的文本。
              </param>
      <param name="handler">
                事件处理程序执行操作的动词。
              </param>
      <param name="startCommandID">
                开始此谓词的命令 ID。
                 默认情况下，设计器结构留出大量谓词的命令 Id。
                 您可以替代此通过提供自定义命令 id。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>
              获取或设置谓词的菜单项的说明。
            </summary>
      <returns>
              描述菜单项的字符串。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>
              在菜单上获取谓词命令的文本说明。
            </summary>
      <returns>
              对谓词命令的说明。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>
              重写<see cref="M:System.Object.ToString" />。
            </summary>
      <returns>
              谓词的文本或空字符串 ("") 的文本字段是否为空。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>
              表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类使用指定的数组 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象。
            </summary>
      <param name="value">
                一个 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组，指示要在集合中包含的谓词。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>
              将指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 添加到集合。
            </summary>
      <param name="value">
                要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
              </param>
      <returns>
              添加谓词的集合中的索引。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>
              将指定的一组设计器谓词添加到集合。
            </summary>
      <param name="value">
                一个数组 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 要添加到集合的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>
              向集合中添加指定设计器谓词的集合。
            </summary>
      <param name="value">
                一个 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 要添加到集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>
              获取一个值，该值指示是否指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 集合中存在。
            </summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 要在集合中搜索。
              </param>
      <returns>
        <see langword="true" /> 如果指定的对象存在于集合;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>
              将集合成员复制到指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组从指定的目标索引处开始。
            </summary>
      <param name="array">
                要复制到的集合成员的数组。
              </param>
      <param name="index">
                要开始将复制到的目标索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>
              获取指定的索引 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
            </summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 其索引获取集合中。
              </param>
      <returns>
              如果在列表中; 找到指定的对象的索引否则为-1。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>
              将指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的指定索引处。
            </summary>
      <param name="index">
                集合中要插入谓词中的索引。
              </param>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 要插入集合中。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>
              获取或设置指定索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
            </summary>
      <param name="index">
                用于获取或设置索引 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 在集合中每个有效索引。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>
              引发 <see langword="Clear" /> 事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>
              引发 <see langword="Insert" /> 事件。
            </summary>
      <param name="index">
                将项插入位置的索引。
              </param>
      <param name="value">
                要插入的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>
              引发 <see langword="Remove" /> 事件。
            </summary>
      <param name="index">
                若要移除的项位置的索引。
              </param>
      <param name="value">
                要移除的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
              引发 <see langword="Set" /> 事件。
            </summary>
      <param name="index">
                在此处设置的项索引。
              </param>
      <param name="oldValue">
                旧的对象。
              </param>
      <param name="newValue">
                新对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>
              引发 <see langword="Validate" /> 事件。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>
              从集合中移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
            </summary>
      <param name="value">
                要从该集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>
              表示可以在设计时支持许可证提供程序的设计时许可证上下文。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>
              获取一个已保存的许可证密钥。
            </summary>
      <param name="type">
                许可证密钥的类型。
              </param>
      <param name="resourceAssembly">
                要从其中获取密钥的程序集。
              </param>
      <returns>
              指定的类型匹配的已保存的许可证密钥。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>
              设置的已保存的许可证密钥。
            </summary>
      <param name="type">
                许可证密钥的类型。
              </param>
      <param name="key">
                许可证密钥。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>
              获取许可证使用情况模式。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.LicenseUsageMode" /> ，该值指示上下文的授权模式。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>
              为设计时许可证上下文序列化提供支持。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>
              将序列化为指定的设计时许可证上下文中使用指定的键和输出流中的许可证。
            </summary>
      <param name="o">
                要输出到的流。
              </param>
      <param name="cryptoKey">
                要用于加密的密钥。
              </param>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 指示许可证上下文。
              </param>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.TimeSpan" /> 对象与其他表示形式之间。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以转换为给定的源类型的对象 <see cref="T:System.TimeSpan" /> 使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定类型转换为 <see cref="T:System.TimeSpan" />。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的对象转换为另一种类型。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
              </param>
      <param name="culture">
                到的区域性 <paramref name="value" /> 将被转换。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>
              表示工具箱项的属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类，并指定是否使用默认初始化值。
            </summary>
      <param name="defaultType">
        <see langword="true" /> 若要创建默认的类型; 工具箱项目属性 <see langword="false" /> ，将此属性没有默认值工具箱项支持关联。
              </param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类使用的类型指定的名称。
            </summary>
      <param name="toolboxItemTypeName">
                此工具箱项，并包含类型的程序集的类型的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类使用指定的工具箱项的类型。
            </summary>
      <param name="toolboxItemType">
                工具箱项的类型。
              </param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类，并将类型设置为默认情况下， <see cref="T:System.Drawing.Design.ToolboxItem" />。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>
              获取一个值，该值指示该属性的当前值是否为该属性的默认值。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性的当前值是默认设置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类，并将类型设置为 <see langword="null" />。
               此字段为只读。
            </summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>
              获取或设置工具箱项的类型。
            </summary>
      <returns>
              工具箱项的类型。
            </returns>
      <exception cref="T:System.ArgumentException">
                  无法找到的类型。
                </exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>
              获取或设置当前的类型名称 <see cref="T:System.Drawing.Design.ToolboxItem" />。
            </summary>
      <returns>
              当前的工具箱项的完全限定的类型名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>
              指定的筛选器字符串和要用于工具箱项的筛选器类型。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类使用指定的筛选器字符串。
            </summary>
      <param name="filterString">
                工具箱项的筛选器字符串。
              </param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类使用指定的筛选器字符串和类型。
            </summary>
      <param name="filterString">
                工具箱项的筛选器字符串。
              </param>
      <param name="filterType">
                一个 <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> ，该值指示筛选器类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>
              获取此工具箱项的筛选器字符串。
            </summary>
      <returns>
              工具箱项的筛选器字符串。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>
              获取筛选器的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> ，该值指示筛选器类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>
              指示指定的对象是否具有匹配的筛选器字符串。
            </summary>
      <param name="obj">
                要测试匹配的筛选器字符串的对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定的对象具有匹配的筛选器字符串; 否则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              表示当前对象的字符串。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>
              获取属性的类型 ID。
            </summary>
      <returns>
              此属性的类型 ID。
               所有 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 对象具有相同的筛选器字符串返回相同的类型 id。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>
              定义用于指示筛选器的类型的标识符， <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 使用。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>
              指示工具箱项筛选器字符串是允许的但不是要求。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>
              表示自定义处理需要以确定是否使用工具箱项筛选器字符串。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>
              指示不允许工具箱项筛选器字符串。
            </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>
              指示必须存在要启用的工具箱项工具箱项筛选器字符串。
            </summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>
              表示 <see langword="abstract" /> 提供用于不具有属性的对象的属性的类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。
            </summary>
      <param name="componentType">
                一个 <see cref="T:System.Type" /> ，表示此属性描述符绑定的组件的类型。
              </param>
      <param name="name">
                属性的名称。
              </param>
      <param name="propertyType">
                一个 <see cref="T:System.Type" /> ，它表示此属性的数据类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
              初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。
            </summary>
      <param name="componentType">
                一个 <see cref="T:System.Type" /> ，表示此属性描述符绑定的组件的类型。
              </param>
      <param name="name">
                属性的名称。
              </param>
      <param name="propertyType">
                一个 <see cref="T:System.Type" /> ，它表示此属性的数据类型。
              </param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 具有要与属性关联的特性数组。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>
              返回是否会重置组件更改个分量的值。
            </summary>
      <param name="component">
                要测试其重置功能的组件。
              </param>
      <returns>
        <see langword="true" /> 如果重置组件，更改 component; 的值否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>
              获取此属性描述绑定的组件的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，它表示此属性绑定的组件的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>
              获取一个值，该值指示此属性只读的。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性是只读的; <see langword="false" /> 如果属性为读/写。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>
              获取属性的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，表示该属性的类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>
              重置组件的此属性的值。
            </summary>
      <param name="component">
                具有要重置的属性值的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
              返回此属性的值是否可以保持不变。
            </summary>
      <param name="component">
                若要检查其持久性的属性具有的组件。
              </param>
      <returns>
        <see langword="true" /> 如果该属性的值可以持续;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>
              表示值的集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 类的新实例。
            </summary>
      <param name="values">
        <see cref="T:System.Collections.ICollection" /> ，它表示要放入集合中的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将此集合的内容复制到数组。
            </summary>
      <param name="array">
        <see cref="T:System.Array" /> ，它表示要复制到数组。
              </param>
      <param name="index">
                从其开始的索引。
              </param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>
              获取集合中的对象数。
            </summary>
      <returns>
              集合中的对象数。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>
              返回该集合的枚举数。
            </summary>
      <returns>
              类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>
              在指定的索引号获取的对象。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.Object" /> 若要从集合中获取。
              </param>
      <returns>
        <see cref="T:System.Object" /> 具有指定的索引。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。
            </summary>
      <returns>
              在所有情况下均为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>
              提供了一种统一的方法将类型的值转换为其他类型，以及用于访问标准值和子属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>
              返回此转换器是否可以将给定类型的对象转换为此转换器的类型。
            </summary>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>
              返回此转换器是否可以将对象转换为指定的类型。
            </summary>
      <param name="destinationType">
                一个 <see cref="T:System.Type" />，表示你希望转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器能否使用指定上下文将对象转换为指定类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" />，表示你希望转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>
              将给定的值转换为此转换器的类型。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>
              将给定的字符串转换为此转换器，使用固定区域性的类型。
            </summary>
      <param name="text">
                要转换的 <see cref="T:System.String" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
              将给定的字符串转换为此转换器，使用固定区域性和指定的上下文的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="text">
                要转换的 <see cref="T:System.String" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>
              将给定的文本转换为一个对象，使用指定的上下文和区域性信息。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
                 如果传递 <see langword="null" />，则采用当前区域性。
              </param>
      <param name="text">
                要转换的 <see cref="T:System.String" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>
              将指定的文本转换为一个对象。
            </summary>
      <param name="text">
                要转换的对象文本表示。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法将字符串转换为适当的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
              将给定的文本转换为一个对象，使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="text">
                要转换的 <see cref="T:System.String" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的类型使用的参数。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 转换 <paramref name="value" /> 参数。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              使用指定的上下文和区域性信息将给定值对象转换为指定的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
                 如果传递 <see langword="null" />，则采用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 转换 <paramref name="value" /> 参数。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>
              将指定的值转换为区域性不变的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              将指定的值转换为区域性不变的字符串表示形式，使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的值转换为字符串表示形式，使用指定的上下文和区域性信息。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
                 如果传递 <see langword="null" />，则采用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>
              将指定的值转换为字符串表示形式。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              将给定的值转换为字符串表示形式，并使用给定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
              给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="propertyValues">
                新属性值的 <see cref="T:System.Collections.IDictionary" />。
              </param>
      <returns>
              如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。
               此方法始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>
              重新创建 <see cref="T:System.Object" /> 对象给定的一组属性值。
            </summary>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> 表示新属性值的字典。
              </param>
      <returns>
              如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。
               此方法始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>
              返回当转换无法执行时所引发的异常。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 若要转换，或 <see langword="null" /> 如果该对象不可用。
              </param>
      <returns>
        <see cref="T:System.Exception" /> ，表示要在不能执行的转换时引发的异常。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  此方法会自动引发。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>
              返回当转换无法执行时所引发的异常。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 若要转换，或 <see langword="null" /> 如果该对象不可用。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示转换试图将转换为的类型。
              </param>
      <returns>
        <see cref="T:System.Exception" /> ，表示要在不能执行的转换时引发的异常。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  此方法会自动引发。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>
              返回更改此对象上的某个值是否要求对调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法来创建一个新值。
            </summary>
      <returns>
              如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              返回更改此对象上的某个值是否要求对调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 若要创建一个新值，使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>
              返回由值参数指定的数组类型的属性集合。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。
              </param>
      <returns>
              具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              返回由值参数，使用指定的上下文中指定的数组的类型的属性的集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。
              </param>
      <returns>
              具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              使用指定的上下文和特性返回由该值参数指定的数组类型的属性集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。
              </param>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              通过使用指定的上下文，返回此对象是否支持属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>
              返回此对象是否支持属性。
            </summary>
      <returns>
              如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>
              从适用于此类型转换器的数据类型的默认上下文中返回的标准值的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 包含一组标准的有效的值或 <see langword="null" /> 如果数据类型不支持标准值集。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。
            </summary>
      <param name="context">
                提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。
                 此参数或其属性可以为 <see langword="null" />。
              </param>
      <returns>
              包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>
              返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为独占列表。
            </summary>
      <returns>
              如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              使用指定的上下文返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>
              返回此对象是否支持可以从列表中选取的标准值集。
            </summary>
      <returns>
              如果应调用 <see langword="true" /> 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果应调用 <see langword="true" /> 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              返回给定的值对象是否对此类型和对指定的上下文有效。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                要测试其有效性的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>
              返回给定的值的对象是否对此类型有效。
            </summary>
      <param name="value">
                要测试其有效性的对象。
              </param>
      <returns>
              如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>
              对属性的集合进行排序。
            </summary>
      <param name="props">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 具有要排序的属性。
              </param>
      <param name="names">
                想要出现在集合中的属性的顺序的名称的数组。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序的属性。
            </returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>
              指定对于此属性绑定到的对象要使用哪种类型作为转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类使用默认类型转换器，这是一个空字符串 ("")。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类，使用指定的类型名称作为数据转换器此属性绑定到的对象。
            </summary>
      <param name="typeName">
                此属性绑定到要使用的对象的数据转换为的类的完全限定的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类，此属性绑定到的对象为数据转换器使用指定的类型。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示要用于此属性绑定到的对象的数据转换的转换器类的类型。
              </param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>
              获取的完全限定的类型名称 <see cref="T:System.Type" /> 要用作此属性绑定到的对象的转换器。
            </summary>
      <returns>
              完全限定的类型名称 <see cref="T:System.Type" /> 以作为转换器用于此属性绑定到的对象或空字符串 ("") 如果不存在。
               默认值为空字符串 ("")。
            </returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>
              指定要用作此属性绑定到的对象的转换器的类型。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 给定对象的值是否等于当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>
              提供补充元数据到 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类使用父类型说明提供程序。
            </summary>
      <param name="parent">
                父类型说明提供程序。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>
              创建可替换为另一种数据类型的对象。
            </summary>
      <param name="provider">
                可选的服务提供程序。
              </param>
      <param name="objectType">
                要创建的对象的类型。
                 此参数且永远不会 <see langword="null" />。
              </param>
      <param name="argTypes">
                表示要传递给该对象的构造函数的参数类型的类型的可选数组。
                 此数组可为 <see langword="null" /> 或长度为零。
              </param>
      <param name="args">
                要传递给对象的构造函数的可选参数值数组。
              </param>
      <returns>
              Substitute <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>
              获取每个对象缓存中，作为访问 <see cref="T:System.Collections.IDictionary" /> 的键/值对。
            </summary>
      <param name="instance">
                要为其获取缓存对象。
              </param>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 如果所提供的对象支持缓存; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>
              获取给定对象的扩展的自定义类型描述符。
            </summary>
      <param name="instance">
                要为其获取扩展的类型描述符对象。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该对象提供扩展元数据。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>
              获取指定对象的扩展程序提供。
            </summary>
      <param name="instance">
                要获取扩展程序提供程序的对象。
              </param>
      <returns>
              扩展程序提供程序的数组 <paramref name="instance" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>
              获取指定组件的名称或 <see langword="null" /> 如果该组件没有名称。
            </summary>
      <param name="component">
                指定的组件。
              </param>
      <returns>
              指定组件的名称。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>
              针对执行正常反射给定的对象。
            </summary>
      <param name="instance">
                类型的实例 (不应为 <see langword="null" />)。
              </param>
      <returns>
              为此反射的类型 <paramref name="instance" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>
              针对执行正常反射类型。
            </summary>
      <param name="objectType">
                要检索的对象的类型 <see cref="T:System.Reflection.IReflect" />。
              </param>
      <returns>
              为此反射的类型 <paramref name="objectType" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>
              针对执行正常反射给定对象具有给定类型。
            </summary>
      <param name="objectType">
                要检索的对象的类型 <see cref="T:System.Reflection.IReflect" />。
              </param>
      <param name="instance">
                类型的实例。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              为此反射的类型 <paramref name="objectType" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>
              将反射类型转换为运行时类型。
            </summary>
      <param name="reflectionType">
                要转换为其等效的运行时的类型。
              </param>
      <returns>
              一个 <see cref="T:System.Type" /> ，它表示的运行时等效项 <paramref name="reflectionType" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>
              获取给定对象的自定义类型描述符。
            </summary>
      <param name="instance">
                类型的实例。
                 可以是 <see langword="null" /> 如果没有实例传递给 <see cref="T:System.ComponentModel.TypeDescriptor" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该类型提供的元数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>
              获取给定类型的自定义类型描述符。
            </summary>
      <param name="objectType">
                要为其检索类型描述符的对象的类型。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该类型提供的元数据。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>
              获取给定的类型和对象的自定义类型描述符。
            </summary>
      <param name="objectType">
                要为其检索类型描述符的对象的类型。
              </param>
      <param name="instance">
                类型的实例。
                 可以是 <see langword="null" /> 如果没有实例传递给 <see cref="T:System.ComponentModel.TypeDescriptor" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该类型提供的元数据。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>
              获取一个值，该值指示指定的类型是否兼容的类型说明和及其类型说明提供程序链。
            </summary>
      <param name="type">
                要测试兼容性的类型。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="type" /> 兼容的类型说明和及其类型说明提供程序链; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>
              指定的自定义类型说明提供程序类。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类使用指定的类型名称。
            </summary>
      <param name="typeName">
                类型的限定的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>
              使用指定的类型初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类的新实例。
            </summary>
      <param name="type">
                要将存储在该属性的类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>
              获取类型说明提供程序的类型名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含限定的类型名称的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>
              对于组件，例如其属性、 属性和事件提供有关的特征。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>
              向目标组件实例添加类级别属性。
            </summary>
      <param name="instance">
                目标组件的实例。
              </param>
      <param name="attributes">
                要添加到组件的类的 <see cref="T:System.Attribute" /> 对象的数组。
              </param>
      <returns>
              用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>
              向目标组件类型添加类级别属性。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <param name="attributes">
                要添加到组件的类的 <see cref="T:System.Attribute" /> 对象数组。
              </param>
      <returns>
              用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>
              为给定的编辑器基类型添加编辑器表。
            </summary>
      <param name="editorBaseType">
                要添加编辑器表的编辑器基类型。
                 如果针对此类型的表已存在，此方法将不起作用。
              </param>
      <param name="table">
                要添加的 <see cref="T:System.Collections.Hashtable" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>
              为某个组件的单个实例添加类型描述提供程序。
            </summary>
      <param name="provider">
                要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="instance">
                目标组件的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>
              为组件类添加类型说明提供程序。
            </summary>
      <param name="provider">
                要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>
              为某个组件的单个实例添加类型描述提供程序。
            </summary>
      <param name="provider">
                要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="instance">
                目标组件的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>
              为组件类添加类型说明提供程序。
            </summary>
      <param name="provider">
                要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>
              获取或设置用于目标组件的组件对象模型 (COM) 类型信息的提供程序。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 实例，表示 COM 类型的信息提供程序实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>
              获取由目标组件表示的组件对象模型 (COM) 对象的类型。
            </summary>
      <returns>
              由此组件表示的 COM 对象的 <see cref="T:System.Type" />，或非 COM 对象的 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>
              在两个对象之间创建主要和辅助关联。
            </summary>
      <param name="primary">
                主要 <see cref="T:System.Object" />。
              </param>
      <param name="secondary">
                辅助 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> 等于 <paramref name="secondary" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>
              创建与指定组件关联的具有特定类型的设计器的实例。
            </summary>
      <param name="component">
                指定要与设计器关联的组件的 <see cref="T:System.ComponentModel.IComponent" />。
              </param>
      <param name="designerBaseType">
                表示要创建的设计器的类型的 <see cref="T:System.Type" />。
              </param>
      <returns>
              如果找到组件的设计器实例，则为 <see cref="T:System.ComponentModel.Design.IDesigner" />；如果未找到设计器，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>
              当传递现有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 时，创建和现有事件描述符相同的新的事件描述符。
            </summary>
      <param name="componentType">
                要为其创建新事件的组件类型。
              </param>
      <param name="oldEventDescriptor">
                现有事件信息。
              </param>
      <param name="attributes">
                新属性。
              </param>
      <returns>
              将指定元数据属性与现有元数据属性进行合并的新 <see cref="T:System.ComponentModel.EventDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
              通过从类型上的指定事件动态生成描述符信息，创建与现有事件描述符相同的新事件描述符。
            </summary>
      <param name="componentType">
                该事件依赖的组件的类型。
              </param>
      <param name="name">
                事件的名称。
              </param>
      <param name="type">
                处理该事件的委托的类型。
              </param>
      <param name="attributes">
                此事件的属性。
              </param>
      <returns>
              绑定到类型的 <see cref="T:System.ComponentModel.EventDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>
              创建可替换为另一种数据类型的对象。
            </summary>
      <param name="provider">
                提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服务的服务提供程序。
                 此参数可以为 <see langword="null" />。
              </param>
      <param name="objectType">
                要创建的对象的 <see cref="T:System.Type" />。
              </param>
      <param name="argTypes">
                要传递给对象的构造函数的可选参数类型数组。
                 此参数可以是 <see langword="null" /> 或长度为零的数组。
              </param>
      <param name="args">
                要传递给对象的构造函数的可选参数值数组。
                 如果不是 <see langword="null" />，元素数则必须与 <paramref name="argTypes" /> 相同。
              </param>
      <returns>
              如果找到关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，则为替代数据类型的实例；否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 是 <see langword="null" />，或者，当 <paramref name="argTypes" /> 不是 <see langword="null" /> 时，则 <paramref name="args" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 具有不同的元素数。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
              使用指定的属性名称、类型和属性数组创建属性描述符，并将其动态地绑定到类型。
            </summary>
      <param name="componentType">
                属性是其一个成员的组件的 <see cref="T:System.Type" />。
              </param>
      <param name="name">
                属性的名称。
              </param>
      <param name="type">
                属性的 <see cref="T:System.Type" />。
              </param>
      <param name="attributes">
                此属性的新特性。
              </param>
      <returns>
              绑定到指定类型并具有与现有元数据属性合并的指定元数据属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>
              使用指定的现有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和特性数组，从现有的属性描述符创建一个新的属性描述符。
            </summary>
      <param name="componentType">
                属性是其一个成员的组件的 <see cref="T:System.Type" />。
              </param>
      <param name="oldPropertyDescriptor">
                现有的属性描述符。
              </param>
      <param name="attributes">
                此属性的新特性。
              </param>
      <returns>
              一个将指定的元数据属性与现有的元数据属性进行合并的新 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>
              返回与指定的主要对象关联的类型的实例。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <param name="primary">
                关联的主要对象。
              </param>
      <returns>
              如果存在关联，则为已与主要对象相关联的辅助类型的一个实例；否则，如果不存在指定的关联，为 <paramref name="primary" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>
              返回指定组件的属性的集合。
            </summary>
      <param name="component">
                要为其获取特性的组件。
              </param>
      <returns>
              包含该组件的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。
               如果 <paramref name="component" /> 为 <see langword="null" />，则此方法返回一个空集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>
              返回指定组件类型的属性集合。
            </summary>
      <param name="componentType">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              具有该组件类型的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。
               如果组件为 <see langword="null" />，则此方法返回一个空集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>
              为指定组件返回特性集合，并且创建了一个指示自定义类型描述符的布尔值。
            </summary>
      <param name="component">
                要为其获取特性的组件。
              </param>
      <param name="noCustomTypeDesc">
                如果 <paramref name="component" /> 的类型是 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，使用自定义类型说明符中特性的基准要求集时为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              具有组件的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。
               如果组件为 <see langword="null" />，则此方法返回一个空集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>
              使用默认类型描述符，返回指定组件的类的名称。
            </summary>
      <param name="component">
                需要其类名的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个包含指定组件的类的名称的 <see cref="T:System.String" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>
              返回指定类型的类的名称。
            </summary>
      <param name="componentType">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" />，其中包含指定组件类型的类的名称。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>
              使用自定义类型描述符返回指定组件的类的名称。
            </summary>
      <param name="component">
                需要其类名的 <see cref="T:System.Object" />。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个包含指定组件的类的名称的 <see cref="T:System.String" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>
              使用默认类型描述符返回指定组件的名称。
            </summary>
      <param name="component">
                需要其类名的 <see cref="T:System.Object" />。
              </param>
      <returns>
              包含指定组件的名称的 <see cref="T:System.String" />，如果没有任何组件名，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>
              使用自定义类型描述符返回指定组件的名称。
            </summary>
      <param name="component">
                需要其类名的 <see cref="T:System.Object" />。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              为指定组件的类名，或者，如果不存在任何组件名，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>
              返回指定组件类型的类型转换器。
            </summary>
      <param name="component">
                要为其获取转换器的组件。
              </param>
      <returns>
              指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>
              返回指定类型的类型转换器。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>
              为具有自定义类型描述符的指定组件类型返回一个类型转换器。
            </summary>
      <param name="component">
                要为其获取转换器的组件。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>
              返回指定组件类型的默认事件。
            </summary>
      <param name="componentType">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>
              返回具有自定义类型描述符的组件的默认事件。
            </summary>
      <param name="component">
                要获取其事件的组件。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              带有默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果没有事件，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>
              返回指定组件的默认事件。
            </summary>
      <param name="component">
                要获取其事件的组件。
              </param>
      <returns>
              如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>
              返回指定类型组件的默认属性。
            </summary>
      <param name="componentType">
                表示要获取其属性的类的 <see cref="T:System.Type" />。
              </param>
      <returns>
              具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>
              使用自定义类型描述符返回指定组件的默认属性。
            </summary>
      <param name="component">
                要获取其默认属性的组件。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>
              返回指定组件的默认属性。
            </summary>
      <param name="component">
                要获取其默认属性的组件。
              </param>
      <returns>
              具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>
              获取指定组件的具有指定基类型的编辑器。
            </summary>
      <param name="component">
                要为其获取编辑器的组件。
              </param>
      <param name="editorBaseType">
                表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。
              </param>
      <returns>
              可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>
              返回具有指定基类型的指定类型的编辑器。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <param name="editorBaseType">
                表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。
              </param>
      <returns>
              可转换为指定基类型的编辑器对象的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>
              为指定组件返回具有指定基类型和自定义类型描述符的编辑器。
            </summary>
      <param name="component">
                要为其获取编辑器的组件。
              </param>
      <param name="editorBaseType">
                表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。
              </param>
      <param name="noCustomTypeDesc">
                表示是否应考虑自定义类型描述信息的标志。
              </param>
      <returns>
              可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>
              返回指定组件的事件的集合。
            </summary>
      <param name="component">
                要为其获取事件的组件。
              </param>
      <returns>
              具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>
              返回指定组件类型的事件的集合。
            </summary>
      <param name="componentType">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>
              通过将指定的属性数组用作筛选器来返回指定组件的事件集合。
            </summary>
      <param name="component">
                要为其获取事件的组件。
              </param>
      <param name="attributes">
                可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。
              </param>
      <returns>
              具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>
              对具有自定义类型描述符的指定组件，返回事件集合。
            </summary>
      <param name="component">
                要为其获取事件的组件。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>
              通过将指定的属性数组用作筛选器来返回指定组件类型的事件的集合。
            </summary>
      <param name="componentType">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <param name="attributes">
                可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。
              </param>
      <returns>
              具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>
              通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的事件集合。
            </summary>
      <param name="component">
                要为其获取事件的组件。
              </param>
      <param name="attributes">
                要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。
              </param>
      <param name="noCustomTypeDesc">
                如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。
              </param>
      <returns>
              具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>
              返回组件的完全限定名。
            </summary>
      <param name="component">
                要为其查找名称的 <see cref="T:System.ComponentModel.Component" />。
              </param>
      <returns>
              如果组件没有名称，则为指定组件的完全限定名称，或 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>
              通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的属性集合。
            </summary>
      <param name="component">
                要为其获取属性的组件。
              </param>
      <param name="attributes">
                要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              具有与指定组件的指定属性相匹配的事件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>
              使用默认类型描述符为指定组件返回属性集合。
            </summary>
      <param name="component">
                要为其获取属性的组件。
              </param>
      <param name="noCustomTypeDesc">
                若不考虑自定义类型描述信息时，为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>
              通过将指定的属性数组用作筛选器来为指定类型的组件返回属性的集合。
            </summary>
      <param name="componentType">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <param name="attributes">
                要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有与该类型组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>
              返回指定组件类型的属性的集合。
            </summary>
      <param name="componentType">
                一个 <see cref="T:System.Type" />，表示要为其获取属性的组件。
              </param>
      <returns>
              具有指定组件类型的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>
              返回指定组件的属性的集合。
            </summary>
      <param name="component">
                要为其获取属性的组件。
              </param>
      <returns>
              具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>
              通过将指定的属性数组用作筛选器来返回指定组件的属性的集合。
            </summary>
      <param name="component">
                要为其获取属性的组件。
              </param>
      <param name="attributes">
                要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>
              返回指定组件的类型说明提供程序。
            </summary>
      <param name="instance">
                目标组件的实例。
              </param>
      <returns>
              一个与特定的组件关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>
              返回指定类型的类型说明提供程序。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              与指定类型关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>
              如果给定对象，则返回可用于执行反射的 <see cref="T:System.Type" />。
            </summary>
      <param name="instance">
                目标组件的实例。
              </param>
      <returns>
              所指定对象的 <see cref="T:System.Type" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>
              如果给定类类型，则返回可用于执行反射的 <see cref="T:System.Type" />。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <returns>
              指定类的 <see cref="T:System.Type" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>
              获取一个类型，它表示所有接口类型的类型说明提供程序。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" />，它表示所有接口类型的自定义类型说明提供程序。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>
              从缓存中清除指定类型的组件的属性和事件。
            </summary>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>
              从缓存中清除指定模块的属性和事件。
            </summary>
      <param name="module">
                表示要刷新的模块的 <see cref="T:System.Reflection.Module" />。
                 将刷新此模块中的每个 <see cref="T:System.Type" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>
              从缓存中清除指定组件的属性和事件。
            </summary>
      <param name="component">
                已更改属性或事件的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>
              从缓存中清除指定程序集的属性和事件。
            </summary>
      <param name="assembly">
                表示要刷新的程序集的 <see cref="T:System.Reflection.Assembly" />。
                 将刷新此程序集中的每个 <see cref="T:System.Type" />。
              </param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>
              清除了组件的缓存时发生。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>
              删除两个对象之间的关联。
            </summary>
      <param name="primary">
                主要 <see cref="T:System.Object" />。
              </param>
      <param name="secondary">
                辅助 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>
              删除主要对象的所有关联。
            </summary>
      <param name="primary">
                关联中的主要 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>
              移除以前添加的与指定对象关联的类型说明提供程序。
            </summary>
      <param name="provider">
                要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="instance">
                目标组件的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>
              删除以前添加的与指定类型关联的类型说明提供程序。
            </summary>
      <param name="provider">
                要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>
              删除以前添加的与指定类型关联的类型说明提供程序。
            </summary>
      <param name="provider">
                要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="type">
                目标组件的 <see cref="T:System.Type" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>
              移除以前添加的与指定对象关联的类型说明提供程序。
            </summary>
      <param name="provider">
                要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。
              </param>
      <param name="instance">
                目标组件的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  两个参数之一或两个参数均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>
              使用描述符的名称对描述符排序。
            </summary>
      <param name="infos">
                一个 <see cref="T:System.Collections.IList" />，其中包含要排序的描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>
              提供可用于在列表框中填充可用类型的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 类用作可用类型的类型数组。
            </summary>
      <param name="types">
                类型的数组 <see cref="T:System.Type" /> 要用作可用的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以转换指定 <see cref="T:System.Type" /> 使用给定的上下文的源对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
        <see cref="T:System.Type" /> 的源对象。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定的对象转换为该转换器的本机类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定用于表示该字体的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的目标类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取此验证程序所面向的数据类型的标准值集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法为独占列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的穷举列表。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持可以从使用指定的上下文的列表中选取的值的标准集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 应调用以查找一组公共对象支持的值。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>
              提供用于在 16 位无符号整数对象与其他表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>
              提供用于在 32 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>
              提供用于在 64 位无符号整数对象与其他表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>
              指定作为警告而不是错误处理的异常。
            </summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 类，具有指定的消息和不带帮助文件。
            </summary>
      <param name="message">
                要向最终用户显示的消息。
              </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。
              </param>
      <param name="context">
                要用于反序列化的目标。
              </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 带有指定的详细的说明和指定的异常类。
            </summary>
      <param name="message">
                错误的详细的说明。
              </param>
      <param name="innerException">
                对导致此异常的内部异常的引用。
              </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 类使用指定的消息，并有权访问指定的帮助文件。
            </summary>
      <param name="message">
                要向最终用户显示的消息。
              </param>
      <param name="helpUrl">
                当用户请求帮助时显示的帮助文件。
              </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 类使用指定的消息，并有权访问指定的帮助文件和主题。
            </summary>
      <param name="message">
                要向最终用户显示的消息。
              </param>
      <param name="helpUrl">
                当用户请求帮助时显示的帮助文件。
              </param>
      <param name="helpTopic">
                当用户请求帮助时显示的帮助主题。
              </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 参数名称和附加异常信息。
            </summary>
      <param name="info">
                将正在用于序列化或反序列化对象数据存储， <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 已序列化或反序列化。
              </param>
      <param name="context">
                描述源和生成异常，以及序列化可以保留该上下文和调用方定义的附加上下文的一种方法的流的目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>
              获取与警告关联的帮助主题。
            </summary>
      <returns>
              与警告关联的帮助主题。
            </returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>
              获取与该警告关联的帮助文件。
            </summary>
      <returns>
              与警告关联的帮助文件。
            </returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <see cref="T:System.Drawing.SizeConverter" /> 类用于从一种数据类型转换到另一个。
               访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 对象。
            </summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>
              初始化新的 <see cref="T:System.Drawing.SizeConverter" /> 对象。
            </summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定此转换器是否可以将指定的源类型的对象转换为该转换器的本机类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用来获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="sourceType">
                您想要将从转换的类型。
              </param>
      <returns>
              此方法返回 <see langword="true" /> 如果此对象可以执行转换。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用来获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此总是需要检查。
                 同样，context 对象的属性可以返回 <see langword="null" />。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" />，表示你希望转换为的类型。
              </param>
      <returns>
              此方法返回 <see langword="true" /> 如果该转换器能够执行转换; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定的对象转换为转换器的本机类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用来获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
                 它基于 RFC 1766 标准。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法完成转换。
                </exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将指定的对象转换成指定的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用来获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
                 它基于 RFC 1766 标准。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法完成转换。
                </exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
              为该对象使用一组指定的属性值创建此类型的对象。
               这可用于创建具有可更改属性的非可更改对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <param name="propertyValues">
                新属性值的字典。
                 字典中包含一系列名称 / 值对，一个用于每个属性返回从 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法。
              </param>
      <returns>
              新创建的对象，或 <see langword="null" /> 如果无法创建该对象。
               默认实现返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定是否更改此对象上的某个值是否需要对调用 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法来创建一个新值。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 对此对象的一个或多个属性进行更改时，应调用对象。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              检索此类型的属性集。
               默认情况下，一种类型没有要返回的任何属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <param name="value">
                要获取的属性的对象的值。
              </param>
      <param name="attributes">
                一个数组 <see cref="T:System.Attribute" /> 描述属性的对象。
              </param>
      <returns>
              此数据类型不应公开的属性集。
               如果应公开任何属性，这可能会返回 <see langword="null" />。
               默认实现始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定此对象是否支持属性。
               默认情况下，这是 <see langword="false" />。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 应调用方法来查找此对象的属性。
            </returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>
              将转换 <see cref="T:System.Drawing.SizeF" /> 从一种类型到另一个对象。
            </summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Drawing.SizeFConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回一个值，该值指示该转换器可以转换到指定的类型 <see cref="T:System.Drawing.SizeF" /> 类型，使用指定的上下文。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可提供通过哪些其他上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> 表示您希望从转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果该转换可执行;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Drawing.SizeFConverter" /> 可转换 <see cref="T:System.Drawing.SizeF" /> 为指定的类型。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可提供通过哪些其他上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果该转换器能够执行转换，否则 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              使用指定的上下文和区域性信息将给定值对象转换为指定的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
                 如果传递 null，则采用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
                值参数所要转换成的 <see cref="T:System.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
              创建的一个实例 <see cref="T:System.Drawing.SizeF" /> 具有使用指定的上下文的指定的属性值。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可提供通过哪些其他上下文。
              </param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> 包含属性名称和值。
              </param>
      <returns>
        <see cref="T:System.Object" /> 表示新 <see cref="T:System.Drawing.SizeF" />, ，或 <see langword="null" /> 如果不能创建该对象。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              返回一个值，该值指示是否更改此对象的值需要调用 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 方法来创建一个新值。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
                 这可能是 <see langword="null" />。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              检索属性的一组 <see cref="T:System.Drawing.SizeF" /> 类型使用指定的上下文和属性。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可提供通过哪些其他上下文。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> 要返回的属性。
              </param>
      <param name="attributes">
                一个数组 <see cref="T:System.Attribute" /> 描述属性的对象。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含的属性。
            </returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              返回是否 <see cref="T:System.Drawing.SizeF" /> 类型支持属性。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可提供通过哪些其他上下文。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类表示服务器用来验证传入客户端连接的扩展的保护策略的类型转换器。
            </summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器是否可以将对象转换为指定的类型。
            </summary>
      <param name="context">
                要转换的对象。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" />，表示你希望转换为的类型。
              </param>
      <returns>
        <see langword="true" /> 如果该转换器能够执行转换，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将对象转换为指定的类型
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> 对象。
                 如果传递 <see langword="null" />，则采用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
                 这应该是 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象。
              </param>
      <param name="destinationType">
                值参数所要转换成的 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  无法执行转换。
                </exception>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>
              设置在引用事件、 扩展程序或属性时，可视化设计器可以显示的说明。
            </summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 类的新实例。
            </summary>
      <param name="description">
                要使用的说明。
              </param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>
              获取在引用事件、 扩展程序或属性时，可视化设计器可以显示的说明。
            </summary>
      <returns>
              对事件、 扩展程序或属性的说明。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>
              封装零个或多个组件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Container" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>
              添加指定 <see cref="T:System.ComponentModel.Component" /> 到 <see cref="T:System.ComponentModel.Container" />。
               该组件未命名。
            </summary>
      <param name="component">
                要添加的组件。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>
              添加指定 <see cref="T:System.ComponentModel.Component" /> 到 <see cref="T:System.ComponentModel.Container" /> 并将其分配一个名称。
            </summary>
      <param name="component">
                要添加的组件。
              </param>
      <param name="name">
                要将分配给该组件的唯一的、 不区分大小写名称。
              
                - 或 - 
              
                <see langword="null" />, 它使未命名的组件。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>
              获取所有组件中 <see cref="T:System.ComponentModel.Container" />。
            </summary>
      <returns>
              一个包含中的组件集合 <see cref="T:System.ComponentModel.Container" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>
              创建一个网站 <see cref="T:System.ComponentModel.ISite" /> 为给定 <see cref="T:System.ComponentModel.IComponent" /> 和给定名称分配给该站点。
            </summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 若要创建一个站点。
              </param>
      <param name="name">
                要分配给名称 <paramref name="component" />, ，或 <see langword="null" /> 要跳过分配名称。
              </param>
      <returns>
              新创建的站点。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Container" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Container" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>
              在通过垃圾回收将 <see cref="T:System.ComponentModel.Container" /> 回收之前，释放非托管资源并执行其他清理操作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>
              获取指定类型的服务对象（如果可用）。
            </summary>
      <param name="service">
                要检索的服务的 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> 实现所请求的服务，或 <see langword="null" /> 如果无法解析服务。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>
              中删除来自组件 <see cref="T:System.ComponentModel.Container" />。
            </summary>
      <param name="component">
                要删除的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>
              中删除来自组件 <see cref="T:System.ComponentModel.Container" /> 没有设置 <see cref="P:System.ComponentModel.IComponent.Site" /> 到 <see langword="null" />。
            </summary>
      <param name="component">
                要删除的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>
              确定是否为此容器的唯一组件名称。
            </summary>
      <param name="component">
                命名的组件。
              </param>
      <param name="name">
                要验证的组件名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。
                </exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>
              容器筛选器服务提供基类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>
              筛选组件集合。
            </summary>
      <param name="components">
                要筛选的组件集合。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.ComponentCollection" /> ，它表示已修改的集合。
            </returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.Globalization.CultureInfo" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以转换为给定的源类型的对象 <see cref="T:System.Globalization.CultureInfo" /> 使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定的值转换为 <see cref="T:System.Globalization.CultureInfo" />。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要转换为的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定不是有效的区域性。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的目标类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要转换为的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>
              检索指定的区域性的名称。
            </summary>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要获取其名称的区域性。
              </param>
      <returns>
              指定的区域性的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取的标准值的集合 <see cref="T:System.Globalization.CultureInfo" /> 对象使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 包含一组标准的有效的值或 <see langword="null" /> 如果数据类型不支持标准值集。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是一个详尽的列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="false" /> 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 不是可能的值的穷举列表 （即，其他个可能的值）。
               此方法从不返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持可以从使用指定的上下文的列表中选取的值的标准集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 应调用以查找一组公共对象支持的值。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>
              提供的简单的默认实现 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类使用父自定义类型描述符。
            </summary>
      <param name="parent">
                父自定义类型描述符。
              </param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>
              返回表示此类型描述符的类型的自定义特性的集合。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> 包含类型的特性。
               默认值为 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>
              返回由此类型描述符表示的类的完全限定名。
            </summary>
      <returns>
              包含此类型描述符所描述类型的完全限定类名的 <see cref="T:System.String" />。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>
              返回表示此类型描述符的类的名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含描述此类型描述符的组件实例的名称。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>
              返回表示此类型描述符的类型的类型转换器。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter" /> 表示通过此类型描述符的类型。
               默认值是新创建 <see cref="T:System.ComponentModel.TypeConverter" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>
              返回表示此类型描述符的对象的默认事件的事件描述符。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示通过此类型描述符的对象上的默认事件。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>
              返回表示此类型描述符的对象的默认属性的属性描述符。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示通过此类型描述符的对象上的默认属性。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>
              返回指定要与此类型说明符表示的类关联的类型的编辑器。
            </summary>
      <param name="editorBaseType">
                要检索的编辑器的基类型。
              </param>
      <returns>
              要与此类型说明符表示的类相关联的给定类型编辑器。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>
              返回表示此类型描述符的对象的事件描述符的集合。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 包含表示此类型描述符的对象的事件描述符。
               默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>
              返回经过筛选的事件描述符表示此类型描述符的对象的集合。
            </summary>
      <param name="attributes">
                要作为筛选器使用的特性数组。
                 这可能是 <see langword="null" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 包含表示此类型描述符的对象的事件描述。
               默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>
              返回表示此类型描述符的对象的属性描述符的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含表示此类型描述符的对象的属性说明。
               默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>
              返回经过筛选的此类型说明符所表示的对象的属性说明符集合。
            </summary>
      <param name="attributes">
                要作为筛选器使用的特性数组。
                 这可能是 <see langword="null" />。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含表示此类型描述符的对象的属性说明。
               默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回一个对象，该对象包含指定的属性描述符所描述的属性。
            </summary>
      <param name="pd">
                若要检索其所属对象属性描述符。
              </param>
      <returns>
        <see cref="T:System.Object" /> 拥有给定指定的类型描述符的属性。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>
              提供可以扩展以支持从序列化状态加载设计器宿主的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>
              结束设计器加载操作。
            </summary>
      <param name="baseClassName">
                此设计器设计的文档的基类完全限定的名称。
              </param>
      <param name="successful">
        <see langword="true" /> 如果设计器已成功加载;否则为 <see langword="false" />。
              </param>
      <param name="errorCollection">
                如果有包含在加载期间，遇到的错误的集合。
                 如果没有遇到任何错误，将传递空集合或 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>
              重新加载设计文档。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>
              提供了一个接口来扩展 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 来指定是否允许加载设计文档时发生错误。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>
              获取或设置一个值，该值指示是否可以重新加载错误。
            </summary>
      <returns>
        <see langword="true" /> 如果设计器加载程序可以检测到错误后，重新加载设计文档否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>
              获取或设置一个值，该值指示是否应将错误忽略时 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 调用。
            </summary>
      <returns>
        <see langword="true" /> 如果重新加载; 时，设计器加载程序将忽略错误否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>
              提供可以扩展设计器的加载程序，以支持异步加载的外部组件的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>
              将外部组件注册为管理此接口的加载过程的一部分。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>
              依赖加载已完成的信号。
            </summary>
      <param name="successful">
        <see langword="true" /> 如果成功，则设计器的负载 <see langword="false" /> 如果错误阻止从加载完成。
              </param>
      <param name="errorCollection">
                如果有的话，在加载期间，发生的错误的集合。
                 如果不发生任何错误，将传递空集合或 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>
              重新加载设计文档。
            </summary>
      <returns>
        <see langword="true" /> 如果重新加载请求被接受，或 <see langword="false" /> 如果加载程序不允许重新加载。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>
              提供可管理设计时序列化的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>
              向序列化管理器添加指定的序列化提供程序。
            </summary>
      <param name="provider">
                要添加的序列化提供程序。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>
              获取基于堆栈的、用户定义的存储区域，该区域对于序列化程序之间的通信十分有用。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 存储数据。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>
              创建指定类型的实例并将其添加到已命名实例的集合中。
            </summary>
      <param name="type">
                要创建的数据类型。
              </param>
      <param name="arguments">
                要为此类型传递给构造函数的参数。
              </param>
      <param name="name">
                对象的名称。
                 此名称可用于以后通过 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> 访问该对象。
                 如果 <see langword="null" /> 是传递，该对象仍会创建，但不能通过名称访问。
              </param>
      <param name="addToContainer">
                如果 <see langword="true" />, ，该对象添加到设计容器。
                 该对象必须实现 <see cref="T:System.ComponentModel.IComponent" /> 才能使此功能生效。
              </param>
      <returns>
              新创建的对象实例。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>
              获取指定的名称，创建对象的实例或 <see langword="null" /> 如果该对象不存在。
            </summary>
      <param name="name">
                要检索的对象的名称。
              </param>
      <returns>
              具有给定名称的对象的实例或 <see langword="null" /> 如果找不到该名称没有任何对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>
              获取指定对象的名称或 <see langword="null" /> 如果对象没有名称。
            </summary>
      <param name="value">
                要检索其名称的对象。
              </param>
      <returns>
              该对象的名称或 <see langword="null" /> 如果对象是未命名。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>
              获取指定的对象类型所请求类型的序列化程序。
            </summary>
      <param name="objectType">
                要获取的序列化程序的对象的类型。
              </param>
      <param name="serializerType">
                若要检索的序列化程序的类型。
              </param>
      <returns>
              请求的序列化的实例或 <see langword="null" /> 如果没有适当的序列化程序可以为所在。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>
              获取具有指定名称的类型。
            </summary>
      <param name="typeName">
                要加载的类型的完全限定的名称。
              </param>
      <returns>
              该类型的实例或 <see langword="null" /> 如果不能加载该类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>
              指示可通过可用序列化程序可序列化的自定义属性。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含要进行序列化的属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>
              从序列化管理器移除自定义的序列化提供程序。
            </summary>
      <param name="provider">
                要移除的提供程序。
                 此对象必须已将添加使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>
              报告序列化中的错误。
            </summary>
      <param name="errorInformation">
                要报告的错误。
                 此信息对象可以是任何对象类型。
                 如果它是一个异常，则将提取该异常的消息并报告给用户。
                 如果它是任何其他类型，则将调用 <see cref="M:System.Object.ToString" />，向用户显示该信息。
              </param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>
              当 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 无法在序列化管理器的名称表中找到指定名称时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>
              在序列化完成时发生。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>
              设置指定的现有对象的名称。
            </summary>
      <param name="instance">
                为名称的对象实例。
              </param>
      <param name="name">
                要为实例指定的名称。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>
              提供了一个接口，使一个序列化程序的访问。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>
              获取使用指定的特性的序列化程序。
            </summary>
      <param name="manager">
                序列化管理器请求序列化程序。
              </param>
      <param name="currentSerializer">
                当前序列化指定类型的一个实例。
                 这可能是 <see langword="null" /> 如果没有指定类型的序列化程序存在。
              </param>
      <param name="objectType">
                要序列化对象数据类型。
              </param>
      <param name="serializerType">
                若要创建的序列化程序的数据类型。
              </param>
      <returns>
              序列化程序的请求，该类型的实例或 <see langword="null" /> 如果无法满足请求。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>
              提供可调用序列化和反序列化的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>
              反序列化指定的序列化数据对象，并返回由该数据表示的对象的集合。
            </summary>
      <param name="serializationData">
                一个由组成的序列化数据的对象。
              </param>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 重新生成指定的序列化数据对象中的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>
              序列化指定的对象的集合，并将它们存储在序列化数据对象。
            </summary>
      <param name="objects">
                要序列化的对象集合。
              </param>
      <returns>
              一个包含指定的对象集合的序列化的状态对象。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>
              提供了一种服务，可以生成对象的唯一名称。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>
              创建对指定的容器中的所有组件是唯一的新名称。
            </summary>
      <param name="container">
                添加新对象的位置的容器。
              </param>
      <param name="dataType">
                接收该名称的对象数据类型。
              </param>
      <returns>
              数据类型为唯一的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>
              获取一个值，该值指示指定的名称是否有效。
            </summary>
      <param name="name">
                要验证的名称。
              </param>
      <returns>
        <see langword="true" /> 如果该名称是否有效;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>
              获取一个值，该值指示指定的名称是否有效。
            </summary>
      <param name="name">
                要验证的名称。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>
              提供创建对象的实例所需的信息。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类使用指定的成员信息和参数。
            </summary>
      <param name="member">
                描述符成员信息。
                 这可能是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.ConstructorInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />。
                 如果这是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，则它必须表示 <see langword="static" /> 成员。
              </param>
      <param name="arguments">
                要传递给成员的参数集合。
                 此参数可以为 <see langword="null" /> 或是否存在任何参数为空集合。
                 该集合也可以包括的其他实例的 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，并不表示 <see langword="static" /> 成员。
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.PropertyInfo" /> 和不可读。
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />, ，和中的参数数目 <paramref name="arguments" /> 的签名不匹配 <paramref name="member." /><paramref name="member" /> 类型 <see cref="T:System.Reflection.ConstructorInfo" /> 和表示 <see langword="static" /> 成员。
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.FieldInfo" />, ，和中的参数数目 <paramref name="arguments" /> 是否不为零。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类使用指定的成员信息、 参数和值，该值指示是否指定的信息完全描述该实例。
            </summary>
      <param name="member">
                描述符成员信息。
                 这可能是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.ConstructorInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />。
                 如果这是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，则它必须表示 <see langword="static" /> 成员。
              </param>
      <param name="arguments">
                要传递给成员的参数集合。
                 此参数可以为 <see langword="null" /> 或是否存在任何参数为空集合。
                 该集合也可以包括的其他实例的 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />。
              </param>
      <param name="isComplete">
        <see langword="true" /> 如果指定的信息完全描述该实例;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，并不表示 <see langword="static" /> 成员
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.PropertyInfo" /> 和不可读。
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" /> 和中的参数数目 <paramref name="arguments" /> 的签名不匹配 <paramref name="member" />。
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.ConstructorInfo" /> 和表示 <see langword="static" /> 成员
                
                  <paramref name="member" /> 类型 <see cref="T:System.Reflection.FieldInfo" />, ，和中的参数数目 <paramref name="arguments" /> 是否不为零。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>
              获取可用于重新构造此实例说明符所表示的对象的实例的参数的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 的可用来创建对象的参数。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>
              调用此实例说明符，并返回对象的描述符描述。
            </summary>
      <returns>
              此实例说明符所描述对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>
              获取一个值，该值指示是否此内容 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 完全标识该实例。
            </summary>
      <returns>
        <see langword="true" /> 如果完全描述该实例;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>
              获取描述此说明符程序与该实例的成员信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Reflection.MemberInfo" /> 描述此对象与之关联的实例。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>
              表示一个对象和成员之间的单一关系。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 类的新实例。
            </summary>
      <param name="owner">
                拥有的对象 <paramref name="member" />。
              </param>
      <param name="member">
                这是要与相关成员 <paramref name="owner" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 或 <paramref name="member" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>
              表示空成员关系。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 实例是否相等。
            </summary>
      <param name="obj">
                要与当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 进行比较的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />，则为 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>
              获取一个值，该值指示此关系是否等于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系。
            </summary>
      <returns>
        <see langword="true" /> 如果这种关系是等于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>
              获取相关的成员。
            </summary>
      <returns>
              在传递到该成员 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>
              测试两个指定 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否等效。
            </summary>
      <param name="left">
                相等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。
              </param>
      <param name="right">
                相等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。
              </param>
      <returns>
              此运算符可返回 <see langword="true" /> 如果两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>
              测试两个指定 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同。
            </summary>
      <param name="left">
                不等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。
              </param>
      <param name="right">
                不等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。
              </param>
      <returns>
              此运算符可返回 <see langword="true" /> 如果两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>
              获取拥有的对象。
            </summary>
      <returns>
              在传递到所属对象 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>
              为一个成员与另一个提供基本类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>
              获取与给定的源关系的关系。
            </summary>
      <param name="source">
                源关系。
              </param>
      <returns>
              与关系 <paramref name="source" />, ，或 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 如果不存在关系。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>
              建立源和目标对象之间的关系。
            </summary>
      <param name="source">
                源关系。
                 这是关系赋值的左侧。
              </param>
      <returns>
              与相关联的当前关系 <paramref name="source" />, ，或 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 如果没有任何关系。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为空，或者服务不支持关系。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
              建立源和目标对象之间的关系。
            </summary>
      <param name="sourceOwner">
                源关系的所有者。
              </param>
      <param name="sourceMember">
                源关系的成员。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 封装源和目标对象之间的关系的结构或 <see langword="null" /> 如果没有任何关系。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为空，或者服务不支持关系。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>
              创建源对象和目标关系之间的关系。
            </summary>
      <param name="source">
                源关系。
              </param>
      <param name="relationship">
                要设置到源的关系。
              </param>
      <exception cref="T:System.ArgumentException">
                  该服务不支持关系。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>
              获取一个值，该值指示是否支持给定的关系。
            </summary>
      <param name="source">
                源关系。
              </param>
      <param name="relationship">
                要设置到源的关系。
              </param>
      <returns>
        <see langword="true" /> 如果支持给定的两个对象之间的关系;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 类的新实例。
            </summary>
      <param name="name">
                要解析的名称。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>
              获取要解析的对象的名称。
            </summary>
      <returns>
              要解析的对象的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>
              获取或设置与名称匹配的对象。
            </summary>
      <returns>
              对象，该对象具有关联的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的序列化管理器。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />  包含事件数据。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>
              指示要用于根设计器对象的基序列化程序。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类使用指定的属性。
            </summary>
      <param name="serializerTypeName">
                数据类型的序列化程序完全限定的名称。
              </param>
      <param name="baseSerializerTypeName">
                序列化程序的基类型的名称。
                 一个类可以包含多个序列化程序，因为它们具有不同的基类型。
              </param>
      <param name="reloadable">
        <see langword="true" /> 如果此序列化程序支持动态重新加载文档;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类使用指定的属性。
            </summary>
      <param name="serializerTypeName">
                数据类型的序列化程序完全限定的名称。
              </param>
      <param name="baseSerializerType">
                序列化程序的基类型的名称。
                 一个类可以包含多个序列化程序，因为它们具有不同的基类型。
              </param>
      <param name="reloadable">
        <see langword="true" /> 如果此序列化程序支持动态重新加载文档;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类使用指定的属性。
            </summary>
      <param name="serializerType">
                序列化程序的数据类型。
              </param>
      <param name="baseSerializerType">
                序列化程序的基类型。
                 一个类可以包含多个序列化程序，因为它们具有不同的基类型。
              </param>
      <param name="reloadable">
        <see langword="true" /> 如果此序列化程序支持动态重新加载文档;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>
              获取一个值，该值指示根序列化程序是否支持重新加载设计文档而无需首先释放设计器宿主。
            </summary>
      <returns>
        <see langword="true" /> 如果根序列化程序支持重新加载;，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>
              获取序列化程序的基类型的完全限定的类型名称。
            </summary>
      <returns>
              序列化程序的基类型的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>
              获取序列化程序的完全限定的类型名称。
            </summary>
      <returns>
              序列化程序类型的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>
              获取此特性类型的唯一 ID。
            </summary>
      <returns>
              包含此特性类型的唯一 ID 的对象。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>
              提供用于存储序列化数据的类的基类 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>
              关闭序列化存储区。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>
              获取序列化或反序列化期间发生的错误的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> ，它包含序列化或反序列化过程中发生的错误。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>
              将存储保存到给定的流。
            </summary>
      <param name="stream">
                存储区将序列化到流。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 使用的所有资源。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>
              提供的简单实现 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 接口。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类使用指定的父对象服务提供程序。
            </summary>
      <param name="parentProvider">
                父服务提供程序。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>
              将指定的服务添加到服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="callback">
                一个可创建该服务的回调对象。
                 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  类型的服务 <paramref name="serviceType" /> 容器中已存在。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>
              将指定的服务添加到服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="serviceInstance">
                要添加的服务实例。
                 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  类型的服务 <paramref name="serviceType" /> 容器中已存在。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>
              将指定的服务添加到服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="callback">
                一个可创建该服务的回调对象。
                 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。
              </param>
      <param name="promote">
        <see langword="true" /> 如果此服务应添加到任何父级服务容器;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  类型的服务 <paramref name="serviceType" /> 容器中已存在。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>
              将指定的服务添加到服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="serviceInstance">
                要添加的服务类型的实例。
                 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。
              </param>
      <param name="promote">
        <see langword="true" /> 如果此服务应添加到任何父级服务容器;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  类型的服务 <paramref name="serviceType" /> 容器中已存在。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>
              获取默认服务直接通过实现 <see cref="T:System.ComponentModel.Design.ServiceContainer" />。
            </summary>
      <returns>
              默认服务。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>
              释放此服务容器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>
              释放此服务容器。
            </summary>
      <param name="disposing">
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 正在释放; 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>
              获取请求的服务。
            </summary>
      <param name="serviceType">
                要检索的服务类型。
              </param>
      <returns>
              如果它找不到，该服务的实例或 <see langword="null" /> 如果无法找到。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>
              从服务容器中移除指定的服务类型。
            </summary>
      <param name="serviceType">
                要移除的服务类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>
              从服务容器中移除指定的服务类型。
            </summary>
      <param name="serviceType">
                要移除的服务类型。
              </param>
      <param name="promote">
        <see langword="true" /> 如果此服务应从任何父级服务容器;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>
              提供了一种回调机制，则可以按需创建服务的实例。
            </summary>
      <param name="container">
                请求的服务创建服务容器。
              </param>
      <param name="serviceType">
                要创建的服务类型。
              </param>
      <returns>
              通过指定的服务 <paramref name="serviceType" />, ，或 <see langword="null" /> 如果无法创建该服务。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>
              定义可供大多数应用程序的命令的标准集的标识符。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 类的新实例。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignBottom 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignHorizontalCenters 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignLeft 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignRight 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignToGrid 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignTop 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignVerticalCenters 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ArrangeBottom 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ArrangeIcons 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ArrangeRight 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> BringForward 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> BringToFront 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> CenterHorizontally 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> CenterVertically 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 的复制命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为剪切命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 执行删除命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为文档大纲命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> f1 帮助命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 组命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>
              获取<see cref="T:System.ComponentModel.Design.CommandID" />HorizSpaceConcatenate 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceDecrease 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceIncrease 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceMakeEqual 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> LineupIcons 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> LockControls 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> MultiLevelRedo 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> MultiLevelUndo 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为粘贴命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 的属性命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> PropertiesWindow 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 重做命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为替换命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 全选命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SendBackward 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SendToBack 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ShowGrid 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ShowLargeIcons 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToControl 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToControlHeight 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToControlWidth 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToFit 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToGrid 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 网格线对齐命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> TabOrder 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 的撤消命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 取消组合的命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>
              获取一组谓词的第一个。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>
              获取的最后一组谓词。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceConcatenate 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceDecrease 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceIncrease 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceMakeEqual 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ViewCode 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>
              获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ViewGrid 命令。
               此字段为只读。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>
              定义在设计环境中可用的工具窗口的标准集相对应的 GUID 标识符。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 类的新实例。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>
              对象浏览器中获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>
              对于输出窗口获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>
              解决方案资源管理器中获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>
              对于属性窗口获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>
              相关的链接框架获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>
              服务器资源管理器中获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>
              对于任务列表中获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>
              工具箱中获取的 GUID。
               此字段为只读。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>
              为指定类型提供类型说明提供程序。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>
              获取指定对象的类型说明提供程序。
            </summary>
      <param name="instance">
                要获取的类型说明提供程序的对象。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 对应于 <paramref name="instance" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>
              获取指定类型的类型说明提供程序。
            </summary>
      <param name="type">
                要获取的类型说明提供程序的类型。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 对应于 <paramref name="type" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>
              定义一组设计器的主机支持的技术的标识符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>
              指定默认的视图技术支持。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>
              表示在其中的视图对象直接传递给开发环境的模式。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>
              表示在 Windows 窗体控件对象所提供的根设计器的显示模式。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>
              指定用于实现组件的设计时服务的类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类使用的类型提供设计时服务的名称。
            </summary>
      <param name="designerTypeName">
                提供此属性的组件的设计时服务的类型的完全限定名称的串联绑定到和这种类型驻留的程序集的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类提供设计时服务的类型。
            </summary>
      <param name="designerType">
                一个 <see cref="T:System.Type" /> 表示的提供此属性的组件的设计时服务的类的绑定到。
              </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类设计器中使用的设计器类型和类的基类。
            </summary>
      <param name="designerTypeName">
                提供此属性的组件的设计时服务的类型的完全限定名称的串联绑定到和这种类型驻留的程序集的名称。
              </param>
      <param name="designerBaseTypeName">
                要与设计器类关联的基本类的完全限定的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类，使用设计器设计器类和基类的名称。
            </summary>
      <param name="designerTypeName">
                提供此属性的组件的设计时服务的类型的完全限定名称的串联绑定到和这种类型驻留的程序集的名称。
              </param>
      <param name="designerBaseType">
                一个 <see cref="T:System.Type" /> ，它表示要与关联的基类 <paramref name="designerTypeName" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类使用设计器和设计器基类的类型。
            </summary>
      <param name="designerType">
                一个 <see cref="T:System.Type" /> 表示的提供此属性的组件的设计时服务的类的绑定到。
              </param>
      <param name="designerBaseType">
                一个 <see cref="T:System.Type" /> ，它表示要与关联的基类 <paramref name="designerType" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>
              获取此设计器的基类型的名称。
            </summary>
      <returns>
              此设计器的基类型的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>
              获取与此设计器的属性关联的设计器类型的名称。
            </summary>
      <returns>
              与此设计器的属性关联的设计器类型的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DesignerAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 如果给定对象的值是否等于当前;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>
              获取此特性类型的唯一 ID。
            </summary>
      <returns>
              此属性类型的唯一 ID。
            </returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>
              为 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类不使用任何参数。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类为新项使用指定的对象。
            </summary>
      <param name="newObject">
        <see cref="T:System.Object" /> 要用作新项的值。
              </param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>
              获取或设置要添加到绑定列表的对象。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 要作为新项添加到关联的集合。
            </returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。
            </summary>
      <param name="sender">
                该事件，通常是数据容器或数据绑定集合的源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>
              指定要传递给属性以使该属性用于从其他来源获取其值的值。
               这称为 ︰ 氛围。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，其值提供一个布尔值。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，一个 8 位无符号的整数的值提供的。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，其值提供一个 Unicode 字符。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，双精度浮点数的值提供的。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，16 位有符号的整数的值提供的。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，32 位有符号的整数的值提供的。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，64 位有符号的整数的值提供的。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，给定对象作为其值。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，单精度浮点数的值提供的。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，其值为给定的字符串。
            </summary>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，给定的值，其类型。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 的 <paramref name="value" /> 参数。
              </param>
      <param name="value">
                此属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>
              确定指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等同于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。
            </summary>
      <param name="obj">
                要与当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />，则为 <see cref="T:System.ComponentModel.AmbientValueAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>
              获取此值的对象 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。
            </summary>
      <returns>
              此值的对象 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.Array" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的目标类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                到的区域性 <paramref name="value" /> 将被转换。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              获取由值参数指定的数组类型的属性的集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的数组类型。
              </param>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 与数组中，公开的属性或 <see langword="null" /> 是否存在任何属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 应调用来查找此对象的属性。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>
              表示特性的集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>
              初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。
            </summary>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> 提供此集合的特性。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>
              获取属性集合。
            </summary>
      <returns>
              特性集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>
              确定该特性集合是否具有指定的属性。
            </summary>
      <param name="attribute">
        <see cref="T:System.Attribute" /> 要在集合中查找。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含的属性或类型的属性，则默认属性否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>
              确定此属性集合是否包含的特性数组中的所有指定的属性。
            </summary>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> 要在集合中查找。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含所有属性;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将集合复制到一个数组中指定索引处开始。
            </summary>
      <param name="array">
                要将集合复制到的 <see cref="T:System.Array" />。
              </param>
      <param name="index">
                从其开始的索引。
              </param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>
              获取属性的数目。
            </summary>
      <returns>
              属性数目。
            </returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>
              指定可以使用一个空集合，而不是创建一个新。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>
              创建一个新 <see cref="T:System.ComponentModel.AttributeCollection" /> 从现有 <see cref="T:System.ComponentModel.AttributeCollection" />。
            </summary>
      <param name="existing">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 从中创建副本。
              </param>
      <param name="newAttributes">
                类型的数组 <see cref="T:System.Attribute" /> 提供此集合的特性。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              一个新 <see cref="T:System.ComponentModel.AttributeCollection" /> ，它是一份 <paramref name="existing" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>
              返回的默认 <see cref="T:System.Attribute" /> 的给定 <see cref="T:System.Type" />。
            </summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> 要检索的属性。
              </param>
      <returns>
              默认值 <see cref="T:System.Attribute" /> 的给定 <paramref name="attributeType" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>
              获取此集合的枚举器。
            </summary>
      <returns>
              类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>
              获取具有指定的索引号的特性。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.ComponentModel.AttributeCollection" />。
              </param>
      <returns>
        <see cref="T:System.Attribute" /> 具有指定的索引号。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>
              获取具有指定类型的属性。
            </summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> 的 <see cref="T:System.Attribute" /> 若要从集合中获取。
              </param>
      <returns>
        <see cref="T:System.Attribute" /> 使用指定的类型; 如果该属性不存在，该属性类型的默认值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>
              确定指定的属性是否在集合中的特性相同。
            </summary>
      <param name="attribute">
                一个实例 <see cref="T:System.Attribute" /> 要与此集合中的属性进行比较。
              </param>
      <returns>
        <see langword="true" /> 如果该属性包含在集合内，且具有相同的值为属性集合中的否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>
              确定指定数组中的属性是否在集合中的特性相同。
            </summary>
      <param name="attributes">
                一个数组 <see cref="T:System.CodeDom.MemberAttributes" /> 要与此集合中的属性进行比较。
              </param>
      <returns>
        <see langword="true" /> 如果数组中的所有属性集合中包含与集合中的具有相同值作为属性否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>
              获取集合中包含的元素数。
            </summary>
      <returns>
              集合中包含的元素数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示对集合的访问是否已同步（线程安全）。
            </summary>
      <returns>
              如果对集合的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>
              启用属性重定向。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 具有给定的类型名称的类。
            </summary>
      <param name="typeName">
                要指定的类型的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 具有给定类型的类。
            </summary>
      <param name="type">
                要指定的类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 用给定的类型名称和属性名称。
            </summary>
      <param name="typeName">
                要指定的类型的名称。
              </param>
      <param name="propertyName">
                将为其检索特性的属性的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>
              获取将为其检索特性的属性的名称。
            </summary>
      <returns>
              将为其检索特性的属性的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>
              获取程序集限定的类型名称传递到构造函数。
            </summary>
      <returns>
              构造函数中指定的类型的程序集限定的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>
              提供非浮点数字类型的基类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.BaseNumberConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> 表示想要转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果该转换器能够执行该操作;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="t">
                一个 <see cref="T:System.Type" /> ，表示要转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果该转换器能够执行该操作;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的对象转换为转换器的本机类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，指定用于表示该数字的区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将指定的对象转换为另一种类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，指定用于表示该数字的区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>
              指定成员是否通常用于绑定。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类，具有一个布尔值。
            </summary>
      <param name="bindable">
        <see langword="true" /> 若要将属性用于绑定;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类之一 <see cref="T:System.ComponentModel.BindableSupport" /> 值。
            </summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。
            </summary>
      <param name="bindable">
        <see langword="true" /> 若要将属性用于绑定;否则为 <see langword="false" />。
              </param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。
              </param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。
              </param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>
              获取一个值，该值指示属性通常用于绑定。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性通常用于绑定;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>
              指定的默认值为 <see cref="T:System.ComponentModel.BindableAttribute" />, ，即 <see cref="F:System.ComponentModel.BindableAttribute.No" />。
               此字段为只读。
            </summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>
              获取一个值，该值指示的方向或此属性的数据绑定的方向。
            </summary>
      <returns>
              此属性的数据绑定的方向。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:System.ComponentModel.BindableAttribute" /> 对象是否相等。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 是否等于当前 <see cref="T:System.ComponentModel.BindableAttribute" />; <see langword="false" /> 是否不相等。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>
              用作哈希函数 <see cref="T:System.ComponentModel.BindableAttribute" /> 类。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>
              确定此属性是否为默认值。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性的默认值为此属性类;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>
              指定不通常使用绑定属性。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>
              指定一个属性，属性通常用于绑定。
               此字段为只读。
            </summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>
              指定一个值来指示是否可以将属性绑定到数据元素或另一个属性。
            </summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>
              该属性设置为默认值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>
              该属性在设计时不可绑定。
            </summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>
              在设计时，该属性是可绑定。
            </summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>
              指定该模板是可绑定的一种方法或两种方式。
            </summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>
              该模板只能接受属性值。
               采用泛型时使用 <see cref="T:System.Web.UI.ITemplate" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>
              该模板可以接受并公开属性值。
               与使用 <see cref="T:System.Web.UI.IBindableTemplate" />。
            </summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>
              提供支持数据绑定的泛型集合。
            </summary>
      <typeparam name="T">
                列表中元素的类型。
              </typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>
              使用默认值初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类使用指定的列表。
            </summary>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" /> 要中包含的项数 <see cref="T:System.ComponentModel.BindingList`1" />。
              </param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>
              在某项添加到列表之前发生。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>
              将新项添加到集合。
            </summary>
      <returns>
              添加到列表的项。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 属性设置为 <see langword="false" />。
                
                  - 或 -
                
                  找不到当前项类型的公共默认构造函数。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>
              将新项添加到集合的末尾。
            </summary>
      <returns>
              已添加到集合中的项。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  新的项不是与中包含的对象相同的类型 <see cref="T:System.ComponentModel.BindingList`1" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>
              获取或设置一个值，该值指示是否可以编辑列表中的项。
            </summary>
      <returns>
        <see langword="true" /> 如果可以编辑列表项，则否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>
              获取或设置一个值，该值指示是否可以将项添加到列表使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法。
            </summary>
      <returns>
        <see langword="true" /> 如果可以将项添加到列表中用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法; 否则为 <see langword="false" />。
               默认值取决于列表中包含的基础类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>
              获取或设置一个值，该值指示是否可以从集合中移除项。
            </summary>
      <returns>
        <see langword="true" /> 如果可以使用从列表中移除项 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
              如果重写派生类; 中的项进行排序否则，将引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="prop">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> ，它指定要作为排序依据的属性。
              </param>
      <param name="direction">
                其中一个 <see cref="T:System.ComponentModel.ListSortDirection" />  值。
              </param>
      <exception cref="T:System.NotSupportedException">
                  在派生类中不重写方法。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>
              放弃挂起的新项。
            </summary>
      <param name="itemIndex">
                索引的要添加新项 
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>
              移除集合中的所有元素。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>
              向集合提交挂起的新项。
            </summary>
      <param name="itemIndex">
                要添加新项的索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
              如果在派生类中; 实现了搜索具有指定值，指定的属性描述符的项的索引的搜索否则为 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="prop">
                要搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <param name="key">
                值 <paramref name="property" /> 相匹配。
              </param>
      <returns>
              与属性描述符相匹配，并包含指定的值的项的从零开始的索引。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> 不会覆盖在派生类中。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>
              在列表中的指定索引处插入指定的项。
            </summary>
      <param name="index">
                项是要插入的从零开始索引。
              </param>
      <param name="item">
                要插入列表中的项。
              </param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>
              获取一个值，该值指示是否对列表进行排序。
            </summary>
      <returns>
        <see langword="true" /> 如果对列表进行排序;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>
              当列表中的项更改时发生。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>
              获取或设置一个值，该值指示是否添加或删除内的项列表将引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。
            </summary>
      <returns>
        <see langword="true" /> 如果添加或删除项时引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>
              移除指定索引处的项。
            </summary>
      <param name="index">
                要移除的项的从零开始的索引。
              </param>
      <exception cref="T:System.NotSupportedException">
                  要删除新添加的项和 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>
              删除与应用的任何排序 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 如果实现了排序，在派生类中; 否则，将引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  在派生类中不重写方法。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>
              引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型事件的 <see cref="F:System.ComponentModel.ListChangedType.Reset" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型事件的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 指定位置处的项。
            </summary>
      <param name="position">
                要重置的项的从零开始索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>
              使用指定项替换指定索引处的项。
            </summary>
      <param name="index">
                要替换的项的从零开始的索引。
              </param>
      <param name="item">
                指定索引处的项的新值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>
              获取对列表进行排序的方向。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
               默认值为 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>
              获取用于对列表进行排序，如果在派生类中; 实现了排序的属性说明符否则，返回 <see langword="null" />。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 用于对列表进行排序。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>
              获取一个值，该值指示是否 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 启用了事件。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件是受支持; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>
              获取一个值，该值指示列表是否支持搜索。
            </summary>
      <returns>
        <see langword="true" /> 如果列表支持搜索，则，否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>
              获取一个值，该值指示列表是否支持排序。
            </summary>
      <returns>
        <see langword="true" /> 如果列表支持排序，则，否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。
            </summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为搜索条件添加。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>
              向列表添加新项。
               有关详细信息，请参阅<see cref="M:System.ComponentModel.IBindingList.AddNew" />。
            </summary>
      <returns>
              添加到列表的项。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此方法。
                </exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>
              获取一个值，该值指示是否可以编辑列表中的项。
            </summary>
      <returns>
        <see langword="true" /> 如果可以编辑列表项，则否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>
              获取一个值，该值指示是否可以将新项添加到列表使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法。
            </summary>
      <returns>
        <see langword="true" /> 如果可以将项添加到列表中用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法; 否则为 <see langword="false" />。
               默认值取决于列表中包含的基础类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>
              获取一个值，该值指示是否可以从列表中移除项。
            </summary>
      <returns>
        <see langword="true" /> 如果可以使用从列表中移除项 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
              对基于列表进行排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" />。
               有关此成员的完整说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。
            </summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为排序依据。
              </param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。
            </summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要搜索的。
              </param>
      <param name="key">
                值 <paramref name="property" /> 要搜索的参数。
              </param>
      <returns>
              具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 已调用和 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> 时尚未被调用; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。
            </summary>
      <param name="prop">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中删除。
              </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 正在用于排序。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件引发列表发生变化时或者当某项更改; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。
            </summary>
      <returns>
        <see langword="true" /> 如果列表支持搜索，使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。
            </summary>
      <returns>
        <see langword="true" /> 如果列表支持排序，则，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>
              获取一个值，该值指示项属性值更改是否会引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型的事件 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />。
               此成员不能在派生类中重写。
            </summary>
      <returns>
        <see langword="true " />如果该列表类型实现 <see cref="T:System.ComponentModel.INotifyPropertyChanged" />, ，否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.Boolean" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为布尔对象使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果此对象可以执行转换，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的值对象转换为布尔值的对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要转换为的区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取布尔数据类型的标准值集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 保存一组标准的有效值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法为独占列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的穷举列表。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持可以从列表中选取的值的标准集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 可以调用来查找一组公共对象支持的值。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>
              提供用于在 8 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>
              表示用于处理可取消的事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>
              提供用于在 Unicode 字符对象与其他各种表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.CharConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为 Unicode 字符对象使用指定的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的对象转换为 Unicode 字符对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                到的区域性 <paramref name="value" /> 将被转换。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为 Unicode 字符对象使用的参数。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                到的区域性 <paramref name="value" /> 将被转换。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>
              指定如何更改集合。
            </summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>
              指定已将一个元素添加到集合。
            </summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>
              指定整个集合已更改。
               这由使用方法处理整个集合，如 <see cref="M:System.Collections.CollectionBase.Clear" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>
              指定元素已从集合中移除。
            </summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>
              为 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 类的新实例。
            </summary>
      <param name="action">
                其中一个 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值，该值指定集合的发生更改。
              </param>
      <param name="element">
        <see cref="T:System.Object" /> ，它指定的集合发生更改的实例。
              </param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>
              获取指定集合的更改方式的操作。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。
            </returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>
              获取与更改集合的实例。
            </summary>
      <returns>
        <see cref="T:System.Object" /> ，表示进行更改后，该集合的实例或 <see langword="null" /> 如果刷新集合。
            </returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 将元素添加到或从集合中删除元素时引发的事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>
              提供用于在集合对象与其他各种表示形式之间实现相互转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的目标类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                区域性 <paramref name="value" /> 将被转换。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
                 此参数必须继承自 <see cref="T:System.Collections.ICollection" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              获取使用指定的上下文和属性值参数所指定的数组类型的属性的集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的数组类型。
              </param>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。
              </param>
      <returns>
              具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。
               此方法始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="false" /> 因为 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 不应调用来查找此对象的属性。
               此方法从不返回 <see langword="true" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>
              指定数据源和数据成员属性，支持复杂数据绑定的组件。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类不使用任何参数。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类使用指定的数据源。
            </summary>
      <param name="dataSource">
                要用作数据源的属性的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类使用指定的数据源和数据成员。
            </summary>
      <param name="dataSource">
                要用作数据源的属性的名称。
              </param>
      <param name="dataMember">
                要用作数据源的属性的名称。
              </param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>
              获取向其组件的数据成员属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定。
            </summary>
      <returns>
              组件的数据成员属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定
            </returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>
              获取向其组件的数据源属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定。
            </summary>
      <returns>
              组件的数据源属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定。
            </returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>
              表示的默认值为 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Object" /> 是否等于当前 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例。
            </summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要与当前 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例 
              </param>
      <returns>
        <see langword="true" /> 如果该对象是否等于当前实例;否则为 <see langword="false" />, ，指示它们是否不相等。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>
              定义表示有关在其中产生的帮助信息请求的上下文信息的标识符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>
              常规的上下文。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>
              所选内容。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>
              工具窗口选项。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>
              一个窗口。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>
              指定为类或成员的上下文关键字。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。
            </summary>
      <param name="keyword">
                帮助关键字值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 从给定类型的类。
            </summary>
      <param name="t">
                将从中提取帮助关键字的类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>
              表示的默认值为 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 实例是否相等。
            </summary>
      <param name="obj">
                要与当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />，则为 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              当前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>
              获取此属性提供的帮助关键字。
            </summary>
      <returns>
              此属性提供的帮助关键字。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>
              确定是否为帮助关键字 <see langword="null" />。
            </summary>
      <returns>
        <see langword="true" /> 如果帮助关键字是 <see langword="null" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>
              定义用于指示帮助关键字类型的标识符。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>
              按 F1 请求有关的帮助关键字。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>
              筛选关键字。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>
              普通的关键字。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>
              提供了一个接口，以添加和移除事件处理程序，添加、 更改、 删除或重命名组件，并提供若干方法来引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>
              添加了组件时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>
              组件的过程中正在添加时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>
              组件已被更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>
              组件的过程中被更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>
              删除该组件时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>
              组件是正被删除时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>
              当组件重命名时出现。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
              向组件更改服务通知特定组件已更改。
            </summary>
      <param name="component">
                已更改的组件。
              </param>
      <param name="member">
                已更改的成员。
                 这是 <see langword="null" /> 如果此更改不与单个成员。
              </param>
      <param name="oldValue">
                成员的旧值。
                 这是仅当该成员不是有效 <see langword="null" />。
              </param>
      <param name="newValue">
                成员的新值。
                 这是仅当该成员不是有效 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
              向组件更改服务通知，更改某一特定组件。
            </summary>
      <param name="component">
                要更改的组件。
              </param>
      <param name="member">
                要更改该成员。
                 这是 <see langword="null" /> 如果此更改不与单个成员。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>
              启用在设计时组件的枚举。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>
              获取可用组件类型的列表。
            </summary>
      <param name="designerHost">
                提供设计时服务设计器宿主。
                 可以为 <see langword="null" />。
              </param>
      <param name="baseType">
                基类型指定组件来检索。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              可用组件类型的列表。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>
              在组件的创建过程中提供一的组推荐的默认值。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>
              将组件的实例还原为其默认状态。
            </summary>
      <param name="defaultValues">
                是名称/值对，用来重置组件的状态的默认属性值的字典。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>
              初始化新的组件使用的一组建议的值。
            </summary>
      <param name="defaultValues">
                是名称/值对，用来初始化组件的状态的默认属性值的字典。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>
              提供用于生成自定义设计器的基本框架。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>
              获取此设计器设计的基本组件。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> ，该值指示此设计器设计的基础组件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>
              此设计器中执行的默认操作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
              初始化具有指定的组件的设计器。
            </summary>
      <param name="component">
                要与此设计器关联的组件。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>
              获取设计器支持设计时谓词的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 包含设计器中，所支持的谓词或 <see langword="null" /> 如果该组件没有谓词。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>
              出现以下情况时提供事件通知：添加和移除根设计器、更改选定的组件、更改当前的根设计器。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>
              获取当前活动文档的根设计器。
            </summary>
      <returns>
              当前处于活动状态的文档，或 <see langword="null" /> 如果没有活动文档。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>
              在更改当前根设计器时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>
              在创建根设计器时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>
              在释放文档的根设计器时发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>
              获取当前在开发环境中处于活动状态的设计文档的根设计器的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 包含已创建且尚未释放的根设计器。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>
              在更改当前设计器视图选择时发生。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>
              提供了一个接口，使设计器来访问和筛选的字典 <see cref="T:System.ComponentModel.TypeDescriptor" /> 存储组件设计器可以公开到设计时环境的属性、 属性和事件描述符。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>
              当在派生类中重写时，允许设计器更改或移除它通过公开的属性集项 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 组件的类的对象。
                 中的属性字典的键是 <see cref="P:System.Attribute.TypeId" /> 属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>
              当在派生类中重写时，允许设计器更改或移除它通过公开的事件的一套项 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示组件的类的事件的对象。
                 中的事件字典的键是事件名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>
              当在派生类中重写时，允许设计器更改或移除它通过公开的属性集项 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示组件的类的属性的对象。
                 中的属性字典的键是属性名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>
              当在派生类中重写时，允许设计器向它通过公开的属性集添加项 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 组件的类的对象。
                 中的属性字典的键是 <see cref="P:System.Attribute.TypeId" /> 属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>
              当在派生类中重写时，允许设计器将项添加到它通过公开的事件的一套 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示组件的类的事件的对象。
                 中的事件字典的键是事件名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
              当在派生类中重写时，允许设计器将项添加到的一组属性，它通过公开 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示组件的类的属性的对象。
                 中的属性字典的键是属性名称。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>
              提供用于管理设计器事务和组件的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>
              激活此宿主所承载的设计器。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>
              激活此设计器时发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>
              获取此设计器宿主的容器。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 为此主机。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>
              创建指定类型的组件，并将其添加到设计文档。
            </summary>
      <param name="componentClass">
                要创建的组件的类型。
              </param>
      <returns>
              新创建的组件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>
              创建组件的指定的类型和名称，并将其添加到设计文档。
            </summary>
      <param name="componentClass">
                要创建的组件的类型。
              </param>
      <param name="name">
                组件的名称。
              </param>
      <returns>
              新创建的组件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>
              创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> ，它可封装事件序列以提高性能并启用撤消和重做支持功能。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新实例。
               当事务中完成的步骤时，应调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对此对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>
              创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> ，它可封装事件序列以提高性能并启用撤消和重做支持功能，使用指定的事务的说明。
            </summary>
      <param name="description">
                标题或新创建的事务的说明。
              </param>
      <returns>
              一个新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。
               当事务中完成步骤后时，应调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对此对象。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>
              停用此设计器时发生。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>
              销毁指定的组件并将其从设计器的容器中删除。
            </summary>
      <param name="component">
                要销毁的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>
              获取包含指定的组件的设计器实例。
            </summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 要检索的设计器。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />, ，或 <see langword="null" /> 是否存在指定的组件没有任何设计器。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>
              获取指定的完全限定类型名称的实例。
            </summary>
      <param name="typeName">
                要加载的类型的名称。
              </param>
      <returns>
              指定的类型名称的类型对象或 <see langword="null" /> 如果找不到该类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>
              获取一个值，该值指示设计器宿主当前是否在事务中。
            </summary>
      <returns>
        <see langword="true" /> 如果事务正在进行中;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>
              此设计器加载完文档时发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>
              获取一个值，该值指示设计器宿主是否正在加载文档。
            </summary>
      <returns>
        <see langword="true" /> 如果设计器宿主是否正在加载文档;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>
              获取用作当前设计的根组件的基类的实例。
            </summary>
      <returns>
              根组件类的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>
              获取所设计的类的完全限定的名称。
            </summary>
      <returns>
              基本组件类的完全限定的名称。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>
              添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>
              添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>
              获取当前事务的说明。
            </summary>
      <returns>
              在当前事务的说明。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>
              添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>
              添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>
              指定方法上的事务的状态的报表设计器宿主。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>
              获取一个值，该值指示设计器宿主是否正在关闭事务。
            </summary>
      <returns>
        <see langword="true" /> 如果设计器是否关闭个事务。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>
              可以访问位于设计器选项 工具 下的菜单 选项 命令在 Visual Studio 开发环境中。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>
              获取指定的 Windows 窗体设计器选项的值。
            </summary>
      <param name="pageName">
                定义的选项页的名称。
              </param>
      <param name="valueName">
                选项属性的名称。
              </param>
      <returns>
              指定的选项的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>
              设置指定的 Windows 窗体设计器选项的值。
            </summary>
      <param name="pageName">
                定义的选项页的名称。
              </param>
      <param name="valueName">
                选项属性的名称。
              </param>
      <param name="value">
                新值。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>
              提供了通过一个设计器可用于存储用户定义数据服务的基本，组件特定于站点的键 / 值对字典。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>
              获取对应于指定的值的键。
            </summary>
      <param name="value">
                要在字典中查找的值。
              </param>
      <returns>
              关联的键，或 <see langword="null" /> 如果不存在任何键。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>
              获取与指定的键相对应的值。
            </summary>
      <param name="key">
                要查找的值的键。
              </param>
      <returns>
              关联的值，或 <see langword="null" /> 如果值不存在。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>
              设置指定的键 / 值对。
            </summary>
      <param name="key">
                要用作键与值相关联的对象。
              </param>
      <param name="value">
                要存储的值。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>
              提供用于注册事件处理程序组件的服务。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>
              创建指定的组件和事件的事件处理程序方法的唯一名称。
            </summary>
      <param name="component">
                该事件的组件实例连接到。
              </param>
      <param name="e">
                要创建的名称的事件。
              </param>
      <returns>
              此事件的事件处理程序方法建议的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>
              获取具有指定的事件与兼容的方法签名的事件处理程序方法的集合。
            </summary>
      <param name="e">
                要获取有关兼容的事件处理程序方法的事件。
              </param>
      <returns>
              字符串的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>
              获取 <see cref="T:System.ComponentModel.EventDescriptor" /> 表示指定的属性说明符，则在它表示事件的事件。
            </summary>
      <param name="property">
                表示一个事件的属性。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 属性是表示，事件或 <see langword="null" /> 如果属性不表示一个事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>
              将一组事件描述符转换为一组的属性描述符。
            </summary>
      <param name="events">
                要将转换为属性的事件。
              </param>
      <returns>
              一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述事件组的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>
              将单个事件描述符转换为属性描述符。
            </summary>
      <param name="e">
                要转换的事件。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述的事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>
              设计器中显示的用户代码。
            </summary>
      <returns>
        <see langword="true" /> 如果显示的代码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>
              显示设计器中指定的行的用户代码。
            </summary>
      <param name="lineNumber">
                若要将光标放置在行号。
              </param>
      <returns>
        <see langword="true" /> 如果显示的代码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>
              显示指定的事件的用户代码。
            </summary>
      <param name="component">
                事件连接到该组件。
              </param>
      <param name="e">
                要显示的事件。
              </param>
      <returns>
        <see langword="true" /> 如果显示的代码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>
              提供可以列出扩展程序提供程序的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>
              获取组件的一套扩展程序提供程序。
            </summary>
      <returns>
              类型的数组 <see cref="T:System.ComponentModel.IExtenderProvider" /> 列出活动的扩展程序提供程序。
               如果不有任何提供程序，则返回空数组。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>
              用于添加和删除扩展程序提供程序在设计时提供的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>
              添加指定的扩展提供程序。
            </summary>
      <param name="provider">
                要添加的扩展程序提供程序。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>
              移除指定的扩展提供程序。
            </summary>
      <param name="provider">
                要删除的扩展程序提供程序。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>
              提供用于显示帮助主题以及如何添加和删除帮助关键字，在设计时方法。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>
              向文档添加上下文特性。
            </summary>
      <param name="name">
                要添加的属性的名称。
              </param>
      <param name="value">
                属性的值。
              </param>
      <param name="keywordType">
                关键字，从枚举类型的 <see cref="T:System.ComponentModel.Design.HelpKeywordType" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>
              从文档中移除所有现有的上下文属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>
              创建一个本地 <see cref="T:System.ComponentModel.Design.IHelpService" /> 用于管理子上下文。
            </summary>
      <param name="contextType">
                若要添加的子上下文的优先级类型。
              </param>
      <returns>
              新创建的 <see cref="T:System.ComponentModel.Design.IHelpService" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>
              移除以前添加的上下文特性。
            </summary>
      <param name="name">
                要移除的属性的名称。
              </param>
      <param name="value">
                要移除的属性的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>
              使用创建的上下文中移除 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />。
            </summary>
      <param name="localContext">
                本地上下文 <see cref="T:System.ComponentModel.Design.IHelpService" /> 中删除。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>
              显示与指定关键字对应的帮助主题。
            </summary>
      <param name="helpKeyword">
                要显示的帮助主题的关键字。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>
              显示与指定 URL 对应的帮助主题。
            </summary>
      <param name="helpUrl">
                要显示的帮助主题的 URL。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>
              提供用于标识组件的组件的方法。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>
              搜索指定的组件实现的字段 <see cref="T:System.ComponentModel.IComponent" /> 接口，并添加到指定的容器，存储的每个可以使用检索的继承级别的每个 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法。
            </summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 搜索。
                 搜索与此组件将开始。
              </param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> 若要添加的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>
              获取指定的组件的继承属性。
            </summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 要检索的继承属性。
              </param>
      <returns>
              一个实例 <see cref="T:System.ComponentModel.InheritanceAttribute" /> ，它描述指定组件的继承的级别。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>
              提供方法来管理全局设计器谓词和菜单命令可用在设计模式，并显示某些类型的快捷菜单。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
              将指定的标准菜单命令添加到菜单。
            </summary>
      <param name="command">
                要添加的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 指定 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 在菜单上已存在。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>
              将指定的设计器谓词添加到全局设计器谓词组。
            </summary>
      <param name="verb">
                要添加的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>
              搜索指定的命令 ID 并返回与之关联的菜单命令。
            </summary>
      <param name="commandID">
                要搜索的 <see cref="T:System.ComponentModel.Design.CommandID" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> 关联的命令 ID 或 <see langword="null" /> 如果不找到任何命令。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>
              调用菜单或设计器谓词命令匹配指定的命令 id。
            </summary>
      <param name="commandID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 要搜索和执行的命令。
              </param>
      <returns>
        <see langword="true" /> 如果找到并成功，则调用该命令否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
              从菜单中删除指定的标准菜单命令。
            </summary>
      <param name="command">
                要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>
              全局设计器谓词的集合中移除指定的设计器谓词。
            </summary>
      <param name="verb">
                要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>
              显示指定的快捷菜单中的指定位置。
            </summary>
      <param name="menuID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 若要显示的快捷菜单。
              </param>
      <param name="x">
                在菜单中，显示在屏幕坐标中的 x 坐标。
              </param>
      <param name="y">
                在菜单中，显示在屏幕坐标中的 y 坐标。
              </param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>
              获取当前可用的设计器谓词的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> ，其中包含当前可用的设计器谓词。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>
              提供一个接口，用于获取对项目中的对象的引用通过名称或类型，获取指定对象的名称和定位设计器的项目中指定的对象的父级。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>
              获取包含指定的组件的组件。
            </summary>
      <param name="reference">
                要检索的父组件的对象。
              </param>
      <returns>
              基 <see cref="T:System.ComponentModel.IComponent" /> ，其中包含指定的对象，或 <see langword="null" /> 如果不存在父组件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>
              获取指定的组件的名称。
            </summary>
      <param name="reference">
                要返回的名称的对象。
              </param>
      <returns>
              引用，该对象的名称或 <see langword="null" /> 如果对象引用无效。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>
              获取对其名称与指定的名称匹配的组件的引用。
            </summary>
      <param name="name">
                要返回的引用的组件名称。
              </param>
      <returns>
              引用的指定的名称的对象或 <see langword="null" /> 如果不找到任何引用。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>
              获取所有可用项目组件引用。
            </summary>
      <returns>
              具有可供引用的所有对象的数组 <see cref="T:System.ComponentModel.Design.IReferenceService" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>
              获取指定类型的组件的所有可用引用。
            </summary>
      <param name="baseType">
                要返回的实例的引用的对象类型。
              </param>
      <returns>
              指定类型的所有可用对象的数组。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>
              提供的接口为设计器访问的资源读取器和编写器的特定 <see cref="T:System.Globalization.CultureInfo" /> 资源类型。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>
              查找指定的区域性的资源阅读器，并将其返回。
            </summary>
      <param name="info">
        <see cref="T:System.Globalization.CultureInfo" /> 为要检索的资源阅读器的资源。
              </param>
      <returns>
        <see cref="T:System.Resources.IResourceReader" /> 包含资源的区域性，接口或 <see langword="null" /> 如果不存在任何区域性的资源。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>
              查找指定的区域性的资源编写器并将其返回。
            </summary>
      <param name="info">
        <see cref="T:System.Globalization.CultureInfo" /> 要为其创建资源编写器的资源。
              </param>
      <returns>
        <see cref="T:System.Resources.IResourceWriter" /> 接口为指定的区域性。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>
              为根级别的设计器视图技术提供支持。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>
              获取指定的视图技术的视图对象。
            </summary>
      <param name="technology">
                一个 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> ，该值指示特定的视图技术。
              </param>
      <returns>
              表示此设计器的视图的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  指定的视图技术不支持或不存在。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>
              获取此设计器可为其显示提供支持的技术集。
            </summary>
      <returns>
              数组支持 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>
              提供设计器选择的组件的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>
              获取一个值，该值指定的组件当前是否选择了。
            </summary>
      <param name="component">
                要测试的组件。
              </param>
      <returns>
        <see langword="true" /> 如果该组件是用户的当前所选内容; 的一部分否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>
              获取当前选定的组件的集合。
            </summary>
      <returns>
              表示当前选定的组件的集合的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>
              获取当前是主要的所选的对象的对象。
            </summary>
      <returns>
              当前对象的主选定的对象。
            </returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>
              当前所选内容更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>
              要更改当前所选内容时发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>
              获取所选对象的计数。
            </summary>
      <returns>
              所选对象的数目。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>
              选择指定的组件的集合。
            </summary>
      <param name="components">
                若要选择的组件的集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>
              选择从与指定选择内容类型相匹配的组件的指定集合内的组件。
            </summary>
      <param name="components">
                若要选择的组件的集合。
              </param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 枚举中的一个值。
                 默认值为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>
              为服务提供一个容器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>
              将指定的服务添加到服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="callback">
                一个用于创建服务的回调对象。
                 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>
              将指定的服务添加到服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="serviceInstance">
                要添加的服务类型的实例。
                 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>
              将指定的服务添加到服务容器中，并可选择将提升到父级服务容器的服务。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="callback">
                一个用于创建服务的回调对象。
                 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。
              </param>
      <param name="promote">
        <see langword="true" /> 此将请求提升到任何父级服务容器;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>
              将指定的服务添加到服务容器中，并根据需要将服务提升到任何父级服务容器。
            </summary>
      <param name="serviceType">
                要添加的服务类型。
              </param>
      <param name="serviceInstance">
                要添加的服务类型的实例。
                 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。
              </param>
      <param name="promote">
        <see langword="true" /> 此将请求提升到任何父级服务容器;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>
              从服务容器中移除指定的服务类型。
            </summary>
      <param name="serviceType">
                要移除的服务类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>
              从服务容器中删除指定的服务类型，并 （可选） 将提升到父级服务容器的服务。
            </summary>
      <param name="serviceType">
                要移除的服务类型。
              </param>
      <param name="promote">
        <see langword="true" /> 此将请求提升到任何父级服务容器;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>
              提供用于生成一组相关的自定义设计器支持。
            </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>
              获取子设计器的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />, ，其中包含的集合 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子对象的当前设计器。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>
              获取父设计器。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> 表示父设计器中，或 <see langword="null" /> 如果没有父对象。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>
              提供在设计模式下修改组件的成员描述符集的接口。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
              筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性。
            </summary>
      <param name="component">
                要筛选其属性的组件。
              </param>
      <param name="attributes">
                可修改的属性字典。
              </param>
      <returns>
              如果将缓存经过筛选的属性集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
              筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件。
            </summary>
      <param name="component">
                要为其筛选事件的组件。
              </param>
      <param name="events">
                可修改的事件字典。
              </param>
      <returns>
              如果要缓存经过筛选的事件集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
              筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性。
            </summary>
      <param name="component">
                要为其筛选属性的组件。
              </param>
      <param name="properties">
                可修改的属性字典。
              </param>
      <returns>
              如果将缓存经过筛选的属性集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>
              在设计时发现可用的类型。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>
              检索可用类型的列表。
            </summary>
      <param name="baseType">
                要匹配的基类型。
                 可以为 <see langword="null" />。
              </param>
      <param name="excludeGlobalTypes">
                指示是否应检查所有被引用程序集中的类型。
              </param>
      <returns>
              与指定的条件相匹配的类型的集合 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" />。
            </returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>
              将转换<see cref="T:System.String" />键入到<see cref="T:System.Uri" />类型，反之亦然。
            </summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.UriTypeConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器是否可以将给定类型的对象转换为此转换器的类型。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> ，用于提供格式上下文。
              </param>
      <param name="sourceType">
                A<see cref="T:System.Type" />表示你想要从转换的类型。
              </param>
      <returns>
        <see langword="true" />如果<paramref name="sourceType" />是<see cref="T:System.String" />类型或<see cref="T:System.Uri" />可从指定类型<paramref name="sourceType" />; 否则为<see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器能否使用指定上下文将对象转换为指定类型。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> ，用于提供格式上下文。
              </param>
      <param name="destinationType">
                A<see cref="T:System.Type" />表示你想要将转换为的类型。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型是 <paramref name="destinationType" />，<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />，<see cref="T:System.String" />， 或 <see cref="T:System.Uri" />；否则， <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> ，用于提供格式上下文。
              </param>
      <param name="culture">
                要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法执行转换。
                </exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的类型，使用指定的上下文和区域性信息。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> ，用于提供格式上下文。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
                 如果传递 <see langword="null" />，则采用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" />要转换<paramref name="value" />参数。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它表示转换后的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  无法执行转换。
                </exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              返回给定的值的对象是否是 <see cref="T:System.Uri" /> 或 <see cref="T:System.Uri" /> 可以从其创建。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。
              </param>
      <param name="value">
                要测试其有效性的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="value" /> 是 <see cref="T:System.Uri" /> 或 <see cref="T:System.String" /> 从中 <see cref="T:System.Uri" /> 可创建; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 将标记组件的可见性。
               如果 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> 不存在，可视化设计器可以显示此组件设计器上。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>
              创建一个新 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 设置的默认值为 <see langword="false" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>
              创建一个新 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 与 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性设置为在给定的值 <paramref name="visible" />。
            </summary>
      <param name="visible">
                值的 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性将设置对。
              </param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>
              这是默认可见 <see langword="Yes" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例或 null 引用（ Visual Basic 中的 <see langword="Nothing" />）进行比较的对象。
              </param>
      <returns>
              如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>
              获取一个值，该值指示此实例是否等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值。
            </summary>
      <returns>
        <see langword="true" />, 如果此实例是否等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>
              将标记为在可视化设计器中不可见的组件。
            </summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>
              获取或设置是否应在设计时显示该组件。
            </summary>
      <returns>
        <see langword="true" /> 如果该组件应显示在设计时或 <see langword="false" /> 如果不应。
            </returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>
              将标记为在可视化设计器中可见的组件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>
              提供的类型转换器来转换双精度浮点数字对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>
              指定要使用的属性进行更改的编辑器。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类，具有默认编辑器中，不不使用任何编辑器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的类型名称和编辑器的基类型名称。
            </summary>
      <param name="typeName">
                编辑器的完全限定的类型名称。
              </param>
      <param name="baseTypeName">
                基类或接口，以作为查找键用于该编辑器的完全限定的类型名称。
                 此类必须是或派生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类使用的类型名称和基类型。
            </summary>
      <param name="typeName">
                编辑器的完全限定的类型名称。
              </param>
      <param name="baseType">
        <see cref="T:System.Type" /> 的基类或接口，以用作编辑器中的查找键。
                 此类必须是或派生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的类型和基类型。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示编辑器中的类型。
              </param>
      <param name="baseType">
        <see cref="T:System.Type" /> 的基类或接口，以用作编辑器中的查找键。
                 此类必须是或派生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>
              获取作为此编辑器的查找键的接口的基类的名称。
            </summary>
      <returns>
              基类或接口作为此编辑器的查找键的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>
              获取名称中的编辑器类 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式。
            </summary>
      <returns>
              中的编辑器类的名称 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>
              返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.EditorAttribute" />。
            </summary>
      <param name="obj">
                要测试值的相等性的对象。
              </param>
      <returns>
        <see langword="true" /> 给定对象的值是否等于当前对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>
              获取此特性类型的唯一 ID。
            </summary>
      <returns>
              此属性类型的唯一 ID。
            </returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.Enum" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EnumConverter" /> 为给定类型的类。
            </summary>
      <param name="type">
                一个 <see cref="T:System.Type" /> ，表示枚举值，用于将此枚举转换器与相关联的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以为枚举对象使用指定的上下文转换给定的源类型的对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>
              获取 <see cref="T:System.Collections.IComparer" /> 可用来对该枚举的值进行排序。
            </summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> 进行排序的枚举值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定的值对象转换为枚举对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的值对象转换为指定的目标类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是枚举的有效值。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>
              指定此转换器是与相关联的枚举器的类型。
            </summary>
      <returns>
              此转换器与之关联的枚举器类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取此验证程序所面向的数据类型的标准值集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 是使用指定的上下文的独占列表。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
              如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持可以从使用指定的上下文的列表中选取的值的标准集。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 应调用以查找一组公共对象支持的值。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
              获取一个值，该值指示给定的对象值是否对此类型有效。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
                要测试的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>
              获取或设置 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> ，它指定枚举的可能值。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> ，它指定枚举的可能值。
            </returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>
              提供有关事件的信息。
            </summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 具有名称和在指定的属性的类 <see cref="T:System.ComponentModel.MemberDescriptor" />。
            </summary>
      <param name="descr">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，其中包含了事件以及其属性的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定名称的类 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和在这两属性 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组。
            </summary>
      <param name="descr">
                一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 具有该成员及其属性的名称。
              </param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 与您想要添加到此事件说明的属性的数组。
              </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类，具有指定名称和特性数组。
            </summary>
      <param name="name">
                事件的名称。
              </param>
      <param name="attrs">
                类型的数组 <see cref="T:System.Attribute" /> ，它包含事件属性。
              </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>
              当在派生类中重写，将事件绑定到的组件。
            </summary>
      <param name="component">
                一种组件提供给委托的事件。
              </param>
      <param name="value">
                一个表示用于处理该事件的方法的委托。
              </param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>
              当在派生类中重写，获取此事件绑定到的组件的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 表示事件绑定到的组件的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>
              当在派生类中重写时获取事件的委托的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 表示的事件委托的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>
              当在派生类中重写时获取一个值，该值事件委托是否多路广播的委托。
            </summary>
      <returns>
        <see langword="true" /> 如果事件委托是多路广播;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
              当在派生类中重写，取消绑定委托与组件，以便该委托将不再接收来自组件的事件。
            </summary>
      <param name="component">
                委托绑定到该组件。
              </param>
      <param name="value">
                要解除组件绑定的委托。
              </param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>
              表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象集合。
            </summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 与给定的数组类 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象。
            </summary>
      <param name="events">
                类型的数组 <see cref="T:System.ComponentModel.EventDescriptor" /> ，为此集合提供事件。
              </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 与给定的数组类 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象。
               集合是只读的。
            </summary>
      <param name="events">
                类型的数组 <see cref="T:System.ComponentModel.EventDescriptor" /> ，为此集合提供事件。
              </param>
      <param name="readOnly">
        <see langword="true" /> 若要指定只读集合中;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>
              添加 <see cref="T:System.ComponentModel.EventDescriptor" /> 到集合的末尾。
            </summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 要添加到集合。
              </param>
      <returns>
              位置 <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>
              从集合中删除所有对象。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>
              返回集合中是否包含给定 <see cref="T:System.ComponentModel.EventDescriptor" />。
            </summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 能够在集合中找到。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含 <paramref name="value" /> 参数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>
              获取集合中的事件说明符的数目。
            </summary>
      <returns>
              集合中的事件说明符的数目。
            </returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>
              指定一个空集合，而不是创建一个新不具有任何项。
               这 <see langword="static" /> 字段是只读的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>
              获取集合中具有指定名称的事件的说明。
            </summary>
      <param name="name">
                要从集合中获取的事件的名称。
              </param>
      <param name="ignoreCase">
        <see langword="true" /> 如果您想要忽略大小写的事件。否则为 <see langword="false" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定名称或 <see langword="null" /> 如果事件不存在。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>
              获取此枚举 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </summary>
      <returns>
              一个枚举器实现 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>
              返回的索引给定 <see cref="T:System.ComponentModel.EventDescriptor" />。
            </summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 能够在集合中找到。
              </param>
      <returns>
              索引的给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>
              将插入 <see cref="T:System.ComponentModel.EventDescriptor" /> 到指定索引处的集合。
            </summary>
      <param name="index">
                在其中插入集合中的索引 <paramref name="value" /> 参数。
              </param>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 要插入到集合。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>
              对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，使用指定 <see cref="T:System.Collections.IComparer" />。
            </summary>
      <param name="sorter">
                用于进行排序的比较器 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>
              对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
               指定的顺序是首先应用，然后为此集合，通常为字母顺序的默认排序。
            </summary>
      <param name="names">
                一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。
              </param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>
              获取或设置具有指定的索引号的事件。
            </summary>
      <param name="index">
                从零开始的索引号 <see cref="T:System.ComponentModel.EventDescriptor" /> 要获取或设置。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定的索引号。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 不是有效索引 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>
              获取或设置具有指定名称的事件。
            </summary>
      <param name="name">
                名称 <see cref="T:System.ComponentModel.EventDescriptor" /> 要获取或设置。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定名称或 <see langword="null" /> 如果事件不存在。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>
              从集合中移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。
            </summary>
      <param name="value">
                要从该集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>
              删除 <see cref="T:System.ComponentModel.EventDescriptor" /> 集合中的指定索引处。
            </summary>
      <param name="index">
                索引 <see cref="T:System.ComponentModel.EventDescriptor" /> 中删除。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>
              对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，给出指定的排序顺序和 <see cref="T:System.Collections.IComparer" />。
            </summary>
      <param name="names">
                一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.EventDescriptor" /> 集合中的对象。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 用于进行排序 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。
              </param>
      <returns>
              新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>
              对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，给出指定的排序顺序。
            </summary>
      <param name="names">
                一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.EventDescriptor" /> 集合中的对象。
              </param>
      <returns>
              新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>
              对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，为此集合使用的默认排序，这是通常按字母顺序排列。
            </summary>
      <returns>
              新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>
              对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，使用指定 <see cref="T:System.Collections.IComparer" />。
            </summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 用于进行排序 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。
              </param>
      <returns>
              新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 是从集合中复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>
              获取集合中包含的元素数。
            </summary>
      <returns>
              集合中包含的元素数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，它指示对集合的访问是否同步。
            </summary>
      <returns>
        <see langword="true" /> 如果同步对集合的访问;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>
              向集合中添加一项。
            </summary>
      <param name="value">
                要添加到集合中的 <see cref="T:System.Object" />。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>
              从集合中移除所有项。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定集合中是否包含特定值。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Object" /> 在集合中找到; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              确定集合中特定项的索引。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              指定索引处插入到集合的项。
            </summary>
      <param name="index">
                应插入 <paramref name="value" /> 的从零开始的索引。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到集合。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示集合是否具有固定大小。
            </summary>
      <returns>
        <see langword="true" /> 如果集合具有固定的大小，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示集合是否为只读。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
              从集合中移除特定对象的第一个匹配项。
            </summary>
      <param name="value">
                要从该集合中移除的 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
              移除指定索引处的项。
            </summary>
      <param name="index">
                要移除的项的从零开始的索引。
              </param>
      <exception cref="T:System.NotSupportedException">
                  该集合是只读的。
                </exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>
              提供可扩展对象和其他各种表示形式之间来回进行转换的类型转换器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              获取由值参数指定的对象类型的属性集合。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的对象类型。
              </param>
      <param name="attributes">
                类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 与组件公开的属性或 <see langword="null" /> 是否存在任何属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              获取一个值，该值指示此对象是否支持使用指定的上下文属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <returns>
        <see langword="true" /> 因为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 应调用来查找此对象的属性。
               此方法从不返回 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>
              指定由扩展程序提供商提供的属性。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>
              获取所提供的属性。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 封装所提供的属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>
              提供表示此实例的值是否为派生类的默认值。
            </summary>
      <returns>
              如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>
              获取正在提供属性的扩展程序提供。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.IExtenderProvider" /> 正在提供该属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>
              获取可接收属性的对象的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 描述可接收属性的对象的类型。
            </returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>
              提供要转换的类型转换器 <see cref="T:System.Guid" /> 对象与其他各种表示形式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为 GUID 对象使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定的对象转换为一个的 GUID 对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                一个可选的 <see cref="T:System.Globalization.CultureInfo" />。
                 如果未提供区域性设置，则使用当前区域性。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将给定的对象转换为另一种类型。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
              </param>
      <param name="culture">
                到的区域性 <paramref name="value" /> 将被转换。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>
              可以在事件处理程序中完全处理的事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.HandledEventArgs" /> 类，具有默认值 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性值为 <see langword="false" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.HandledEventArgs" /> 类，具有指定的默认值为 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性。
            </summary>
      <param name="defaultHandledValue">
                默认值为 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性。
              </param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>
              获取或设置一个值，指示事件处理程序是否已完全处理该事件或系统是否应继续它自己的处理。
            </summary>
      <returns>
        <see langword="true" /> 如果事件已完全处理;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>
              表示可以处理事件可能有也可能不需要进一步处理后返回的事件处理程序的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.HandledEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>
              提供支持复杂且简单的情况下，绑定到数据源时所需的功能。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              添加 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到用于搜索的索引。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 将添加到用于搜索的索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>
              向列表添加新项。
            </summary>
      <returns>
              添加到列表的项。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>
              获取是否可以更新列表中的项。
            </summary>
      <returns>
        <see langword="true" /> 如果更新列表; 中的项，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>
              获取是否可以将项添加到列表使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。
            </summary>
      <returns>
        <see langword="true" /> 如果将项添加到列表 <see cref="M:System.ComponentModel.IBindingList.AddNew" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>
              获取是否可从列表中，删除项使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。
            </summary>
      <returns>
        <see langword="true" /> 如果可以从列表中; 删除项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
              对基于列表进行排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" />。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为排序依据。
              </param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
              返回具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要搜索的。
              </param>
      <param name="key">
                值 <paramref name="property" /> 要搜索的参数。
              </param>
      <returns>
              具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>
              获取指示列表中的项进行排序。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 已调用和 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> 时尚未被调用; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>
              当列表或列表中的项更改时发生。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              删除 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中删除。
              </param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>
              删除应用使用的任何排序 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>
              获取排序的方向。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>
              获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 正在用于排序。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 正在用于排序。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>
              获取是否 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 列表更改或列表中的项目发生更改时引发事件。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件引发列表发生变化时或者当某项更改; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>
              获取列表是否支持使用搜索 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法。
            </summary>
      <returns>
        <see langword="true" /> 如果列表支持搜索，使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>
              获取指示列表支持排序。
            </summary>
      <returns>
        <see langword="true" /> 如果列表支持排序，则，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>
              扩展 <see cref="T:System.ComponentModel.IBindingList" /> 接口通过提供高级排序和筛选功能。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>
              排序数据源基于给定 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。
            </summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 包含要应用于数据源进行排序。
              </param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>
              获取或设置要用于从数据源返回的项的集合中排除项的筛选器
            </summary>
      <returns>
              用来筛选出数据源返回的项集合中的项的字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>
              删除当前筛选器应用于数据源。
            </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>
              获取当前应用于数据源的说明的排序的集合。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 当前应用于数据源。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>
              获取一个值，该值指示数据源是否支持高级排序。
            </summary>
      <returns>
        <see langword="true" /> 如果数据源支持高级排序，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>
              获取一个值，该值指示数据源是否支持筛选。
            </summary>
      <returns>
        <see langword="true" /> 如果数据源支持筛选，则，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>
              向集合添加新项时，请添加事务性功能。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>
              丢弃集合中挂起的新项。
            </summary>
      <param name="itemIndex">
                以前添加到集合的项的索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>
              向集合提交挂起的新项。
            </summary>
      <param name="itemIndex">
                以前添加到集合的项的索引。
              </param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>
              提供了 COM 对象之间的顶级映射层和一个 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>
              获取指定的组件的属性。
            </summary>
      <param name="component">
                要获取特性的组件。
              </param>
      <returns>
              属性集合 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>
              获取指定的组件的类名称。
            </summary>
      <param name="component">
                要获取的类名的组件。
              </param>
      <returns>
              与相对应的类的名称 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>
              获取指定的组件的类型转换器。
            </summary>
      <param name="component">
                要获取的组件 <see cref="T:System.ComponentModel.TypeConverter" /> 有关。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> 为 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>
              获取指定的组件的默认事件。
            </summary>
      <param name="component">
                要获取的默认事件的组件。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示 <paramref name="component" />的默认事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>
              获取指定的组件的默认属性。
            </summary>
      <param name="component">
                要获取其默认属性的组件。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示 <paramref name="component" />的默认属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>
              获取指定的组件编辑器。
            </summary>
      <param name="component">
                要为其获取编辑器的组件。
              </param>
      <param name="baseEditorType">
                编辑器的基类型 <paramref name="component" />。
              </param>
      <returns>
              为编辑器 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>
              获取指定的组件的事件。
            </summary>
      <param name="component">
                要获取其事件的组件。
              </param>
      <returns>
              事件描述符的集合 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>
              对指定的组件中获取具有指定特性的事件。
            </summary>
      <param name="component">
                要获取其事件的组件。
              </param>
      <param name="attributes">
                用来筛选事件的属性。
              </param>
      <returns>
              事件描述符的集合 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>
              获取指定的组件的名称。
            </summary>
      <param name="component">
                要获取的名称的组件。
              </param>
      <returns>
              名称 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>
              对指定的组件中获取具有指定特性的属性。
            </summary>
      <param name="component">
                要获取其事件的组件。
              </param>
      <param name="attributes">
                用于筛选属性的特性。
              </param>
      <returns>
              属性说明符集合 <paramref name="component" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>
              获取具有指定的调度标识符的属性的值。
            </summary>
      <param name="component">
                属性所属的对象。
              </param>
      <param name="dispid">
                调度标识符。
              </param>
      <param name="success">
                一个 <see cref="T:System.Boolean" />, ，由表示是否已检索该属性的引用传递。
              </param>
      <returns>
              具有指定的调度标识符属性的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>
              获取具有指定的名称的属性的值。
            </summary>
      <param name="component">
                属性所属的对象。
              </param>
      <param name="propertyName">
                属性的名称。
              </param>
      <param name="success">
                一个 <see cref="T:System.Boolean" />, ，由表示是否已检索该属性的引用传递。
              </param>
      <returns>
              具有指定的名称的属性的值。
            </returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>
              将转换 <see cref="T:System.Drawing.Point" /> 对象从一种数据类型到另一个。
            </summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Drawing.PointConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
                 此对象可以用于获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="sourceType">
                您想要将从转换的类型。
              </param>
      <returns>
        <see langword="true" /> 如果此对象可以执行转换，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 提供格式上下文的对象。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> 对象，表示要转换的类型。
              </param>
      <returns>
              如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              指定将对象转换为 <see cref="T:System.Drawing.Point" /> 对象。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
                 此对象可以用于获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="culture">
                一个包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
                 它基于 RFC 1766 标准。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法完成转换。
                </exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将指定的对象转换成指定的类型。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
                 此对象可以用于获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="culture">
                一个包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
                 它基于 RFC 1766 标准。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法完成转换。
                </exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
              创建此类型的对象提供一组属性值的实例。
            </summary>
      <param name="context">
                可以通过它提供其他上下文将类型描述符。
              </param>
      <param name="propertyValues">
                新属性值的字典。
                 字典中包含一系列名称 / 值对，一个用于每个属性返回从 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />。
              </param>
      <returns>
              新创建的对象，或 <see langword="null" /> 如果无法创建该对象。
               默认实现返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定更改此对象上的某个值是否需要对调用 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 若要创建一个新值。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 更改时发出此对象的一个或多个属性; 否则为应调用方法 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              检索此类型的属性集。
               默认情况下，一种类型不返回任何属性。
            </summary>
      <param name="context">
                可以通过它提供其他上下文将类型描述符。
              </param>
      <param name="value">
                要获取的属性的对象的值。
              </param>
      <param name="attributes">
                一个数组 <see cref="T:System.Attribute" /> 描述属性的对象。
              </param>
      <returns>
              为此数据类型公开的属性集。
               如果未公开任何属性，则此方法可能返回 <see langword="null" />。
               默认实现始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定此对象是否支持属性。
               默认情况下，这是 <see langword="false" />。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.TypeDescriptor" /> 可以提供通过哪些其他上下文。
              </param>
      <returns>
              如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>
              将矩形从一种数据类型转换为另一个。
               访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />。
            </summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Drawing.RectangleConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
            </summary>
      <param name="context">
                一个格式化程序的上下文。
                 此对象可以用于获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="sourceType">
                您想要将从转换的类型。
              </param>
      <returns>
              此方法返回 <see langword="true" /> 如果此对象可以执行的转换; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
            </summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 提供格式上下文的对象。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可以返回 <see langword="null" />。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> 对象，表示要转换的类型。
              </param>
      <returns>
              此方法返回 <see langword="true" /> 如果该转换器能够执行转换; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将给定类型转换为 <see cref="T:System.Drawing.Rectangle" /> 对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用来获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 包含区域性特定信息，如语言、 日历和关联与特定区域性的区域性约定。
                 它基于 RFC 1766 标准。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法完成转换。
                </exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将指定的对象转换成指定的类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用来获取有关从中调用此转换器的环境的其他信息。
                 这可能是 <see langword="null" />, ，因此应始终对其进行检查。
                 同样，上下文对象上的属性也可能返回 <see langword="null" />。
              </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 包含区域性特定信息，如语言、 日历和关联与特定区域性的区域性约定。
                 它基于 RFC 1766 标准。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  无法完成转换。
                </exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
              创建此类型的对象提供一组属性值的实例。
               这非常有用的是固定不变，但仍想要提供可变属性的对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可以提供通过哪些其他上下文。
              </param>
      <param name="propertyValues">
                新属性值的字典。
                 该字典包含一系列名称 / 值对，一个用于每个属性返回通过调用 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法。
              </param>
      <returns>
              新创建的对象，或 <see langword="null" /> 如果无法创建该对象。
               默认实现返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定更改此对象上的某个值是否需要对调用 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 若要创建一个新值。
            </summary>
      <param name="context">
                可以通过它提供其他上下文将类型描述符。
              </param>
      <returns>
              此方法返回 <see langword="true" /> 如果 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 更改时发出此对象的一个或多个属性; 否则为应调用 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
              检索此类型的属性集。
               默认情况下，一种类型不返回任何属性。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可以提供通过哪些其他上下文。
              </param>
      <param name="value">
                要获取的属性的对象的值。
              </param>
      <param name="attributes">
                一个数组 <see cref="T:System.Attribute" /> 描述属性的对象。
              </param>
      <returns>
              此数据类型不应公开的属性集。
               如果应公开任何属性，这可能会返回 <see langword="null" />。
               默认实现始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
              确定此对象是否支持属性。
               默认情况下，这是 <see langword="false" />。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可以提供通过哪些其他上下文。
              </param>
      <returns>
              此方法返回 <see langword="true" /> 如果 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 应被调用来查找此对象的属性; 否则为 <see langword="false" />。
            </returns>
    </member>
  </members>
</doc>