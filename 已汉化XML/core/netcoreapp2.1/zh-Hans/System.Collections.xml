<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>
              表示对象的先进先出集合。
            </summary>
      <typeparam name="T">
                指定队列中元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有默认初始容量。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。
            </summary>
      <param name="collection">
                其元素被复制到新的 <see cref="T:System.Collections.Generic.Queue`1" /> 中的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有指定的初始容量。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.Queue`1" /> 中移除所有对象。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>
              确定某元素是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Queue`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.Queue`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
              移除并返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象。
            </summary>
      <returns>
              从 <see cref="T:System.Collections.Generic.Queue`1" /> 的开始处移除的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的结尾处。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.Queue`1" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Queue`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
              返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象但不将其移除。
            </summary>
      <returns>
              位于 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到新数组。
            </summary>
      <returns>
              新数组包含从复制的元素 <see cref="T:System.Collections.Generic.Queue`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
              如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Queue`1" /> 中的实际元素数。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>
              获取作为枚举数当前位置的元素 <see cref="T:System.Collections.DictionaryEntry" /> 结构。
            </summary>
      <returns>
              位于当前位置的字典的集合中的元素作为 <see cref="T:System.Collections.DictionaryEntry" /> 结构。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>
              获取枚举数当前位置的元素键。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素的键。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>
              获取枚举数当前位置的元素的值。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素的值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>
              表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中密钥的集合。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 类来反映中指定的键 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 其键反映在新 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 到现有一维数组，从指定的数组索引处开始的元素。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 结构。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
                此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
              </param>
      <exception cref="T:System.NotSupportedException">
                  总是引发；集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
                此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  总是引发；集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含指定值。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到该项，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
                此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。
              </param>
      <returns>
              如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功删除项，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到项，此方法也会返回 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  总是引发；集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中从特定的数组索引开始的位置。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>
              表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中值的集合。
               无法继承此类
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 类来反映中指定的值 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 其值反映在新 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 到现有一维数组，从指定的数组索引处开始的元素。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 结构。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
              </param>
      <exception cref="T:System.NotSupportedException">
                  总是引发；集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  总是引发；集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含指定值。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。
              </param>
      <returns>
              如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功删除 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在 <see langword="false" /> 中没有找到 <paramref name="item" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  总是引发；集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中从特定的数组索引开始的位置。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>
              表示根据键进行排序的键/值对的集合。
            </summary>
      <typeparam name="TKey">
                字典中的键的类型。
              </typeparam>
      <typeparam name="TValue">
                字典中的值的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并对键类型使用默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并对比较键使用指定 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
            </summary>
      <param name="comparer">
                比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 <see langword="null" />，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用键类型的默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复的键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现来比较键。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
              </param>
      <param name="comparer">
                比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 <see langword="null" />，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复的键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>
              将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除所有元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>
              获取用于对 <see cref="T:System.Collections.Generic.IComparer`1" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </summary>
      <returns>
              用于对 <see cref="T:System.Collections.Generic.IComparer`1" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含带有指定键的元素。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedDictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定值的元素。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.SortedDictionary`2" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
              从指定的索引处开始，将 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素复制到指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的数组中。
            </summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的一维数组，它是从当前 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>
              获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置的值的键。
              </param>
      <returns>
              与指定的键相关联的值。
               如果指定键未找到，则 Get 操作引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 Set 操作创建一个带指定键的新元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                  已检索该属性且集合中不存在 <paramref name="key" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <returns>
              如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。
                如果在 <see langword="false" /> 中没有找到 <paramref name="key" />，则此方法也会返回 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>
              获取与指定键关联的值。
            </summary>
      <param name="key">
                要获取的值的键。
              </param>
      <param name="value">
                当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedDictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
            </summary>
      <param name="keyValuePair">
                要添加到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含一个指定键和值。
            </summary>
      <param name="keyValuePair">
                要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除指定元素的第一个匹配项。
            </summary>
      <param name="keyValuePair">
                要从 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中移除的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。
              </param>
      <returns>
              如果从 <see langword="true" /> 中成功移除 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               如果在 <see langword="false" /> 中没有找到 <paramref name="keyValuePair" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
              获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
              获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个数组中。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.Generic.ICollection`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.Generic.ICollection`1" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。
            </summary>
      <param name="key">
                用作要添加的元素的键的对象。
              </param>
      <param name="value">
                用作要添加的元素的值的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.IDictionary" />。
                
                  - 或 -
                
                  <paramref name="value" /> 不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.IDictionary" />。
                
                  - 或 -
                
                  <see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置具有指定键的元素。
            </summary>
      <param name="key">
                要获取的元素的键。
              </param>
      <returns>
              如果 <see langword="null" /> 不在字典中或 <paramref name="key" /> 的类型属于不能分配给 <paramref name="key" /> 的键类型 <paramref name="TKey" />，则为具有指定键的元素或 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  正在分配一个值，并 <paramref name="key" /> 是不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
                
                  - 或 -
                
                  正在分配一个值，并 <paramref name="value" /> 是不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>
              表示基于相关的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现按键进行排序的键/值对的集合。
            </summary>
      <typeparam name="TKey">
                集合中的键的类型。
              </typeparam>
      <typeparam name="TValue">
                集合中值的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有默认的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有默认的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
              
                - 或 -
              
                为这类键使用默认的 <see langword="null" />，则为 <see cref="T:System.Collections.Generic.Comparer`1" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复的键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有指定的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。
              </param>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
              
                - 或 -
              
                为这类键使用默认的 <see langword="null" />，则为 <see cref="T:System.Collections.Generic.Comparer`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复的键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有指定的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。
              </param>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
              
                - 或 -
              
                为这类键使用默认的 <see langword="null" />，则为 <see cref="T:System.Collections.Generic.Comparer`1" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>
              将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>
              获取或设置 <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 的值。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  系统上没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除所有元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>
              获取该排序列表的 <see cref="T:System.Collections.Generic.IComparer`1" />。
            </summary>
      <returns>
              当前 <see cref="T:System.IComparable`1" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定值。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>
              获取包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.SortedList`2" /> 的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>
              在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定键并返回从零开始的索引。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。
              </param>
      <returns>
              如果找到，则为整个 <paramref name="key" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>
              在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定的值，并返回第一个匹配项的从零开始的索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。
                  对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 第一个匹配项的从零开始的索引；否则为 -1。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置其值的键。
              </param>
      <returns>
              与指定的键相关联的值。
               如果找不到指定的键，则 get 操作会引发一个 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个使用指定键的新元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                  已检索该属性且集合中不存在 <paramref name="key" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>
              获取一个按排序顺序包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <returns>
              如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。
                如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，则此方法也会返回 <see cref="T:System.Collections.Generic.SortedList`2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>
              移除 <see cref="T:System.Collections.Generic.SortedList`2" /> 的指定索引处的元素。
            </summary>
      <param name="index">
                要移除的元素的从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.SortedList`2.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>
              如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的实际元素数。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>
              获取与指定键关联的值。
            </summary>
      <param name="key">
                要获取其值的键。
              </param>
      <param name="value">
                当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              向 <see cref="T:System.Collections.Generic.ICollection`1" /> 中添加键/值对。
            </summary>
      <param name="keyValuePair">
                要添加到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定元素。
            </summary>
      <param name="keyValuePair">
                要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.ICollection`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定键/值对的第一个匹配项。
            </summary>
      <param name="keyValuePair">
                要从 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 移除的 <see cref="T:System.Collections.Generic.ICollection`1" />。
              </param>
      <returns>
              如果从 <see langword="true" /> 中成功移除 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               如果在原始 <see langword="false" /> 中没有找到 <paramref name="keyValuePair" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
              获取包含只读字典中的键的可枚举集合。
            </summary>
      <returns>
              包含只读字典中的键的可枚举集合。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
              获取包含只读字典中的值的可枚举集合。
            </summary>
      <returns>
              包含只读字典中的值的可枚举集合。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。
            </summary>
      <param name="key">
                用作要添加的元素的键的 <see cref="T:System.Object" />。
              </param>
      <param name="value">
                用作要添加的元素的键的 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.IDictionary" />。
                
                  - 或 -
                
                  <paramref name="value" /> 不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.IDictionary" />。
                
                  - 或 -
                
                  <see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置具有指定键的元素。
            </summary>
      <param name="key">
                要获取或设置的元素的键。
              </param>
      <returns>
              如果 <see langword="null" /> 不在字典中或 <paramref name="key" /> 的类型属于不能分配给 <paramref name="key" /> 的键类型 <paramref name="TKey" />，则为具有指定键的元素或 <see cref="T:System.Collections.Generic.SortedList`2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  正在分配一个值，并 <paramref name="key" /> 是不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。
                
                  - 或 -
                
                  正在分配一个值，并 <paramref name="value" /> 是不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>
              将枚举数推进到下一个元素 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例所需的数据。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例所需的信息。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>
              表示按排序顺序维护的对象的集合。
            </summary>
      <typeparam name="T">
                集内元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，该类使用指定的比较器。
            </summary>
      <param name="comparer">
                要用来进行比较的对象的默认比较器。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，其中包含的元素复制从指定的可枚举集合。
            </summary>
      <param name="collection">
                要复制的可枚举集合。
              </param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，其中包含的元素复制从指定的可枚举集合，并使用指定的比较器。
            </summary>
      <param name="collection">
                要复制的可枚举集合。
              </param>
      <param name="comparer">
                要用来进行比较的对象的默认比较器。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，其中包含序列化数据。
            </summary>
      <param name="info">
                包含序列化所需的信息的对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。
              </param>
      <param name="context">
                包含的源和目标与相关联的序列化流的结构 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。
              </param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>
              向集内添加元素，并返回一个指示是否已成功添加元素的值。
            </summary>
      <param name="item">
                要添加到集中的元素。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="item" /> 添加到集; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>
              从集内移除所有元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>
              获取用于为 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值排序的 <see cref="T:System.Collections.Generic.IComparer`1" /> 对象。
            </summary>
      <returns>
              用于为 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值排序的比较器。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>
              确定集是否包含特定元素。
            </summary>
      <param name="item">
                要在集内定位的元素。
              </param>
      <returns>
        <see langword="true" /> 如果该集包含 <paramref name="item" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
              将指定的数目的元素从复制 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从指定的数组索引处开始。
            </summary>
      <param name="array">
                一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <param name="count">
                要复制的元素数。
              </param>
      <exception cref="T:System.ArgumentException">
                  源数组中的元素数大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>
              将复制的完整 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从指定的数组索引处开始。
            </summary>
      <param name="array">
                一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentException">
                  源数组中的元素数大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>
              将复制的完整 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从目标数组的开头。
            </summary>
      <param name="array">
                一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.SortedSet`1" /> 超过目标数组可包含的元素数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>
              获取中的元素数 <see cref="T:System.Collections.Generic.SortedSet`1" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的元素的数量。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary>
              返回 <see cref="T:System.Collections.IEqualityComparer" /> 可用来创建包含各个集的集合的对象。
            </summary>
      <returns>
              用于创建集的集合的比较器。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              返回 <see cref="T:System.Collections.IEqualityComparer" /> 对象根据指定的比较器，用于创建包含各个集的集合。
            </summary>
      <param name="memberEqualityComparer">
                用于创建返回的比较器的比较器。
              </param>
      <returns>
              用于创建集的集合的比较器。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              移除从当前的指定集合中的所有元素 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。
            </summary>
      <param name="other">
                要从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象中移除的项的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的枚举数。
            </summary>
      <returns>
              返回一个按排序顺序循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的枚举数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回必须要序列化的数据 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>
              返回的视图中一小部分 <see cref="T:System.Collections.Generic.SortedSet`1" />。
            </summary>
      <param name="lowerValue">
                视图中所需的最小值。
              </param>
      <param name="upperValue">
                视图中所需的最大值。
              </param>
      <returns>
              仅包含指定范围内的值的子集视图。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="lowerValue" /> 是多个 <paramref name="upperValue" /> 根据比较器。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  在视图上尝试的操作指定的范围超出了 <paramref name="lowerValue" /> 和 <paramref name="upperValue" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              修改当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象，因此该变量包含也存在在指定集合中的唯一元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的真子集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的真超集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的子集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
        <see langword="true" /> 如果当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是子集 <paramref name="other" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的超集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>
              获取最大值 <see cref="T:System.Collections.Generic.SortedSet`1" />, ，如比较器的定义。
            </summary>
      <returns>
              集内的最大值。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>
              获取最小值 <see cref="T:System.Collections.Generic.SortedSet`1" />, ，如比较器的定义。
            </summary>
      <returns>
              集内的最小值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并反序列化时引发事件已完成反序列化。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定是否当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和指定的集合共享通用元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和 <paramref name="other" /> 共享至少一个公共元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>
              移除指定的项从 <see cref="T:System.Collections.Generic.SortedSet`1" />。
            </summary>
      <param name="item">
                要移除的元素。
              </param>
      <returns>
        <see langword="true" /> 如果找到并成功移除，则该元素否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
              移除与从指定的谓词所定义的条件匹配的所有元素 <see cref="T:System.Collections.Generic.SortedSet`1" />。
            </summary>
      <param name="match">
                用于定义要移除的元素应满足的条件的委托。
              </param>
      <returns>
              已删除的元素数目 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合...
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>
              返回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，它循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 按相反的顺序。
            </summary>
      <returns>
              枚举数循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 按相反的顺序。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定是否当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和指定的集合包含相同的元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
        <see langword="true" /> 如果当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否等于 <paramref name="other" />; 否则为 false。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              修改当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象以使其包含存在的元素显示在当前对象或指定的集合中，但不要同时使用两者。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary>
              在集内搜索给定的值，并返回所找到的相等值（如果有）。
            </summary>
      <param name="equalValue">
                要搜索的值。
              </param>
      <param name="actualValue">
                搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回 T 的默认值。
              </param>
      <returns>
              一个指示搜索是否成功的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              修改当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象以使其包含在当前对象或指定的集合中存在的所有元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
              向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Collections.ICollection" /> 是只读的。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              用于循环访问集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将复制的完整 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从指定的数组索引处开始。
            </summary>
      <param name="array">
                一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentException">
                  源数组中的元素数大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。
            </summary>
      <returns>
        <see langword="true" /> 如果访问 <see cref="T:System.Collections.ICollection" /> 同步; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
               在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              用于循环访问集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> 接口，并反序列化时引发事件已完成反序列化。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回需要序列化的数据 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，它包含与 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中位于该枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举器位于集合中第一个元素之前或最后一个元素之后。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.Stack`1" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
               此类不能被继承。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>
              表示可变大小的后进先出 (LIFO) 集合（对于相同指定类型的实例）。
            </summary>
      <typeparam name="T">
                指定堆栈中元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。
            </summary>
      <param name="collection">
                从中复制元素的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.Stack`1" /> ，该类为空并具有指定的初始容量或默认的初始容量，则两者中较大。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>
              确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Stack`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.Generic.Stack`1" /> 到现有一维 <see cref="T:System.Array" />, 指定的数组索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Stack`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.Stack`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
              返回的枚举数 <see cref="T:System.Collections.Generic.Stack`1" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Stack`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
              返回的对象顶部的 <see cref="T:System.Collections.Generic.Stack`1" /> 而不删除它。
            </summary>
      <returns>
              在顶部的对象 <see cref="T:System.Collections.Generic.Stack`1" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
              移除并返回位于顶部的对象 <see cref="T:System.Collections.Generic.Stack`1" />。
            </summary>
      <returns>
              从顶部删除的对象 <see cref="T:System.Collections.Generic.Stack`1" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>
              在 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部插入一个对象。
            </summary>
      <param name="item">
                要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
              副本 <see cref="T:System.Collections.Generic.Stack`1" /> 到新数组。
            </summary>
      <returns>
              新数组包含元素的副本 <see cref="T:System.Collections.Generic.Stack`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
              如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>
              管理位值的压缩数组，这些值以布尔值的形式表示，其中 <see langword="true" /> 表示此位为开 (1)，<see langword="false" /> 表示此位为关 (0)。
            </summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>
              初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该实例包含从布尔值指定数组复制的位值。
            </summary>
      <param name="values">
                要复制的布尔值数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>
              初始化 <see cref="T:System.Collections.BitArray" /> 的新实例，该实例包含从指定的字节数组复制的位值。
            </summary>
      <param name="bytes">
                字节数组包含要复制的值，此处每个字节代表八个连续位。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 的长度大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>
              初始化包含从指定 <see cref="T:System.Collections.BitArray" /> 复制的位值的 <see cref="T:System.Collections.BitArray" /> 类的新实例。
            </summary>
      <param name="bits">
                要复制的 <see cref="T:System.Collections.BitArray" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该类可拥有指定数目的位值，位值最初设置为 <see langword="false" />。
            </summary>
      <param name="length">
                新 <see cref="T:System.Collections.BitArray" /> 中位值的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>
              初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，该类包含从指定的 32 位整数数组复制的位值。
            </summary>
      <param name="values">
                包含要复制的值的整数数组，在这里每个整数都表示 32 个连续位。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> 的长度大于 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Collections.BitArray" /> 类的新实例，此实例可以容纳指定数量的位值，并且将其初始值设置为指定值。
            </summary>
      <param name="length">
                新 <see cref="T:System.Collections.BitArray" /> 中位值的数目。
              </param>
      <param name="defaultValue">
                要赋值给每个位的布尔值。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>
              在当前 <see cref="T:System.Collections.BitArray" /> 对象中的元素和指定数组中的相应元素之间执行按位“与”运算。
               将修改当前 <see cref="T:System.Collections.BitArray" /> 对象，以存储按位“与”运算的结果。
            </summary>
      <param name="value">
                要与其执行按位“与”运算的数组。
              </param>
      <returns>
              包含按位“与”运算结果的数组，此数组是对当前 <see cref="T:System.Collections.BitArray" /> 对象的引用。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和当前 <see cref="T:System.Collections.BitArray" /> 不具有相同数量的元素。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>
              创建 <see cref="T:System.Collections.BitArray" /> 的浅表副本。
            </summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 的浅表副本。
            </returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>
              从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.BitArray" /> 复制到兼容的一维 <see cref="T:System.Array" />。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.BitArray" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.BitArray" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.BitArray" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>
              获取 <see cref="T:System.Collections.BitArray" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>
              获取 <see cref="T:System.Collections.BitArray" /> 中特定位置处的位值。
            </summary>
      <param name="index">
                要获取的值的从零开始索引。
              </param>
      <returns>
              位置 <paramref name="index" /> 处的位值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 大于或等于 <see cref="T:System.Collections.BitArray" /> 中的元素数。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.BitArray" /> 的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 整个 <see cref="T:System.Collections.BitArray" />。
            </returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.BitArray" /> 是否为只读。
            </summary>
      <returns>
              此属性始终为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.BitArray" /> 的访问（线程安全）。
            </summary>
      <returns>
              此属性始终为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>
              获取或设置 <see cref="T:System.Collections.BitArray" /> 中特定位置的位值。
            </summary>
      <param name="index">
                要获取或设置的值的从零开始索引。
              </param>
      <returns>
              位置 <paramref name="index" /> 处的位值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.BitArray.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>
              获取或设置 <see cref="T:System.Collections.BitArray" /> 中的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 中的元素的数量。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  该属性已设置为一个小于零的值。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>
              反转当前 <see cref="T:System.Collections.BitArray" /> 中的所有位值，以便将设置为 <see langword="true" /> 的元素更改为 <see langword="false" />；将设置为 <see langword="false" /> 的元素更改为 <see langword="true" />。
            </summary>
      <returns>
              具有已反转的位值的当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>
              在当前 <see cref="T:System.Collections.BitArray" /> 对象中的元素和指定数组中的相应元素之间执行按位“或”运算。
               将修改当前 <see cref="T:System.Collections.BitArray" /> 对象，以存储按位“或”运算的结果。
            </summary>
      <param name="value">
                要用其执行按位“或”运算的数组。
              </param>
      <returns>
              包含按位“或”运算结果的数组，此数组是对当前 <see cref="T:System.Collections.BitArray" /> 对象的引用。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和当前 <see cref="T:System.Collections.BitArray" /> 不具有相同数量的元素。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>
              将 <see cref="T:System.Collections.BitArray" /> 中特定位置处的位设置为指定值。
            </summary>
      <param name="index">
                要设置的位的从零开始索引。
              </param>
      <param name="value">
                要分配给比特位的布尔值。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 大于或等于 <see cref="T:System.Collections.BitArray" /> 中的元素数。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>
              将 <see cref="T:System.Collections.BitArray" /> 中的所有位设置为指定值。
            </summary>
      <param name="value">
                要分配给所有位的布尔值。
              </param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.BitArray" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.BitArray" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>
              针对指定数组中的相应元素，在当前 <see cref="T:System.Collections.BitArray" /> 对象中的元素间执行按位“异或”运算。
               将修改当前 <see cref="T:System.Collections.BitArray" /> 对象，以存储按位“异或”运算的结果。
            </summary>
      <param name="value">
                用其执行按位“异或”运算的数组。
              </param>
      <returns>
              一个包含按位“异或”运算的结果的数组，这是对当前 <see cref="T:System.Collections.BitArray" /> 对象的引用。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和当前 <see cref="T:System.Collections.BitArray" /> 不具有相同数量的元素。
                </exception>
    </member>
    <member name="M:System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <param name="array">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="P:System.Collections.BitArray.System#Collections#ICollection#Count">
      <returns>
      </returns>
    </member>
    <member name="P:System.Collections.BitArray.System#Collections#ICollection#IsSynchronized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Collections.BitArray.System#Collections#ICollection#SyncRoot">
      <returns>
      </returns>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <param name="dictionary">
      </param>
      <param name="key">
      </param>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <param name="dictionary">
      </param>
      <param name="key">
      </param>
      <param name="defaultValue">
      </param>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <param name="dictionary">
      </param>
      <param name="key">
      </param>
      <param name="value">
      </param>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <param name="dictionary">
      </param>
      <param name="key">
      </param>
      <param name="value">
      </param>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>
              为实现提供基类实现的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口。
            </summary>
      <typeparam name="T">
                要比较的对象的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Comparer`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>
              当在派生类中重写时执行相同类型的两个对象进行比较并返回一个值，指示一个对象小于、 等于还是大于另。
            </summary>
      <param name="x">
                要比较的第一个对象。
              </param>
      <param name="y">
                要比较的第二个对象。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。
            
                      值 
                    
                      含义 
                    
                      小于零 
                    
                      <paramref name="x" /> 小于 <paramref name="y" />。
                    
                      零 
                    
                      <paramref name="x" /> 等于 <paramref name="y" />。
                    
                      大于零 
                    
                      <paramref name="x" /> 大于 <paramref name="y" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
                  类型 <paramref name="T" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary>
              使用指定的比较来创建一个比较器。
            </summary>
      <param name="comparison">
                要使用的比较。
              </param>
      <returns>
              新的比较器。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>
              返回的默认排序顺序的类型由泛型参数指定的比较器。
            </summary>
      <returns>
              继承的对象 <see cref="T:System.Collections.Generic.Comparer`1" /> ，并作为类型的排序顺序比较器 <paramref name="T" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>
              比较两个对象并返回指示一个是否小于、 等于还是大于另一个值。
            </summary>
      <param name="x">
                要比较的第一个对象。
              </param>
      <param name="y">
                要比较的第二个对象。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。
            
                      值 
                    
                      含义 
                    
                      小于零
                    
                      <paramref name="x" /> 小于 <paramref name="y" />。
                    
                      零
                    
                      <paramref name="x" /> 等于 <paramref name="y" />。
                    
                      大于零
                    
                      <paramref name="x" /> 大于 <paramref name="y" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 所属的类型不能被强制转换为键入 <paramref name="T" />。
                
                  - 或 -
                
                  <paramref name="x" /> 和 <paramref name="y" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口或 <see cref="T:System.IComparable" /> 接口。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              字典中位于该枚举数当前位置的元素作为 <see cref="T:System.Collections.DictionaryEntry" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>
              获取枚举数当前位置的元素键。
            </summary>
      <returns>
              字典中位于枚举数当前位置的元素的键。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>
              获取枚举数当前位置的元素的值。
            </summary>
      <returns>
              字典中位于枚举数当前位置的元素的值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于该枚举数当前位置的元素作为 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>
              表示 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中密钥的集合。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 类来反映中指定的键 <see cref="T:System.Collections.Generic.Dictionary`2" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 其键反映在新 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中包含的元素数。
            
              检索此属性的值的运算复杂度为 O(1)。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
              </param>
      <exception cref="T:System.NotSupportedException">
                  始终引发。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  始终引发。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。
              </param>
      <returns>
              如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到项，此方法也会返回 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  始终引发。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>
              表示 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中值的集合。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 类来反映中指定的值 <see cref="T:System.Collections.Generic.Dictionary`2" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 其值反映在新 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
                此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
              </param>
      <exception cref="T:System.NotSupportedException">
                  始终引发。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
                此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  始终引发。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
               此实现始终引发 <see cref="T:System.NotSupportedException" />。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。
              </param>
      <returns>
              如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               如果在原始 <see langword="false" /> 中没有找到 <paramref name="item" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  始终引发。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>
              表示键和值的集合。
            
              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
            </summary>
      <typeparam name="TKey">
                字典中的键的类型。
              </typeparam>
      <typeparam name="TValue">
                字典中的值的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空，具有默认的初始容量并为键类型使用默认的相等比较器。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 复制的元素并为键类型使用默认的相等比较器。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.Dictionary`2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="collection">
      </param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空，具有默认的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="comparer">
                比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或者为 <see langword="null" />，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空，具有指定的初始容量并为键类型使用默认的相等比较器。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于 0。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.Dictionary`2" />。
              </param>
      <param name="comparer">
                比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或者为 <see langword="null" />，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <param name="collection">
      </param>
      <param name="comparer">
      </param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例，该实例为空，具有指定的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 可包含的初始元素数。
              </param>
      <param name="comparer">
                比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或者为 <see langword="null" />，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于 0。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 所需的信息。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构包含与 <see cref="T:System.Collections.Generic.Dictionary`2" /> 关联的序列化流的源和目标。
              </param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>
              将指定的键和值添加到字典中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>
              将所有键和值从 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中移除。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>
              获取用于确定字典中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口实现，它用于确定当前 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键是否相等并为键提供哈希值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含指定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.Dictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.Dictionary`2" /> 是否包含特定值。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中定位的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.Dictionary`2" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>
              获取包含在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键/值对的数目。
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键/值对的数目。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 结构。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 实例所需的数据。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 实例所需的信息。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，它包含与 <see cref="T:System.Collections.Generic.Dictionary`2" /> 实例关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置的值的键。
              </param>
      <returns>
              与指定的键相关联的值。
               如果指定键未找到，则 Get 操作引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 Set 操作创建一个带指定键的新元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                  已检索该属性且集合中不存在 <paramref name="key" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />，包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.Dictionary`2" /> 实例无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>
              将带有指定键的值从 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中移除。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <returns>
              如果成功找到并移除该元素，则为 <see langword="true" />；否则为 <see langword="false" />。
                如果在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中没有找到 <paramref name="key" />，则此方法返回 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <param name="key">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <param name="key">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>
              获取与指定键关联的值。
            </summary>
      <param name="key">
                要获取的值的键。
              </param>
      <param name="value">
                当此方法返回时，如果找到指定键，则包含与该键相关的值；否则包含 <paramref name="value" /> 参数类型的默认值。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.Dictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />，包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              添加指定值到带有指定键的 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </summary>
      <param name="keyValuePair">
                表示要添加到 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 的键为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含一个指定键和值。
            </summary>
      <param name="keyValuePair">
                要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一个数组。
            </summary>
      <param name="array">
                类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
              获取一个值，该值指示字典是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              从字典中移除键和值。
            </summary>
      <param name="keyValuePair">
                表示要从 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中移除的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。
              </param>
      <returns>
              如果成功找到并移除 <paramref name="keyValuePair" /> 所表示的键和值，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到 <paramref name="keyValuePair" />，则此方法返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的键的集合。
            </summary>
      <returns>
              一个包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的键的集合。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的值的集合。
            </summary>
      <returns>
              一个包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的值的集合。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个数组中。
            </summary>
      <param name="array">
                一维数组，用作从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标位置。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.Generic.ICollection`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.Generic.ICollection`1" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              将指定的键和值添加到字典中。
            </summary>
      <param name="key">
                要用作键的对象。
              </param>
      <param name="value">
                要用作值的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2" />。
                
                  - 或 -
                
                  <paramref name="value" /> 不能分配给的类型 <paramref name="TValue" />, 中的值类型 <see cref="T:System.Collections.Generic.Dictionary`2" />。
                
                  - 或 -
                
                  中已存在具有相同键的值 <see cref="T:System.Collections.Generic.Dictionary`2" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置具有指定键的值。
            </summary>
      <param name="key">
                要获取的值的键。
              </param>
      <returns>
              如果 <paramref name="key" /> 不在字典中或 <paramref name="key" /> 的类型属于不可分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的键类型 <paramref name="TKey" />，则为与指定的键关联的值或为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  正在分配一个值，和<paramref name="key" />不能分配给键的类型的类型<paramref name="TKey" />的<see cref="T:System.Collections.Generic.Dictionary`2" />。
                
                  - 或 -
                
                  正在分配一个值，和<paramref name="value" />不能分配给值类型的类型<paramref name="TValue" />的<see cref="T:System.Collections.Generic.Dictionary`2" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>
              获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>
              为实现提供基类实现的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口。
            </summary>
      <typeparam name="T">
                要比较的对象的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>
              返回一个默认的相等比较器，用于比较此泛型自变量指定的类型。
            </summary>
      <returns>
              默认实例 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 类型的类 <paramref name="T" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>
              当在派生类中重写，确定两个类型的对象 <paramref name="T" /> 是否相等。
            </summary>
      <param name="x">
                要比较的第一个对象。
              </param>
      <param name="y">
                要比较的第二个对象。
              </param>
      <returns>
              如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>
              在派生类中重写时，用作指定对象的哈希算法和数据结构（如哈希表）的哈希函数。
            </summary>
      <param name="obj">
                要为其获取哈希代码的对象。
              </param>
      <returns>
              指定对象的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  一种 <paramref name="obj" /> 是引用类型和 <paramref name="obj" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>
              确定指定的对象是否相等。
            </summary>
      <param name="x">
                要比较的第一个对象。
              </param>
      <param name="y">
                要比较的第二个对象。
              </param>
      <returns>
              如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 所属的类型不能被强制转换为键入 <paramref name="T" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>
              返回指定对象的哈希代码。
            </summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要为其哈希代码会返回。
              </param>
      <returns>
              指定对象的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  一种 <paramref name="obj" /> 是引用类型和 <paramref name="obj" /> 是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="obj" /> 所属的类型不能被强制转换为键入 <paramref name="T" />。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              中的元素 <see cref="T:System.Collections.Generic.HashSet`1" /> 位于该枚举数当前位置的集合。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>
              释放使用的所有资源 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>
              将枚举数推进到下一个元素 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于该枚举数当前位置的元素作为 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>
              表示值的集。
            
              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
            </summary>
      <typeparam name="T">
                哈希集中的元素类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的默认相等比较器。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的默认相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。
            </summary>
      <param name="collection">
                其元素被复制到新集中的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的指定相等比较器。
            </summary>
      <param name="comparer">
                在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 <see langword="null" /> 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary>
              
			初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空，但已为 <paramref name="capacity" /> 项保留空间并使用集类型的默认相等比较器。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 的初始大小
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的指定相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。
            </summary>
      <param name="collection">
                其元素被复制到新集中的集合。
              </param>
      <param name="comparer">
                在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 <see langword="null" /> 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              
        初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的新实例，该实例使用集类型的指定相等比较器，并且其容量足以容纳 <paramref name="capacity" /> 元素。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 的初始大小
              </param>
      <param name="comparer">
                
				比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现；如果要使用集类型的默认 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，则为 null（在 Visual Basic 中为 Nothing）。
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的新实例。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的信息。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的序列化流的源和目标。
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>
              将指定的元素添加到集中。
            </summary>
      <param name="item">
                要添加到集中的元素。
              </param>
      <returns>
              如果该元素添加到 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中则为 <see langword="true" />；如果该元素已存在则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除所有元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>
              获取用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。
            </summary>
      <returns>
              用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>
              确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否包含指定的元素。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中查找的元素。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象包含指定的元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>
              将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。
            </summary>
      <param name="array">
                作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。
                 该数组的索引必须从零开始。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>
              从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。
            </summary>
      <param name="array">
                作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。
                 该数组的索引必须从零开始。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标的长度 <paramref name="array" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
              从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的指定数目的元素复制到数组中。
            </summary>
      <param name="array">
                作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。
                 该数组的索引必须从零开始。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <param name="count">
                要复制到 <paramref name="array" /> 的元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标的长度 <paramref name="array" />。
                
                  - 或 -
                
                  <paramref name="count" /> 从可用空间大于 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>
              获取集中包含的元素数。
            </summary>
      <returns>
              集中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>
              返回 <see cref="T:System.Collections.IEqualityComparer" /> 对象，该对象可用于对 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行相等测试。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，可用于对 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行深入的相等测试。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              从当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除指定集合中的所有元素。
            </summary>
      <param name="other">
                要从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除的项的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的枚举器。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口并返回序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的数据。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的信息。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以仅包含该对象和指定集合中存在的元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真子集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真超集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的子集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的超集。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定是否当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和指定的集合共享通用元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和 <paramref name="other" /> 共享至少一个公共元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象移除指定元素。
            </summary>
      <param name="item">
                要移除的元素。
              </param>
      <returns>
              如果成功找到并移除该元素，则为 <see langword="true" />；否则为 <see langword="false" />。
                如果未在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中找到 <paramref name="item" />，则此方法返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
              从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除与指定的谓词所定义的条件相匹配的所有元素。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。
              </param>
      <returns>
              从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除的元素数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和指定集合包含相同的元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象与 <paramref name="other" /> 相等，则为 <see langword="true" />；否则为 false。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              修改当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象以仅包含存在于该对象中或存在于指定集合中的元素（但并非两者）。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>
              将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的容量设置为它包含的实际元素数，向上舍入为接近的特定于实现的值。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary>
              在集内搜索给定的值，并返回所找到的相等值（如果有）。
            </summary>
      <param name="equalValue">
                要搜索的值。
              </param>
      <param name="actualValue">
                搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回 T 的默认值。
              </param>
      <returns>
              一个指示搜索是否成功的值。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              修改当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象以包含存在于该对象中、指定集合中或两者中的所有元素。
            </summary>
      <param name="other">
                要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
              向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              获取一个值，该值指示集合是否为只读。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
               此类不能被继承。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的数据。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的信息。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>
              表示双重链接列表。
            </summary>
      <typeparam name="T">
                指定链接列表的元素类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>
              初始化为空的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并且其容量足以容纳所复制的元素数。
            </summary>
      <param name="collection">
        <see cref="T:System.Collections.IEnumerable" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 是可序列化与指定的类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 所需的信息。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Generic.LinkedList`1" /> 关联的序列化流的源和目标。
              </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
              在中指定的现有节点之后添加指定的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其之后插入 <paramref name="newNode" />。
              </param>
      <param name="newNode">
                新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 将添加到 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="newNode" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                
                  - 或 -
                
                  <paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
              添加包含指定的值中指定的现有节点后的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其之后插入新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。
              </param>
      <param name="value">
                要添加到值 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <returns>
              新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
              添加指定的新节点中指定的现有节点前 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其前面进行插入 <paramref name="newNode" />。
              </param>
      <param name="newNode">
                新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 将添加到 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="newNode" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                
                  - 或 -
                
                  <paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
              添加包含在指定的现有节点前的指定的值的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其前面进行插入一个新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。
              </param>
      <param name="value">
                要添加到值 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <returns>
              新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
              将指定的新节点添加的开头 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
                新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的开头添加 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
              添加包含指定的值的开头的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="value">
                要添加的开头处的值 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <returns>
              新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
              将指定的新节点添加的末尾 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
                新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的末尾添加 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
              添加包含指定的值的末尾的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="value">
                值的结尾处添加 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <returns>
              新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
              删除所有节点从 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>
              确定一个值是否在 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="value" />，则为 <see cref="T:System.Collections.Generic.LinkedList`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>
              从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源中的元素数目 <see cref="T:System.Collections.Generic.LinkedList`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
              获取中实际包含的节点数 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <returns>
              中实际包含的节点数 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>
              查找包含指定的值的第一个节点。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。
              </param>
      <returns>
              第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> ，包含指定的值时，如果找到; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>
              查找包含指定的值的最后一个节点。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。
              </param>
      <returns>
              最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> ，包含指定的值时，如果找到; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
              获取的第一个节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <returns>
              第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的数据。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的信息。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
              获取的最后一个节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <returns>
              最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
              移除指定的节点从 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="node">
                要从 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 移除的 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
              移除从指定的值的第一个匹配项 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <param name="value">
                要移除的值 <see cref="T:System.Collections.Generic.LinkedList`1" />。
              </param>
      <returns>
        <see langword="true" /> 如果元素包含 <paramref name="value" /> 成功删除; 否则为 <see langword="false" />。
                如果在原始 <see langword="false" /> 中没有找到 <paramref name="value" />，则此方法也会返回 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
              删除的开始处的节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
              删除节点的末尾 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
              在末尾添加一项 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </summary>
      <param name="value">
                值的结尾处添加 <see cref="T:System.Collections.Generic.ICollection`1" />。
              </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问链接列表作为集合的枚举。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问链接列表以一个集合。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>
              表示中的节点<see cref="T:System.Collections.Generic.LinkedList`1" />。
               无法继承此类。
            </summary>
      <typeparam name="T">
                指定链接列表的元素类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 类，包含指定的值。
            </summary>
      <param name="value">
                要在包含的值 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
              </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>
              获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> ， <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 属于。
            </summary>
      <returns>
              对引用 <see cref="T:System.Collections.Generic.LinkedList`1" /> ， <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 属于，或 <see langword="null" /> 如果 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 未链接。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>
              获取下一个节点中 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <returns>
              中的下一个节点的引用 <see cref="T:System.Collections.Generic.LinkedList`1" />, ，或 <see langword="null" /> 如果当前节点是最后一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>
              获取上一个节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </summary>
      <returns>
              中的上一个节点的引用 <see cref="T:System.Collections.Generic.LinkedList`1" />, ，或 <see langword="null" /> ，如果当前节点是第一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>
              获取包含在节点中的值。
            </summary>
      <returns>
              在节点中包含的值。
            </returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.List`1" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 中位于该枚举数当前位置的元素。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.List`1.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.List`1" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 中位于该枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>
              表示可通过索引访问的对象的强类型列表。
               提供用于对列表进行搜索、排序和操作的方法。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
      <typeparam name="T">
                列表中元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例为空并且具有默认初始容量。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。
            </summary>
      <param name="collection">
                一个集合，其元素被复制到新列表中。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例为空并且具有指定的初始容量。
            </summary>
      <param name="capacity">
                新列表最初可以存储的元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于 0。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.Generic.List`1" /> 的结尾处。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Generic.List`1" /> 末尾的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              将指定集合的元素添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾。
            </summary>
      <param name="collection">
                应将其元素添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾的集合。
                 集合自身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素（如果类型 <paramref name="T" /> 为引用类型）。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>
              返回当前集合的只读 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装器。
            </summary>
      <returns>
              一个对象，作为围绕当前 <see cref="T:System.Collections.Generic.List`1" /> 的只读包装器。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>
              使用默认的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中搜索元素，并返回该元素从零开始的索引。
            </summary>
      <param name="item">
                要定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 无法找到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
              使用指定的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中搜索元素，并返回该元素从零开始的索引。
            </summary>
      <param name="item">
                要定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
              
                - 或 -
              
                如果使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。
              </param>
      <returns>
              如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>
              使用指定的比较器在已排序 <see cref="T:System.Collections.Generic.List`1" /> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
      <param name="index">
                要搜索范围的从零开始的起始索引。
              </param>
      <param name="count">
                要搜索的范围的长度。
              </param>
      <param name="item">
                要定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，若要使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。
              </param>
      <returns>
              如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中的有效范围。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>
              获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。
            </summary>
      <returns>
              在需要调整大小之前 <see cref="T:System.Collections.Generic.List`1" /> 可包含的元素数目。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.Generic.List`1.Count" /> 的值。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  系统上没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>
              从 <see cref="T:System.Collections.Generic.List`1" /> 中移除所有元素。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>
              确定某元素是否在 <see cref="T:System.Collections.Generic.List`1" /> 中。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.List`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary>
              将当前 <see cref="T:System.Collections.Generic.List`1" /> 中的元素转换为另一种类型，并返回包含已转换元素的列表。
            </summary>
      <param name="converter">
                一个 <see cref="T:System.Converter`2" /> 委托，可将每个元素从一种类型转换为另一种类型。
              </param>
      <typeparam name="TOutput">
                目标数组元素的类型。
              </typeparam>
      <returns>
              目标类型的 <see cref="T:System.Collections.Generic.List`1" />，包含当前 <see cref="T:System.Collections.Generic.List`1" /> 中转换后的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="converter" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>
              从目标数组的指定索引处开始，将整个 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
              从目标数组的指定索引处开始，将元素的范围从 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组。
            </summary>
      <param name="index">
                复制即从源 <see cref="T:System.Collections.Generic.List`1" /> 中从零开始的索引开始。
              </param>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <param name="count">
                要复制的元素数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="arrayIndex" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于源 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="P:System.Collections.Generic.List`1.Count" />。
                
                  - 或 -
                
                  从 <paramref name="index" /> 到源 <see cref="T:System.Collections.Generic.List`1" /> 的末尾的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>
              从目标数组的开头开始，将整个 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素个数大于目标 <paramref name="array" /> 可以包含的元素个数。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Generic.List`1" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.List`1" /> 是否包含与指定谓词定义的条件匹配的元素。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素应满足的条件。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.List`1" /> 包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中的第一个匹配元素。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>
              检索与指定谓词定义的条件匹配的所有元素。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素应满足的条件。
              </param>
      <returns>
              如果找到一个 <see cref="T:System.Collections.Generic.List`1" />，其中所有元素均与指定谓词定义的条件匹配，则为该数组；否则为一个空 <see cref="T:System.Collections.Generic.List`1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中第一个匹配元素的从零开始的索引。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。
            </summary>
      <param name="startIndex">
                从零开始的搜索的起始索引。
              </param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。
            </summary>
      <param name="startIndex">
                从零开始的搜索的起始索引。
              </param>
      <param name="count">
                要搜索的部分中的元素数。
              </param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.Generic.List`1" /> 中指定有效部分。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中的最后一个匹配元素。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中最后一个匹配元素的从零开始的索引。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>
              搜索与由指定谓词定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
      <param name="startIndex">
                向后搜索的从零开始的起始索引。
              </param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>
              搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
      <param name="startIndex">
                向后搜索的从零开始的起始索引。
              </param>
      <param name="count">
                要搜索的部分中的元素数。
              </param>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。
              </param>
      <returns>
              如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.Generic.List`1" /> 中指定有效部分。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>
              对 <see cref="T:System.Collections.Generic.List`1" /> 的每个元素执行指定操作。
            </summary>
      <param name="action">
                要对 <see cref="T:System.Collections.Generic.List`1" /> 的每个元素执行的 <see cref="T:System.Action`1" /> 委托。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  已修改集合中的某个元素。
                
                    从.NET Framework 4.5 开始，将引发此异常。
                  </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Generic.List`1" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Generic.List`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.List`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>
              在源 <see cref="T:System.Collections.Generic.List`1" /> 中创建元素范围的浅表复制。
            </summary>
      <param name="index">
                范围开始处的从零开始的 <see cref="T:System.Collections.Generic.List`1" /> 索引。
              </param>
      <param name="count">
                范围中的元素数。
              </param>
      <returns>
              源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素范围的浅表副本复制。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>
              搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <param name="index">
                从零开始的搜索的起始索引。
                 空列表中 0（零）为有效值。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从 <paramref name="index" /> 到最后一个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>
              搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <param name="index">
                从零开始的搜索的起始索引。
                 空列表中 0（零）为有效值。
              </param>
      <param name="count">
                要搜索的部分中的元素数。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.Generic.List`1" /> 中指定有效部分。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>
              搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中第一个匹配项的从零开始的索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在整个 <paramref name="item" /> 中找到 <see cref="T:System.Collections.Generic.List`1" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>
              将元素插入 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处。
            </summary>
      <param name="index">
                应插入 <paramref name="item" /> 的从零开始的索引。
              </param>
      <param name="item">
                要插入的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 大于 <see cref="P:System.Collections.Generic.List`1.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
              将集合中的元素插入 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处。
            </summary>
      <param name="index">
                应在此处插入新元素的从零开始的索引。
              </param>
      <param name="collection">
                应将其元素插入到 <see cref="T:System.Collections.Generic.List`1" /> 中的集合。
                 集合自身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素（如果类型 <paramref name="T" /> 为引用类型）。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 大于 <see cref="P:System.Collections.Generic.List`1.Count" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>
              搜索指定对象并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中最后一个匹配项的从零开始索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在整个 <see cref="T:System.Collections.Generic.List`1" /> 中找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>
              搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <param name="index">
                向后搜索的从零开始的起始索引。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到 <paramref name="index" /> 的元素范围内找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>
              搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <param name="index">
                向后搜索的从零开始的起始索引。
              </param>
      <param name="count">
                要搜索的部分中的元素数。
              </param>
      <returns>
              如果找到包含 <paramref name="count" /> 个元素、到 <paramref name="index" /> 为止的索引，则为 <see cref="T:System.Collections.Generic.List`1" /> 中元素范围内 <paramref name="item" /> 的最后一个匹配项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.Generic.List`1" /> 中指定有效部分。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.List`1" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Collections.Generic.List`1" /> 中删除的对象。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。
                如果在 <see langword="false" /> 中没有找到 <paramref name="item" />，则此方法也会返回 <see cref="T:System.Collections.Generic.List`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>
              移除与指定的谓词所定义的条件相匹配的所有元素。
            </summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。
              </param>
      <returns>
              从 <see cref="T:System.Collections.Generic.List`1" /> 中移除的元素数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>
              移除 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处的元素。
            </summary>
      <param name="index">
                要移除的元素的从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
              从 <see cref="T:System.Collections.Generic.List`1" /> 中移除一定范围的元素。
            </summary>
      <param name="index">
                要移除的元素范围的从零开始的起始索引。
              </param>
      <param name="count">
                要移除的元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>
              将整个 <see cref="T:System.Collections.Generic.List`1" /> 中元素的顺序反转。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>
              将指定范围中元素的顺序反转。
            </summary>
      <param name="index">
                要反转的范围的从零开始的起始索引。
              </param>
      <param name="count">
                要反转的范围内的元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>
              使用指定的 <see cref="T:System.Comparison`1" />，对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。
            </summary>
      <param name="comparison">
                比较元素时要使用的 <see cref="T:System.Comparison`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的实现导致排序时出现错误。
                   例如，将某个项与其自身比较时，<paramref name="comparison" /> 可能不返回 0。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>
              使用指定的比较器对 <see cref="T:System.Collections.Generic.List`1" /> 中某个范围内的元素进行排序。
            </summary>
      <param name="index">
                要排序范围的从零开始的起始索引。
              </param>
      <param name="count">
                要排序的范围的长度。
              </param>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，若要使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="count" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.Generic.List`1" /> 中指定有效范围。
                
                  - 或 -
                
                  <paramref name="comparer" /> 的实现导致排序时出现错误。
                   例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>
              使用默认比较器对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  此默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 无法找到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>
              使用指定的比较器对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。
            </summary>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，若要使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。
                   例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Generic.List`1" /> 的元素复制到新数组中。
            </summary>
      <returns>
              一个包含 <see cref="T:System.Collections.Generic.List`1" /> 的元素副本的数组。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>
              将容量设置为 <see cref="T:System.Collections.Generic.List`1" /> 中元素的实际数目（如果该数目小于某个阈值）。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>
              确定 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素是否都与指定谓词定义的条件匹配。
            </summary>
      <param name="match">
                用于定义检查元素时要对照条件的 <see cref="T:System.Predicate`1" /> 委托。
              </param>
      <returns>
              如果 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素都与指定的谓词所定义的条件相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果列表没有元素，则返回值为 <see langword="true" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  <paramref name="array" /> 没有从零开始的索引。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                
                  - 或 -
                
                  源类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回当前实例。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.IList" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 是一个无法赋值给 <see cref="T:System.Collections.IList" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.IList" /> 中定位的对象。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 是一个无法赋值给 <see cref="T:System.Collections.IList" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。
            </summary>
      <param name="index">
                应插入 <paramref name="item" /> 的从零开始的索引。
              </param>
      <param name="item">
                要插入到 <see cref="T:System.Collections.IList" /> 中的对象。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 不能分配给的类型 <see cref="T:System.Collections.IList" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
                在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。
                </exception>
      <exception cref="T:System.ArgumentException">
                  将属性设置和<paramref name="value" />属于不能分配给类型<see cref="T:System.Collections.IList" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Collections.IList" /> 中删除的对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 是一个无法赋值给 <see cref="T:System.Collections.IList" /> 的类型。
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>
              枚举 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中位于该枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举器位于集合中第一个元素之前或最后一个元素之后。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>
              释放由 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>
              使枚举数前进到 <see cref="T:System.Collections.Generic.Queue`1" /> 的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取枚举数当前位置的元素。
            </summary>
      <returns>
              集合中位于枚举数当前位置的元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举数定位在集合或最后一个元素之后的第一个元素之前。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>
              提供用于执行两个集合对象的结构化比较的对象。
            </summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>
              获取执行结构比较两个对象的一个预定义的对象。
            </summary>
      <returns>
              用于执行结构比较两个集合对象的一个预定义的对象。
            </returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>
              获取预定义的对象比较的结构相等的两个对象。
            </summary>
      <returns>
              预定义的对象，用于比较的结构相等的两个集合对象。
            </returns>
    </member>
  </members>
</doc>