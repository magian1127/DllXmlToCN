<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Annotations</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
      <summary>
              表示数据的验证过程中发生的异常字段时<see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />使用类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> 类使用由系统生成的错误消息。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> 类使用指定的错误消息。
            </summary>
      <param name="message">
                指定的说明错误的消息。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> 类使用的序列化数据。
            </summary>
      <param name="info">
                包含序列化数据的对象。
              </param>
      <param name="context">
                有关源或目标的序列化对象的上下文信息。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> 类使用指定的错误消息和内部异常实例的集合。
            </summary>
      <param name="message">
                错误消息。
              </param>
      <param name="innerException">
                验证异常的集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> 类通过使用验证结果、 验证特性和当前异常的值。
            </summary>
      <param name="validationResult">
                验证结果的列表。
              </param>
      <param name="validatingAttribute">
                导致当前异常的属性。
              </param>
      <param name="value">
                导致要触发验证错误的属性的对象的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> 类使用指定的错误消息、 验证特性和当前异常的值。
            </summary>
      <param name="errorMessage">
                用于说明错误的消息。
              </param>
      <param name="validatingAttribute">
                导致当前异常的属性。
              </param>
      <param name="value">
                导致要触发验证错误的属性的对象的值。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
      <summary>
              获取实例 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 引发此异常的类。
            </summary>
      <returns>
              引发此异常的验证特性类型的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
      <summary>
              获取 <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> 描述验证错误的实例。
            </summary>
      <returns>
        <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> 描述验证错误的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
      <summary>
              获取导致的对象的值 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 类来触发此异常。
            </summary>
      <returns>
              导致的对象的值 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 类来触发验证错误。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
      <summary>
              表示验证请求的结果的容器。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> 类通过使用 <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> 对象。
            </summary>
      <param name="validationResult">
                验证结果对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> 类通过使用一条错误消息。
            </summary>
      <param name="errorMessage">
                错误消息。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> 类通过使用一条错误消息和具有验证错误的成员的列表。
            </summary>
      <param name="errorMessage">
                错误消息。
              </param>
      <param name="memberNames">
                具有验证错误的成员名称的列表。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
      <summary>
              获取验证错误消息。
            </summary>
      <returns>
              验证错误消息。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
      <summary>
              获取指示具有验证错误的字段的成员名称的集合。
            </summary>
      <returns>
              指示哪些字段有验证错误的成员名称的集合。
            </returns>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
      <summary>
              表示验证成功 (<see langword="true" /> 如果验证成功，否则为 <see langword="false" />)。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.ToString">
      <summary>
              返回的字符串表示形式的当前验证结果。
            </summary>
      <returns>
              当前的验证结果。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Validator">
      <summary>
              定义用于验证对象、 属性和方法时包含一个帮助器类中其关联 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>
              确定指定的对象是否为有效使用验证的上下文和验证结果集合。
            </summary>
      <param name="instance">
                要验证的对象。
              </param>
      <param name="validationContext">
                用于描述要验证的对象的上下文。
              </param>
      <param name="validationResults">
                集合用于包含每个验证失败。
              </param>
      <returns>
        <see langword="true" /> 如果对象有效;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
      <summary>
              确定指定的对象是否有效使用验证上下文，验证结果集合和一个值，指定是否要验证的所有属性。
            </summary>
      <param name="instance">
                要验证的对象。
              </param>
      <param name="validationContext">
                用于描述要验证的对象的上下文。
              </param>
      <param name="validationResults">
                集合用于包含每个验证失败。
              </param>
      <param name="validateAllProperties">
        <see langword="true" /> 若要验证所有属性;如果 <see langword="false" />, ，则只需要属性进行验证...
              </param>
      <returns>
        <see langword="true" /> 如果对象有效;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>
              验证属性。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <param name="validationContext">
                用于描述要验证的属性的上下文。
              </param>
      <param name="validationResults">
                集合用于包含每个验证失败。
              </param>
      <returns>
        <see langword="true" /> 如果该属性验证;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 不能分配给属性。
                
                  - 或 -
                
                  <paramref name="value " />是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>
              返回一个值，该值指示指定的值是否具有指定属性有效。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <param name="validationContext">
                用于描述要验证的对象的上下文。
              </param>
      <param name="validationResults">
                若要包含失败的验证集合。
              </param>
      <param name="validationAttributes">
                验证特性。
              </param>
      <returns>
        <see langword="true" /> 如果对象有效;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              确定指定的对象是否为有效使用验证上下文。
            </summary>
      <param name="instance">
                要验证的对象。
              </param>
      <param name="validationContext">
                用于描述要验证的对象的上下文。
              </param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
                  对象不是有效的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
      <summary>
              确定指定的对象是否为有效使用验证上下文和指定是否要验证的所有属性的值。
            </summary>
      <param name="instance">
                要验证的对象。
              </param>
      <param name="validationContext">
                用于描述要验证的对象的上下文。
              </param>
      <param name="validateAllProperties">
        <see langword="true" /> 若要验证所有属性;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              验证属性。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <param name="validationContext">
                用于描述要验证的属性的上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 不能分配给属性。
                </exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> 参数无效。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>
              验证指定的特性。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <param name="validationContext">
                用于描述要验证的对象的上下文。
              </param>
      <param name="validationAttributes">
                验证特性。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> 参数不会验证与 <paramref name="validationAttributes" /> 参数。
                </exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
      <summary>
              指定数据字段显示和设置格式的 ASP.NET 动态数据的方式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
      <summary>
              获取或设置一个值，该值指示是否的格式设置字符串，由指定 <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> 数据字段是处于编辑模式时，将属性应用于该字段值。
            </summary>
      <returns>
        <see langword="true" /> 如果要将格式设置字符串应用于该字段值中，编辑模式，则为否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
      <summary>
              获取或设置一个值，该值指示是否将空字符串值 ("") 自动转换为 <see langword="null" /> 数据字段在数据源中的更新时。
            </summary>
      <returns>
        <see langword="true" /> 如果空字符串值自动转换为 <see langword="null" />; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
      <summary>
              获取或设置字段值的显示格式。
            </summary>
      <returns>
              一个指定数据字段的值的显示格式的格式设置字符串。
               默认值为空字符串 ("")，表示尚无特殊格式设置应用于该字段值。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.HtmlEncode">
      <summary>
              获取或设置一个值，该值指示字段是否应 HTML 编码。
            </summary>
      <returns>
        <see langword="true" /> 如果该字段应为 HTML 编码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
      <summary>
              获取或设置该字段的值时，为字段显示的文本 <see langword="null" />。
            </summary>
      <returns>
              该字段的值时，为字段显示的文本 <see langword="null" />。
               默认值为空字符串 ("")，表示尚未设置此属性。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
      <summary>
              指示数据字段是否可编辑。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" /> 类的新实例。
            </summary>
      <param name="allowEdit">
        <see langword="true" /> 若要指定该字段是可编辑;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
      <summary>
              获取一个值，该值指示是否可编辑字段。
            </summary>
      <returns>
        <see langword="true" /> 如果此字段为可编辑;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
      <summary>
              获取或设置一个值，该值指示是否启用初始值。
            </summary>
      <returns>
        <see langword="true " />如果启用了一个初始值，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EmailAddressAttribute">
      <summary>
              验证电子邮件地址。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EmailAddressAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.EmailAddressAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EmailAddressAttribute.IsValid(System.Object)">
      <summary>
              确定指定的值是否与有效的电子邮件地址的模式相匹配。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的值是否有效或 <see langword="null" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute">
      <summary>
              启用 .NET Framework 枚举，以映射到数据列。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" /> 类的新实例。
            </summary>
      <param name="enumType">
                枚举类型。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.EnumType">
      <summary>
              获取或设置枚举类型。
            </summary>
      <returns>
              枚举类型中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.IsValid(System.Object)">
      <summary>
              检查数据字段的值有效。
            </summary>
      <param name="value">
                要验证的数据字段值。
              </param>
      <returns>
        <see langword="true" /> 如果数据字段值是否有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.FileExtensionsAttribute">
      <summary>
              验证文件扩展名。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.FileExtensionsAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.Extensions">
      <summary>
              获取或设置的文件扩展名。
            </summary>
      <returns>
              文件的名称的扩展或默认的文件扩展名 （".png"、".jpg"、".jpeg"和".gif"） 如果未设置该属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.FormatErrorMessage(System.String)">
      <summary>
              对应用格式设置错误消息，根据发生错误的数据字段。
            </summary>
      <param name="name">
                导致验证失败的字段的名称。
              </param>
      <returns>
              格式化的错误消息。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FileExtensionsAttribute.IsValid(System.Object)">
      <summary>
              检查指定的文件名称或多个扩展名有效。
            </summary>
      <param name="value">
                以逗号分隔的有效文件扩展名的列表。
              </param>
      <returns>
        <see langword="true" /> 如果文件扩展名为有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
      <summary>
              表示用于指定列的筛选行为的特性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> 类通过使用筛选器 UI 提示。
            </summary>
      <param name="filterUIHint">
                要用于筛选的控件名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> 类通过使用筛选器用户界面提示和表示层名称。
            </summary>
      <param name="filterUIHint">
                要用于筛选的控件名称。
              </param>
      <param name="presentationLayer">
                支持此控件的表示层的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> 类通过使用筛选器 UI 提示、 表示层名称和控制参数。
            </summary>
      <param name="filterUIHint">
                要用于筛选的控件名称。
              </param>
      <param name="presentationLayer">
                支持此控件的表示层的名称。
              </param>
      <param name="controlParameters">
                控件的参数的列表。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
      <summary>
              获取用作控件的构造函数中的参数的名称/值对。
            </summary>
      <returns>
              用作控件的构造函数中的参数名称/值对。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此特性实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此特性实例进行比较的对象。
              </param>
      <returns>
        <see langword="True" /> 如果传递的对象是否等于此属性实例。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
      <summary>
              获取要用于筛选的控件的名称。
            </summary>
      <returns>
              要用于筛选的控件名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode">
      <summary>
              返回此属性实例的哈希代码。
            </summary>
      <returns>
              此属性实例的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
      <summary>
              获取支持此控件的表示层的名称。
            </summary>
      <returns>
              支持此控件的表示层的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.IValidatableObject">
      <summary>
              提供使对象无效的方法。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              确定指定的对象是否有效。
            </summary>
      <param name="validationContext">
                验证上下文中。
              </param>
      <returns>
              保存失败验证的信息集合。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
      <summary>
              表示唯一标识实体的一个或多个属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.KeyAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute">
      <summary>
              指定属性中允许的数组或字符串数据的最大长度。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 类根据 <paramref name="length" /> 参数。
            </summary>
      <param name="length">
                数组或字符串数据的最大允许长度。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.FormatErrorMessage(System.String)">
      <summary>
              对指定的错误消息应用格式设置。
            </summary>
      <param name="name">
                要包含在格式化字符串中的名称。
              </param>
      <returns>
              用于描述最大可接受长度的本地化字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.IsValid(System.Object)">
      <summary>
              确定指定的对象是否有效。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
      <returns>
              如果该值为 null 或该值小于或等于指定的最大长度，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  长度为零或小于 -1。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.MaxLengthAttribute.Length">
      <summary>
              获取数组或字符串数据的最大允许长度。
            </summary>
      <returns>
              数组或字符串数据的最大允许长度。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.MinLengthAttribute">
      <summary>
              指定属性中允许的数组或字符串数据的最小长度。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.MinLengthAttribute" /> 类的新实例。
            </summary>
      <param name="length">
                数组或字符串数据的长度。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.FormatErrorMessage(System.String)">
      <summary>
              对指定的错误消息应用格式设置。
            </summary>
      <param name="name">
                要包含在格式化字符串中的名称。
              </param>
      <returns>
              用于描述最小可接受长度的本地化字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.IsValid(System.Object)">
      <summary>
              确定指定的对象是否有效。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定的对象是否有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.MinLengthAttribute.Length">
      <summary>
              获取或设置数组或字符串数据的最小允许长度。
            </summary>
      <returns>
              数组或字符串数据的最小允许长度。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.PhoneAttribute">
      <summary>
              指定数据字段值是格式正确的电话号码，使用的是电话号码的正则表达式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.PhoneAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.PhoneAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.PhoneAttribute.IsValid(System.Object)">
      <summary>
              确定指定的电话号码是否有效的电话号码的格式。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <returns>
        <see langword="true" /> 如果电话号码是有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
      <summary>
              为数据字段的值指定数值范围约束。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> 类通过使用指定的最小值和最大值。
            </summary>
      <param name="minimum">
                指定允许的数据字段值的最小值。
              </param>
      <param name="maximum">
                指定允许的数据字段值的最大值。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> 类通过使用指定的最小值和最大值。
            </summary>
      <param name="minimum">
                指定允许的数据字段值的最小值。
              </param>
      <param name="maximum">
                指定允许的数据字段值的最大值。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> 通过使用指定的最小和最大值和特定类型的类。
            </summary>
      <param name="type">
                指定要测试的对象的类型。
              </param>
      <param name="minimum">
                指定允许的数据字段值的最小值。
              </param>
      <param name="maximum">
                指定允许的数据字段值的最大值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
      <summary>
              设置的值域验证失败时显示的错误消息的格式。
            </summary>
      <param name="name">
                导致验证失败的字段的名称。
              </param>
      <returns>
              格式化的错误消息。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)">
      <summary>
              数据字段的值指定范围中的检查。
            </summary>
      <param name="value">
                要验证的数据字段值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的值在范围内;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
                  数据字段值超出了允许范围。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
      <summary>
              获取最大允许的字段值。
            </summary>
      <returns>
              允许的数据字段的最大值。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
      <summary>
              获取最小允许的字段值。
            </summary>
      <returns>
              允许的数据字段的最小值。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
      <summary>
              获取必须验证其值的数据字段的类型。
            </summary>
      <returns>
              必须验证其值的数据字段的类型。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
      <summary>
              指定 ASP.NET 动态数据中的数据字段值必须匹配指定正则表达式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> 类的新实例。
            </summary>
      <param name="pattern">
                用来验证数据字段值的正则表达式。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
      <summary>
              设置要显示在正则表达式验证失败时的错误消息的格式。
            </summary>
      <param name="name">
                导致验证失败的字段的名称。
              </param>
      <returns>
              格式化的错误消息。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)">
      <summary>
              检查用户输入的值是否与正则表达式模式相匹配。
            </summary>
      <param name="value">
                要验证的数据字段值。
              </param>
      <returns>
              如果验证成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
                  数据字段值与正则表达式模式不匹配。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.MatchTimeoutInMilliseconds">
      <summary>
              获取或设置用于在操作超时前执行单个匹配操作的时间量（以毫秒为单位）。
            </summary>
      <returns>
              用于执行单个匹配操作的时间量（以毫秒为单位）。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
      <summary>
              获取正则表达式模式。
            </summary>
      <returns>
              要匹配的模式。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
      <summary>
              指定数据字段值是必需的。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RequiredAttribute.AllowEmptyStrings">
      <summary>
              获取或设置一个值，该值指示是否允许为空字符串。
            </summary>
      <returns>
        <see langword="true" /> 如果允许为空字符串;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)">
      <summary>
              检查所需的数据字段的值不为空。
            </summary>
      <param name="value">
                要验证的数据字段值。
              </param>
      <returns>
              如果验证成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
                  数据字段值为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute">
      <summary>
              指定类或数据列是否使用基架。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute" /> 使用 <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold" /> 属性。
            </summary>
      <param name="scaffold">
                值，该值指定是否启用基架。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold">
      <summary>
              获取或设置用于指定是否启用基架的值。
            </summary>
      <returns>
        <see langword="true" />, 如果启用了基架;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute">
      <summary>
              表示属性将映射到的数据库列。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> 类的新实例。
            </summary>
      <param name="name">
                属性将映射到的列的名称。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Name">
      <summary>
              获取属性映射到的列的名称。
            </summary>
      <returns>
              属性将映射到的列的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Order">
      <summary>
              获取或设置属性映射到的列的从零开始的顺序。
            </summary>
      <returns>
              列的顺序。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.TypeName">
      <summary>
              获取或设置该属性映射到的列的数据库提供程序特定的数据类型。
            </summary>
      <returns>
              属性将映射到的列的数据库提供程序特定数据类型。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute">
      <summary>
              表示该类是复杂类型。
               复杂类型是实体类型的非标量属性，实体类型允许在实体内组织标量属性。
               复杂类型没有键，并且实体框架不能脱离父对象来管理复杂类型。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute">
      <summary>
              指定数据库生成属性值的方式。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.#ctor(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> 类的新实例。
            </summary>
      <param name="databaseGeneratedOption">
                数据库生成的选项。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.DatabaseGeneratedOption">
      <summary>
              获取或设置用于在数据库中生成的属性值的模式。
            </summary>
      <returns>
              数据库生成的选项。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption">
      <summary>
              表示用于在数据库中生成的属性的值的模式。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed">
      <summary>
              在插入或更新行时，数据库将生成值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity">
      <summary>
              在插入行时，数据库将生成值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None">
      <summary>
              数据库不生成值。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute">
      <summary>
              表示关系中用作外键的属性。
               可以将批注放在外键属性上，然后指定关联的导航属性名称；也可以将批注放在导航属性上，然后指定关联的外键名称。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 类的新实例。
            </summary>
      <param name="name">
                如果将 ForeigKey 特性添加到外键属性，则应指定关联的导航属性的名称。
                 如果将 ForeigKey 特性添加到导航属性，则应指定关联的外键的名称。
                 如果导航属性具有多个外键，则使用逗号分隔的外键名称列表。
                 有关详细信息，请参阅 Code First Data Annotations。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.Name">
      <summary>
              如果将 ForeigKey 特性添加到外键属性，则应指定关联的导航属性的名称。
               如果将 ForeigKey 特性添加到导航属性，则应指定关联的外键的名称。
               如果导航属性具有多个外键，则使用逗号分隔的外键名称列表。
               有关详细信息，请参阅 Code First Data Annotations。
            </summary>
      <returns>
              关联的导航属性或关联的外键属性的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute">
      <summary>
              指定表示同一关系的另一端的导航属性的反向属性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> 类使用指定的属性。
            </summary>
      <param name="property">
                表示同一关系的另一端的导航属性。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.Property">
      <summary>
              获取表示同一关系的另一端的导航属性。
            </summary>
      <returns>
              该属性的属性。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute">
      <summary>
              表示应从数据库映射中排除属性或类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute">
      <summary>
              指定类将映射到的数据库表。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> 类使用的表指定的名称。
            </summary>
      <param name="name">
                类将映射到的表的名称。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Name">
      <summary>
              获取类映射到的表的名称。
            </summary>
      <returns>
              类将映射到的表的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Schema">
      <summary>
              获取或设置类映射到表的架构。
            </summary>
      <returns>
              类将映射到的表的架构。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
      <summary>
              指定数据字段中允许的字符的最小长度和最大长度。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 类通过使用指定的最大长度。
            </summary>
      <param name="maximumLength">
                一个字符串，最大长度。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
      <summary>
              对指定的错误消息应用格式设置。
            </summary>
      <param name="name">
                导致验证失败的字段的名称。
              </param>
      <returns>
              格式化的错误消息。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> 为负数。
                
                  - 或 -
                
                  <paramref name="maximumLength" /> 小于 <paramref name="minimumLength" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)">
      <summary>
              确定指定的对象是否有效。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定的对象是否有效，则为否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> 为负。
                
                  - 或 -
                
                  <paramref name="maximumLength" /> 小于 <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
      <summary>
              获取或设置一个字符串的最大长度。
            </summary>
      <returns>
              一个字符串最大长度。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
      <summary>
              获取或设置一个字符串的最小长度。
            </summary>
      <returns>
              一个字符串，最小长度。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
      <summary>
              列的数据类型指定为行版本。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
      <summary>
              指定动态数据使用来将数据字段显示的模板或用户控件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> 通过使用指定的用户控件的类。
            </summary>
      <param name="uiHint">
                要用于显示数据字段的用户控件。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> 类使用指定的用户控件和指定的表示层。
            </summary>
      <param name="uiHint">
                要使用可显示数据的字段的用户控件 （字段模板）。
              </param>
      <param name="presentationLayer">
                使用此类表示层。
                 可以设置为"HTML"、"Silverlight"、"WPF"或"WinForms"。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> 类通过使用指定的用户控件、 表示层和控制参数。
            </summary>
      <param name="uiHint">
                要使用可显示数据的字段的用户控件 （字段模板）。
              </param>
      <param name="presentationLayer">
                使用此类表示层。
                 可以设置为"HTML"、"Silverlight"、"WPF"或"WinForms"。
              </param>
      <param name="controlParameters">
                要使用可从任何数据源检索值的对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> 是 <see langword="null" /> 或者它是一个约束键。
                
                  - 或 -
                
                  值 <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> 不是字符串。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
      <summary>
              获取或设置 <see cref="T:System.Web.DynamicData.DynamicControlParameter" /> 对象，用于从任何数据源中检索值。
            </summary>
      <returns>
              键/值对的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)">
      <summary>
              获取一个值，该值指示此实例是否等于指定的对象。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象或 <see langword="null" /> 引用。
              </param>
      <returns>
        <see langword="true" /> 如果指定的对象是否等于此实例;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode">
      <summary>
              获取该属性的当前实例的哈希代码。
            </summary>
      <returns>
              属性实例的哈希代码。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
      <summary>
              获取或设置表示层使用 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> 类。
            </summary>
      <returns>
              使用此类表示层。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
      <summary>
              获取或设置要用于显示数据字段的字段模板的名称。
            </summary>
      <returns>
              显示数据字段的字段模板的名称。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UrlAttribute">
      <summary>
              提供 URL 验证。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UrlAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UrlAttribute" />类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UrlAttribute.IsValid(System.Object)">
      <summary>
              验证指定的 URL 的格式。
            </summary>
      <param name="value">
                要验证的 URL。
              </param>
      <returns>
        <see langword="true" /> 如果该 URL 的格式无效或 <see langword="null" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
      <summary>
              充当所有验证特性的基类。
            </summary>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />和<see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" />属性本地化的错误消息设置在同一时间非本地化<see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" />设置属性的错误消息。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
      <summary>
              通过使用启用了对验证资源访问的函数来初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 类的新实例。
            </summary>
      <param name="errorMessageAccessor">
                启用了对验证资源访问的函数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="errorMessageAccessor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 使用错误消息来验证控件相关联的类。
            </summary>
      <param name="errorMessage">
                要验证控件相关联的错误消息。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
      <summary>
              获取或设置与验证控件关联，如果验证失败的错误消息。
            </summary>
      <returns>
              与验证控件相关联的错误消息。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
      <summary>
              获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> 属性值，如果验证失败。
            </summary>
      <returns>
              与验证控件相关联的错误消息资源。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
      <summary>
              获取或设置要用于查找错误消息，如果验证失败的资源类型。
            </summary>
      <returns>
              与验证控件相关联的错误消息的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
      <summary>
              获取本地化的验证错误消息。
            </summary>
      <returns>
              本地化的验证错误消息。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
      <summary>
              对应用格式设置错误消息，根据发生错误的数据字段。
            </summary>
      <param name="name">
                要在格式的消息中包含的名称。
              </param>
      <returns>
              格式化的错误消息的实例。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              检查指定的值是否为有效相对于当前的验证特性。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <param name="validationContext">
                有关验证操作的上下文信息。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> 类的实例。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)">
      <summary>
              确定指定的值的对象是否有效。
            </summary>
      <param name="value">
                要验证的对象的值。
              </param>
      <returns>
        <see langword="true" /> 如果指定的值是否有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              验证指定的值相对于当前的验证特性。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <param name="validationContext">
                有关验证操作的上下文信息。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> 类的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext">
      <summary>
              获取一个值，该值指示属性是否要求验证上下文。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性需要验证上下文;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              验证指定的对象。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
      <param name="validationContext">
        <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />描述其中执行验证检查的上下文的对象。
                 此参数不能为<see langword="null" />。
              </param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
                  验证失败。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)">
      <summary>
              验证指定的对象。
            </summary>
      <param name="value">
                要验证的对象的值。
              </param>
      <param name="name">
                要包括错误消息中的名称。
              </param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> 无效。
                </exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
      <summary>
              描述执行验证检查的上下文。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object)">
      <summary>
              使用指定的对象实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 类的新实例。
            </summary>
      <param name="instance">
                要验证的对象实例。
                 它不能为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>
              使用指定的目标对象和一个可选择的属性包初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 类的新实例。
            </summary>
      <param name="instance">
                要验证的对象实例。
                  它不能为 <see langword="null" /></param>
      <param name="items">
                使用者可访问的、可选的键/值对集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>
              使用服务提供程序和客户服务字典初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 类的新实例。
            </summary>
      <param name="instance">
                要验证的对象。
                 此参数是必需的。
              </param>
      <param name="serviceProvider">
                实现 <see cref="T:System.IServiceProvider" /> 接口的对象。
                 此参数可选。
              </param>
      <param name="items">
                要提供给服务使用方的键/值对的字典。
                 此参数可选。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
      <summary>
              获取或设置要验证的成员的名称。
            </summary>
      <returns>
              要验证的成员的名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
      <summary>
              返回提供自定义验证的服务。
            </summary>
      <param name="serviceType">
                用于进行验证的服务的类型。
              </param>
      <returns>
              该服务的实例；如果该服务不可用，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.InitializeServiceProvider(System.Func{System.Type,System.Object})">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 使用的服务提供程序可以返回服务实例按类型时 GetService 调用。
            </summary>
      <param name="serviceProvider">
                服务提供程序。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
      <summary>
              获取与此上下文关联的键/值对的字典。
            </summary>
      <returns>
              此上下文的键/值对的字典。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
      <summary>
              获取或设置要验证的成员的名称。
            </summary>
      <returns>
              要验证的成员的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
      <summary>
              获取要验证的对象。
            </summary>
      <returns>
              要验证的对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
      <summary>
              获取要验证的对象的类型。
            </summary>
      <returns>
              要验证的对象的类型。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.AssociationAttribute">
      <summary>
              指定实体成员表示数据关系（如外键关系）。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" /> 类的新实例。
            </summary>
      <param name="name">
                关联的名称。
              </param>
      <param name="thisKey">
                逗号分隔的键值上的属性名称的列表 <paramref name="thisKey" /> 侧的关联。
              </param>
      <param name="otherKey">
                逗号分隔的键值上的属性名称的列表 <paramref name="otherKey" /> 侧的关联。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.IsForeignKey">
      <summary>
              获取或设置一个值，该值指示是否关联成员表示外键。
            </summary>
      <returns>
        <see langword="true" /> 如果关联表示外键;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.Name">
      <summary>
              获取关联的名称。
            </summary>
      <returns>
              关联的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey">
      <summary>
              获取关联的 OtherKey 端密钥值的属性名称。
            </summary>
      <returns>
              表示键值的 OtherKey 端关联的属性名称的以逗号分隔列表。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKeyMembers">
      <summary>
              获取集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> 属性。
            </summary>
      <returns>
              集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> 属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey">
      <summary>
              获取关联的 ThisKey 端密钥值的属性名称。
            </summary>
      <returns>
              表示键值的 ThisKey 端关联的属性名称的以逗号分隔列表。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKeyMembers">
      <summary>
              获取集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> 属性。
            </summary>
      <returns>
              集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> 属性。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CompareAttribute">
      <summary>
              提供用于比较两个属性的特性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CompareAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.CompareAttribute" /> 类的新实例。
            </summary>
      <param name="otherProperty">
                要与当前属性进行比较的属性。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CompareAttribute.FormatErrorMessage(System.String)">
      <summary>
              对应用格式设置错误消息，根据发生错误的数据字段。
            </summary>
      <param name="name">
                导致验证失败的字段的名称。
              </param>
      <returns>
              格式化的错误消息。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
              确定指定的对象是否有效。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
      <param name="validationContext">
                包含有关验证请求的信息的对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="value" /> 有效; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CompareAttribute.OtherProperty">
      <summary>
              获取要与当前属性进行比较的属性。
            </summary>
      <returns>
              另一个属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CompareAttribute.OtherPropertyDisplayName">
      <summary>
              获取另一个属性的显示名称。
            </summary>
      <returns>
              另一个属性显示名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CompareAttribute.RequiresValidationContext">
      <summary>
              获取一个值，该值指示属性是否要求验证上下文。
            </summary>
      <returns>
        <see langword="true" /> 如果该属性需要验证上下文;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute">
      <summary>
              指定属性参与乐观并发检查。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CreditCardAttribute">
      <summary>
              指定数据字段值是信用卡号。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CreditCardAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.CreditCardAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CreditCardAttribute.IsValid(System.Object)">
      <summary>
              确定指定的信用卡卡号都有效。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <returns>
        <see langword="true" /> 信用卡卡号是否有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute">
      <summary>
              指定用于验证属性或类实例的自定义验证方法。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" /> 类的新实例。
            </summary>
      <param name="validatorType">
                包含执行自定义验证的方法的类型。
              </param>
      <param name="method">
                执行自定义验证的方法。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)">
      <summary>
              设置验证错误消息的格式。
            </summary>
      <param name="name">
                要在格式的消息中包含的名称。
              </param>
      <returns>
              格式化的错误消息的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method">
      <summary>
              获取验证方法。
            </summary>
      <returns>
              验证方法的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType">
      <summary>
              获取执行自定义验证的类型。
            </summary>
      <returns>
              执行自定义验证类型。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataType">
      <summary>
              表示与数据字段和参数关联的数据类型的枚举。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.CreditCard">
      <summary>
              表示信用卡卡号。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
      <summary>
              表示货币值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
      <summary>
              表示自定义数据类型。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
      <summary>
              表示的日期值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
      <summary>
              表示某一瞬间中时，表示为日期和当天的时间。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
      <summary>
              表示存在的对象的持续时间。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
      <summary>
              表示电子邮件地址。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
      <summary>
              表示某一 HTML 文件。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.ImageUrl">
      <summary>
              表示的图像的 URL。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
      <summary>
              表示多行文本。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
      <summary>
              表示密码值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
      <summary>
              表示电话号码值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PostalCode">
      <summary>
              表示邮政编码。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
      <summary>
              表示显示文本。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
      <summary>
              表示一个时间值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Upload">
      <summary>
              表示文件上载的数据类型。
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
      <summary>
              表示一个 URL 值。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
      <summary>
              指定要与数据字段关联的其他类型的名称。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
      <summary>
              使用指定的类型名初始化 <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> 类的新实例。
            </summary>
      <param name="dataType">
                要与数据字段关联的类型名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
      <summary>
              使用指定的字段模版名初始化 <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> 类的新实例。
            </summary>
      <param name="customDataType">
                要与数据字段关联的自定义字段模版名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="customDataType" /> 为 <see langword="null" /> 或空字符串 ("")。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
      <summary>
              获取与数据字段关联的自定义字段模板的名称。
            </summary>
      <returns>
              与数据字段关联的自定义字段模板的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
      <summary>
              获取与数据字段关联的类型。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.DataAnnotations.DataType" /> 值之一。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
      <summary>
              获取数据字段的显示格式。
            </summary>
      <returns>
              数据字段的显示格式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
      <summary>
              返回与数据字段关联的类型的名称。
            </summary>
      <returns>
              与数据字段相关联的类型名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)">
      <summary>
              检查数据字段的值有效。
            </summary>
      <param name="value">
                要验证的数据字段值。
              </param>
      <returns>
        <see langword="true" /> 始终。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
      <summary>
              提供允许为实体分部类的类型和成员指定可本地化字符串的通用特性。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
      <summary>
              获取或设置一个值，该值指示是否应自动生成 UI 以显示此字段。
            </summary>
      <returns>
        <see langword="true" /> 如果应自动生成用户界面来显示该字段;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试获取属性值之前已设置。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
      <summary>
              获取或设置一个值，该值指示是否筛选用户界面将自动显示为此字段。
            </summary>
      <returns>
        <see langword="true" /> 如果应自动生成用户界面以显示筛选为此字段;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试获取属性值之前已设置。
                </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
      <summary>
              获取或设置一个值，用于在 UI 中显示的说明。
            </summary>
      <returns>
              该值用于在 UI 中显示的说明。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
      <summary>
              返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> 属性。
            </summary>
      <returns>
              值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> 属性已初始化; 否则为如果 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
      <summary>
              返回一个值，该值指示是否应自动生成用户界面以显示为此字段的筛选。
            </summary>
      <returns>
              值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> 属性已初始化; 否则为如果 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
      <summary>
              返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 属性。
            </summary>
      <returns>
              本地化的描述，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 已指定与 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 属性。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 属性进行了初始化，但公共静态属性具有匹配名称 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 为找不到值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 属性。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
      <summary>
              返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> 属性。
            </summary>
      <returns>
              如果使用在 UI 中，分组字段的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> 已初始化; 否则为 <see langword="null" />。
               如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 指定属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> 属性表示的资源键，则返回一个本地化的字符串; 否则，返回一个非本地化的字符串。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
      <summary>
              返回一个值，用于在 UI 中的字段显示。
            </summary>
      <returns>
              本地化的字符串 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> 属性，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 指定属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> 属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> 属性。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> 属性进行了初始化，但公共静态属性具有匹配名称 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> 为找不到值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 属性。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
      <summary>
              返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> 属性。
            </summary>
      <returns>
              值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> 属性，如果已设置; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
      <summary>
              返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> 属性。
            </summary>
      <returns>
              获取本地化的字符串为 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> 属性如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 指定属性，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> 属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> 属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
      <summary>
              返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> 属性。
            </summary>
      <returns>
              本地化的字符串 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> 属性如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> 指定属性，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> 属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> 值属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
      <summary>
              获取或设置一个值，用于在 UI 中的字段进行分组。
            </summary>
      <returns>
              一个值，用于在 UI 中的字段进行分组。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
      <summary>
              获取或设置一个值，用于在 UI 中显示。
            </summary>
      <returns>
              一个值，用于在 UI 中显示。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
      <summary>
              获取或设置列的排序权重。
            </summary>
      <returns>
              列的排序权重。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
      <summary>
              获取或设置一个值，用于设置用户界面中的提示的水印。
            </summary>
      <returns>
              一个值，将用于水印的 UI 中显示。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
      <summary>
              获取或设置包含的资源类型 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />, ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, ，和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 属性。
            </summary>
      <returns>
              包含的资源的类型 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />, ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, ，和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> 属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
      <summary>
              获取或设置一个值，用于网格列标签。
            </summary>
      <returns>
              一个值，表示网格列标签。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
      <summary>
              指定作为外键列显示在被引用表中的列。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> 类通过使用指定的列。
            </summary>
      <param name="displayColumn">
                要用作显示列的列的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> 类通过使用指定的显示和排序的列。
            </summary>
      <param name="displayColumn">
                要用作显示列的列的名称。
              </param>
      <param name="sortColumn">
                要用于排序的列的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> 类通过使用指定的显示列中，以及指定的排序列和排序顺序。
            </summary>
      <param name="displayColumn">
                要用作显示列的列的名称。
              </param>
      <param name="sortColumn">
                要用于排序的列的名称。
              </param>
      <param name="sortDescending">
        <see langword="true" /> 若要按降序顺序排列。否则为 <see langword="false" />。
                 默认值为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.DisplayColumn">
      <summary>
              获取要用作显示字段的列的名称。
            </summary>
      <returns>
              显示列的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortColumn">
      <summary>
              获取要用于排序的列的名称。
            </summary>
      <returns>
              排序列的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortDescending">
      <summary>
              获取一个值，该值指示是否按升序或降序排列。
            </summary>
      <returns>
        <see langword="true" /> 如果此列将按降序排列;否则为 <see langword="false" />。
            </returns>
    </member>
  </members>
</doc>