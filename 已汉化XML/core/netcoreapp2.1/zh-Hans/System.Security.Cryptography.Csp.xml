<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Csp</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.CspKeyContainerInfo">
      <summary>
              提供有关加密密钥对的附加信息。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
              使用指定参数初始化 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 类的新实例。
            </summary>
      <param name="parameters">
                一个 <see cref="T:System.Security.Cryptography.CspParameters" /> 对象，提供有关密钥的信息。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Accessible">
      <summary>
              获取一个值，该值指示是否可访问的密钥容器中的键。
            </summary>
      <returns>
        <see langword="true" /> 如果键是可访问︰否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持的密钥类型。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Exportable">
      <summary>
              获取一个值，该值指示是否可以从一个密钥容器中导出密钥。
            </summary>
      <returns>
        <see langword="true" /> 如果可以导出该密钥;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持的密钥类型。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  找不到加密服务提供程序。
                
                  - 或 -
                
                  找不到密钥容器。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice">
      <summary>
              获取一个值，该值指示一个键是否硬件密钥。
            </summary>
      <returns>
        <see langword="true" /> 如果键是硬件密钥。否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  找不到加密服务提供程序。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName">
      <summary>
              获取密钥容器名称。
            </summary>
      <returns>
              密钥容器名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber">
      <summary>
              获取一个值，该值描述非对称密钥被创建为签名密钥还是交换密钥。
            </summary>
      <returns>
              描述非对称密钥被创建为签名密钥还是交换密钥的其中一个 <see cref="T:System.Security.Cryptography.KeyNumber" /> 值。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore">
      <summary>
              获取一个值，该值指示某个密钥是否来自计算机密钥集。
            </summary>
      <returns>
              如果该密钥来自计算机密钥集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Protected">
      <summary>
              获取一个值，该值指示是否受保护的密钥对。
            </summary>
      <returns>
        <see langword="true" /> 如果受保护的密钥对否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持的密钥类型。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  找不到加密服务提供程序。
                
                  - 或 -
                
                  找不到密钥容器。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.ProviderName">
      <summary>
              获取密钥的提供程序名称。
            </summary>
      <returns>
              提供程序名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.ProviderType">
      <summary>
              获取密钥的提供程序类型。
            </summary>
      <returns>
              提供程序类型。
               默认值为 1。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated">
      <summary>
              获取一个值，该值表示是否由托管加密类随机生成密钥容器。
            </summary>
      <returns>
              如果随机生成了密钥容器，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Removable">
      <summary>
              获取一个值，该值指示是否可从一个密钥容器删除密钥。
            </summary>
      <returns>
        <see langword="true" /> 如果键是可移动;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  找不到加密服务提供程序 (CSP)。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName">
      <summary>
              获取唯一的密钥容器名称。
            </summary>
      <returns>
              唯一的密钥容器名称。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持的密钥类型。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  找不到加密服务提供程序。
                
                  - 或 -
                
                  找不到密钥容器。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.CspParameters">
      <summary>
              包含一些参数，这些参数传递到指定加密计算的加密服务提供程序 (CSP)。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32)">
      <summary>
              使用指定的提供程序类型代码初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 类的新实例。
            </summary>
      <param name="dwTypeIn">
                指定要创建的提供程序类型的提供程序类型代码。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)">
      <summary>
              使用指定的提供程序类型代码和名称初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 类的新实例。
            </summary>
      <param name="dwTypeIn">
                指定要创建的提供程序类型的提供程序类型代码。
              </param>
      <param name="strProviderNameIn">
                提供程序名称。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)">
      <summary>
              使用指定的提供程序类型代码和名称以及指定的容器名称初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 类的新实例。
            </summary>
      <param name="dwTypeIn">
                指定要创建的提供程序类型的提供程序类型代码。
              </param>
      <param name="strProviderNameIn">
                提供程序名称。
              </param>
      <param name="strContainerNameIn">
                容器名称。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.Flags">
      <summary>
              表示修改加密服务提供程序 (CSP) 的行为的 <see cref="T:System.Security.Cryptography.CspParameters" /> 的标志。
            </summary>
      <returns>
              枚举值或枚举值的按位组合。
            </returns>
      <exception cref="T:System.ArgumentException">
                  值不是有效的枚举值。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyContainerName">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.CspParameters" /> 的密钥容器名称。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyNumber">
      <summary>
              指定非对称密钥被创建为签名密钥还是交换密钥。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.KeyPassword">
      <summary>
              获取或设置与智能卡密钥相关的密码。
            </summary>
      <returns>
              与智能卡密钥相关的密码。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.ParentWindowHandle">
      <summary>
              获取或设置智能卡密码对话框中的非托管的父窗口句柄。
            </summary>
      <returns>
              智能卡密码对话框中的父窗口句柄。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderName">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.CspParameters" /> 的提供程序名称。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderType">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.CspParameters" /> 的提供程序类型代码。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CspProviderFlags">
      <summary>
              指定修改加密服务提供程序 (CSP) 行为的标志。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.CreateEphemeralKey">
      <summary>
              创建一个在关闭关联的 Rivest-Shamir-Adleman (RSA) 对象时释放的临时密钥。
               如果希望密钥与 RSA 对象无关，则不要使用此标志。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.NoFlags">
      <summary>
              不指定任何设置。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.NoPrompt">
      <summary>
              阻止 CSP 显示此上下文的任何用户界面 (UI)。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseArchivableKey">
      <summary>
              允许导出密钥以便存档或恢复。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseDefaultKeyContainer">
      <summary>
              使用默认密钥容器中的密钥信息。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseExistingKey">
      <summary>
              使用当前密钥的密钥信息。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore">
      <summary>
              使用计算机的密钥存储区中的密钥信息。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseNonExportableKey">
      <summary>
              使用无法导出的密钥信息。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseUserProtectedKey">
      <summary>
              当某些操作尝试使用密钥时，通过对话框或另一种方法通知用户。
                此标志与 <see cref="F:System.Security.Cryptography.CspProviderFlags.NoPrompt" /> 标志不兼容。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.DESCryptoServiceProvider">
      <summary>
              定义一个包装对象来访问加密服务提供程序 (CSP) 版本的数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 算法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DESCryptoServiceProvider" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 加密服务提供程序不可用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 与指定键的解密器对象 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.DES" /> 解密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性的值为 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。
                
                  - 或 -
                
                  值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性是 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 和的值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> 属性不是 8。
                
                  - 或 -
                
                  使用了无效的密钥大小。
                
                  - 或 -
                
                  算法的密钥大小不可用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 与指定键的加密器对象 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.DES" /> 加密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性的值为 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。
                
                  - 或 -
                
                  值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性是 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 和的值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> 属性不是 8。
                
                  - 或 -
                
                  使用了无效的密钥大小。
                
                  - 或 -
                
                  算法的密钥大小不可用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.GenerateIV">
      <summary>
              生成的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 要用于该算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey">
      <summary>
              生成的随机密钥 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 要用于该算法。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.DSACryptoServiceProvider">
      <summary>
              定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 类，具有指定的密钥大小。
            </summary>
      <param name="dwKeySize">
                用于以位为单位的非对称算法的密钥大小。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 类使用的加密服务提供程序 (CSP) 指定的参数。
            </summary>
      <param name="parameters">
                Csp 参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 类，具有指定的密钥大小和加密服务提供程序 (CSP) 参数。
            </summary>
      <param name="dwKeySize">
                用于以位为单位的加密算法的密钥大小。
              </param>
      <param name="parameters">
                Csp 参数。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取 CSP。
                
                  - 或 - 
                
                  无法创建密钥。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dwKeySize" /> 超出范围。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.DSA" /> 为指定的数据的签名。
            </summary>
      <param name="rgbHash">
                要签名的数据。
              </param>
      <returns>
              指定数据的数字签名。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo">
      <summary>
              获取描述有关加密密钥对的附加信息的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 对象。
            </summary>
      <returns>
              描述有关加密密钥对的附加信息的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)">
      <summary>
              将导出的 blob 包含与相关联的密钥信息 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 对象。
            </summary>
      <param name="includePrivateParameters">
                若包括私钥，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个字节数组，包含与相关联的密钥信息 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)">
      <summary>
              导出 <see cref="T:System.Security.Cryptography.DSAParameters" />。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥无法导出。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])">
      <summary>
              导入的 blob，表示 DSA 密钥信息。
            </summary>
      <param name="keyBlob">
                一个表示 DSA 公钥 blob 的字节数组。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>
              导入指定 <see cref="T:System.Security.Cryptography.DSAParameters" />。
            </summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  <paramref name="parameters" /> 参数具有丢失字段。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm">
      <summary>
              获取密钥交换算法的名称。
            </summary>
      <returns>
              密钥交换算法的名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.KeySize">
      <summary>
              获取用来以位为单位的非对称算法的密钥的大小。
            </summary>
      <returns>
              使用非对称算法的密钥大小。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp">
      <summary>
              获取或设置一个值，该值指示是否应在加密服务提供程序 (CSP) 中保留此密钥。
            </summary>
      <returns>
              如果应在 CSP 中保留此密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 对象仅包含公钥。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 对象包含只有一个公共键; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm">
      <summary>
              获取签名算法的名称。
            </summary>
      <returns>
              签名算法的名称。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])">
      <summary>
              计算指定的字节数组的哈希值并签名所得的哈希值。
            </summary>
      <param name="buffer">
                要计算哈希的输入数据。
              </param>
      <returns>
              指定数据的 <see cref="T:System.Security.Cryptography.DSA" /> 签名。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)">
      <summary>
              计算指定的输入流的哈希值并签名所得的哈希值。
            </summary>
      <param name="inputStream">
                要为其计算哈希的输入数据。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 为指定的数据的签名。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>
              符号字节数组从指定的起始点指定的终结点。
            </summary>
      <param name="buffer">
                要签名的输入的数据。
              </param>
      <param name="offset">
                数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="count">
                数组中用作数据的字节数。
              </param>
      <returns>
              指定数据的 <see cref="T:System.Security.Cryptography.DSA" /> 签名。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
      <summary>
              计算指定的哈希值的签名，方法是将其与私钥一起加密。
            </summary>
      <param name="rgbHash">
                待签名数据的哈希值。
              </param>
      <param name="str">
                用于创建数据哈希值的哈希算法的名称。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 签名指定的哈希值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  不存在私钥。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore">
      <summary>
              获取或设置一个值，该值指示是否应在计算机的密钥存储而不是用户配置文件存储中保留密钥。
            </summary>
      <returns>
              如果应在计算机密钥存储中保留密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])">
      <summary>
              通过进行比较，对计算为指定的数据的签名验证指定的签名数据。
            </summary>
      <param name="rgbData">
                已签名的数据。
              </param>
      <param name="rgbSignature">
                要验证的签名数据。
              </param>
      <returns>
        <see langword="true" /> 如果签名验证为有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
      <summary>
              通过进行比较，对指定的哈希值计算的签名验证指定的签名数据。
            </summary>
      <param name="rgbHash">
                待签名数据的哈希值。
              </param>
      <param name="str">
                用于创建数据哈希值的哈希算法的名称。
              </param>
      <param name="rgbSignature">
                要验证的签名数据。
              </param>
      <returns>
        <see langword="true" /> 如果签名验证为有效，则为否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="rgbSignature" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  无法验证签名。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
              验证 <see cref="T:System.Security.Cryptography.DSA" /> 为指定的数据的签名。
            </summary>
      <param name="rgbHash">
                用 <paramref name="rgbSignature" /> 签名的数据。
              </param>
      <param name="rgbSignature">
                有关验证的签名 <paramref name="rgbData" />。
              </param>
      <returns>
              如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>
              执行对称加密和解密使用高级加密标准 (AES) 算法的加密应用程序编程接口 (CAPI) 实现。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" /> 类的新实例。
            </summary>
      <exception cref="T:System.PlatformNotSupportedException">
                  没有当前平台支持的密钥大小。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.BlockSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>
              创建对称 AES 解密器对象使用当前的密钥和初始化向量 (IV)。
            </summary>
      <returns>
              对称 AES 解密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  当前的关键是无效或缺失。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 AES 解密器对象使用指定的密钥和初始化向量 (IV)。
            </summary>
      <param name="key">
                用于对称算法的密钥。
              </param>
      <param name="iv">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称 AES 解密器对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>
              创建对称 AES 加密器对象使用当前的密钥和初始化向量 (IV)。
            </summary>
      <returns>
              对称的 AES 加密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称加密器对象使用指定的密钥和初始化向量 (IV)。
            </summary>
      <param name="key">
                用于对称算法的密钥。
              </param>
      <param name="iv">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称的 AES 加密器对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.FeedbackSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>
              生成的随机初始化向量 (IV) 要用于该算法。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法生成的初始化向量 (IV)。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>
              生成用于该算法的随机密钥。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法生成该密钥。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.IV">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>
              获取或设置用于加密和解密的对称密钥。
            </summary>
      <returns>
              用于加密和解密对称密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  关键字的值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥大小无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>
              获取或设置大小，以位为单位的机密密钥。
            </summary>
      <returns>
              密钥的大小（以位为单位）。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.LegalBlockSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Mode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Padding">
      <returns>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.ICspAsymmetricAlgorithm">
      <summary>
              定义允许 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 类枚举密钥容器信息，并导入和导出与 Microsoft 加密 API (CAPI) 兼容的密钥 blob 的方法。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo">
      <summary>
              获取描述有关加密密钥对的附加信息的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 对象。
            </summary>
      <returns>
              描述有关加密密钥对的附加信息的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)">
      <summary>
              导出包含与 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象关联的密钥信息的 blob。
            </summary>
      <param name="includePrivateParameters">
                若包括私钥，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              包含与 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象关联的密钥信息的字节数组。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])">
      <summary>
              导入表示非对称密钥信息的 blob。
            </summary>
      <param name="rawData">
                表示非对称密钥 blob 的字节数组。
              </param>
    </member>
    <member name="T:System.Security.Cryptography.KeyNumber">
      <summary>
              指定是创建非对称签名密钥还是非对称交换密钥。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyNumber.Exchange">
      <summary>
              一个交换密钥对，用于加密会话密钥，以便可以安全地存储以及与其他用户交换会话密钥。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyNumber.Signature">
      <summary>
              一个签名密钥对，用于对数字签名的消息或文件进行身份验证。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5CryptoServiceProvider">
      <summary>
              计算<see cref="T:System.Security.Cryptography.MD5" />哈希值输入的数据使用加密服务提供程序 (CSP) 提供的实现。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> 类的新实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  未使用与 FIPS 兼容算法策略。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.Initialize">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> 的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.PasswordDeriveBytes">
      <summary>
              使用 PBKDF1 算法的扩展从密码派生密钥。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
      <summary>
              通过指定用来派生密钥的密码和密钥 salt 初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                为其派生密钥的密码。
              </param>
      <param name="salt">
                用以导出密钥的密钥 salt。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>
              使用用来导出密钥的密码和密钥 salt 初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="strPassword">
                从其导出密钥的密码。
              </param>
      <param name="rgbSalt">
                用以导出密钥的密钥 salt。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
      <summary>
              通过指定用来派生密钥的密码、密钥 salt 和加密服务提供程序 (CSP) 初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                为其派生密钥的密码。
              </param>
      <param name="salt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="cspParams">
                用于操作的加密服务提供程序 (CSP) 参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
      <summary>
              使用用来导出密钥的密码、密钥 salt 和加密服务提供程序 (CSP) 参数初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="strPassword">
                从其导出密钥的密码。
              </param>
      <param name="rgbSalt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="cspParams">
                操作的 CSP 参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
      <summary>
              通过指定用来派生密钥的密码、密钥 salt、哈希名和迭代数初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                为其派生密钥的密码。
              </param>
      <param name="salt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="hashName">
                用于派生密钥的哈希算法。
              </param>
      <param name="iterations">
                用于派生密钥的迭代数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
      <summary>
              使用用来导出密钥的密码、密钥 salt、哈希名和迭代数初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="strPassword">
                从其导出密钥的密码。
              </param>
      <param name="rgbSalt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="strHashName">
                操作的哈希算法的名称。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
              通过指定用来派生密钥的密码、密钥 salt、哈希名、迭代数和加密服务提供程序 (CSP) 初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                为其派生密钥的密码。
              </param>
      <param name="salt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="hashName">
                用于派生密钥的哈希算法。
              </param>
      <param name="iterations">
                用于派生密钥的迭代数。
              </param>
      <param name="cspParams">
                用于操作的加密服务提供程序 (CSP) 参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
              使用用来导出密钥的密码、密钥 salt、哈希名、迭代数和加密服务提供程序 (CSP) 参数初始化 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类的新实例。
            </summary>
      <param name="strPassword">
                从其导出密钥的密码。
              </param>
      <param name="rgbSalt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="strHashName">
                操作的哈希算法的名称。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <param name="cspParams">
                操作的 CSP 参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>
              从 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 对象导出加密密钥。
            </summary>
      <param name="algname">
                为其导出密钥的算法名称。
              </param>
      <param name="alghashname">
                用于导出密钥的哈希算法名称。
              </param>
      <param name="keySize">
                要导出的密钥的大小（以位为单位）。
              </param>
      <param name="rgbIV">
                用于导出密钥的初始化向量 (IV)。
              </param>
      <returns>
              导出的密钥。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 参数不正确。
                
                  - 或 - 
                
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  <paramref name="algname" /> 参数不是有效的算法名称。
                
                  - 或 - 
                
                  <paramref name="alghashname" /> 参数不是有效的哈希算法名称。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
      <summary>
              返回伪随机密钥字节。
            </summary>
      <param name="cb">
                要生成的伪随机密钥字节数。
              </param>
      <returns>
              由伪随机密钥字节组成的字节数组。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.PasswordDeriveBytes.HashName">
      <summary>
              获取或设置操作的哈希算法的名称。
            </summary>
      <returns>
              操作的哈希算法的名称。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  哈希值的名称固定不变，并尝试更改此值。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
      <summary>
              获取或设置操作的迭代数。
            </summary>
      <returns>
              操作的迭代数。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  迭代次数固定，尝试更改此值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  无法设置该属性，因为它的值超出范围。
                   此属性需要非负数。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.Reset">
      <summary>
              重置操作的状态。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
      <summary>
              获取或设置操作的密钥 salt 值。
            </summary>
      <returns>
              操作的密钥 salt 值。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  固定的密钥 salt 值和尝试更改此值。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RC2CryptoServiceProvider">
      <summary>
              定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.RC2" /> 算法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RC2CryptoServiceProvider" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  找不符合 FIPS 算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 <see cref="T:System.Security.Cryptography.RC2" /> 解密器对象与指定的键 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.RC2" /> 解密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> 已使用的密码模式。
                
                  - 或 -
                
                  一个 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 使用反馈大小不是 8 位的密码模式。
                
                  - 或 -
                
                  使用了无效的密钥大小。
                
                  - 或 -
                
                  算法的密钥大小不可用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 <see cref="T:System.Security.Cryptography.RC2" /> 加密器对象与指定的键 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.RC2" /> 加密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> 已使用的密码模式。
                
                  - 或 -
                
                  一个 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 使用反馈大小不是 8 位的密码模式。
                
                  - 或 -
                
                  使用了无效的密钥大小。
                
                  - 或 -
                
                  算法的密钥大小不可用。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize">
      <summary>
              获取或设置的有效大小，以位为单位的所用密钥 <see cref="T:System.Security.Cryptography.RC2" /> 算法。
            </summary>
      <returns>
              有效的密钥大小，以位为单位使用 <see cref="T:System.Security.Cryptography.RC2" /> 算法。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <see cref="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize" /> 属性已设置为一个值除 <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue" /> 属性。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV">
      <summary>
              生成的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 要用于该算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey">
      <summary>
              生成的随机密钥 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 要用于该算法。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt">
      <summary>
              获取或设置一个值，确定是否具有 11 字节长的零值 salt 创建密钥。
            </summary>
      <returns>
        <see langword="true" /> 如果密钥应创建具有 11 字节长的零值 salt;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
      <summary>
              使用加密服务提供程序 (CSP) 提供的实现来实现加密随机数生成器 (RNG)。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 类的新实例。
            </summary>
      <param name="rgb">
                字节数组。
                 忽略此值。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
              使用指定的参数初始化 <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 类的新实例。
            </summary>
      <param name="cspParams">
                传递给加密服务提供程序 (CSP) 的参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 类的新实例。
            </summary>
      <param name="str">
                字符串输入。
                 忽略此参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
      <summary>
              用经过加密的强随机值序列填充字节数组。
            </summary>
      <param name="data">
                用经过加密的强随机值序列填充的数组。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])">
      <summary>
              用经过加密的强随机非零值序列填充字节数组。
            </summary>
      <param name="data">
                要用加密型强随机非零值序列填充的数组。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSACryptoServiceProvider">
      <summary>
              使用加密服务提供程序 (CSP) 提供的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实现执行非对称加密和解密。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor">
      <summary>
              使用默认密钥初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)">
      <summary>
              使用指定的密钥大小初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 类的新实例。
            </summary>
      <param name="dwKeySize">
                要使用的密钥的大小（以位为单位）。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
              使用指定的参数初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 类的新实例。
            </summary>
      <param name="parameters">
                要传递给加密服务提供程序 (CSP) 的参数。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取 CSP。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
              使用指定的密钥大小和参数初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 类的新实例。
            </summary>
      <param name="dwKeySize">
                要使用的密钥的大小（以位为单位）。
              </param>
      <param name="parameters">
                要传递给加密服务提供程序 (CSP) 的参数。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取 CSP。
                
                  - 或 - 
                
                  无法创建密钥。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo">
      <summary>
              获取描述有关加密密钥对的附加信息的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 对象。
            </summary>
      <returns>
              描述有关加密密钥对的附加信息的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
      <summary>
              使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法加密数据。
            </summary>
      <param name="rgb">
                要解密的数据。
              </param>
      <param name="fOAEP">
                如果为 <see langword="true" />，则使用 OAEP 填充（仅可用于运行 Microsoft Windows XP 及更高版本的计算机）执行直接 <see cref="T:System.Security.Cryptography.RSA" /> 解密；否则，如果为 <see langword="false" /> 则使用 PKCS#1 v1.5 填充。
              </param>
      <returns>
              已解密的数据，它是加密前的原始纯文本。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  参数 <paramref name="fOAEP" /> 的值为 <see langword="true" />，并且 <paramref name="rgb" /> 参数的长度大于 <see cref="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize" />。
                
                  - 或 - 
                
                  参数 <paramref name="fOAEP" /> 的值为 <see langword="true" />，并且不支持 OAEP。
                
                  - 或 - 
                
                  此密钥与解密数据不匹配。
                   但是，异常用词可能不准确。
                   例如，它可能会说 Not enough storage is available to process this command。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgb " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              使用指定填充对以前通过 <see cref="T:System.Security.Cryptography.RSA" /> 算法加密的数据进行解密。
            </summary>
      <param name="data">
                要解密的数据。
              </param>
      <param name="padding">
                填充。
              </param>
      <returns>
              已解密的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  不支持该填充模式。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])">
      <summary>
              当前版本不支持此方法。
            </summary>
      <param name="rgb">
                要解密的数据。
              </param>
      <returns>
              已解密的数据，它是加密前的原始纯文本。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  当前版本不支持此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
      <summary>
              使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法加密数据。
            </summary>
      <param name="rgb">
                要加密的数据。
              </param>
      <param name="fOAEP">
                如果为 <see langword="true" />，则使用 OAEP 填充（仅可用于运行 Windows XP 及更高版本的计算机）执行直接 <see cref="T:System.Security.Cryptography.RSA" /> 加密；否则，如果为 <see langword="false" />，则使用 PKCS#1 v1.5 填充。
              </param>
      <returns>
              已加密的数据。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  <paramref name="rgb" /> 参数的长度大于允许的最大长度。
                
                  - 或 - 
                
                  <paramref name="fOAEP" /> 参数为 <see langword="true" />，但不支持 OAEP 填充。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgb " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              使用指定的填充，借助 <see cref="T:System.Security.Cryptography.RSA" /> 算法，对数据加密。
            </summary>
      <param name="data">
                要加密的数据。
              </param>
      <param name="padding">
                填充。
              </param>
      <returns>
              已加密的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  不支持该填充模式。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])">
      <summary>
              当前版本不支持此方法。
            </summary>
      <param name="rgb">
                要加密的数据。
              </param>
      <returns>
              已加密的数据。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  当前版本不支持此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)">
      <summary>
              导出包含与 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 对象关联的密钥信息的 blob。
            </summary>
      <param name="includePrivateParameters">
                若包括私钥，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              包含与 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 对象关联的密钥信息的字节数组。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
      <summary>
              导出 <see cref="T:System.Security.Cryptography.RSAParameters" />。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的参数。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥无法导出。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])">
      <summary>
              导入表示 RSA 密钥信息的 blob。
            </summary>
      <param name="keyBlob">
                表示 RSA 密钥 blob 的字节数组。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>
              导入指定的 <see cref="T:System.Security.Cryptography.RSAParameters" />。
            </summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 的参数。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  <paramref name="parameters" /> 参数具有丢失字段。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm">
      <summary>
              获取可用于 <see cref="T:System.Security.Cryptography.RSA" /> 的实现的密钥交换算法的名称。
            </summary>
      <returns>
              如果存在的话则为密钥交换算法的名称；否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize">
      <summary>
              获取当前密钥的大小。
            </summary>
      <returns>
              密钥的大小（以位为单位）。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp">
      <summary>
              获取或设置一个值，该值指示是否应在加密服务提供程序 (CSP) 中保留此密钥。
            </summary>
      <returns>
              如果应在 CSP 中保留此密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 对象是否仅包含公钥。
            </summary>
      <returns>
              如果 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 对象仅包含公钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm">
      <summary>
              获取可用于此 <see cref="T:System.Security.Cryptography.RSA" /> 的实现的签名算法的名称。
            </summary>
      <returns>
              签名算法的名称。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)">
      <summary>
              使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="buffer">
                要计算哈希的输入数据。
              </param>
      <param name="halg">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 <see cref="T:System.Security.Cryptography.RSA" /> 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 参数不是有效的类型。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)">
      <summary>
              使用指定的哈希算法计算指定输入流的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="inputStream">
                要计算哈希的输入数据。
              </param>
      <param name="halg">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 <see cref="T:System.Security.Cryptography.RSA" /> 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 参数不是有效的类型。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>
              使用指定的哈希算法计算指定字节数组子集的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="buffer">
                要计算哈希的输入数据。
              </param>
      <param name="offset">
                数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="count">
                数组中用作数据的字节数。
              </param>
      <param name="halg">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 <see cref="T:System.Security.Cryptography.RSA" /> 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 参数不是有效的类型。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
      <summary>
              计算指定的哈希值的签名，方法是将其与私钥一起加密。
            </summary>
      <param name="rgbHash">
                待签名数据的哈希值。
              </param>
      <param name="str">
                用于创建数据哈希值的哈希算法标识符 (OID)。
              </param>
      <returns>
              指定哈希值的 <see cref="T:System.Security.Cryptography.RSA" /> 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  不存在私钥。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              计算指定的哈希值的签名，方法是使用指定填充将其与私钥一起加密。
            </summary>
      <param name="hash">
                待签名数据的哈希值。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法名称。
              </param>
      <param name="padding">
                填充。
              </param>
      <returns>
              指定哈希值的 <see cref="T:System.Security.Cryptography.RSA" /> 签名。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等于 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" />。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore">
      <summary>
              获取或设置一个值，该值指示是否应在计算机的密钥存储而不是用户配置文件存储中保留密钥。
            </summary>
      <returns>
              如果应在计算机密钥存储中保留密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])">
      <summary>
              通过使用提供的公钥计算签名中的哈希值，然后将其与提供的数据的哈希值进行比较，从而验证数字签名是否有效。
            </summary>
      <param name="buffer">
                已签名的数据。
              </param>
      <param name="halg">
                用于创建数据哈希值的哈希算法的名称。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <returns>
              如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 参数不是有效的类型。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
      <summary>
              通过使用提供的公钥计算签名中的哈希值，然后将其与提供的哈希值进行比较来验证数字签名是否有效。
            </summary>
      <param name="rgbHash">
                签名数据中的哈希值。
              </param>
      <param name="str">
                用于创建数据哈希值的哈希算法标识符 (OID)。
              </param>
      <param name="rgbSignature">
                要验证的签名数据。
              </param>
      <returns>
              如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="rgbSignature" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  无法验证签名。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              通过使用指定的哈希算法和填充模式确定签名中的哈希值，并将其与所提供的哈希值进行比较，以此验证数字签名是否有效。
            </summary>
      <param name="hash">
                已签名数据的哈希值。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                用于创建哈希值的哈希算法。
              </param>
      <param name="padding">
                填充。
              </param>
      <returns>
              如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等于 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA1CryptoServiceProvider">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希值的输入数据使用加密服务提供商 (CSP) 提供的实现。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>
              定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA256" /> 算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>
              初始化或重新初始化，哈希算法的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>
              定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA384" /> 算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>
              初始化或重新初始化，哈希算法的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>
              定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA512" /> 算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>
              初始化或重新初始化，哈希算法的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.TripleDESCryptoServiceProvider">
      <summary>
              定义一个包装对象，若要访问的加密服务提供程序 (CSP) 版本 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="T:System.Security.Cryptography.TripleDES" /> 加密服务提供程序不可用。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.BlockSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 <see cref="T:System.Security.Cryptography.TripleDES" /> 解密器对象与指定的键 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.TripleDES" /> 解密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性的值为 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。
                
                  - 或 -
                
                  值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性是 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 和的值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> 属性不是 8。
                
                  - 或 -
                
                  使用了无效的密钥大小。
                
                  - 或 -
                
                  算法的密钥大小不可用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 <see cref="T:System.Security.Cryptography.TripleDES" /> 加密器对象与指定的键 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              
                  初始化向量必须为 8 字节长。
                   如果超过 8 个字节，则将被截断并不引发异常。
                   在调用之前 <see cref="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])" />, 、 检查的初始化向量的长度，并引发异常，如果时间太长。
                </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.TripleDES" /> 加密器对象。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性的值为 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。
                
                  - 或 -
                
                  值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性是 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 和的值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> 属性不是 8。
                
                  - 或 -
                
                  使用了无效的密钥大小。
                
                  - 或 -
                
                  算法的密钥大小不可用。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.FeedbackSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV">
      <summary>
              生成的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 要用于该算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey">
      <summary>
              生成的随机 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 要用于该算法。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.IV">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.Key">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.KeySize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.LegalBlockSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.Mode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCryptoServiceProvider.Padding">
      <returns>
      </returns>
    </member>
  </members>
</doc>