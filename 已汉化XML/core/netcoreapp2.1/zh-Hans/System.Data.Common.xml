<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Common</name>
  </assembly>
  <members>
    <member name="T:System.Data.DataTableCollection">
      <summary>
              表示表的集合 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>
              创建一个新 <see cref="T:System.Data.DataTable" /> 对象使用的默认名称，并将其添加到集合。
            </summary>
      <returns>
              新创建的 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>
              将指定的 <see langword="DataTable" /> 添加到集合。
            </summary>
      <param name="table">
                要添加的 <see langword="DataTable" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  为此表是指定的值 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表已属于该集合，或属于另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中的表具有相同的名称。
                   比较不区分大小写。
                </exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>
              创建 <see cref="T:System.Data.DataTable" /> 对象使用指定的名称，并将其添加到集合。
            </summary>
      <param name="name">
                指定所创建的名称 <see cref="T:System.Data.DataTable" />。
              </param>
      <returns>
              新创建的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中的表具有相同的名称。
                   （比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>
              创建 <see cref="T:System.Data.DataTable" /> 对象使用指定的名称，并将其添加到集合。
            </summary>
      <param name="name">
                指定所创建的名称 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="tableNamespace">
                要使所创建的命名空间 <see cref="T:System.Data.DataTable" />。
              </param>
      <returns>
              新创建的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中的表具有相同的名称。
                   （比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>
              将指定的元素复制 <see cref="T:System.Data.DataTable" /> 数组转换为集合的末尾。
            </summary>
      <param name="tables">
                数组 <see cref="T:System.Data.DataTable" /> 要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>
              验证是否指定 <see cref="T:System.Data.DataTable" /> 可以从集合中移除对象。
            </summary>
      <param name="table">
        <see langword="DataTable" /> 集合中要对其执行检查。
              </param>
      <returns>
        <see langword="true" /> 是否可以删除表;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>
              清除集合中的所有 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>
              之后，将会 <see cref="T:System.Data.DataTableCollection" /> 由于更改 <see cref="T:System.Data.DataTable" /> 正在添加或移除对象。
            </summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>
              发生时 <see cref="T:System.Data.DataTableCollection" /> 由于更改 <see cref="T:System.Data.DataTable" /> 正在添加或移除对象。
            </summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" /> 集合中存在具有指定名称的对象。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Data.DataTable" /> 来查找。
              </param>
      <returns>
        <see langword="true" /> 如果指定的表存在，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" /> 对象集合中存在具有指定名称和表命名空间。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Data.DataTable" /> 来查找。
              </param>
      <param name="tableNamespace">
                名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。
              </param>
      <returns>
        <see langword="true" /> 如果指定的表存在，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>
              当前的所有元素都复制 <see cref="T:System.Data.DataTableCollection" /> 到一维 <see cref="T:System.Array" />, 、 指定的目标数组索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 要复制当前 <see cref="T:System.Data.DataTableCollection" /> 到对象的元素。
              </param>
      <param name="index">
                目标 <see cref="T:System.Array" /> 开始复制到的索引。
              </param>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>
              获取指定的索引 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
      <param name="table">
                要搜索的 <see langword="DataTable" />。
              </param>
      <returns>
              表或-1，如果在集合中找不到表的从零开始的索引。
            </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>
              获取集合中的索引 <see cref="T:System.Data.DataTable" /> 具有指定名称的对象。
            </summary>
      <param name="tableName">
                名称 <see langword="DataTable" /> 要查找对象。
              </param>
      <returns>
              从零开始的索引 <see langword="DataTable" /> 与指定的名称，则为-1 如果集合中不存在表。
            
                将返回-1 时两个或多个表具有相同名称但不同的命名空间。
                 如果存在任何多义性，将表名称传递给恰好一个表进行匹配时，不会成功调用。
              </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>
              获取指定的集合中的索引 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
      <param name="tableName">
                名称 <see cref="T:System.Data.DataTable" /> 要查找对象。
              </param>
      <param name="tableNamespace">
                名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。
              </param>
      <returns>
              从零开始的索引 <see cref="T:System.Data.DataTable" /> 与指定的名称，则为-1 如果集合中不存在表。
            </returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 的指定索引处的对象。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.Data.DataTable" /> 来查找。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" />具有指定的索引; 否则为 <see langword="null" /> 如果 <see cref="T:System.Data.DataTable" /> 不存在。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  索引值大于集合中的项的数目。
                </exception>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 具有指定名称的对象。
            </summary>
      <param name="name">
                名称 <see langword="DataTable" /> 来查找。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 具有指定名称; 否则为 <see langword="null" /> 如果 <see cref="T:System.Data.DataTable" /> 不存在。
            </returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 与指定的命名空间中的指定名称的对象。
            </summary>
      <param name="name">
                名称 <see langword="DataTable" /> 来查找。
              </param>
      <param name="tableNamespace">
                名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 具有指定名称; 否则为 <see langword="null" /> 如果 <see cref="T:System.Data.DataTable" /> 不存在。
            </returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
      <param name="table">
                要移除的 <see langword="DataTable" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  为此表是指定的值 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表不属于此集合。
                
                  - 或 - 
                
                  表是一种关系的一部分。
                </exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>
              删除 <see cref="T:System.Data.DataTable" /> 具有指定的名称从集合对象。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Data.DataTable" /> 要移除对象。
              </param>
      <exception cref="T:System.ArgumentException">
                  集合没有具有指定名称的表。
                </exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>
              删除 <see cref="T:System.Data.DataTable" /> 具有指定的名称从集合对象。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Data.DataTable" /> 要移除对象。
              </param>
      <param name="tableNamespace">
                名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。
              </param>
      <exception cref="T:System.ArgumentException">
                  集合没有具有指定名称的表。
                </exception>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>
              删除 <see cref="T:System.Data.DataTable" /> 集合中的指定索引处的对象。
            </summary>
      <param name="index">
                索引 <see langword="DataTable" /> 中删除。
              </param>
      <exception cref="T:System.ArgumentException">
                  集合中指定索引处没有表。
                </exception>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>
              将提供数据供 <see cref="M:System.Data.DataTable.NewRow" /> 方法。
            </summary>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>
              初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" /> 的新实例。
            </summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 正在添加。
              </param>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>
              获取要添加的行。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 正被添加。
            </returns>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>
              表示用于处理的方法 <see cref="M:System.Data.DataTable.NewRow" /> 方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。
              </param>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 以一个或多个只读、只进结果集的形式获取一个或多个 <see cref="T:System.Data.DataTable" /> 对象的内容。
            </summary>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataTableReader" /> 通过使用所提供的数据类 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 从中新 <see cref="T:System.Data.DataTableReader" /> 获取其结果集。
              </param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataTableReader" /> 类使用所提供的数组 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
      <param name="dataTables">
                数组 <see cref="T:System.Data.DataTable" /> 提供针对新的结果的对象 <see cref="T:System.Data.DataTableReader" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>
              关闭当前 <see cref="T:System.Data.DataTableReader" />。
            </summary>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>
              当前行的嵌套深度 <see cref="T:System.Data.DataTableReader" />。
            </summary>
      <returns>
              当前行; 嵌套的深度始终为零。
            </returns>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>
              返回当前行中的列数。
            </summary>
      <returns>
              如果未放在有效的结果集中，0;否则为中当前行的列数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试检索中为已关闭的字段计数 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>
              获取指定列的值 <see cref="T:System.Boolean" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含 <see langword="Boolean" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>
              以字节的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含一个字节。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取指定的列偏移量开始到缓冲区作为数组从指定的缓冲区偏移量开始的字节的流。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <param name="dataIndex">
                中自其开始读取的操作的字段的索引。
              </param>
      <param name="buffer">
                若要读取的字节流读入的缓冲区。
              </param>
      <param name="bufferIndex">
                若要开始放置数据的缓冲区中的索引。
              </param>
      <param name="length">
                要复制到缓冲区的最大长度。
              </param>
      <returns>
              读取的实际字节数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含一个字节数组。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>
              字符的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的字段不包含一个字符。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              字符数组的形式返回指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <param name="dataIndex">
                中自其开始读取的操作的字段的索引。
              </param>
      <param name="buffer">
                若要读取的字符流读入的缓冲区。
              </param>
      <param name="bufferIndex">
                若要开始放置数据的缓冲区中的索引。
              </param>
      <param name="length">
                要复制到缓冲区的最大长度。
              </param>
      <returns>
              读取的实际字符数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含的字符数组。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>
              获取表示指定列的数据类型的字符串。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              表示列的数据类型的字符串。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>
              以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含日期时间值。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>
              获取指定列的值 <see cref="T:System.Decimal" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含 <see langword="Decimal" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>
              双精度浮点数字的形式获取列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含双精度浮点数。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>
              返回可用于循环访问项集合的枚举。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象，表示项集合。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>
              获取 <see cref="T:System.Type" /> ，它是该对象的数据类型。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>
              以单精度浮点数字的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含单精度浮点数。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>
              以全局唯一标识符 (GUID) 的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含一个 GUID。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>
              16 位有符号整数形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含 16 位有符号的整数。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>
              作为 32 位有符号整数获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含 32 位有符号的整数值。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>
              以 64 位有符号整数的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含 64 位有符号的整数值。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>
              获取指定列的值 <see cref="T:System.String" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
              指定列的名称。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>
              获取列序号，给定的列的名称。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              从零开始的列序号。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的名称不是有效的列名。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>
              获取指定列的类型提供程序特定格式。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>
              在提供程序特定格式中获取指定列的值。
            </summary>
      <param name="ordinal">
                要检索其值的列的从零开始的数字。
              </param>
      <returns>
              提供程序特定格式中的指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /></exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>
              提供的数组填充中的所有列的提供程序特定的类型信息 <see cref="T:System.Data.DataTableReader" />。
            </summary>
      <param name="values">
                若要使用中的列的类型信息来填充的对象的数组 <see cref="T:System.Data.DataTableReader" />。
              </param>
      <returns>
              列的值复制到数组中的数。
            </returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>
              返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.DataTableReader" />。
            </summary>
      <returns>
              一个描述列元数据的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>
              获取指定列的值作为字符串。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  指定的列不包含一个字符串。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>
              以其本机格式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
              指定列的值。
               此方法返回 <see langword="DBNull" /> 为 null 的列。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问中为已关闭的列 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>
              使用来填充数组的对象的当前行的列的值。
            </summary>
      <param name="values">
                一个数组 <see cref="T:System.Object" /> 向其复制的列的值从 <see cref="T:System.Data.DataTableReader" />。
              </param>
      <returns>
              列的值复制到数组中的数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个行。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个行; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试检索有关已关闭的信息 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" /> 已关闭。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Data.DataTableReader" /> 关闭; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>
              获取一个值，该值指示列是否包含不存在或缺少的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号 
              </param>
      <returns>
        <see langword="true" /> 如果指定的列的值等效于 <see cref="T:System.DBNull" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>
              以其本机格式，在给定列序号获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              以其本机格式指定列的值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。
                </exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>
              获取指定列的值以其本机格式，在给定列名称。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              以其本机格式指定列的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  指定的名称不是有效的列名。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试从已删除的行中检索数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>
              前移 <see cref="T:System.Data.DataTableReader" /> 到下一个结果集，如果有的话。
            </summary>
      <returns>
        <see langword="true" /> 如果没有其他结果集;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试在已关闭中导航 <see cref="T:System.Data.DataTableReader" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>
              前移 <see cref="T:System.Data.DataTableReader" /> 到下一个记录。
            </summary>
      <returns>
        <see langword="true" /> 如果没有另一行读取;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。
                </exception>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>
              获取插入、 发生更改时，或通过执行 SQL 语句删除的行数。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> 不支持此属性，并且始终返回 0。
            </returns>
    </member>
    <member name="T:System.Data.DataView">
      <summary>
              代表 <see cref="T:System.Data.DataTable" /> 的可绑定数据的自定义视图，它用于排序、筛选、搜索、编辑和导航。
              <see cref="T:System.Data.DataView" /> 不存储数据，而改为表示对应的 <see cref="T:System.Data.DataTable" /> 的连接视图。
               更改 <see cref="T:System.Data.DataView" /> 的数据将影响 <see cref="T:System.Data.DataTable" />。
               更改 <see cref="T:System.Data.DataTable" /> 的数据将影响与之关联的所有 <see cref="T:System.Data.DataView" />。
            </summary>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DataView" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>
              使用指定的 <see cref="T:System.Data.DataView" /> 初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。
            </summary>
      <param name="table">
                要添加到 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" />。
              </param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>
              使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.Sort" /> 和 <see cref="T:System.Data.DataViewRowState" /> 初始化 <see cref="T:System.Data.DataView" /> 类的新实例。
            </summary>
      <param name="table">
                要添加到 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="RowFilter">
                要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.RowFilter" />。
              </param>
      <param name="Sort">
                要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.Sort" />。
              </param>
      <param name="RowState">
                要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataViewRowState" />。
              </param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>
              在 <see cref="T:System.Data.DataView" /> 中添加新行。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.DataRowView" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>
              设置或获取一个值，该值指示是否允许删除。
            </summary>
      <returns>
              如果允许删除，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>
              获取或设置一个值，该值指示是否允许编辑。
            </summary>
      <returns>
              如果允许编辑，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>
              获取或设置一个值，该值指示是否可以通过使用 <see cref="M:System.Data.DataView.AddNew" /> 方法添加新行。
            </summary>
      <returns>
              如果可以添加新行，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>
              获取或设置一个值，该值指示是否使用默认排序。
               默认排序是通过 <see cref="P:System.Data.DataTable.PrimaryKey" /> 指定的所有主键进行排序（升序）。
            </summary>
      <returns>
              如果使用默认排序，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>
              开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />。
               此初始化在运行时发生。
            </summary>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>
              关闭 <see cref="T:System.Data.DataView" />。
            </summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
              在成功更改 <see cref="T:System.Data.DataColumnCollection" /> 后发生。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>
              将项复制到数组中。
               仅适用于 Web 窗体界面。
            </summary>
      <param name="array">
                要复制到的数组。
              </param>
      <param name="index">
                从其开始的索引。
              </param>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>
              在应用 <see cref="P:System.Data.DataView.RowFilter" /> 和 <see cref="P:System.Data.DataView.RowStateFilter" /> 之后，获取 <see cref="T:System.Data.DataView" /> 中的记录数。
            </summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 中的记录数。
            </returns>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>
              获取与此视图关联的 <see cref="T:System.Data.DataViewManager" />。
            </summary>
      <returns>
              创建了此视图的 <see langword="DataViewManager" />。
               如果这是 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataView" />，那么 <see langword="DataViewManager" /> 属性将返回 <see langword="DataSet" /> 的默认 <see langword="DataViewManager" />。
               否则，如果在没有 <see langword="DataViewManager" /> 的情况下创建了 <see langword="DataView" />，那么此属性为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>
              删除指定索引处的行。
            </summary>
      <param name="index">
                要删除行的索引。
              </param>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Data.DataView" /> 对象使用的资源（内存除外）。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>
              结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" /> 的初始化。
               此初始化在运行时发生。
            </summary>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>
              确定指定的 <see cref="T:System.Data.DataView" /> 实例是否可视为相等的实例。
            </summary>
      <param name="view">
                要比较的 <see cref="T:System.Data.DataView" />。
              </param>
      <returns>
              如果这两个 <see cref="T:System.Data.DataView" /> 实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>
              根据指定的排序键值在 <see cref="T:System.Data.DataView" /> 中查找行。
            </summary>
      <param name="key">
                类型为 <see cref="T:System.Object" /> 的值的数组。
              </param>
      <returns>
        <see cref="T:System.Data.DataView" /> 中与指定的排序键值匹配的第一个行的位置索引；如果没有匹配的排序键值，则为 -1。
            </returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>
              根据指定的排序键值在 <see cref="T:System.Data.DataView" /> 中查找行。
            </summary>
      <param name="key">
                要搜索的对象。
              </param>
      <returns>
              包含指定排序关键字值的 <see cref="T:System.Data.DataView" /> 中的行的索引；否则为 -1（如果不存在排序关键字值）。
            </returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>
              返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" /> 对象数组。
            </summary>
      <param name="key">
                要搜索的列值，为 <see cref="T:System.Object" /> 类型。
              </param>
      <returns>
        <see langword="DataRowView" /> 对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" /> 数组。
            </returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>
              返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" /> 对象数组。
            </summary>
      <param name="key">
                要搜索的列值数组，其类型为 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see langword="DataRowView" /> 对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" /> 数组。
            </returns>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>
              获取此 <see cref="T:System.Data.DataView" /> 的枚举器。
            </summary>
      <returns>
              用于浏览列表的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>
              在成功更改 <see cref="T:System.Data.DataView" /> 后发生。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。
              </param>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>
        <see cref="T:System.Data.DataView" /> 的初始化完成时发生。
            </summary>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>
              获取一个值，该值指示组件是否已初始化。
            </summary>
      <returns>
              如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>
              获取一个值，该值指示数据源当前是否打开并投影 <see cref="T:System.Data.DataTable" /> 上的数据视图。
            </summary>
      <returns>
              如果源打开，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>
              从指定的表中获取数据行。
            </summary>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" /> 中的记录的索引。
              </param>
      <returns>
              所需的行的 <see cref="T:System.Data.DataRowView" />。
            </returns>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>
              更改由 <see cref="T:System.Data.DataView" /> 管理的列表时发生。
            </summary>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataView.ListChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>
              打开 <see cref="T:System.Data.DataView" />。
            </summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>
              保留以仅供内部使用。
            </summary>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>
              获取或设置用于筛选在 <see cref="T:System.Data.DataView" /> 中查看哪些行的表达式。
            </summary>
      <returns>
              用于指定行的筛选方式的字符串。
               有关详细信息，请参阅“备注”部分。
            </returns>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>
              获取或设置用于 <see cref="T:System.Data.DataView" /> 中的行状态筛选器。
            </summary>
      <returns>
        <see cref="T:System.Data.DataViewRowState" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>
              获取或设置 <see cref="T:System.Data.DataView" /> 的一个或多个排序列和排序顺序。
            </summary>
      <returns>
              一个字符串，该字符串包含后跟“ASC”（升序）或"DESC"（降序）的列名。
               默认情况下，列按升序排序。
               可以用逗号分隔多个列。
            </returns>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>
              获取或设置源 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              为此视图提供数据的 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>
              基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="distinct">
                如果为 <see langword="true" />，则返回的 <see cref="T:System.Data.DataTable" /> 包含具有与其所有列不同的值的行。
                 默认值为 <see langword="false" />。
              </param>
      <param name="columnNames">
                一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" /> 中。
                <see cref="T:System.Data.DataTable" /> 包含指定的列，这些列按其在该数组中显示的顺序排列。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。
            </returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>
              基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="tableName">
                返回的 <see cref="T:System.Data.DataTable" /> 的名称。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。
            </returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>
              基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="tableName">
                返回的 <see cref="T:System.Data.DataTable" /> 的名称。
              </param>
      <param name="distinct">
                如果为 <see langword="true" />，则返回的 <see cref="T:System.Data.DataTable" /> 包含具有与其所有列不同的值的行。
                 默认值为 <see langword="false" />。
              </param>
      <param name="columnNames">
                一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" /> 中。
                <see langword="DataTable" /> 包含指定的列，这些列按其在该数组中显示的顺序排列。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。
            </returns>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>
              基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。
            </returns>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>
              保留以仅供内部使用。
            </summary>
      <param name="force">
                保留以仅供内部使用。
              </param>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>
              保留以仅供内部使用。
            </summary>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Add(System.Object)" />。
            </summary>
      <param name="value">
                一个 <see cref="System.Object" /> 值。
              </param>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Add(System.Object)" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Clear" />。
            </summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
            </summary>
      <param name="value">
                一个 <see cref="System.Object" /> 值。
              </param>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
            </summary>
      <param name="value">
                一个 <see cref="System.Object" /> 值。
              </param>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
            </summary>
      <param name="index">
                一个 <see cref="System.Int32" /> 值。
              </param>
      <param name="value">
                要插入的 <see cref="System.Object" /> 值。
              </param>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
            </summary>
      <param name="recordIndex">
                一个 <see cref="System.Int32" /> 值。
              </param>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
            </summary>
      <param name="value">
                一个 <see cref="System.Object" /> 值。
              </param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。
            </summary>
      <param name="index">
                一个 <see cref="System.Int32" /> 值。
              </param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。
            </summary>
      <param name="property">
                一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。
            </summary>
      <returns>
              添加到列表的项。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。
            </summary>
      <param name="property">
                一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。
              </param>
      <param name="direction">
                一个 <see cref="System.ComponentModel.ListSortDirection" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。
            </summary>
      <param name="property">
                一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。
              </param>
      <param name="key">
                一个 <see cref="System.Object" /> 值。
              </param>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。
            </summary>
      <param name="property">
                一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。
            </summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />。
            </summary>
      <param name="sorts">
                一个 <see cref="System.ComponentModel.ListSortDescriptionCollection" /> 对象。
              </param>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />。
            </summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。
            </returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。
            </returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。
            </summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。
            </summary>
      <param name="listAccessors">
                一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象数组。
              </param>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。
            </returns>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>
              在 <see cref="T:System.Data.DataSet" /> 中包含每个 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataViewSettingCollection" />。
            </summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>
              为指定的 <see cref="T:System.Data.DataSet" /> 初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。
            </summary>
      <param name="dataSet">
                要使用的 <see cref="T:System.Data.DataSet" /> 的名称。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>
              为指定的 <see cref="T:System.Data.DataTable" /> 创建 <see cref="T:System.Data.DataView" />。
            </summary>
      <param name="table">
                名称 <see cref="T:System.Data.DataTable" /> 用于 <see cref="T:System.Data.DataView" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataView" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>
              获取或设置 <see cref="T:System.Data.DataSet" /> 用于 <see cref="T:System.Data.DataViewManager" />。
            </summary>
      <returns>
              要使用的 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>
              获取或设置一个值，用于代码持久性。
            </summary>
      <returns>
              一个值，用于代码持久性。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>
              获取 <see cref="T:System.Data.DataViewSettingCollection" /> 为每个 <see cref="T:System.Data.DataTable" /> 中 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataViewSettingCollection" /> 为每个 <see langword="DataTable" />。
            </returns>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>
              添加到或从已删除行之后发生 <see cref="T:System.Data.DataView" />。
            </summary>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataViewManager.ListChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件时 <see cref="T:System.Data.DataRelation" /> 添加或删除从 <see cref="T:System.Data.DataRelationCollection" />。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTableCollection.CollectionChanged" /> 事件时 <see cref="T:System.Data.DataTable" /> 添加或删除从 <see cref="T:System.Data.DataTableCollection" />。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.Count" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.Count" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.IList" /> 中。
            </summary>
      <param name="value">
                要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Clear" />。
            </summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Object" /> 中找到 <see cref="T:System.Collections.IList" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。
            </summary>
      <param name="index">
                应插入 <paramref name="value" /> 的从零开始的索引。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到 <see cref="T:System.Collections.IList" />。
              </param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="value">
                要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
              移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。
            </summary>
      <param name="index">
                要移除的项的从零开始的索引。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              添加 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到用于搜索的索引。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 将添加到用于搜索的索引。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
              对基于列表进行排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" />。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为排序依据。
              </param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
              返回具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要搜索的。
              </param>
      <param name="key">
                要搜索的属性参数的值。
              </param>
      <returns>
              具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
              删除 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引。
            </summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中删除。
              </param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>
              删除应用使用的任何排序 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。
            </summary>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。
            </summary>
      <param name="listAccessors">
                要在组合中查找的可绑定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。
                 它可以是 <see langword="null" />。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。
            </returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
              返回列表的名称。
            </summary>
      <param name="listAccessors">
                一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，为其返回的列表名称。
                 这可能是 <see langword="null" />。
              </param>
      <returns>
              列表的名称。
            </returns>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>
              描述中的数据的版本 <see cref="T:System.Data.DataRow" />。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>
              新行。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>
              当前行包括保持不变，新的、 行和已修改的行。
               默认情况下， <see cref="T:System.Data.DataViewRowState" /> 设置为当前行。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>
              已删除的行。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>
              已修改的原始数据的当前版本 (请参阅 <see langword="ModifiedOriginal" />)。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>
              已修改数据的原始版本。
               (尽管数据已被修改，则可以用作 <see langword="ModifiedCurrent" />)。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>
              无。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>
              原始行包括不变，且已删除的行。
            </summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>
              未更改的行。
            </summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>
              表示的默认设置 <see cref="P:System.Data.DataView.ApplyDefaultSort" />, ，<see cref="P:System.Data.DataView.DataViewManager" />, ，<see cref="P:System.Data.DataView.RowFilter" />, ，<see cref="P:System.Data.DataView.RowStateFilter" />, ，<see cref="P:System.Data.DataView.Sort" />, ，和 <see cref="P:System.Data.DataView.Table" /> Dataview 创建从 <see cref="T:System.Data.DataViewManager" />。
            </summary>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>
              获取或设置一个值，该值指示是否使用默认排序。
            </summary>
      <returns>
        <see langword="true" /> 如果使用默认排序;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>
              获取包含此 <see cref="T:System.Data.DataViewManager" /> 的 <see cref="T:System.Data.DataViewSetting" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataViewManager" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>
              获取或设置要在应用筛选器 <see cref="T:System.Data.DataView" />。
               请参阅 <see cref="P:System.Data.DataView.RowFilter" /> 使用 RowFilter 的代码示例。
            </summary>
      <returns>
              一个字符串，包含要应用的筛选器。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>
              获取或设置一个值，该值指示是否显示当前、 已删除、 修改当前、 ModifiedOriginal、 新建、 原始、 未更改或在任何行 <see cref="T:System.Data.DataView" />。
            </summary>
      <returns>
              一个值，指示要显示的行。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>
              获取或设置一个值，该值中要应用的排序 <see cref="T:System.Data.DataView" />。
            </summary>
      <returns>
              中要应用的排序 <see cref="T:System.Data.DataView" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 到 <see cref="T:System.Data.DataViewSetting" /> 属性应用。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 对象。
            </returns>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>
              包含一个只读集合 <see cref="T:System.Data.DataViewSetting" /> 为每个对象 <see cref="T:System.Data.DataTable" /> 中 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。
            </summary>
      <param name="ar">
                一维 <see cref="T:System.Array" /> 从集合复制的值的目标。
              </param>
      <param name="index">
                插入操作开始处的数组的索引。
              </param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>
              将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。
            </summary>
      <param name="ar">
                一维 <see cref="T:System.Array" /> 从集合复制的值的目标。
              </param>
      <param name="index">
                插入操作开始处的数组的索引。
              </param>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>
              获取的数 <see cref="T:System.Data.DataViewSetting" /> 中的对象 <see cref="T:System.Data.DataViewSettingCollection" />。
            </summary>
      <returns>
              数 <see cref="T:System.Data.DataViewSetting" /> 集合中的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>
              获取 <see cref="T:System.Collections.IEnumerator" /> 找不到。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.DataViewSettingCollection" /> 是否为只读。
            </summary>
      <returns>
              返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              此属性始终为 <see langword="false" />, ，除非由派生类中重写。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>
              获取 <see cref="T:System.Data.DataViewSetting" /> 的指定对象 <see cref="T:System.Data.DataTable" /> 集合中。
            </summary>
      <param name="table">
                要查找的 <see cref="T:System.Data.DataTable" />。
              </param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Data.DataViewSetting" /> 的对象 <see cref="T:System.Data.DataTable" /> 由索引指定。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.Data.DataTable" /> 来查找。
              </param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" /> 按名称指定。
            </summary>
      <param name="tableName">
                名称 <see cref="T:System.Data.DataTable" /> 来查找。
              </param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。
            </returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>
              通过引发的异常 <see cref="T:System.Data.Common.DataAdapter" /> 期间插入、 更新或删除操作，如果受影响的行数等于零。
            </summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。
            </summary>
      <param name="message">
                描述异常的详细信息的文本字符串。
              </param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。
            </summary>
      <param name="message">
                描述异常的详细信息的文本字符串。
              </param>
      <param name="inner">
                对内部异常的引用。
              </param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>
              初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。
            </summary>
      <param name="message">
                解释此异常原因的错误信息。
              </param>
      <param name="inner">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
      <param name="dataRows">
                一个数组，包含 <see cref="T:System.Data.DataRow" /> 因更新失败而导致产生此异常的对象。
              </param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>
              副本 <see cref="T:System.Data.DataRow" /> 因更新失败而导致生成此异常时，为指定的数组对象 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
      <param name="array">
                一维数组 <see cref="T:System.Data.DataRow" /> 对象复制 <see cref="T:System.Data.DataRow" /> 将对象插入。
              </param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>
              副本 <see cref="T:System.Data.DataRow" /> 因更新失败而导致生成此异常时，为指定的数组对象 <see cref="T:System.Data.DataRow" /> 对象，指定的目标数组索引处开始。
            </summary>
      <param name="array">
                一维数组 <see cref="T:System.Data.DataRow" /> 对象复制 <see cref="T:System.Data.DataRow" /> 将对象插入。
              </param>
      <param name="arrayIndex">
                要开始复制到的目标数组索引。
              </param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用序列化所需的数据填充指定的序列化信息对象 <see cref="T:System.Data.DBConcurrencyException" />。
            </summary>
      <param name="si">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DBConcurrencyException" /> 关联的序列化数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DBConcurrencyException" /> 关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>
              获取或设置的值 <see cref="T:System.Data.DataRow" /> 生成 <see cref="T:System.Data.DBConcurrencyException" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的值。
            </returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>
              获取其更新失败，生成此异常的行数。
            </summary>
      <returns>
              包含其更新失败的行数的整数。
            </returns>
    </member>
    <member name="T:System.Data.DbType">
      <summary>
              指定的字段、 属性的数据类型或 <see langword="Parameter" /> .NET Framework 数据提供程序的对象。
            </summary>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>
              范围在 1 到 8000 个字符之间的非 Unicode 字符长度可变的流。
            </summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>
              非 Unicode 字符固定长度流。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>
              范围在 1 到 8000 个字节之间的二进制数据长度可变的流。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>
              简单类型，表示布尔值的 <see langword="true" /> 或 <see langword="false" />。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>
              取值范围为从 0 到 255 之间的值的 8 位无符号的整数。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>
              货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 -1 （或 + 922337203685，477.5807），精确到货币单位的万分之一。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>
              表示日期值的类型。
            </summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>
              表示日期和时间值的类型。
            </summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>
              日期和时间数据。
               日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
               时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
            </summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>
              时区的日期和时间数据。
               日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
               时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
               时区值范围是-14:00 至 + 14:00。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>
              简单类型，表示值范围从 1.0 x 10 -28 大约 7.9 x 10 28 具有 28-29 个有效数字。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>
              浮点类型，表示从大约 5.0 x 10 范围内的值 -324 1.7 x 10 308 15 到 16 位的精度。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>
              全局唯一标识符 （或 GUID） 中。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>
              整型，表示有符号 16 位整数的值介于-32768 到 32767 之间。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>
              整型，表示有符号 32 位整数的值介于-2147483648 和 2147483647 之间。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>
              整型，表示有符号 64 位整数的值介于-9223372036854775808 到 9223372036854775807 之间。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>
              常规类型，表示由另一个未明确表示任何引用或值类型 <see langword="DbType" /> 值。
            </summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>
              整型，表示有符号值介于-128 和 127 之间的 8 位整数。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>
              浮点类型，表示从大约 1.5 x 10 范围内的值 -45 3.4 x 10 38 且精度为 7 位数字。
            </summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>
              表示 Unicode 字符串的类型。
            </summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>
              一个固定长度的字符串的 Unicode 字符。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>
              表示 SQL Server 的类型 <see langword="DateTime" /> 值。
               如果你想要使用 SQL Server <see langword="time" /> 值，请使用 <see cref="F:System.Data.SqlDbType.Time" />。
            </summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>
              整数类型表示无符号的 16 位整数，其值介于 0 和 65535 之间。
            </summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>
              整数类型表示其值介于 0 和 4294967295 之间的无符号的 32 位整数。
            </summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>
              整数类型表示无符号的 64 位整数的值介于 0 到 18446744073709551615 之间。
            </summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>
              可变长度的数字值。
            </summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>
              已分析的 XML 文档或片断的表示形式。
            </summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>
              表示尝试操作时引发的异常 <see cref="T:System.Data.DataRow" /> 已被删除。
            </summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>
              表示添加操作中的过程中遇到重复的数据库对象名称时引发的异常 <see cref="T:System.Data.DataSet" /> 的相关的对象。
            </summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DuplicateNameException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DuplicateNameException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DuplicateNameException" /> 使用指定的字符串和异常类。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>
              指定的操作时将数据添加到要执行 <see cref="T:System.Data.DataSet" /> 以及所需 <see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataColumn" /> 缺少。
            </summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>
              添加必需的列以完成架构。
            </summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>
              添加必要的列和主键信息以完成架构。
               有关如何主键信息的详细信息添加到 <see cref="T:System.Data.DataTable" />, ，请参阅 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />。才能正常运行.NET Framework 数据提供程序与用于 OLE DB <see langword="AddWithKey" /> 需要本机 OLE DB 访问接口通过设置 DBPROP_UNIQUEROWS 属性来获取必要的主键信息，然后确定哪些列是通过检查在 IColumnsRowset DBCOLUMN_KEYCOLUMN 主键列。
               作为替代方法，用户可以显式设置每个主键约束 <see cref="T:System.Data.DataTable" />。
               这可确保与现有记录匹配的传入记录进行更新，而不是追加。
               当使用 <see langword="AddWithKey" />, ，SQL Server.NET Framework 数据提供程序将 FOR BROWSE 子句附加到正在执行的语句。
               用户应注意的潜在负面影响，例如 SET FMTONLY ON 语句使用的干扰。
               有关详细信息，请参阅 SQL Server 联机丛书。
            </summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>
        <see cref="T:System.InvalidOperationException" /> 缺少指定的列映射时生成。
            </summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>
              将忽略额外的列。
            </summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>
              表示在尝试将 NULL 值插入 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 <see langword="false" /> 的列中时引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.NoNullAllowedException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.Common.DbDataReaderExtensions">
      <summary>
              此类包含用于 <see cref="T:System.Data.Common.DbDataReader" /> 的列架构扩展方法。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>
              获取一个值，指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否可以获取列架构。
            </summary>
      <param name="reader">
                要检查其是否支持列架构的 <see cref="T:System.Data.Common.DbDataReader" />。
              </param>
      <returns>
              如果 <see cref="T:System.Data.Common.DbDataReader" /> 可以获取列架构，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>
              获取 <see cref="T:System.Data.Common.DbDataReader" /> 的列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。
            </summary>
      <param name="reader">
                要返回列架构的 <see cref="T:System.Data.Common.DbDataReader" />。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 的列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>
              实现 <see cref="T:System.Data.IDataRecord" /> 和 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，并为 <see cref="T:System.Data.Common.DbEnumerator" /> 提供数据绑定支持。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbDataRecord" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>
              指示当前记录中字段的数目。
               此属性是只读的。
            </summary>
      <returns>
              当前记录中字段的数目。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  未连接到要从中读取的数据源。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>
              以布尔值的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              如果布尔值为 <see langword="true" /> 则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>
              以字节的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              以字节数组的形式返回指定列的值。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <param name="dataIndex">
                字段中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要读入字节流的缓冲区。
              </param>
      <param name="bufferIndex">
                开始读取操作的 <paramref name="buffer" /> 的索引。
              </param>
      <param name="length">
                要读取的字节数。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>
              以字符的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              以字符数组的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <param name="dataIndex">
                要将数据复制到其中的缓冲区。
              </param>
      <param name="buffer">
                复制到缓冲区的最大长度。
              </param>
      <param name="bufferIndex">
                从缓冲区中开始的点。
              </param>
      <param name="length">
                从数据源中开始的点。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>
              目前尚不支持。
            </summary>
      <param name="i">
                目前尚不支持。
              </param>
      <returns>
              目前尚不支持。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>
              返回后端数据类型的名称。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              后端数据类型的名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>
              以 <see cref="T:System.DateTime" /> 对象的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>
              为可用提供程序特定的实现重写的已请求的列序号返回一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>
              以 <see cref="T:System.Decimal" /> 对象的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>
              以双精度浮点数字的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>
              返回作为对象的数据类型的 <see cref="T:System.Type" />。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              作为对象的数据类型的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>
              以单精度浮点数字的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>
              返回指定字段的 GUID 值。
            </summary>
      <param name="i">
                要返回的字段的索引。
              </param>
      <returns>
              指定字段的 GUID 值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>
              以 16 位带符号整数的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>
              以 32 位带符号整数的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>
              以 64 位带符号整数的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>
              返回指定列的名称。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>
              在给定列名时返回列序号。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              列序号。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>
              以字符串的形式返回指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>
              以本机格式返回位于指定列的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              要返回的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>
              使用当前记录的列值填充对象的数组。
            </summary>
      <param name="values">
                要将属性字段复制到其中的 <see cref="T:System.Object" /> 数组。
              </param>
      <returns>
              数组中的 <see cref="T:System.Object" /> 实例数。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>
              用于指示不存在的值。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              如果指定的列等于 <see cref="T:System.DBNull" />，则为<see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>
              在给定列序号的情况下，指示位于指定列中采用本机格式的值。
               此属性是只读的。
            </summary>
      <param name="i">
                列序号。
              </param>
      <returns>
              位于指定列中采用本机格式的值。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>
              在给定列名的情况下，指示位于指定列中采用本机格式的值。
               此属性是只读的。
            </summary>
      <param name="name">
                列名称。
              </param>
      <returns>
              位于指定列中采用本机格式的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>
              返回此组件实例的自定义属性的集合。
            </summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> ，其中包含此对象的属性。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>
              返回此组件实例的类名称。
            </summary>
      <returns>
              对象的类名称，如果该类没有名称，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>
              返回某个组件的此实例的名称。
            </summary>
      <returns>
              对象的名称，如果该对象不具有名称，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>
              返回此组件实例的类型转换器。
            </summary>
      <returns>
              作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>
              返回某个组件的此实例的默认事件。
            </summary>
      <returns>
              表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>
              返回此组件实例的默认属性。
            </summary>
      <returns>
              表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>
              返回指定类型的此实例的一个组件的编辑器。
            </summary>
      <param name="editorBaseType">
                一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。
              </param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 <see langword="null" /> 如果找不到编辑器中。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>
              返回此组件实例的事件。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>
              使用指定的属性数组作为筛选器，返回此组件实例的事件。
            </summary>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>
              返回此组件实例的属性。
            </summary>
      <returns>
              表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>
              使用特性数组作为筛选器，返回此组件实例的属性。
            </summary>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回一个对象，该对象包含指定的属性描述符所描述的属性。
            </summary>
      <param name="pd">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，表示指定属性的所有者。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>
              提供枚举的本地网络中的数据库服务器的所有可用实例的机制。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>
              创建 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>
              检索 <see cref="T:System.Data.DataTable" /> 包含强类型化此类的实例所表示的服务器的所有可见实例有关的信息。
            </summary>
      <returns>
              返回 <see cref="T:System.Data.DataTable" /> 包含关联的数据源的可见实例有关的信息。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>
              公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
      <summary>
              使用给定的数据读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例。
            </summary>
      <param name="reader">
                要对其进行循环访问的 DataReader。
              </param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>
              使用指定的 <see cref="T:System.Data.Common.DbEnumerator" /> 初始化 <see langword="DataReader" /> 类的新实例。
            </summary>
      <param name="reader">
                要通过其进行循环访问的 <see langword="DataReader" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
      <summary>
              使用指定的读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并表示在循环访问读取器的数据后是否将其自动关闭。
            </summary>
      <param name="reader">
                要对其进行循环访问的 DataReader。
              </param>
      <param name="closeReader">
                若要在循环访问 DataReader 的数据后将其自动关闭，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>
              使用指定的 <see langword="DataReader" /> 初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并指示在循环访问 <see langword="DataReader" /> 的数据后是否将其自动关闭。
            </summary>
      <param name="reader">
                要通过其进行循环访问的 <see langword="DataReader" />。
              </param>
      <param name="closeReader">
                若要在循环访问 <see langword="DataReader" /> 的数据后将其自动关闭，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>
              获取集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  枚举器位于集合中第一个元素之前或最后一个元素之后。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>
              将枚举数推进到集合的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  创建枚举器后，已修改该集合。
                </exception>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>
              代表数据源引发的所有异常的基类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。
            </summary>
      <param name="message">
                要显示此异常的消息。
              </param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用指定的序列化信息和上下文初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。
            </summary>
      <param name="info">
                包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DbException" /> 使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="message">
                错误消息字符串。
              </param>
      <param name="innerException">
                内部异常引用。
              </param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DbException" /> 使用指定的错误消息和错误代码的类。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="errorCode">
                异常的错误代码。
              </param>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>
              提供的已知的常量列表 MetaDataCollections: DataSourceInformation, ，DataTypes, ，MetaDataCollections, ，ReservedWords, ，和 限制。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>
              与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>
              与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>
              与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 MetaDataCollections 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>
              与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 ReservedWords 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>
              与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 限制 集合。
            </summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>
              提供用于中的列名称的静态值 MetaDataCollection 中所含对象 <see cref="T:System.Data.DataTable" />。
              <see cref="T:System.Data.DataTable" /> 由创建 GetSchema 方法。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>
              使用 GetSchema 方法来创建 CollectionName 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>
              使用 GetSchema 方法来创建 ColumnSize 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>
              使用 GetSchema 方法来创建 CompositeIdentifierSeparatorPattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>
              使用 GetSchema 方法来创建 CreateFormat 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>
              使用 GetSchema 方法来创建 CreateParameters 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>
              使用 GetSchema 方法来创建 DataSourceProductName 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>
              使用 GetSchema 方法来创建 有时，DataSourceProductVersion 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>
              使用 GetSchema 方法来创建 DataSourceProductVersionNormalized 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>
              使用 GetSchema 方法来创建 DataType 中的列 数据类型 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>
              使用 GetSchema 方法来创建 GroupByBehavior 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>
              使用 GetSchema 方法来创建 IdentifierCase 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>
              使用 GetSchema 方法来创建 IdentifierPattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>
              使用 GetSchema 方法来创建 IsAutoIncrementable 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>
              使用 GetSchema 方法来创建 IsBestMatch 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>
              使用 GetSchema 方法来创建 IsCaseSensitive 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>
              使用 GetSchema 方法来创建 IsConcurrencyType 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>
              使用 GetSchema 方法来创建 IsFixedLength 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>
              使用 GetSchema 方法来创建 IsFixedPrecisionScale 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>
              使用 GetSchema 方法来创建 IsLiteralSupported 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>
              使用 GetSchema 方法来创建 IsLong 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>
              使用 GetSchema 方法来创建 IsNullable 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>
              使用 GetSchema 方法来创建 IsSearchable 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>
              使用 GetSchema 方法来创建 IsSearchableWithLike 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>
              使用 GetSchema 方法来创建 IsUnsigned 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>
              使用 GetSchema 方法来创建 LiteralPrefix 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>
              使用 GetSchema 方法来创建 LiteralSuffix 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>
              使用 GetSchema 方法来创建 MaximumScale 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>
              使用 GetSchema 方法来创建 MinimumScale 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>
              使用 GetSchema 方法来创建 NumberOfIdentifierParts 中的列 MetaDataCollections 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>
              使用 GetSchema 方法来创建 NumberOfRestrictions 中的列 MetaDataCollections 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>
              使用 GetSchema 方法来创建 OrderByColumnsInSelect 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>
              使用 GetSchema 方法来创建 ParameterMarkerFormat 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>
              使用 GetSchema 方法来创建 ParameterMarkerPattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>
              使用 GetSchema 方法来创建 ParameterNameMaxLength 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>
              使用 GetSchema 方法来创建 ParameterNamePattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>
              使用 GetSchema 方法来创建 ProviderDbType 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>
              使用 GetSchema 方法来创建 QuotedIdentifierCase 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>
              使用 GetSchema 方法来创建 QuotedIdentifierPattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>
              使用 GetSchema 方法来创建 ReservedWord 中的列 ReservedWords 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>
              使用 GetSchema 方法来创建 StatementSeparatorPattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>
              使用 GetSchema 方法来创建 StringLiteralPattern 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>
              使用 GetSchema 方法来创建 SupportedJoinOperators 中的列 DataSourceInformation 集合。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>
              使用 GetSchema 方法来创建 TypeName 中的列 DataTypes 集合。
            </summary>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>
              表示 <see cref="T:System.Data.Common.DbCommand" /> 的参数，还可以是它到 <see cref="T:System.Data.DataSet" /> 列的映射。
               有关参数的详细信息，请参阅 配置参数和参数数据类型。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbParameter" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>
              获取或设置参数的 <see cref="T:System.Data.DbType" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。
               默认值为 <see cref="F:System.Data.DbType.String" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该属性未设置为有效 <see cref="T:System.Data.DbType" />。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>
              获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。
            </summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。
               默认值为 <see langword="Input" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性未设置为一个有效 <see cref="T:System.Data.ParameterDirection" /> 值。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>
              获取或设置一个值，该值指示参数是否接受 null 值。
            </summary>
      <returns>
              如果接受 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DbParameter" /> 的名称。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的名称。
               默认值为空字符串("")。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              获取或设置用于表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 属性的最大位数。
            </summary>
      <returns>
              用于表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 属性的最大位数。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>
              重置 DbType 属性设置为其原始设置。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
      <summary>
              获取或设置所解析的 <see cref="P:System.Data.Common.DbParameter.Value" /> 的小数位数。
            </summary>
      <returns>
              所解析的 <see cref="P:System.Data.Common.DbParameter.Value" /> 的小数位数。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>
              获取或设置列中的数据的最大大小（以字节为单位）。
            </summary>
      <returns>
              列中的数据的最大大小（以字节为单位）。
               默认值将根据参数值进行推断。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>
              获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" /> ，并且用于加载或返回 <see cref="P:System.Data.Common.DbParameter.Value" />。
            </summary>
      <returns>
              映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>
              设置或获取一个值，该值指示源列是否可以为 null。
               这允许 <see cref="T:System.Data.Common.DbCommandBuilder" /> 来正确生成为 null 的列的 Update 语句。
            </summary>
      <returns>
              如果源列可以为 null，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>
              获取或设置 <see cref="T:System.Data.DataRowVersion" /> 来加载时使用 <see cref="P:System.Data.Common.DbParameter.Value" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。
               默认值为 <see langword="Current" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性未设置为其中一个 <see cref="T:System.Data.DataRowVersion" /> 值。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>
              获取或设置参数的值。
            </summary>
      <returns>
              充当参数值的 <see cref="T:System.Object" />。
               默认值为 null。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDataParameter#SourceVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>
              指示数值参数的精度。
            </summary>
      <returns>
              用于表示数据提供程序 <see langword="Parameter" /> 对象的 <see langword="Value" /> 属性的最大位数。
               默认值为 0，指示数据提供程序将设置 <see langword="Value" /> 的精度。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Data.IDbDataParameter.Scale" />。
            </summary>
      <returns>
              所解析的 <see cref="T:System.Data.OleDb.OleDbParameter.Value" /> 的小数位数。
               默认值为 0。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>
              与 <see cref="T:System.Data.Common.DbCommand" /> 相关的参数集合的基类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbParameterCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>
              将指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象添加到 <see cref="T:System.Data.Common.DbParameterCollection" /> 中。
            </summary>
      <param name="value">
                要添加到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。
              </param>
      <returns>
              集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>
              将具有指定值的项的数组添加到 <see cref="T:System.Data.Common.DbParameterCollection" />。
            </summary>
      <param name="values">
                要添加到集合的 <see cref="T:System.Data.Common.DbParameter" /> 类型的值的数组。
              </param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>
              将所有 <see cref="T:System.Data.Common.DbParameter" /> 值从 <see cref="T:System.Data.Common.DbParameterCollection" /> 中移除。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>
              指示集合中是否包含具有指定 <see cref="P:System.Data.Common.DbParameter.Value" /> 的 <see cref="T:System.Data.Common.DbParameter" />。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。
              </param>
      <returns>
              如果 <see cref="T:System.Data.Common.DbParameter" /> 位于集合中，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>
              指示具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 是否存在于集合中。
            </summary>
      <param name="value">
                要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的名称。
              </param>
      <returns>
              如果 <see cref="T:System.Data.Common.DbParameter" /> 位于集合中，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将项的数组复制到从指定索引开始的集合。
            </summary>
      <param name="array">
                要复制到集合的项数组。
              </param>
      <param name="index">
                要复制项的集合中的索引。
              </param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>
              指定集合中项的数目。
            </summary>
      <returns>
              集合中项的数目。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>
              公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>
              返回位于集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </summary>
      <param name="index">
                集合中 <see cref="T:System.Data.Common.DbParameter" /> 的索引。
              </param>
      <returns>
              集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>
              返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </summary>
      <param name="parameterName">
                集合中 <see cref="T:System.Data.Common.DbParameter" /> 的名称。
              </param>
      <returns>
              具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>
              返回指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。
            </summary>
      <param name="value">
                集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
              </param>
      <returns>
              指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>
              返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。
            </summary>
      <param name="parameterName">
                集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。
              </param>
      <returns>
              具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>
              将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的指定索引插入指定索引处的集合中。
            </summary>
      <param name="index">
                插入 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引位置。
              </param>
      <param name="value">
                要插入到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
              </param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>
              指定集合是否为固定大小。
            </summary>
      <returns>
              如果集合为固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>
              指定集合是否为只读。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>
              指定是否同步集合。
            </summary>
      <returns>
              如果同步集合，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>
              获取和设置指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。
            </summary>
      <param name="index">
                参数的从零开始的索引。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的索引不存在。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>
              获取和设置具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <returns>
              具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的索引不存在。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </summary>
      <param name="value">
                要移除的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>
              从集合中删除位于指定位置的 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所在的索引。
              </param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>
              删除 <see cref="T:System.Data.Common.DbParameter" /> 具有指定的名称从集合对象。
            </summary>
      <param name="parameterName">
                要删除的 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。
              </param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>
              将指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新值。
            </summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所在的索引。
              </param>
      <param name="value">
                新的 <see cref="T:System.Data.Common.DbParameter" /> 值。
              </param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>
              将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新值。
            </summary>
      <param name="parameterName">
                集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。
              </param>
      <param name="value">
                新的 <see cref="T:System.Data.Common.DbParameter" /> 值。
              </param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>
              指定将用于同步集合访问的 <see cref="T:System.Object" />。
            </summary>
      <returns>
              用于同步 <see cref="T:System.Data.Common.DbParameterCollection" /> 访问的 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#ICollection#IsSynchronized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#IsFixedSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#IsReadOnly">
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>
              获取或设置指定索引处的参数。
            </summary>
      <param name="parameterName">
                要检索的参数的名称。
              </param>
      <returns>
              指定索引处的一个 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>
              表示一组方法，这些方法用于创建数据源类的提供程序实现的实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>
              指定是否特定于 <see cref="T:System.Data.Common.DbProviderFactory" /> 支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类。
            </summary>
      <returns>
        <see langword="true" /> 如果实例 <see cref="T:System.Data.Common.DbProviderFactory" /> 支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbCommand" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbConnection" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbDataAdapter" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>
              返回实现 <see cref="T:System.Data.Common.DbParameter" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新实例。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>
              标识设置特定于提供程序类型时要使用强类型化的参数类中的提供程序特定属性。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> 类的新实例。
            </summary>
      <param name="isProviderSpecificTypeProperty">
                指定此属性是一个提供程序特定的属性。
              </param>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>
              指示特性化的属性是否是特定于提供程序类型。
            </summary>
      <returns>
        <see langword="true" /> 如果此特性应用于该属性是特定于提供程序类型属性;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>
              事务的基类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>
              初始化新的 <see cref="T:System.Data.Common.DbTransaction" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>
              提交数据库事务。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>
              指定 <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>
              指定 <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>
              释放 <see cref="T:System.Data.Common.DbTransaction" /> 使用的非托管资源。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Data.Common.DbTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                如果 <see langword="true" />, ，此方法释放由任何托管对象持有的全部资源此 <see cref="T:System.Data.Common.DbTransaction" /> 引用。
              </param>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>
              指定 <see cref="T:System.Data.IsolationLevel" /> 此事务。
            </summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 此事务。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>
              从挂起状态回滚事务。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>
              获取与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象，或空引用（如果该事务不再有效）。
            </summary>
      <returns>
              与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。
            </returns>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>
              在 SELECT 语句的选择列表中指定 GROUP BY 子句中的列和非聚合列之间的关系。
            </summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>
              GROUP BY 子句必须包含在选择列表中，所有非聚集的列，并且不能包含不在列表中选择其他列。
            </summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>
              GROUP BY 子句必须包含在选择列表中，所有非聚集的列，并且可以包含不在列表中选择其他列。
            </summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>
              不支持 GROUP BY 子句。
            </summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>
              GROUP BY 子句的支持是未知的。
            </summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>
              GROUP BY 子句中的列和选择列表中的非聚合的列之间没有关系。
               可以按任何列进行分组。
            </summary>
    </member>
    <member name="T:System.Data.Common.IDbColumnSchemaGenerator">
      <summary>
              生成列架构。
            </summary>
    </member>
    <member name="M:System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema">
      <summary>
              获取列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。
            </summary>
      <returns>
              列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。
            </returns>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>
              指定标识符时如何对待通过数据源来搜索系统目录。
            </summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>
              搜索系统目录时，数据源将忽略标识符的大小写。
               将匹配的标识符"ab"和"AB"。
            </summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>
              搜索系统目录时，数据源会将标识符的大小写区分开来。
               将不匹配的标识符"ab"和"AB"。
            </summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>
              数据源的标识符大小写规则不明确，无法识别此信息。
            </summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>
              将提供数据供 <see langword="RowUpdated" /> 的.NET Framework 数据提供程序的事件。
            </summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
              初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。
            </summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
              </param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。
              </param>
      <param name="statementType">
                执行 SQL 语句的类型。
              </param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
              </param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>
              获取 <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。
            </returns>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>
              将对已修改行的引用复制到所提供的数组。
            </summary>
      <param name="array">
                数组 <see cref="T:System.Data.DataRow" /> 将复制到。
              </param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>
              将对已修改行的引用复制到所提供的数组。
            </summary>
      <param name="array">
                数组 <see cref="T:System.Data.DataRow" /> 将复制到。
              </param>
      <param name="arrayIndex">
                中开始将复制到的数组的索引。
              </param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>
              获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 后执行。
            </summary>
      <returns>
              .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 后执行。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>
              获取通过执行 SQL 语句更改、插入或删除的行数。
            </summary>
      <returns>
              更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>
              获取 <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>
              获取已更新的记录的批中处理的行数。
            </summary>
      <returns>
        <see langword="int" /> 指定处理的行数。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>
              获取执行 SQL 语句的类型。
            </summary>
      <returns>
              执行 SQL 语句的类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>
              获取 <see cref="T:System.Data.UpdateStatus" /> 的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性。
            </summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。
               默认值为 <see langword="Continue" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>
              获取 <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </returns>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>
              将提供数据供 RowUpdating 的.NET Framework 数据提供程序的事件。
            </summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
              初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。
            </summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
              </param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。
              </param>
      <param name="statementType">
                要执行的 SQL 语句的类型。
              </param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
              </param>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>
              获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此类的实例的对象。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>
              获取 <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 操作。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>
              获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行。
            </summary>
      <returns>
              .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>
              获取 <see cref="T:System.Data.DataRow" /> ，将向服务器发送，作为插入、 更新或删除操作的一部分。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>
              获取要执行的 SQL 语句的类型。
            </summary>
      <returns>
              要执行的 SQL 语句的类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>
              获取或设置 <see cref="T:System.Data.UpdateStatus" /> 的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性。
            </summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。
               默认值为 <see langword="Continue" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>
              获取 <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </returns>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>
              描述列元数据的数据库表的架构。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>
              指定是否值 <see langword="DBNull" /> 允许的。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>
              指定架构表中的列的名称。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>
              指定架构表中的架构的名称。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>
              指定架构表中的表的名称。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>
              指定架构表中的列的名称。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>
              指定列的序号。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>
              指定列的大小。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>
              指定列中的数据类型。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>
              指定该列是否是使用别名。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>
              指定此列是否是一个表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>
              指定该列是否是表的键。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>
              指定此列是否包含长整型数据。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>
              指定唯一约束适用于此列。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>
              指定列的非版本化提供程序特定的数据类型。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>
              如果是数值数据，请指定列数据的精度。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>
              如果是数值数据，请指定列数据的小数位数。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>
              指定列的提供程序特定的数据类型。
            </summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>
              描述数据库表的架构的可选列元数据。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>
              指定从该处分配新标识列系列的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>
              指定标识列中的值之间的增量。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>
              与最新的查询的结果相关联的目录的名称。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>
              列的命名空间。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>
              列的服务器名称。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>
              包含列的表的命名空间。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>
              指定列的映射。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>
              列的默认值。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>
              用来计算该列的表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>
              指定是否将自动增加列中的列的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>
              指定是否隐藏此列。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>
              指定该列是否是只读的。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>
              指定此列是否包含行版本信息。
            </summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>
              指定列的提供程序特定的数据类型。
            </summary>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>
              指定哪些类型的 Transact SQL join 语句支持的数据源。
            </summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>
              数据源支持完全外部联接。
            </summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>
              数据源支持内部联接。
            </summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>
              数据源支持左外部联接。
            </summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>
              数据源不支持联接查询。
            </summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>
              数据源支持右外部联接。
            </summary>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>
              确定当映射处于源表或源列中缺少时发生的操作。
            </summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>
        <see cref="T:System.InvalidOperationException" /> 缺少指定的列映射时生成。
            </summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>
              将忽略的列或表不具有映射。
               返回 <see langword="null" />。
            </summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>
              创建并添加到源表的源列 <see cref="T:System.Data.DataSet" /> 使用其原始名称。
            </summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>
              表示当您尝试访问没有主键的表中的行时引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>
              表示时，将引发的异常 <see cref="P:System.Data.DataColumn.Expression" /> 属性 <see cref="T:System.Data.DataColumn" /> 无法计算的值。
            </summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EvaluateException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EvaluateException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的特定序列化的流。
              </param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>
              将提供数据供 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件 <see cref="T:System.Data.Common.DbDataAdapter" />。
            </summary>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>
              初始化 <see cref="T:System.Data.FillErrorEventArgs" /> 类的新实例。
            </summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 正在更新。
              </param>
      <param name="values">
                正在更新的行的值。
              </param>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>
              获取或设置一个值，该值指示是否要继续填充操作忽略错误。
            </summary>
      <returns>
        <see langword="true" /> 如果应继续填充操作;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 发生错误时进行更新。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 正在更新。
            </returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>
              获取正在处理的错误。
            </summary>
      <returns>
              正在处理的错误。
            </returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>
              获取发生错误时正在更新的行的值。
            </summary>
      <returns>
              正在更新的行的值。
            </returns>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.FillErrorEventArgs" />。
              </param>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>
              表示某个值或行已删除或更新时在一组主键/外键关系的列上强制执行的操作限制。
            </summary>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类，具有指定的父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="parentColumn">
                父 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <param name="childColumn">
                子 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个列 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型。
                
                  -或者- 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类与指定的数组一起使用的父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="parentColumns">
                数组的父 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <param name="childColumns">
                子数组 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个列 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型。
                
                  -或者- 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类，具有指定的名称、 父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="constraintName">
                约束的名称。
              </param>
      <param name="parentColumn">
                父 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <param name="childColumn">
                子 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个列 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型。
                
                  -或者- 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 带有指定的名称和父级和子级的数组类 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。
                 如果 <see langword="null" /> 或空字符串，将提供一个默认名称，添加到约束集合时。
              </param>
      <param name="parentColumns">
                数组的父 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <param name="childColumns">
                子数组 <see cref="T:System.Data.DataColumn" /> 约束中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个列 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型。
                
                  -或者- 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>
              此构造函数用于在 Visual Studio 环境中的设计时支持。
              <see cref="T:System.Data.ForeignKeyConstraint" /> 然后必须通过向集合添加使用此构造函数创建的对象 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />。
               表和具有指定名称的列必须存在于调用该方法时，或者如果 <see cref="M:System.Data.DataTable.BeginInit" /> 已调用之前调用此构造函数、 表和具有指定名称的列时必须存在， <see cref="M:System.Data.DataTable.EndInit" /> 调用。
            </summary>
      <param name="constraintName">
                约束的名称。
              </param>
      <param name="parentTableName">
                父项的名称 <see cref="T:System.Data.DataTable" /> ，其中包含父 <see cref="T:System.Data.DataColumn" /> 约束中的对象。
              </param>
      <param name="parentColumnNames">
                父项的名称的数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。
              </param>
      <param name="childColumnNames">
                名称的子数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。
              </param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。
                 可能的值包括 <see langword="None" />, ，<see langword="Cascade" />, ，和 <see langword="Default" />。
              </param>
      <param name="deleteRule">
                其中一个 <see cref="T:System.Data.Rule" /> 删除某行时要使用值。
                 默认值为 <see langword="Cascade" />。
                 可能的值包括︰ <see langword="None" />, ，<see langword="Cascade" />, ，<see langword="SetNull" />, ，<see langword="SetDefault" />, ，和 <see langword="Default" />。
              </param>
      <param name="updateRule">
                其中一个 <see cref="T:System.Data.Rule" /> 更新了某行时要使用值。
                 默认值为 <see langword="Cascade" />。
                 可能的值包括︰ <see langword="None" />, ，<see langword="Cascade" />, ，<see langword="SetNull" />, ，<see langword="SetDefault" />, ，和 <see langword="Default" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个列 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型。
                
                  -或者- 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>
              此构造函数用于在 Visual Studio 环境中的设计时支持。
              <see cref="T:System.Data.ForeignKeyConstraint" /> 然后必须通过向集合添加使用此构造函数创建的对象 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />。
               表和具有指定名称的列必须存在于调用该方法时，或者如果 <see cref="M:System.Data.DataTable.BeginInit" /> 已调用之前调用此构造函数、 表和具有指定名称的列时必须存在， <see cref="M:System.Data.DataTable.EndInit" /> 调用。
            </summary>
      <param name="constraintName">
                约束的名称。
              </param>
      <param name="parentTableName">
                父项的名称 <see cref="T:System.Data.DataTable" /> ，其中包含父 <see cref="T:System.Data.DataColumn" /> 约束中的对象。
              </param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" /> 的名称。
              </param>
      <param name="parentColumnNames">
                父项的名称的数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。
              </param>
      <param name="childColumnNames">
                名称的子数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。
              </param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。
                 可能的值包括 <see langword="None" />, ，<see langword="Cascade" />, ，和 <see langword="Default" />。
              </param>
      <param name="deleteRule">
                其中一个 <see cref="T:System.Data.Rule" /> 删除某行时要使用值。
                 默认值为 <see langword="Cascade" />。
                 可能的值包括︰ <see langword="None" />, ，<see langword="Cascade" />, ，<see langword="SetNull" />, ，<see langword="SetDefault" />, ，和 <see langword="Default" />。
              </param>
      <param name="updateRule">
                其中一个 <see cref="T:System.Data.Rule" /> 更新了某行时要使用值。
                 默认值为 <see langword="Cascade" />。
                 可能的值包括︰ <see langword="None" />, ，<see langword="Cascade" />, ，<see langword="SetNull" />, ，<see langword="SetDefault" />, ，和 <see langword="Default" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个列 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型。
                
                  -或者- 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>
              指示应发生跨此约束的操作时<see cref="M:System.Data.DataTable.AcceptChanges" />调用。
            </summary>
      <returns>
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。
               可能的值包括<see langword="None" />，和<see langword="Cascade" />。
               默认值为 <see langword="None" />。
            </returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>
              获取此约束列的子级。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.DataColumn" /> 是该约束的子列的对象。
            </returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>
              获取或设置通过该约束删除了某行时发生的操作。
            </summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。
               默认值为 <see langword="Cascade" />。
            </returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>
              获取一个值，该值指示是否当前 <see cref="T:System.Data.ForeignKeyConstraint" /> 等同于指定的对象。
            </summary>
      <param name="key">
                与此对象 <see cref="T:System.Data.ForeignKeyConstraint" /> 进行比较。
                 两个 <see cref="T:System.Data.ForeignKeyConstraint" /> 相等，如果它们约束相同的列。
              </param>
      <returns>
        <see langword="true" />, 如果对象是相同的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>
              获取此实例的哈希代码 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>
              此约束的父列。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.DataColumn" /> 约束的父列的对象。
            </returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>
              获取此约束的父表。
            </summary>
      <returns>
              父 <see cref="T:System.Data.DataTable" /> 此约束。
            </returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>
              获取此约束的子表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 约束中的子表。
            </returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>
              获取或设置当更新行时，通过此约束发生的操作。
            </summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。
               默认值为 <see langword="Cascade" />。
            </returns>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>
              将相关联的数据源列 <see cref="T:System.Data.DataSet" /> 列中，并由实现 <see cref="T:System.Data.Common.DataColumnMapping" /> 类，该类由.NET Framework 数据提供程序共同使用。
            </summary>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>
              获取或设置中的列名称 <see cref="T:System.Data.DataSet" /> 映射到。
            </summary>
      <returns>
              中的数据列的名称 <see cref="T:System.Data.DataSet" /> 映射到。
               名称不区分大小写。
            </returns>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>
              获取或设置数据源从映射中的列的名称。
               名称是区分大小写。
            </summary>
      <returns>
              区分大小写的数据源中的列名称。
            </returns>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>
              包含 DataColumnMapping 对象的集合，由实现 <see cref="T:System.Data.Common.DataColumnMappingCollection" />, ，将使用该通用.NET Framework 数据提供程序。
            </summary>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>
              使用源列的列映射集合中添加列映射对象和 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="sourceColumnName">
                区分大小写的源列的名称。
              </param>
      <param name="dataSetColumnName">
                名称 <see cref="T:System.Data.DataSet" /> 列。
              </param>
      <returns>
              ColumnMapping 对象，该对象添加到集合。
            </returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。
            </summary>
      <param name="sourceColumnName">
                区分大小写的源列的名称。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的源列名称的对象存在，否则 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>
              获取具有指定的列映射对象 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="dataSetColumnName">
                名称 <see cref="T:System.Data.DataSet" /> 列集合中的。
              </param>
      <returns>
              使用指定的列映射对象 <see langword="DataSet" /> 列名称。
            </returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>
              获取的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。
               名称是区分大小写。
            </summary>
      <param name="sourceColumnName">
                区分大小写的源列的名称。
              </param>
      <returns>
              从零开始的位置 <see langword="DataColumnMapping" /> 对象具有指定的源列名称。
            </returns>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>
              获取或设置 <see cref="T:System.Data.IColumnMapping" /> 对象具有指定 <see langword="SourceColumn" /> 名称。
            </summary>
      <param name="index">
        <see langword="SourceColumn" /> 名称 <see langword="IColumnMapping" /> 要查找对象。
              </param>
      <returns>
        <see langword="IColumnMapping" /> 对象具有指定 <see langword="SourceColumn" /> 名称。
            </returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>
              删除 <see cref="T:System.Data.IColumnMapping" /> 对象具有指定 <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 名称从集合。
            </summary>
      <param name="sourceColumnName">
                区分大小写 <see langword="SourceColumn" /> 名称。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象不存在具有指定 <see langword="SourceColumn" /> 名称。
                </exception>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>
              允许对象实现 DataAdapter，并表示一组方法和映射与操作相关的属性，用于填充和更新 <see cref="T:System.Data.DataSet" /> 和更新数据源。
            
              <see cref="T:System.Data.IDbDataAdapter" /> 实例是在 （或类似于） 使用文本命令的关系数据库的数据源 (如 Transact-SQL)，而 <see cref="T:System.Data.IDataAdapter" /> 实例可以使用任何类型的数据源。
            </summary>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>
              添加或更新中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 名称，然后创建 <see cref="T:System.Data.DataTable" /> 名为"Table"。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>
              将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要填充数据源中的架构。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataTable" /> 从数据源中返回包含架构信息的对象。
            </returns>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>
              获取在执行 SQL SELECT 语句时由用户设置的参数。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.IDataParameter" /> 由用户来设置包含的参数的对象。
            </returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>
              指示或指定是否未映射的源的表或列传递与其源名一起以进行筛选，或者将引发错误。
            </summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
               默认值为 <see langword="Passthrough" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" /> 值。
                </exception>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>
              指示或指定是否丢失的源表、 列和它们之间的关系添加到数据集架构，将被忽略，或者会导致错误被引发。
            </summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
               默认值为 <see langword="Add" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" /> 值。
                </exception>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>
              指示如何将源表映射到数据集表。
            </summary>
      <returns>
              一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />。
               默认值为空集合。
            </returns>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>
              对于每个插入、 更新或删除了行中指定调用相应的 INSERT、 UPDATE 或 DELETE 语句 <see cref="T:System.Data.DataSet" /> 从 <see cref="T:System.Data.DataTable" /> 名为"Table"。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 用于更新数据源。
              </param>
      <returns>
              从已成功更新的行数 <see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>
              表示 Command 对象的参数，也可以表示其到 <see cref="T:System.Data.DataSet" /> 列的映射；并由访问数据源的 .NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>
              获取或设置参数的 <see cref="T:System.Data.DbType" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。
               默认值为 <see cref="F:System.Data.DbType.String" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  该属性未设置为有效的 <see cref="T:System.Data.DbType" />。
                </exception>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>
              获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。
            </summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。
               默认值为 <see langword="Input" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。
                </exception>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>
              获取一个值，该值指示参数是否接受 null 值。
            </summary>
      <returns>
              如果接受 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>
              获取或设置 <see cref="T:System.Data.IDataParameter" /> 的名称。
            </summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 的名称。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>
              获取或设置映射到 <see cref="T:System.Data.DataSet" /> 并且用于加载或返回 <see cref="P:System.Data.IDataParameter.Value" /> 的源列的名称。
            </summary>
      <returns>
              映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>
              获取或设置要在加载 <see cref="P:System.Data.IDataParameter.Value" /> 时使用的 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。
               默认值为 <see langword="Current" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。
                </exception>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>
              获取或设置参数的值。
            </summary>
      <returns>
              充当参数值的 <see cref="T:System.Object" />。
               默认值为 null。
            </returns>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>
              收集与 Command 对象相关的所有参数以及这些参数到 <see cref="T:System.Data.DataSet" /> 列的映射，并由访问数据源的 .NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示集合中的参数是否具有指定的名称。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <returns>
              如果集合包含该参数，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>
              在集合中获取 <see cref="T:System.Data.IDataParameter" /> 的位置。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <returns>
              集合中 <see cref="T:System.Data.IDataParameter" /> 从零开始的位置。
            </returns>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>
              获取或设置指定索引处的参数。
            </summary>
      <param name="parameterName">
                要检索的参数的名称。
              </param>
      <returns>
              指定索引处的一个 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>
              从集合中移除 <see cref="T:System.Data.IDataParameter" />。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>
              提供一种读取结果集（通过对数据源执行命令获取）的一个或多个只进流的方法，并由访问关系数据库的.NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>
              关闭 <see cref="T:System.Data.IDataReader" /> 对象。
            </summary>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>
              获取一个值，该值指示当前行的嵌套深度。
            </summary>
      <returns>
              嵌套的级别。
            </returns>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>
              返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <returns>
              一个描述列元数据的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" /> 已关闭。
                </exception>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>
              获取一个值，该值指示数据读取器是否已关闭。
            </summary>
      <returns>
              如果数据读取器已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>
              在读取一批 SQL 语句的结果时，使数据读取器前进到下一个结果。
            </summary>
      <returns>
              如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>
              让 <see cref="T:System.Data.IDataReader" /> 前进到下一条记录。
            </summary>
      <returns>
              如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>
              获取通过执行 SQL 语句更改、插入或删除的行数。
            </summary>
      <returns>
              已更改、插入或删除的行数；如果没有受影响的行或语句失败，则为 0；对于 SELECT 语句为 -1。
            </returns>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>
              为 <see langword="DataReader" /> 提供对每行中的列值的访问权限，并由访问关系数据库的.NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>
              获取当前行中的列数。
            </summary>
      <returns>
              如果未位于有效的记录集中，则为 0；否则为当前记录中的列数。
               默认值为 -1。
            </returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>
              以布尔值的形式获取指定列的值。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <returns>
              列的值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>
              获取指定列的 8 位无符号整数值。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <returns>
              指定列的 8 位无符号整数值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              将字节流从指定列偏移量读入到缓冲区中，将其作为从给定缓冲区偏移量开始的数组。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <param name="fieldOffset">
                字段中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要读入字节流的缓冲区。
              </param>
      <param name="bufferoffset">
                开始读取操作的 <paramref name="buffer" /> 的索引。
              </param>
      <param name="length">
                要读取的字节数。
              </param>
      <returns>
              读取的实际字节数。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>
              获取指定列的字符值。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <returns>
              指定列的字符值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符流从指定列偏移量读入到缓冲区中，将其作为从给定缓冲区偏移量开始的数组。
            </summary>
      <param name="i">
                从零开始的列序号。
              </param>
      <param name="fieldoffset">
                行中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要读入字节流的缓冲区。
              </param>
      <param name="bufferoffset">
                开始读取操作的 <paramref name="buffer" /> 的索引。
              </param>
      <param name="length">
                要读取的字节数。
              </param>
      <returns>
              读取的实际字符数。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>
              返回指定列序号的 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定列序号的 <see cref="T:System.Data.IDataReader" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>
              获取指定字段的数据类型信息。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的数据类型信息。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>
              获取指定字段的日期和时间数据值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的日期和时间数据值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>
              获取指定字段的固定位置数值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的固定位置数值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>
              获取指定字段的双精度浮点数。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的双精度浮点数。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>
              获取对应于会从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 返回的 <see cref="T:System.Object" /> 类型的 <see cref="T:System.Type" /> 信息。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              对应于会从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 返回的 <see cref="T:System.Object" /> 类型的 <see cref="T:System.Type" /> 信息。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>
              获取指定字段的单精度浮点数。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的单精度浮点数。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>
              返回指定字段的 GUID 值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的 GUID 值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>
              获取指定字段的 16 位带符号整数值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的 16 位带符号整数值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>
              获取指定字段的 32 位带符号整数值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的 32 位带符号整数值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>
              获取指定字段的 64 位带符号整数值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的 64 位带符号整数值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>
              获取要查找的字段的名称。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              字段的名称，如果没有要返回的值，则为空字符串 ("")。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>
              返回已命名字段的索引。
            </summary>
      <param name="name">
                要查找的字段的名称。
              </param>
      <returns>
              已命名字段的索引。
            </returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>
              获取指定字段的字符串值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              指定字段的字符串值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>
              返回指定字段的值。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              返回时将包含字段值的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>
              使用当前记录的列值填充对象的数组。
            </summary>
      <param name="values">
                要将属性字段复制到其中的 <see cref="T:System.Object" /> 数组。
              </param>
      <returns>
              数组中的 <see cref="T:System.Object" /> 实例数。
            </returns>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>
              返回指定字段是否设置为 null。
            </summary>
      <param name="i">
                要查找的字段的索引。
              </param>
      <returns>
              如果指定的字段设置为 null，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>
              获取位于指定索引处的列。
            </summary>
      <param name="i">
                要获取的列的从零开始的索引。
              </param>
      <returns>
              位于作为 <see cref="T:System.Object" /> 指定索引处的列。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围。
                </exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>
              获取具有指定名称的列。
            </summary>
      <param name="name">
                要查找的列的名称。
              </param>
      <returns>
              具有指定名称、作为 <see cref="T:System.Object" /> 的列。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  未找到具有指定名称的列。
                </exception>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>
              表示连接到数据源时执行的 SQL 语句，并由访问关系数据库的 .NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>
              尝试取消执行 <see cref="T:System.Data.IDbCommand" />。
            </summary>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>
              获取或设置对数据源运行的文本命令。
            </summary>
      <returns>
              要执行的文本命令。
               默认值为空字符串 ("")。
            </returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>
              获取或设置在终止尝试执行命令并生成错误之前的等待时间。
            </summary>
      <returns>
              等待命令执行所需的时间（以秒为单位）。
               默认值为 30 秒。
            </returns>
      <exception cref="T:System.ArgumentException">
                  分配的属性值小于 0。
                </exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>
              指示或指定解释 <see cref="P:System.Data.IDbCommand.CommandText" /> 属性的方式。
            </summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。
               默认值为 <see langword="Text" />。
            </returns>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>
              获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此实例使用的 <see cref="T:System.Data.IDbConnection" />。
            </summary>
      <returns>
              与数据源的连接。
            </returns>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>
              创建 <see cref="T:System.Data.IDbDataParameter" /> 对象的新实例。
            </summary>
      <returns>
              一个 <see langword="IDbDataParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>
              对 .NET Framework 数据提供程序的 <see langword="Connection" /> 对象执行 SQL 语句，并返回受影响的行数。
            </summary>
      <returns>
              受影响的行数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接不存在。
                
                  - 或 - 
                
                  连接未打开。
                </exception>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>
              对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 并生成 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.IDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
              对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.IDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>
              执行查询，并返回由查询返回的结果集中第一行的第一列。
               忽略其他列或行。
            </summary>
      <returns>
              结果集中第一行的第一列。
            </returns>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>
              获取 <see cref="T:System.Data.IDataParameterCollection" />。
            </summary>
      <returns>
              SQL 语句或存储过程的参数。
            </returns>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>
              在数据源上创建准备就绪（或已编译）的命令版本。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  未设置 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />。
                
                  - 或 - 
                
                  <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 不为 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />。
                </exception>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>
              获取或设置要在其中执行 .NET Framework 数据提供程序的 <see langword="Command" /> 对象的事务。
            </summary>
      <returns>
              .NET Framework 数据提供程序的 <see langword="Command" /> 对象执行。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>
              获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 方法使用时应用于 <see cref="T:System.Data.DataRow" /> 的方式。
            </summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。
               除非自动生成该命令，否则默认值为 <see langword="Both" />。
               如果自动生成该命令，默认值为 <see langword="None" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  输入的值不是 <see cref="T:System.Data.UpdateRowSource" /> 值之一。
                </exception>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>
              表示一个与数据源的开放连接，并由访问关系数据库的 .NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>
              开始一项数据库事务。
            </summary>
      <returns>
              表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
              以指定的 <see cref="T:System.Data.IsolationLevel" /> 值开始数据库事务。
            </summary>
      <param name="il">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。
              </param>
      <returns>
              表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>
              更改已打开的 <see langword="Connection" /> 对象的当前数据库。
            </summary>
      <param name="databaseName">
                要代替当前数据库使用的数据库名称。
              </param>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>
              关闭与数据库之间的连接。
            </summary>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>
              获取或设置用于打数据库的字符串。
            </summary>
      <returns>
              包含连接设置的字符串。
            </returns>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>
              获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。
            </summary>
      <returns>
              等待连接打开所需的时间（以秒为单位）。
               默认值为 15 秒。
            </returns>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>
              创建并返回一个与连接关联的命令对象。
            </summary>
      <returns>
              与连接关联的命令对象。
            </returns>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>
              获取当前数据库的名称或打开连接后要使用的数据库的名称。
            </summary>
      <returns>
              当前数据库的名称或打开连接后要使用的数据库的名称。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>
              打开具有指定设置（由特定于提供程序的 Connection 对象的 <see langword="ConnectionString" /> 属性所指定）的数据库连接。
            </summary>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>
              获取连接的当前状态。
            </summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。
            </returns>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>
              表示一组与命令相关的属性，用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源，并由访问关系数据库的.NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>
              获取或设置用于从数据集中删除记录的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来删除已删除行在数据集中的数据源中的记录。
            </returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>
              获取或设置用于将新记录插入到数据源的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 以新行在数据集中的数据源中插入记录。
            </returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>
              获取或设置用于在数据源中选择记录的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。
            </returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>
              获取或设置用于更新数据源中的记录的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。
            </returns>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>
              由 Visual Basic.NET 数据设计器使用，用于表示命令对象的参数和（可选）该参数到 <see cref="T:System.Data.DataSet" /> 列的映射。
            </summary>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>
              指示数值参数的精度。
            </summary>
      <returns>
              用于表示数据提供程序 Parameter 对象的 Value 属性的最大位数。
               默认值为 0，指示数据提供程序将设置 Value 的精度。
            </returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>
              指示数值参数的比例。
            </summary>
      <returns>
              所解析的 <see cref="T:System.Data.OleDb.OleDbParameter.Value" /> 的小数位数。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>
              参数的大小。
            </summary>
      <returns>
              列中的数据的最大大小（以字节为单位）。
               默认值将根据参数值进行推断。
            </returns>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>
              表示要在数据源上执行的事务，并由访问关系数据库的 .NET Framework 数据提供程序实现。
            </summary>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>
              提交数据库事务。
            </summary>
      <exception cref="T:System.Exception">
                  在尝试提交事务时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  已提交或回滚事务。
                
                  - 或 - 
                
                  连接已断开。
                </exception>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>
              指定要与事务关联的 Connection 对象。
            </summary>
      <returns>
              要与事务关联的 Connection 对象。
            </returns>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>
              为该事务指定 <see cref="T:System.Data.IsolationLevel" />。
            </summary>
      <returns>
              该事务的 <see cref="T:System.Data.IsolationLevel" />。
               默认值为 <see langword="ReadCommitted" />。
            </returns>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>
              从挂起状态回滚事务。
            </summary>
      <exception cref="T:System.Exception">
                  在尝试提交事务时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  已提交或回滚事务。
                
                  - 或 - 
                
                  连接已断开。
                </exception>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>
              表示在调用时引发的异常 <see cref="M:System.Data.DataRow.EndEdit" /> 方法是在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。
            </summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InRowChangingEventException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>
              提供用于创建集合的基本功能。
            </summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.InternalDataCollectionBase" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>
              当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" /> 到一维 <see cref="T:System.Array" />, 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" /> 索引。
            </summary>
      <param name="ar">
                一维 <see cref="T:System.Array" /> 要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" /> 到对象的元素。
              </param>
      <param name="index">
                目标 <see cref="T:System.Array" /> 开始复制到的索引。
              </param>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>
              获取集合中的元素总数。
            </summary>
      <returns>
              集合中的元素的总数。
            </returns>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>
              获取 <see cref="T:System.Collections.IEnumerator" /> 找不到。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 找不到。
            </returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否为只读。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" /> 是同步。
            </summary>
      <returns>
        <see langword="true" /> 如果该集合已同步;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>
              获取作为列表集合的项。
            </summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 包含的集合。
            </returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>
              获取可用于同步集合的对象。
            </summary>
      <returns>
        <see cref="T:System.object" /> 用于同步集合。
            </returns>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>
              表示当错误地尝试创建或访问某个关系时引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InvalidConstraintException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>
              表示当你尝试添加时引发的异常 <see cref="T:System.Data.DataColumn" /> ，其中包含一个无效的 <see cref="P:System.Data.DataColumn.Expression" /> 到 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和给定序列化流的目标。
              </param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>
              指定连接的事务锁定行为。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>
              无法覆盖从更高隔离级别的事务挂起的更改。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>
              正在读取数据以避免脏读，但在该事务，从而导致不可重复读取或幻像数据末尾之前可以更改数据时，将保持共享的锁。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>
              脏读，则意味着发布任何共享的锁，然后利用任何排他锁将生效。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>
              在查询中，阻止其他用户更新的数据使用的所有数据上放置锁。
               防止非可重复读取，但幻像行仍有可能。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>
              范围锁放置在 <see cref="T:System.Data.DataSet" />, ，阻止其他用户更新或将行插入到数据集，直到事务完成。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>
              减少阻止通过存储数据的一个应用程序可以读取另一个修改相同的数据的同时版本。
               指示，从一个事务无法查看其他事务中所做的更改即便重新查询。
            </summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>
              正在使用比指定不同的隔离级别，但不能确定其级别。
            </summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>
              将源表中的表与相关联 <see cref="T:System.Data.DataSet" />, ，并由实现 <see cref="T:System.Data.Common.DataTableMapping" /> 类，该类由.NET Framework 数据提供程序共同使用。
            </summary>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>
              获取派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 为 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              数据列映射的集合。
            </returns>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>
              获取或设置表中的不区分大小写名称 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              表中的不区分大小写名称 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>
              获取或设置对源表的区分大小写的名称。
            </summary>
      <returns>
              区分大小写的源表的名称。
            </returns>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>
              包含 TableMapping 对象的集合，由实现 <see cref="T:System.Data.Common.DataTableMappingCollection" />, ，将使用该通用.NET Framework 数据提供程序。
            </summary>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>
              将表映射添加到集合。
            </summary>
      <param name="sourceTableName">
                区分大小写的源表的名称。
              </param>
      <param name="dataSetTableName">
                名称 <see cref="T:System.Data.DataSet" /> 表。
              </param>
      <returns>
              对新映射的引用 <see cref="T:System.Data.ITableMapping" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示集合是否包含具有指定的源的表名称的表映射。
            </summary>
      <param name="sourceTableName">
                区分大小写的源表的名称。
              </param>
      <returns>
        <see langword="true" /> 如果具有指定的源的表名称的表映射存在，否则 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>
              获取具有指定的 TableMapping 对象 <see cref="T:System.Data.DataSet" /> 表名。
            </summary>
      <param name="dataSetTableName">
                名称 <see langword="DataSet" /> 在集合中的表。
              </param>
      <returns>
              使用指定的 TableMapping 对象 <see langword="DataSet" /> 表名。
            </returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>
              获取的位置 <see cref="T:System.Data.ITableMapping" /> 在集合中的对象。
            </summary>
      <param name="sourceTableName">
                区分大小写的源表的名称。
              </param>
      <returns>
              从零开始的位置 <see cref="T:System.Data.ITableMapping" /> 在集合中的对象。
            </returns>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>
              获取或设置的实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称。
            </summary>
      <param name="index">
        <see langword="SourceTable" /> 名称 <see cref="T:System.Data.ITableMapping" />。
              </param>
      <returns>
              实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 <see langword="SourceTable" /> 名称。
            </returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>
              删除 <see cref="T:System.Data.ITableMapping" /> 对象具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称从集合。
            </summary>
      <param name="sourceTableName">
                区分大小写名称 <see langword="SourceTable" />。
              </param>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>
              标识连接字符串参数标识的一组 <see langword="KeyRestrictions" /> 允许或不允许使用的属性。
            </summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>
              默认。
               标识允许的唯一附加连接字符串参数。
            </summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>
              标识不允许使用的其他连接字符串参数。
            </summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>
              表示要在存储或从数据库中检索一个 GUID。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用提供的字节数组参数。
            </summary>
      <param name="value">
                字节数组。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用指定 <see cref="T:System.Guid" /> 参数。
            </summary>
      <param name="g">
                一个 <see cref="T:System.Guid" /></param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用指定 <see cref="T:System.String" /> 参数。
            </summary>
      <param name="s">
                一个 <see cref="T:System.String" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用指定的值。
            </summary>
      <param name="a">
                前四个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="b">
                接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="c">
                接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="d">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="e">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="f">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="g">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="h">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="i">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="j">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <param name="k">
                下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 并返回对其相对值的指示。
               比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例小于对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      对象为 null 引用 (<see langword="Nothing" />)。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的对象并返回对其相对值的指示。
               比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例小于对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      对象为 null 引用 (<see langword="Nothing" />) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlGuid" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>
              返回此哈希代码<see cref="T:System.Data.SqlTypes.SqlGuid" />结构。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>
              获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see langword="null" />。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>
              表示 <see cref="T:System.DBNull" />  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </summary>
      <param name="x">
                一个 <see langword="SqlBinary" /> 对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数 <see cref="T:System.Guid" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Guid" /> 等于 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>
              将转换提供 <see cref="T:System.Guid" /> 参数 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </summary>
      <param name="x">
        <see cref="T:System.Guid" />。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是否等同于 <see cref="T:System.Guid" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例<see cref="T:System.Data.SqlTypes.SqlGuid" />以确定第一个是否小于第二个。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlBoolean" />即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果任一实例<see cref="T:System.Data.SqlTypes.SqlGuid" />为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />的<see cref="T:System.Data.SqlTypes.SqlBoolean" />将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>
              将指定 <see cref="T:System.String" /> 结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </summary>
      <param name="s">
        <see langword="String" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 等效于包含的值中指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 到字节数组的结构。
            </summary>
      <returns>
              表示的字节数组 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBinary" />。
            </summary>
      <returns>
              一个 <see langword="SqlBinary" /> 结构，其中包含的字节数 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>
              获取的值 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              一个 <see cref="T:System.Guid" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter " />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>
              表示要存储中或从数据库中检索的 16 位有符号的整数。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，使用提供的短整型参数。
            </summary>
      <param name="value">
                短整数。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含结果的按位 and。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      对象为 null 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>
              比较指定的对象和 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlInt16" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果为 null。
               否则为 <see langword="false" />。
               有关详细信息，请参阅处理 Null 值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>
              一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>
              一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值并返回余数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。
              </param>
      <returns>
              得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>
              ~ 运算符都将执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定的求补 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含结果的按位 and。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位异或结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象传递给 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性是否等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性是否等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 所提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 短整数的结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              其值为值的短整型的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性是否等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>
              将转换为提供的短整型 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <param name="x">
                一个短整数值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构具有相同的值指定的短整数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>
              ~ 运算符都将执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定的求补 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>
              一元减运算符求反 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其中包含的相反的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 为其等效的 16 位有符号整数的数字表示形式。
            </summary>
      <param name="s">
        <see langword="String" /> 要进行分析。
              </param>
      <returns>
              包含的值等效的 16 位有符号的整数指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
               如果值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 小于 0 或大于 255， <see cref="T:System.OverflowException" /> 时发生。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see langword="Value" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see langword="Value" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see langword="Value" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see langword="Value" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see langword="Value" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see langword="Value" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 对象，表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>
              获取此实例的值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              一个短整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其中包含异或运算的结果。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>
              表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt16.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlInt16" />结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              使用.NET Framework 的 XML 架构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter " />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>
              表示要存储中或从数据库中检索的 32 位有符号的整数。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，使用提供的整数值。
            </summary>
      <param name="value">
                要转换的整数。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定的总和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算指定的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlInt32" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构为 null。
            </summary>
      <returns>
              此属性是 <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个<see cref="T:System.Data.SqlTypes.SqlInt32" />参数，以确定第一个是否小于第二个。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlBoolean" />即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果任一实例<see cref="T:System.Data.SqlTypes.SqlInt32" />为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />的<see cref="T:System.Data.SqlTypes.SqlBoolean" />将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个<see cref="T:System.Data.SqlTypes.SqlInt32" />参数，以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlBoolean" />即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果任一实例<see cref="T:System.Data.SqlTypes.SqlInt32" />为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />的<see cref="T:System.Data.SqlTypes.SqlBoolean" />将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>
              一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>
              一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值并返回余数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。
              </param>
      <returns>
              得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行按位二进制反码对指定的运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含求补运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定的总和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算指定的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行对指定位异或运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位异或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象传递给 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性值等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性 <see langword="SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为整数的结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              转换后的整数值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>
              提供将整数转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个整数值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 其 Value 属性等同于对整数参数的结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性设置为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行按位二进制反码对指定的运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含求补运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>
              求反<see cref="P:System.Data.SqlTypes.SqlInt32.Value" />的<see cref="T:System.Data.SqlTypes.SqlInt32" />操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlInt32" />结构，其中包含的相反的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 为其等效的 32 位有符号整数的数字表示形式。
            </summary>
      <param name="s">
        <see cref="T:System.String" /> 要进行分析。
              </param>
      <returns>
              包含的值等效的 32 位有符号的整数指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see langword="Value" /> 等于 <see langword="Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
               如果值 <see langword="SqlInt32" /> 小于 0 或大于 255， <see cref="T:System.OverflowException" /> 时发生。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>
              获取此值<see cref="T:System.Data.SqlTypes.SqlInt32" />结构。
               此属性是只读的。
            </summary>
      <returns>
              一个整数，表示此值<see cref="T:System.Data.SqlTypes.SqlInt32" />结构。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  属性包含<see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
              执行对指定位异或运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位异或运算的结果。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>
              表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt32.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlInt32" />结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>
              表示要存储在或从数据库中检索 64 位带符号的整数。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，使用提供的长整型。
            </summary>
      <param name="value">
                一个长整型。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于这两种合计 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing " />在 Visual Basic 中)。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlInt64" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>
              获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>
              一个常数，表示的最大可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>
              一个常数，表示的最小可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值并返回余数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。
              </param>
      <returns>
              得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于这两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              对以确定它们是否不相等的两个 SqlInt64 参数执行逻辑比较。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于的二进制反码 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于这两种合计 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位异或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含的整数部分 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数长度。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新的长值等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换为长整型参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                一个长整型值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于长参数的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              对以确定它们是否不相等的两个 SqlInt64 参数执行逻辑比较。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于这两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于的二进制反码 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>
              一元减运算符求反 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于求反后 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 为其等效的 64 位有符号整数的数字表示形式。
            </summary>
      <param name="s">
        <see cref="T:System.String" /> 要进行分析。
              </param>
      <returns>
              包含的值等效的 64 位有符号的整数指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see langword="Value" /> 等于 <see langword="Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>
              将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 到 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>
              获取此值 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              一个长整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位异或运算的结果。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>
              表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt64.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlInt64" />结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>
              表示货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 精度为千分之十个货币单位要存储中或从数据库中检索为-1 （或 + 922337203685，477.5807）。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>
              使用指定的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。
            </summary>
      <param name="value">
                要初始化的货币值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类，具有指定的双精度值。
            </summary>
      <param name="value">
                要初始化的货币值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类，具有指定的整数值。
            </summary>
      <param name="value">
                要初始化的货币值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类，具有指定的长整型值。
            </summary>
      <param name="value">
                要初始化的货币值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              计算两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
              相等比较将返回 <see langword="true" /> 的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlMoney" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>
              获取此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>
              返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>
              表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>
              表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含相乘的积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              计算两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此运算符将提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此运算符将提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Decimal" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Decimal" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此运算符将提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此运算符将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性值等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>
              将转换 <see cref="T:System.Decimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
        <see cref="T:System.Decimal" /> 要转换的值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于的值 <see cref="T:System.Decimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Int64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Int64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性是否等于的值 <see cref="T:System.Int64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含相乘的积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              减法运算符中减去第二个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其中包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>
              一元减运算符求反 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 要求反的结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含求反的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等效。
            </summary>
      <param name="s">
        <see langword="String" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等效于包含的值中指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>
              减法运算符中减去第二个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 从第一个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其中包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>
              将此实例的值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 作为 <see cref="T:System.Decimal" /> 结构。
            </summary>
      <returns>
              一个 <see cref="T:System.Decimal" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Double" />。
            </summary>
      <returns>
              一个双精度型值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Int32" />。
            </summary>
      <returns>
              一个 32 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>
              将此值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Int64" />。
            </summary>
      <returns>
              一个 64 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
               如果值 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构为零， <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为一个字符串，表示此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>
              将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为字符串。
            </summary>
      <returns>
              一个字符串，其值的字符串表示形式的数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>
              获取实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  该属性设置为 null。
                </exception>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>
              表示零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlMoney.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlMoney" />类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。
            </summary>
      <param name="message">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。
            </summary>
      <param name="message">
                要在引发异常时显示的字符串。
              </param>
      <param name="e">
                对内部异常的引用。
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>
              当 <see langword="Value" /> 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>
              使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>
              使用指定的描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="e">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>
              表示浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间要存储中或从数据库中检索。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，使用提供的双精度型参数。
            </summary>
      <param name="value">
                一个双精度值，该值将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。
            </summary>
      <param name="value">
                浮点数，它将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含两个指定的总和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see langword="SqlInt64" /> 结构，其中包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 和两个是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数，以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlSingle" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>
              获取此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 以确定第一个是否大于第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>
              表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>
              表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              计算两个指定的积 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含乘法的乘积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含两个指定的总和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 SqlSingle 参数以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>
              此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 到 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 要转换的参数。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 float 的结构。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 转换为浮点数的值。
              </param>
      <returns>
              包含的值的浮点数 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 以确定第一个是否大于第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换指定的浮点值到 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                浮点值转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含指定的浮点值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>
              此隐式运算符将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" />。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              计算两个指定的积 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含乘法的乘积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 从第一个结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>
              求反 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含的相反的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>
              将指定 <see cref="T:System.String" /> 到 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
            </summary>
      <param name="s">
        <see cref="T:System.String" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等效于包含的值中指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 从第一个结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see langword="Value" /> 等于 <see langword="Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
               如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值是 <see langword="true" />, 、 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 1。
               否则为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see langword="SqlDecimal" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see langword="SqlDouble " />等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see langword="SqlInt16" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的值的这 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see langword="String" /> 对象，表示此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>
              获取此值 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              一个浮点值范围在-3.40 e + 38 到 3.40 e + 38。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>
              表示零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlSingle.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlSingle" />类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>
              表示存储在中或从数据库中检索的字符的长度可变的流。
              <see cref="T:System.Data.SqlTypes.SqlString" /> 具有不同的基础数据结构从其相应的.NET Framework <see cref="T:System.String" /> 数据类型。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，使用指定的字符串。
            </summary>
      <param name="data">
                要存储的字符串。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，使用指定的字符串和区域设置 id 值。
            </summary>
      <param name="data">
                要存储的字符串。
              </param>
      <param name="lcid">
                指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构使用指定的区域设置 id，请比较选项和数据。
            </summary>
      <param name="lcid">
                指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="compareOptions">
                指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="data">
                要存储的数据数组。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，使用指定的字符串、 区域设置 id 和比较选项值。
            </summary>
      <param name="data">
                要存储的字符串。
              </param>
      <param name="lcid">
                指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="compareOptions">
                指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。
            </summary>
      <param name="lcid">
                指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="compareOptions">
                指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="data">
                要存储的数据数组。
              </param>
      <param name="fUnicode">
        <see langword="true" /> 如果 Unicode 编码。
                 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。
            </summary>
      <param name="lcid">
                指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="compareOptions">
                指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="data">
                要存储的数据数组。
              </param>
      <param name="index">
                该数组内的起始索引。
              </param>
      <param name="count">
                从索引复制的字符数。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。
            </summary>
      <param name="lcid">
                指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="compareOptions">
                指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <param name="data">
                要存储的数据数组。
              </param>
      <param name="index">
                该数组内的起始索引。
              </param>
      <param name="count">
                从索引复制的字符数。
              </param>
      <param name="fUnicode">
        <see langword="true" /> 如果 Unicode 编码。
                 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 的串联的值，它是 <paramref name="x" /> 和 <paramref name="y" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>
              指定的排序应基于字符的数字值而不是其字母数字值。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>
              指定的排序应基于字符的数字值，而不是其字母数字值。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>
              会创建一份 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 中所有属性值是与原始对象相同的对象。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>
              获取 <see cref="T:System.Globalization.CompareInfo" /> 对象，它定义如何为此执行字符串比较 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <returns>
              一个 <see langword="CompareInfo" /> 定义此字符串比较的对象 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>
              获取 <see cref="T:System.Globalization.CompareOptions" /> 枚举等效的指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值。
            </summary>
      <param name="compareOptions">
                一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，该值描述的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <returns>
              一个 <see langword="CompareOptions" /> 对应于值 <see langword="SqlCompareOptions" /> 此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含新串联的值表示两个内容 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>
              获取 <see cref="T:System.Globalization.CultureInfo" /> 结构，它表示此有关区域性的信息 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Globalization.CultureInfo" /> 介绍有关区域性的信息包括区域性、 书写系统，以及所使用的日历，名称此 SqlString 结构的结构，还提供用于常见的操作，如设置日期格式和排序字符串的方法的特定于区域性的对象的访问。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否相等。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlString" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
              相等比较将返回 <see langword="true" /> 的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlString" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>
              获取此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>
              获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 ANSI 格式。
            </summary>
      <returns>
              一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 ANSI 格式。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>
              获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 Unicode 格式。
            </summary>
      <returns>
              一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 Unicode 格式。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于第二个操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于或等于第二个操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>
              指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较应忽略大小写。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>
              指定的字符串比较必须忽略假名类型。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>
              指定的字符串比较必须忽略非空格组合字符，如标注字符。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>
              指定的字符串比较必须忽略字符宽度。
            </summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>
              指定的地理区域设置和语言 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <returns>
              中存储的字符串的区域设置 id <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定第一个是否小于第二个。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个<see cref="T:System.Data.SqlTypes.SqlString" />确定第一个是否小于或等于第二个操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlBoolean" />即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果任一实例<see cref="T:System.Data.SqlTypes.SqlString" />为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />的<see cref="T:System.Data.SqlTypes.SqlBoolean" />将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否不相等。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含新串联的值表示两个内容 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否相等。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 到 <see cref="T:System.String" /></summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see langword="String" />, ，其内容将与相同 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 SqlInt32 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see langword="SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see langword="SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>
              将指定 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 值的字符串表示形式指定 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于第二个操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于或等于第二个操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>
              将转换 <see cref="T:System.String" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.String" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含指定的值 <see langword="String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否不相等。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定第一个是否小于第二个。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>
              执行逻辑比较两个<see cref="T:System.Data.SqlTypes.SqlString" />确定第一个是否小于或等于第二个操作数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlBoolean" />即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果任一实例<see cref="T:System.Data.SqlTypes.SqlString" />为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />的<see cref="T:System.Data.SqlTypes.SqlBoolean" />将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>
              一个或多个组合 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 这些关键字表示此方法的枚举值 <see cref="T:System.Data.SqlTypes.SqlString" /> 应与其他比较 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <returns>
              值，该值指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 应与其他比较 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个新 <see langword="SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等于所表示的数 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。
            </summary>
      <returns>
              一个新 <see langword="SqlDateTime" /> 结构，其中包含由此表示的日期值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> ，其中包含此值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是 <see langword="Guid" /> 由此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />...
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象传递给 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 与此相同的值与 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>
              获取存储在此字符串 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              用于存储的字符串。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  该字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>
              设置一个值时引发的异常 <see cref="N:System.Data.SqlTypes" /> 结构会截断该值。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 使用指定的错误消息和对引用 <see cref="T:System.Exception" />。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="e">
                对内部引用 <see cref="T:System.Exception" />。
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
              基异常类 <see cref="N:System.Data.SqlTypes" />。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
            </summary>
      <param name="si">
                承载序列化对象数据的对象。
              </param>
      <param name="sc">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="e">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>
              表示 XML 数据存储在数据库中或从服务器检索。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>
              创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>
              创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，以提供从提供的 XML 值 <see cref="T:System.IO.Stream" />-派生实例。
            </summary>
      <param name="value">
                一个 <see cref="T:System.IO.Stream" />-派生实例 (如 <see cref="T:System.IO.FileStream" />) 要从其中加载 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 Xml 内容。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>
              创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，并将其与所提供的内容关联 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="value">
        <see cref="T:System.Xml.XmlReader" />的派生类实例要用作新值 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>
              获取此内容的 xml 值 <see cref="T:System.Data.SqlTypes.SqlXml" /> 作为 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlReader" />-派生的实例，它包含的 XML 内容。
               可能会有所不同的实际类型 (例如，返回值可能是 <see cref="T:System.Xml.XmlTextReader" />) 具体取决于如何呈现的信息是在内部，在服务器上。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  尝试访问此属性上的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个字符串，指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>
              该值指示此实例是否表示 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see langword="Value" /> 为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>
              表示的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型。
            </summary>
      <returns>
              Null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>
              获取此内容的字符串表示形式 XML <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。
            </summary>
      <returns>
              字符串表示形式的 XML 内容中。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。
            </summary>
      <param name="r">
                XmlReader。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。
            </summary>
      <param name="writer">
                XmlWriter
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 不应用作独立组件，而应用作其他类从中派生标准功能的枚举。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>
              缓冲区大小。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>
              流。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>
              非托管的缓冲区。
            </summary>
    </member>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>
              确定所发生的操作时 <see cref="M:System.Data.DataSet.AcceptChanges" /> 或 <see cref="M:System.Data.DataTable.RejectChanges" /> 上调用方法 <see cref="T:System.Data.DataTable" /> 与 <see cref="T:System.Data.ForeignKeyConstraint" />。
            </summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>
              跨关系中级联更改。
            </summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>
              不发生操作 （默认值）。
            </summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>
              提供查询结果及其对数据库的影响的说明。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>
              执行命令时，关联 <see langword="Connection" /> 对象已关闭时关联 <see langword="DataReader" /> 对象已关闭。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>
              此查询可能返回多个结果集。
               执行的查询可能会影响数据库状态。
              <see langword="Default" /> 不设置 <see cref="T:System.Data.CommandBehavior" /> 标志，因此调用 <see langword="ExecuteReader(CommandBehavior.Default)" /> 在功能上等效于调用 <see langword="ExecuteReader()" />。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>
              查询返回列和主键信息。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>
              该查询仅返回列信息。
               当使用 <see cref="F:System.Data.CommandBehavior.SchemaOnly" />, ，SQL Server.NET Framework 数据提供程序之前使用 SET FMTONLY ON 正在执行的语句。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>
              为提供一种 <see langword="DataReader" /> 处理包含大型二进制值的列的行。
               而不是加载整行， <see langword="SequentialAccess" /> 使 <see langword="DataReader" /> 加载流形式的数据。
               然后，可以使用 <see langword="GetBytes" /> 或 <see langword="GetChars" /> 方法，以指定要开始读取的操作和所返回的数据的有限的缓冲区大小的字节位置。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>
              查询会返回单个结果集。
            </summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>
              查询应返回单个行的第一个结果集。
               执行的查询可能会影响数据库状态。
               某些.NET Framework 数据访问接口可能，但不是需要，使用此信息来优化性能的命令。
               当您指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 与 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> 方法 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象，用于 OLE DB 的.NET Framework 数据提供程序执行绑定使用 OLE DB <see langword="IRow" /> 接口是否可用。
               否则，它使用 <see langword="IRowset" /> 接口。
               如果您的 SQL 语句将返回单个行，则指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 还可提高应用程序的性能。
               可以指定 <see langword="SingleRow" /> 时执行查询，都应该返回多个结果集。
                在这种情况下，其中同时多结果集的 SQL 查询，指定单个行，则返回的结果将包含仅第一个结果集的第一行。
               不会返回其他结果集的查询。
            </summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>
              指定如何解释命令字符串。
            </summary>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>
              存储过程的名称。
            </summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>
              表的名称。
            </summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>
              SQL 文本命令。
               （默认值）。
            </summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>
              指示文本命令中的限定的表名中的目录名称的位置。
            </summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>
              指示目录名称的位置中的文本命令中的完全限定的表名的架构部分后发生。
            </summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>
              指示在文本命令中的完全限定的表名的架构部分之前发生的位置的目录名称。
            </summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>
              控制如何从数据源的值将应用于现有行时使用 <see cref="Overload:System.Data.DataTable.Load" /> 或 <see cref="Overload:System.Data.DataSet.Load" /> 方法。
            </summary>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>
              此行的传入值将为每个列数据的版本写入到当前值和原始值。
            </summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>
              此行的传入值将写入每一列的原始值版本。
               每个列中的数据的当前版本将不会更改。
                这是默认设置。
            </summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>
              此行的传入值将写入每一列的当前版本。
               每个列的数据的原始版本将不会更改。
            </summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>
              指定如何相互冲突的更改的数据检测和解决源。
            </summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>
              Update 和 delete 语句的 WHERE 子句中将包括所有可搜索表中的列。
               这相当于同时指定 <see langword="CompareAllValuesUpdate" /> | <see langword="CompareAllValuesDelete" />。
            </summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>
              如果表中存在的任何时间戳列，它们用于 WHERE 子句中的所有生成的 update 语句。
               这相当于同时指定 <see langword="CompareRowVersionUpdate" /> | <see langword="CompareRowVersionDelete" />。
            </summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>
              所有 update 和 delete 语句只能包含 <see cref="P:System.Data.DataTable.PrimaryKey" /> WHERE 子句中的列。
               如果没有 <see cref="P:System.Data.DataTable.PrimaryKey" /> 是定义，所有可搜索的列都包含 WHERE 子句中。
               这相当于 <see langword="OverwriteChangesUpdate" /> | <see langword="OverwriteChangesDelete" />。
            </summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>
              描述与数据源连接的当前状态。
            </summary>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>
              与数据源的连接已断开。
               只有在打开连接后，才发生这种。
               处于此状态的连接可能关闭并重新打开。
               （此值保留供该产品的未来版本中）。
            </summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>
              连接已关闭。
            </summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>
              连接对象连接到数据源。
            </summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>
              连接对象执行命令。
               （此值保留供该产品的未来版本中）。
            </summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>
              连接对象正在检索数据。
               （此值保留供该产品的未来版本中）。
            </summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>
              连接处于打开状态。
            </summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>
              表示对一个或多个可以强制实施的约束 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.Constraint.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Constraint" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>
              获取 <see cref="T:System.Data.DataSet" /> 此约束所属。
            </summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 约束所属。
            </returns>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>
              获取 <see cref="T:System.Data.DataSet" /> 此约束所属。
            </summary>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>
              中的约束的名称 <see cref="T:System.Data.ConstraintCollection" />。
            </summary>
      <returns>
        <see cref="T:System.Data.Constraint" /> 的名称。
            </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 名称为 null 值或空字符串。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" /> 已包含 <see cref="T:System.Data.Constraint" /> 具有相同名称 （比较不区分大小写。）。
                </exception>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>
              获取用户定义的约束属性的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.PropertyCollection" /> 的自定义信息。
            </returns>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>
              设置约束的 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 到将属于此约束。
              </param>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 向应用约束。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 向应用约束。
            </returns>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>
              获取 <see cref="P:System.Data.Constraint.ConstraintName" />, ，如果有一个作为字符串。
            </summary>
      <returns>
              字符串值 <see cref="P:System.Data.Constraint.ConstraintName" />。
            </returns>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>
              表示的约束集合 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>
              将指定的 <see cref="T:System.Data.Constraint" /> 对象添加到集合。
            </summary>
      <param name="constraint">
                要添加的 <see langword="Constraint" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  约束已属于此集合，或属于其他集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合已具有相同名称的约束。
                   （该比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>
              构造一个新 <see cref="T:System.Data.UniqueConstraint" /> 具有指定名称 <see cref="T:System.Data.DataColumn" />, ，和值，该值指示列是否是主键，并将其添加到集合。
            </summary>
      <param name="name">
        <see langword="UniqueConstraint" /> 的名称。
              </param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 向应用约束。
              </param>
      <param name="primaryKey">
                指定列是否应将为主键。
                 如果 <see langword="true" />, 的列将主键列。
              </param>
      <returns>
              一个新的 <see langword="UniqueConstraint" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  约束已属于此集合。
                
                  - 或 - 
                
                  约束所属的另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的约束。
                   （比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
              构造一个新 <see cref="T:System.Data.ForeignKeyConstraint" /> 具有指定名称、 父列和子列并将约束添加到集合。
            </summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。
              </param>
      <param name="primaryKeyColumn">
                Primary key 或父站点， <see cref="T:System.Data.DataColumn" />。
              </param>
      <param name="foreignKeyColumn">
                外键或子级 <see cref="T:System.Data.DataColumn" />。
              </param>
      <returns>
              一个新的 <see langword="ForeignKeyConstraint" />。
            </returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>
              构造一个新 <see cref="T:System.Data.UniqueConstraint" /> 具有指定名称的数组 <see cref="T:System.Data.DataColumn" /> 对象和值，该值指示列是否是主键，并将其添加到集合。
            </summary>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" /> 的名称。
              </param>
      <param name="columns">
                一个数组 <see cref="T:System.Data.DataColumn" /> 对象添加到其应用约束。
              </param>
      <param name="primaryKey">
                指定列是否应将为主键。
                 如果 <see langword="true" />, 的列将主键列。
              </param>
      <returns>
              一个新的 <see langword="UniqueConstraint" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  约束已属于此集合。
                
                  - 或 - 
                
                  约束所属的另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的约束。
                   （比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
              构造一个新 <see cref="T:System.Data.ForeignKeyConstraint" />, ，与指定数组的父列和子列，并将约束添加到集合。
            </summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。
              </param>
      <param name="primaryKeyColumns">
                一个数组 <see cref="T:System.Data.DataColumn" /> 是 primary key 或父站点，列的对象。
              </param>
      <param name="foreignKeyColumns">
                一个数组 <see cref="T:System.Data.DataColumn" /> 是外键或子列的对象。
              </param>
      <returns>
              一个新的 <see langword="ForeignKeyConstraint" />。
            </returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>
              将指定的元素复制 <see cref="T:System.Data.ConstraintCollection" /> 数组转换为集合的末尾。
            </summary>
      <param name="constraints">
                一个数组 <see cref="T:System.Data.ConstraintCollection" /> 要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>
              指示是否<see cref="T:System.Data.Constraint" />可以删除。
            </summary>
      <param name="constraint">
        <see cref="T:System.Data.Constraint" />要测试为从集合中删除。
              </param>
      <returns>
        <see langword="true" />如果<see cref="T:System.Data.Constraint" />可从集合中移除活动; 否则为<see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>
              清除集合中的任何 <see cref="T:System.Data.Constraint" /> 对象。
            </summary>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>
              每当出现以下情况 <see cref="T:System.Data.ConstraintCollection" /> 由于更改 <see cref="T:System.Data.Constraint" /> 正在添加或移除对象。
            </summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>
              指示是否 <see cref="T:System.Data.Constraint" /> 集合中存在由名称指定的对象。
            </summary>
      <param name="name">
        <see cref="P:System.Data.Constraint.ConstraintName" /> 的约束。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含指定的约束;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>
              将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 从集合复制的值的目标。
              </param>
      <param name="index">
                插入操作开始处的数组的索引。
              </param>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>
              获取指定的索引 <see cref="T:System.Data.Constraint" />。
            </summary>
      <param name="constraint">
                要搜索的 <see cref="T:System.Data.Constraint" />。
              </param>
      <returns>
              从零开始的索引 <see cref="T:System.Data.Constraint" /> 知识库是否处于集合; 否则为-1。
            </returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>
              获取的索引 <see cref="T:System.Data.Constraint" /> 由名称指定。
            </summary>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" /> 的名称。
              </param>
      <returns>
              索引 <see cref="T:System.Data.Constraint" /> 知识库是否处于集合; 否则为-1。
            </returns>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Data.Constraint" /> 从集合中的指定索引处。
            </summary>
      <param name="index">
                要返回的约束的索引。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Data.Constraint" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  索引值大于集合中的项的数目。
                </exception>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Data.Constraint" /> 从具有指定名称的集合。
            </summary>
      <param name="name">
        <see cref="P:System.Data.Constraint.ConstraintName" /> 要返回的约束。
              </param>
      <returns>
        <see cref="T:System.Data.Constraint" /> 具有指定名称; 否则为空值如果 <see cref="T:System.Data.Constraint" /> 不存在。
            </returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.Constraint" />。
            </summary>
      <param name="constraint">
                要移除的 <see cref="T:System.Data.Constraint" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  约束不属于该集合。
                </exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>
              删除 <see cref="T:System.Data.Constraint" /> 指定的名称从集合对象。
            </summary>
      <param name="name">
                要移除的 <see cref="T:System.Data.Constraint" /> 的名称。
              </param>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>
              删除 <see cref="T:System.Data.Constraint" /> 集合中的指定索引处的对象。
            </summary>
      <param name="index">
                索引 <see cref="T:System.Data.Constraint" /> 中删除。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  集合不具有在此索引的约束。
                </exception>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>
              表示在尝试执行违反约束的操作时引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。
               这是默认构造函数。
            </summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ConstraintException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ConstraintException" /> 类使用指定的序列化和流上下文。
            </summary>
      <param name="info">
                序列化或反序列化对象所必需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ConstraintException" /> 类使用指定的字符串和内部异常。
            </summary>
      <param name="message">
                要在引发异常时显示的字符串。
              </param>
      <param name="innerException">
                获取导致当前异常的 <see langword="Exception" /> 实例。
              </param>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>
              表示架构中的列 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataColumn" /> 类作为字符串类型。
            </summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataColumn" /> 类作为类型为字符串，使用指定的列名称。
            </summary>
      <param name="columnName">
                一个表示要创建的列的名称的字符串。
                 如果设置为 <see langword="null" /> 或空字符串 ("")，添加到列集合时，将指定一个默认名称。
              </param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataColumn" /> 类使用指定的列名称和数据类型。
            </summary>
      <param name="columnName">
                一个表示要创建的列的名称的字符串。
                 如果设置为 <see langword="null" /> 或空字符串 ("")，添加到列集合时，将指定一个默认名称。
              </param>
      <param name="dataType">
                支持 <see cref="P:System.Data.DataColumn.DataType" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  否 <paramref name="dataType" /> 指定。
                </exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataColumn" /> 类使用指定的名称、 数据类型和表达式。
            </summary>
      <param name="columnName">
                一个表示要创建的列的名称的字符串。
                 如果设置为 <see langword="null" /> 或空字符串 ("")，添加到列集合时，将指定一个默认名称。
              </param>
      <param name="dataType">
                支持 <see cref="P:System.Data.DataColumn.DataType" />。
              </param>
      <param name="expr">
                用来创建此列的表达式。
                 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  否 <paramref name="dataType" /> 指定。
                </exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataColumn" /> 类使用指定的名称、 数据类型、 表达式和值，该值确定列是否是一个属性。
            </summary>
      <param name="columnName">
                一个表示要创建的列的名称的字符串。
                 如果设置为 <see langword="null" /> 或空字符串 ("")，添加到列集合时，将指定一个默认名称。
              </param>
      <param name="dataType">
                支持 <see cref="P:System.Data.DataColumn.DataType" />。
              </param>
      <param name="expr">
                用来创建此列的表达式。
                 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。
              </param>
      <param name="type">
        <see cref="T:System.Data.MappingType" /> 值之一。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  否 <paramref name="dataType" /> 指定。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>
              获取或设置一个值，该值指示是否允许空值在本专栏中属于表的行。
            </summary>
      <returns>
        <see langword="true" /> 如果允许 null 值的值;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>
              获取或设置一个值，指示该列是否自动递增的新行添加到表中列的值。
            </summary>
      <returns>
        <see langword="true" /> 如果列的值递增自动保存功能。，否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  列是计算所得的列。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>
              获取或设置包含的列的起始值及其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 <see langword="true" />。
               默认值为 0。
            </summary>
      <returns>
              起始值为 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 特征。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>
              获取或设置某一列使用的增量其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 <see langword="true" />。
            </summary>
      <returns>
              列的值自动递增的编号。
               默认值为 1。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置的值为零。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>
              获取或设置列标题。
            </summary>
      <returns>
              列的标题。
               如果未设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>
              获取或设置 <see cref="T:System.Data.MappingType" /> 的列。
            </summary>
      <returns>
        <see cref="T:System.Data.MappingType" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>
              获取或设置中的列的名称 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
      <returns>
              列的名称。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该属性设置为 <see langword="null" /> 或为空字符串和列属于一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有相同名称的列。
                   名称比较不区分大小写。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>
              获取或设置列中存储的数据类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 对象，表示列的数据类型。
            </returns>
      <exception cref="T:System.ArgumentException">
                  已在列存储的数据。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>
              获取或设置 <see langword="DateTimeMode" /> 的列。
            </summary>
      <returns>
        <see cref="T:System.Data.DataSetDateTime" /> 为指定的列。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>
              获取或设置列的默认值，则在创建新行。
            </summary>
      <returns>
              适合于列的值 <see cref="P:System.Data.DataColumn.DataType" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  当添加行时，默认值不是列的数据类型的实例。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>
              获取或设置用来筛选行、 计算列中的值或创建聚合列的表达式。
            </summary>
      <returns>
              一个表达式来计算列的值或创建聚合列。
               一个表达式，表达式的返回类型由 <see cref="P:System.Data.DataColumn.DataType" /> 的列。
            </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 属性设置为 <see langword="true" />。
                </exception>
      <exception cref="T:System.FormatException">
                  当使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换为类型参数中的表示形式。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  当使用 CONVERT 函数时，所请求的转换不可能。
                   请参阅下列部分获取有关可能的强制转换详细信息中的转换函数。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  当您使用 SUBSTRING 函数时，start 参数超出了范围。
                
                  - 或 - 
                
                  当您使用 SUBSTRING 函数时，长度参数超出了范围。
                </exception>
      <exception cref="T:System.Exception">
                  当您使用 LEN 函数或 TRIM 函数时，该表达式计算结果不为字符串。
                   这包括表达式的计算结果为 <see cref="T:System.Char" />。
                </exception>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>
              获取与相关联的自定义用户信息的集合 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.PropertyCollection" /> 的自定义信息。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>
              获取或设置文本列的最大长度。
            </summary>
      <returns>
              以字符为单位的列的最大长度。
               如果该列具有没有最大长度，值为-1 （默认值）。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>
              获取或设置的命名空间 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <returns>
              命名空间 <see cref="T:System.Data.DataColumn" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  命名空间已有数据。
                </exception>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="pcevent">
                参数的引用。
              </param>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>
              获取 （从零开始） 中的列的位置 <see cref="T:System.Data.DataColumnCollection" /> 集合。
            </summary>
      <returns>
              列的位置。
               如果列不是某个集合的成员，则获取-1。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>
              获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              XML 前缀 <see cref="T:System.Data.DataTable" /> 命名空间。
            </returns>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="name">
                参数的引用。
              </param>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>
              获取或设置一个值，指示行已添加到表时，就立即列是否允许的更改。
            </summary>
      <returns>
        <see langword="true" /> 如果列只读的;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该属性设置为 <see langword="false" /> 计算所得的列。
                </exception>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>
              更改序号或位置 <see cref="T:System.Data.DataColumn" /> 到指定的序号或位置。
            </summary>
      <param name="ordinal">
                指定的序号。
              </param>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 列属于对。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataColumn" /> 属于。
            </returns>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>
              获取 <see cref="P:System.Data.DataColumn.Expression" /> 列，如果存在。
            </summary>
      <returns>
        <see cref="P:System.Data.DataColumn.Expression" /> 值，此属性是否设置; 否则为 <see cref="P:System.Data.DataColumn.ColumnName" /> 属性。
            </returns>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>
              获取或设置一个值，该值指示是否必须唯一列的每个行中的值。
            </summary>
      <returns>
        <see langword="true" /> 如果值必须是唯一的。否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  列是计算的列。
                </exception>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>
              为 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>
              初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" /> 类的新实例。
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 的不断变化的值的列。
              </param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 带有可变值。
              </param>
      <param name="value">
                新值。
              </param>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>
              获取 <see cref="T:System.Data.DataColumn" /> 带有可变值。
            </summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 带有可变值。
            </returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>
              获取或设置列建议的新值。
            </summary>
      <returns>
              建议的值，类型的 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>
              获取 <see cref="T:System.Data.DataRow" /> 具有可变值的列。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 具有可变值的列。
            </returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。
              </param>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>
              表示一套 <see cref="T:System.Data.DataColumn" /> 对象 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>
              创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象传递给 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
      <returns>
              新创建的 <see cref="T:System.Data.DataColumn" />。
            </returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>
              创建并添加了指定 <see cref="T:System.Data.DataColumn" /> 对象传递给 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
      <param name="column">
                要添加的 <see cref="T:System.Data.DataColumn" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  该列已经属于此集合中，或另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的列。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidExpressionException">
                  该表达式无效。
                   请参阅 <see cref="P:System.Data.DataColumn.Expression" /> 有关如何创建表达式的详细信息的属性。
                </exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>
              创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象，它具有指定的名称与 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
      <param name="columnName">
                列的名称。
              </param>
      <returns>
              新创建的 <see cref="T:System.Data.DataColumn" />。
            </returns>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的列。
                   （比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>
              创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象，它具有指定名称和类型转换为 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
      <param name="columnName">
        <see cref="P:System.Data.DataColumn.ColumnName" /> 要创建列时使用。
              </param>
      <param name="type">
        <see cref="P:System.Data.DataColumn.DataType" /> 的新列。
              </param>
      <returns>
              新创建的 <see cref="T:System.Data.DataColumn" />。
            </returns>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的列。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidExpressionException">
                  该表达式无效。
                   请参阅 <see cref="P:System.Data.DataColumn.Expression" /> 有关如何创建表达式的详细信息的属性。
                </exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>
              创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象，它具有指定的名称、 类型和表达式与 <see cref="T:System.Data.DataColumnCollection" />。
            </summary>
      <param name="columnName">
                要在创建列时使用的名称。
              </param>
      <param name="type">
        <see cref="P:System.Data.DataColumn.DataType" /> 的新列。
              </param>
      <param name="expression">
                要分配给该表达式 <see cref="P:System.Data.DataColumn.Expression" /> 属性。
              </param>
      <returns>
              新创建的 <see cref="T:System.Data.DataColumn" />。
            </returns>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的列。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidExpressionException">
                  该表达式无效。
                   请参阅 <see cref="P:System.Data.DataColumn.Expression" /> 有关如何创建表达式的详细信息的属性。
                </exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>
              将指定的元素复制 <see cref="T:System.Data.DataColumn" /> 数组转换为集合的末尾。
            </summary>
      <param name="columns">
                数组 <see cref="T:System.Data.DataColumn" /> 要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>
              检查是否可以从集合中移除特定列。
            </summary>
      <param name="column">
                一个 <see cref="T:System.Data.DataColumn" /> 集合中。
              </param>
      <returns>
        <see langword="true" /> 如果可以删除了该列。
              <see langword="false" /> 如果，
            
                  <paramref name="column" /> 参数为 <see langword="null" />。
                
                  列不属于此集合。
                
                  列是关系的一部分。
                
                  另一个列的表达式取决于此列。
                </returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>
              清除集合中的任何列。
            </summary>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>
              通过添加或删除列而 columns 集合更改时发生。
            </summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>
              检查集合是否包含具有指定名称的列。
            </summary>
      <param name="name">
        <see cref="P:System.Data.DataColumn.ColumnName" /> 要查找的列。
              </param>
      <returns>
        <see langword="true" /> 如果某一列存在具有此名称;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>
              将整个集合复制到现有的数组，该数组中指定索引处开始。
            </summary>
      <param name="array">
                一个数组 <see cref="T:System.Data.DataColumn" /> 集合复制到的对象。
              </param>
      <param name="index">
                从其开始的索引。
              </param>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>
              获取由名称指定的列的索引。
            </summary>
      <param name="column">
                要返回的列的名称。
              </param>
      <returns>
              指定的列的索引 <paramref name="column" /> 是否找到; 否则为-1。
            </returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>
              获取与特定的名称 （名称不区分大小写） 的列的索引。
            </summary>
      <param name="columnName">
                要查找的列的名称。
              </param>
      <returns>
              具有指定的名称，则为-1 如果列不存在集合中的列的从零开始的索引。
            </returns>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Data.DataColumn" /> 从集合中的指定索引处。
            </summary>
      <param name="index">
                要返回的列的从零开始的索引。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Data.DataColumn" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  索引值大于集合中的项的数目。
                </exception>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Data.DataColumn" /> 从具有指定名称的集合。
            </summary>
      <param name="name">
        <see cref="P:System.Data.DataColumn.ColumnName" /> 要返回的列。
              </param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 集合中具有指定 <see cref="P:System.Data.DataColumn.ColumnName" />; 否则为空值如果 <see cref="T:System.Data.DataColumn" /> 不存在。
            </returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="column">
                要移除的 <see cref="T:System.Data.DataColumn" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  列不属于此集合。
                
                  - 或 - 
                
                  列是关系的一部分。
                
                  - 或 - 
                
                  另一个列的表达式取决于此列。
                </exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>
              删除 <see cref="T:System.Data.DataColumn" /> 具有指定的名称从集合对象。
            </summary>
      <param name="name">
                要删除的列的名称。
              </param>
      <exception cref="T:System.ArgumentException">
                  集合没有具有指定名称的列。
                </exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>
              从集合中移除指定索引处的列。
            </summary>
      <param name="index">
                若要删除的列的索引。
              </param>
      <exception cref="T:System.ArgumentException">
                  集合不具有指定索引处的列。
                </exception>
    </member>
    <member name="T:System.Data.DataException">
      <summary>
              表示使用 ADO.NET 组件生成的错误时引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DataException" /> 类的新实例。
               这是默认构造函数。
            </summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用指定的序列化信息和上下文初始化 <see cref="T:System.Data.DataException" /> 类的新实例。
            </summary>
      <param name="info">
                序列化或反序列化对象所必需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataException" /> 使用指定的字符串和内部异常的类。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
      <param name="innerException">
                对内部异常的引用。
              </param>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>
              表示两个区域之间的父/子关系 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
              使用指定的 <see cref="T:System.Data.DataRelation" /> 名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。
            </summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。
                 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。
              </param>
      <param name="parentColumn">
                关系中的父级 <see cref="T:System.Data.DataColumn" />。
              </param>
      <param name="childColumn">
                关系中的子级 <see cref="T:System.Data.DataColumn" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型 
                
                  - 或者 - 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
              使用指定的 <see cref="T:System.Data.DataRelation" /> 名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的匹配数组，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。
            </summary>
      <param name="relationName">
                关系的名称。
                 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。
              </param>
      <param name="parentColumns">
                父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。
              </param>
      <param name="childColumns">
                子级 <see cref="T:System.Data.DataColumn" /> 对象的数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> 对象具有不同的数据类型 
                
                  - 或者 - 
                
                  一个或两个数组不由同一个表中的不同列构成。
                
                  - 或者 - 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>
              使用指定名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象以及指示是否创建约束的值，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。
            </summary>
      <param name="relationName">
                关系的名称。
                 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。
              </param>
      <param name="parentColumn">
                关系中的父级 <see cref="T:System.Data.DataColumn" />。
              </param>
      <param name="childColumn">
                关系中的子级 <see cref="T:System.Data.DataColumn" />。
              </param>
      <param name="createConstraints">
                一个指示是否创建约束的值。
                 如果要创建约束，则为 <see langword="true" />。
                 否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型 
                
                  - 或者 - 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>
              使用指定的名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的匹配数组以及指示是否创建约束的值，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。
            </summary>
      <param name="relationName">
                关系的名称。
                 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。
              </param>
      <param name="parentColumns">
                父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。
              </param>
      <param name="childColumns">
                子级 <see cref="T:System.Data.DataColumn" /> 对象的数组。
              </param>
      <param name="createConstraints">
                一个指示是否创建约束的值。
                 如果要创建约束，则为 <see langword="true" />。
                 否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个 <see cref="T:System.Data.DataColumn" /> 对象为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  列具有不同的数据类型 
                
                  - 或者 - 
                
                  表不属于同一个 <see cref="T:System.Data.DataSet" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>
              此构造函数在 Visual Studio 环境中提供设计时支持。
            </summary>
      <param name="relationName">
                关系的名称。
                 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。
              </param>
      <param name="parentTableName">
                作为关系的父表的 <see cref="T:System.Data.DataTable" /> 的名称。
              </param>
      <param name="childTableName">
                作为关系的子表的 <see cref="T:System.Data.DataTable" /> 的名称。
              </param>
      <param name="parentColumnNames">
                关系的父级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。
              </param>
      <param name="childColumnNames">
                关系的子级 <see cref="T:System.Data.DataColumn" /> 中的 <see cref="T:System.Data.DataTable" /> 对象名称的数组。
              </param>
      <param name="nested">
                一个指示是否嵌套关系的值。
              </param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>
              此构造函数在 Visual Studio 环境中提供设计时支持。
            </summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。
                 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。
              </param>
      <param name="parentTableName">
                作为关系的父表的 <see cref="T:System.Data.DataTable" /> 的名称。
              </param>
      <param name="parentTableNamespace">
                父表命名空间的名称。
              </param>
      <param name="childTableName">
                作为关系的子表的 <see cref="T:System.Data.DataTable" /> 的名称。
              </param>
      <param name="childTableNamespace">
                子表命名空间的名称。
              </param>
      <param name="parentColumnNames">
                关系的父级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。
              </param>
      <param name="childColumnNames">
                关系的子级 <see cref="T:System.Data.DataColumn" /> 中的 <see cref="T:System.Data.DataTable" /> 对象名称的数组。
              </param>
      <param name="nested">
                一个指示是否嵌套关系的值。
              </param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>
              此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。
            </summary>
      <exception cref="T:System.Data.DataException">
                  父和子表属于不同 <see cref="T:System.Data.DataSet" /> 对象。
                
                  - 或 - 
                
                  父级和子级的一个或多个对 <see cref="T:System.Data.DataColumn" /> 对象具有不匹配的数据类型。
                
                  - 或 - 
                
                  父级和子级 <see cref="T:System.Data.DataColumn" /> 对象都是相同。
                </exception>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>
              获取子 <see cref="T:System.Data.DataColumn" /> 这一关系中的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataColumn" /> 对象数组。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>
              获取 <see cref="T:System.Data.ForeignKeyConstraint" /> 关系。
            </summary>
      <returns>
        <see langword="ForeignKeyConstraint" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>
              获取此关系的子表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> ，它是一种关系的子表。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>
              获取 <see cref="T:System.Data.DataSet" /> 到 <see cref="T:System.Data.DataRelation" /> 所属。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataSet" /> 到 <see cref="T:System.Data.DataRelation" /> 所属。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>
              获取存储自定义的属性的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.PropertyCollection" /> ，它包含自定义的属性。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Data.DataRelation" /> 对象是否嵌套。
            </summary>
      <returns>
        <see langword="true" />, 如果 <see cref="T:System.Data.DataRelation" /> 对象是否嵌套; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="pcevent">
                参数的引用。
              </param>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>
              获取一个数组 <see cref="T:System.Data.DataColumn" /> 对象的父列 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.DataColumn" /> 对象的父列 <see cref="T:System.Data.DataRelation" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>
              获取 <see cref="T:System.Data.UniqueConstraint" /> 保证的父列中的值 <see cref="T:System.Data.DataRelation" /> 是唯一的。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.UniqueConstraint" /> 确保父列中的值是唯一。
            </returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>
              获取父 <see cref="T:System.Data.DataTable" /> 此 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> ，它是此关系的父表。
            </returns>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="name">
                参数的引用。
              </param>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>
              获取或设置用于检索名称 <see cref="T:System.Data.DataRelation" /> 从 <see cref="T:System.Data.DataRelationCollection" />。
            </summary>
      <returns>
              名称 <see cref="T:System.Data.DataRelation" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> 或空字符串 ("") 传递到 <see cref="T:System.Data.DataColumn" /> 即 <see cref="T:System.Data.DataRelation" />。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.DataRelation" /> 属于集合已包含 <see cref="T:System.Data.DataRelation" /> 具有相同的名称。
                </exception>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>
              获取 <see cref="P:System.Data.DataRelation.RelationName" />, ，如果存在。
            </summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> 属性的值。
            </returns>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>
              表示集合的 <see cref="T:System.Data.DataRelation" /> 对象的 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DataRelationCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>
              向 <see cref="T:System.Data.DataRelation" /> 中添加一个 <see cref="T:System.Data.DataRelationCollection" />。
            </summary>
      <param name="relation">
                要添加到集合中的 <see langword="DataRelation" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  关系已经属于此集合中，或属于另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有指定名称的关系。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  创建以来，该关系已进入无效状态。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
              创建 <see cref="T:System.Data.DataRelation" /> 与指定的父和子列中，并将其添加到集合。
            </summary>
      <param name="parentColumn">
                关系的父列。
              </param>
      <param name="childColumn">
                关系的子列。
              </param>
      <returns>
              创建的关系。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
              创建 <see cref="T:System.Data.DataRelation" /> 使用指定的父和子列，并将其添加到集合。
            </summary>
      <param name="parentColumns">
                关系的父列。
              </param>
      <param name="childColumns">
                关系的子列。
              </param>
      <returns>
              创建的关系。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  关系已经属于此集合中，或属于另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有相同名称的关系。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  创建以来，该关系已进入无效状态。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>
              创建 <see cref="T:System.Data.DataRelation" /> 具有指定的名称和父级和子级的列，并将其添加到集合。
            </summary>
      <param name="name">
                该关系的名称。
              </param>
      <param name="parentColumn">
                关系的父列。
              </param>
      <param name="childColumn">
                关系的子列。
              </param>
      <returns>
              创建的关系。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>
              创建 <see cref="T:System.Data.DataRelation" /> 具有指定的名称和数组的父和子列，并将其添加到集合。
            </summary>
      <param name="name">
                名称 <see langword="DataRelation" /> 来创建。
              </param>
      <param name="parentColumns">
                数组的父 <see cref="T:System.Data.DataColumn" /> 对象。
              </param>
      <param name="childColumns">
                子数组 <see langword="DataColumn" /> 对象。
              </param>
      <returns>
              创建的 <see langword="DataRelation" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  关系名称是一个 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  关系已经属于此集合中，或属于另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有相同名称的关系。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  创建以来，该关系已进入无效状态。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>
              创建 <see cref="T:System.Data.DataRelation" /> 具有指定名称、 父级和子列，具有可选约束的值根据 <paramref name="createConstraints" /> 参数，并将其添加到集合。
            </summary>
      <param name="name">
                该关系的名称。
              </param>
      <param name="parentColumn">
                关系的父列。
              </param>
      <param name="childColumn">
                关系的子列。
              </param>
      <param name="createConstraints">
        <see langword="true" /> 若要创建的约束;否则为 <see langword="false" />。
                 (默认值是 <see langword="true" />)。
              </param>
      <returns>
              创建的关系。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>
              创建 <see cref="T:System.Data.DataRelation" /> 与指定的名称、 父级和子级列和值，该值指定是否创建一个约束的数组并将其添加到集合。
            </summary>
      <param name="name">
                名称 <see langword="DataRelation" /> 来创建。
              </param>
      <param name="parentColumns">
                数组的父 <see cref="T:System.Data.DataColumn" /> 对象。
              </param>
      <param name="childColumns">
                子数组 <see langword="DataColumn" /> 对象。
              </param>
      <param name="createConstraints">
        <see langword="true" /> 若要创建约束;否则为 <see langword="false" />。
              </param>
      <returns>
              创建的关系。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  关系名称是一个 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  关系已经属于此集合中，或属于另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有相同名称的关系。
                   （比较不区分大小写。）
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  创建以来，该关系已进入无效状态。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>
              对表执行的验证。
            </summary>
      <param name="relation">
                要检查的关系。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  该关系为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  关系已经属于此集合中，或属于另一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  集合中已存在具有相同名称的关系。
                   （比较不区分大小写。）
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>
              将指定的元素复制 <see cref="T:System.Data.DataRelation" /> 数组转换为集合的末尾。
            </summary>
      <param name="relations">
                数组 <see cref="T:System.Data.DataRelation" /> 要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>
              验证是否指定 <see cref="T:System.Data.DataRelation" /> 可以从集合中移除。
            </summary>
      <param name="relation">
                要对其执行检查的关系。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.DataRelation" /> 可删除; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>
              清除集合的所有关系。
            </summary>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>
              在集合更改后发生。
            </summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>
              验证是否 <see cref="T:System.Data.DataRelation" /> 集合中存在与特定的名称 （不区分大小写）。
            </summary>
      <param name="name">
                若要查找的关系的名称。
              </param>
      <returns>
        <see langword="true" />, 如果存在具有指定名称的关系;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>
              将集合复制 <see cref="T:System.Data.DataRelation" /> 对象指定索引处开始。
            </summary>
      <param name="array">
                数组 <see cref="T:System.Data.DataRelation" /> 要将集合复制到的对象。
              </param>
      <param name="index">
                从其开始的索引。
              </param>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>
              此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。
            </summary>
      <returns>
              引用数据集。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>
              获取指定的索引 <see cref="T:System.Data.DataRelation" /> 对象。
            </summary>
      <param name="relation">
                要搜索的关系。
              </param>
      <returns>
              从 0 开始的索引，该关系，则为-1 如果集合中找不到该关系。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>
              获取的索引 <see cref="T:System.Data.DataRelation" /> 由名称指定。
            </summary>
      <param name="relationName">
                若要查找的关系的名称。
              </param>
      <returns>
              具有指定的名称，则为-1 如果集合中不存在该关系的关系的从零开始的索引。
            </returns>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Data.DataRelation" /> 的指定索引处的对象。
            </summary>
      <param name="index">
                要查找的从零开始索引。
              </param>
      <returns>
        <see cref="T:System.Data.DataRelation" />, ，或为空值，如果指定 <see cref="T:System.Data.DataRelation" /> 不存在。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  索引值大于集合中的项的数目。
                </exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Data.DataRelation" /> 由名称指定的对象。
            </summary>
      <param name="name">
                若要查找的关系的名称。
              </param>
      <returns>
              命名的 <see cref="T:System.Data.DataRelation" />, ，或为空值，如果指定 <see cref="T:System.Data.DataRelation" /> 不存在。
            </returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。
            </summary>
      <param name="ccevent">
                包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。
            </summary>
      <param name="ccevent">
                包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>
              从集合中移除指定的关系。
            </summary>
      <param name="relation">
                要删除的关系。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  该关系是一个 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  该关系不属于该集合。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>
              从集合中移除具有指定名称的关系。
            </summary>
      <param name="name">
                要删除的关系的名称。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  集合没有具有指定名称的关系。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>
              从集合中移除指定索引处的关系。
            </summary>
      <param name="index">
                要删除的关系的索引。
              </param>
      <exception cref="T:System.ArgumentException">
                  集合中指定索引处没有关系。
                </exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>
              对指定会检验 <see cref="T:System.Data.DataRelation" /> 对象。
            </summary>
      <param name="relation">
        <see langword="DataRelation" /> 要验证对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  集合中指定索引处没有关系。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的关系不属于此集合中，或属于另一个集合。
                </exception>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>
              表示行中的数据 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>
              初始化 DataRow 的新实例。
               从生成器中构造行。
               仅限内部使用。
            </summary>
      <param name="builder">
                生成器 
              </param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>
              提交自上次对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" /> 调用。
            </summary>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>
              在开始编辑操作 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
      <exception cref="T:System.Data.InRowChangingEventException">
                  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  该方法是在已删除的行时调用。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>
              取消当前编辑的行上。
            </summary>
      <exception cref="T:System.Data.InRowChangingEventException">
                  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>
              清除的行的错误。
               这包括 <see cref="P:System.Data.DataRow.RowError" /> 并且错误设置有 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>
              删除 <see cref="T:System.Data.DataRow" />。
            </summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
        <see cref="T:System.Data.DataRow" /> 被删除。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>
              结束对行进行编辑。
            </summary>
      <exception cref="T:System.Data.InRowChangingEventException">
                  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。
                </exception>
      <exception cref="T:System.Data.ConstraintException">
                  编辑破坏了约束。
                </exception>
      <exception cref="T:System.Data.ReadOnlyException">
                  行所属的表和编辑尝试更改只读列的值。
                </exception>
      <exception cref="T:System.Data.NoNullAllowedException">
                  编辑尝试将 null 值放入某一列其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>
              获取子项的这行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relation">
                要使用的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  该关系是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有此版本的数据。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>
              获取子项的行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" /> 使用。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>
              获取子项的行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <param name="relation">
                要使用的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> 对象数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>
              获取子项的行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" /> 使用。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>
              获取按名称指定的列中的错误说明。
            </summary>
      <param name="columnName">
                列的名称。
              </param>
      <returns>
              错误说明的文本。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>
              获取指定的错误说明 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。
              </param>
      <returns>
              错误说明的文本。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>
              获取指定索引的列的错误说明。
            </summary>
      <param name="columnIndex">
                列的从零开始的索引。
              </param>
      <returns>
              错误说明的文本。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>
              获取具有错误的列的数组。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.DataColumn" /> 包含错误的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>
              获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relation">
                要使用的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <returns>
              父 <see cref="T:System.Data.DataRow" /> 当前行的行。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 不属于 <see cref="T:System.Data.DataTable" />。
                
                  该行是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.DataException">
                  子行有多个父级。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  该行不属于的子表的 <see cref="T:System.Data.DataRelation" /> 对象。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>
              获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <returns>
              父 <see cref="T:System.Data.DataRow" /> 当前行的行。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.Data.DataException">
                  子行有多个父级。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>
              获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <param name="relation">
                要使用的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。
              </param>
      <returns>
              父 <see cref="T:System.Data.DataRow" /> 当前行的行。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  该行是 <see langword="null" />。
                
                  <paramref name="relation" /> 不属于此表的父关系。
                </exception>
      <exception cref="T:System.Data.DataException">
                  子行有多个父级。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  关系的子表不是行所属的表。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有此版本的数据。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>
              获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。
              </param>
      <returns>
              父 <see cref="T:System.Data.DataRow" /> 当前行的行。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.DataException">
                  子行有多个父级。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>
              获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <param name="relation">
                要使用的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行 <see cref="T:System.Data.DataSet" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  该行是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  关系的子表不是行所属的表。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于 <see cref="T:System.Data.DataTable" />。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>
              获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relation">
                要使用的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行 <see cref="T:System.Data.DataSet" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  该行是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  关系的子表不是行所属的表。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于 <see cref="T:System.Data.DataTable" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>
              获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>
              获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。
            </summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  关系和行不属于同一个表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>
              获取一个值，该值指示行是否存在错误。
            </summary>
      <returns>
        <see langword="true" /> 如果行中包含错误。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>
              获取一个值，该值指示是否存在指定的版本。
            </summary>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定行的行版本。
              </param>
      <returns>
        <see langword="true" /> 如果存在版本;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>
              获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" /> 包含一个 null 值。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。
              </param>
      <returns>
        <see langword="true" /> 如果该列包含 null 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>
              获取一个值，该值指示是否指定索引处的列包含 null 值。
            </summary>
      <param name="columnIndex">
                列的从零开始的索引。
              </param>
      <returns>
        <see langword="true" /> 如果该列包含 null 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>
              获取一个值，该值指示指定的列是否包含 null 值。
            </summary>
      <param name="columnName">
                列的名称。
              </param>
      <returns>
        <see langword="true" /> 如果该列包含 null 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>
              获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataRowVersion" /> 包含一个 null 值。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定行的行版本。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
        <see langword="true" /> 如果该列包含 null 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>
              获取或设置存储在指定的数据 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <param name="column">
                一个 <see cref="T:System.Data.DataColumn" /> 包含数据。
              </param>
      <returns>
              包该数据的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  列不属于此表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 null。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试对已删除的行设置值。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  值与列的数据类型不匹配。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>
              获取或设置指定索引的列中存储的数据。
            </summary>
      <param name="columnIndex">
                列的从零开始的索引。
              </param>
      <returns>
              包该数据的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  当您尝试在已删除的行上设置一个值时出现。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  当您设置的值和新值时发生 <see cref="T:System.Type" /> 不符 <see cref="P:System.Data.DataColumn.DataType" />。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>
              获取或设置指定名称的列中存储的数据。
            </summary>
      <param name="columnName">
                列的名称。
              </param>
      <returns>
              包该数据的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  指定的列 <paramref name="columnName" /> 找不到。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  当您尝试在已删除的行上设置一个值时出现。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  当您设置一个值并将其 <see cref="T:System.Type" /> 不符 <see cref="P:System.Data.DataColumn.DataType" />。
                </exception>
      <exception cref="T:System.Data.NoNullAllowedException">
                  当尝试将 null 值插入列时会发生其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>
              获取存储在指定的数据的指定的版本 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />，包含有关该列的信息。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定所需的行版本。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
              包该数据的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  列不属于表。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数包含 null 值。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有此版本的数据。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>
              获取指定索引和版本要检索的数据的列中存储的数据。
            </summary>
      <param name="columnIndex">
                列的从零开始的索引。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定所需的行版本。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
              包该数据的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  值与列的数据类型不匹配。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有此版本的数据。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  尝试对已删除的行设置值。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>
              获取指定列中存储的数据的指定的版本。
            </summary>
      <param name="columnName">
                列的名称。
              </param>
      <param name="version">
                其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定所需的行版本。
                 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。
              </param>
      <returns>
              包该数据的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  指定的列 <paramref name="columnName" /> 找不到。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  值与列的数据类型不匹配。
                </exception>
      <exception cref="T:System.Data.VersionNotFoundException">
                  行不具有此版本的数据。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  行已被删除。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>
              获取或设置通过数组此行的所有值。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 类型的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该数组将大于表中的列数。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  数组中的值不匹配其 <see cref="P:System.Data.DataColumn.DataType" /> 在其各个供应商 <see cref="T:System.Data.DataColumn" />。
                </exception>
      <exception cref="T:System.Data.ConstraintException">
                  编辑破坏了约束。
                </exception>
      <exception cref="T:System.Data.ReadOnlyException">
                  编辑尝试更改只读列的值。
                </exception>
      <exception cref="T:System.Data.NoNullAllowedException">
                  编辑尝试放入列中的 null 值其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 的 <see cref="T:System.Data.DataColumn" /> 对象是 <see langword="false" />。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  行已被删除。
                </exception>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>
              拒绝以来对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上一次调用。
            </summary>
      <exception cref="T:System.Data.RowNotInTableException">
                  该行不属于表。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>
              获取或设置某一行的自定义错误说明。
            </summary>
      <returns>
              描述错误的文本。
            </returns>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>
              获取有关及其与关系行的当前状态 <see cref="T:System.Data.DataRowCollection" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRowState" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>
              更改 <see cref="P:System.Data.DataRow.Rowstate" /> 的 <see cref="T:System.Data.DataRow" /> 到 <see langword="Added" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>
              设置为指定的列的错误说明 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 若要设置的错误说明。
              </param>
      <param name="error">
                错误说明。
              </param>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>
              设置由索引指定的列的错误说明。
            </summary>
      <param name="columnIndex">
                列的从零开始的索引。
              </param>
      <param name="error">
                错误说明。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围内 
                </exception>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>
              设置由名称指定的列的错误说明。
            </summary>
      <param name="columnName">
                列的名称。
              </param>
      <param name="error">
                错误说明。
              </param>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>
              更改 <see cref="P:System.Data.DataRow.Rowstate" /> 的 <see cref="T:System.Data.DataRow" /> 到 <see langword="Modified" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>
              设置指定的值 <see cref="T:System.Data.DataColumn" /> 为空值。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。
              </param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>
              设置的父行 <see cref="T:System.Data.DataRow" /> 用新指定 <see cref="T:System.Data.DataRow" />。
            </summary>
      <param name="parentRow">
                新的父级 <see cref="T:System.Data.DataRow" />。
              </param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>
              设置的父行 <see cref="T:System.Data.DataRow" /> 用新指定 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="parentRow">
                新的父级 <see cref="T:System.Data.DataRow" />。
              </param>
      <param name="relation">
                该关系 <see cref="T:System.Data.DataRelation" /> 使用。
              </param>
      <exception cref="T:System.Data.RowNotInTableException">
                  这些行之一不属于表 
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  这些行之一是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  该关系不属于 <see cref="T:System.Data.DataRelationCollection" /> 的 <see cref="T:System.Data.DataSet" /> 对象。
                </exception>
      <exception cref="T:System.Data.InvalidConstraintException">
                  该关系的子级 <see cref="T:System.Data.DataTable" /> 不是该行所属的表。
                </exception>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>
              获取 <see cref="T:System.Data.DataTable" /> 为其该行有一个架构。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 此行所属。
            </returns>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>
              描述对执行的操作 <see cref="T:System.Data.DataRow" />。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>
              行已添加到表。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>
              行已更改。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>
              原始和行的当前版本已更改。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>
              已更改行的原始版本。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>
              对行的更改已提交。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>
              从表中已删除行。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>
              未更改行。
            </summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>
              已回滚到的行的最新更改。
            </summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>
        <see langword="DataRowBuilder" /> 类型支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>
              将提供数据供 <see cref="E:System.Data.DataTable.RowChanged" />, ，<see cref="E:System.Data.DataTable.RowChanging" />, ，<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />, ，和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> 事件。
            </summary>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>
              初始化 <see cref="T:System.Data.DataRowChangeEventArgs" /> 类的新实例。
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 后某项操作是出现。
              </param>
      <param name="action">
        <see cref="T:System.Data.DataRowAction" /> 值之一。
              </param>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>
              获取发生的操作 <see cref="T:System.Data.DataRow" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRowAction" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>
              获取在其发生操作的行。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 后发生了操作。
            </returns>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.Data.DataTable.RowChanging" />, ，<see cref="E:System.Data.DataTable.RowChanged" />, ，<see cref="E:System.Data.DataTable.RowDeleting" />, ，和 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。
              </param>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>
              表示的行的集合 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>
              添加指定 <see cref="T:System.Data.DataRow" /> 到 <see cref="T:System.Data.DataRowCollection" /> 对象。
            </summary>
      <param name="row">
                要添加的 <see cref="T:System.Data.DataRow" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  该行是 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  行属于另一个表，或已属于此表。
                </exception>
      <exception cref="T:System.Data.ConstraintException">
                  添加使约束无效。
                </exception>
      <exception cref="T:System.Data.NoNullAllowedException">
                  添加尝试将空值放入 <see cref="T:System.Data.DataColumn" /> 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>
              创建使用指定的值的行，并将其添加到 <see cref="T:System.Data.DataRowCollection" />。
            </summary>
      <param name="values">
                用于创建新行的值的数组。
              </param>
      <returns>
              无。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该数组将大于表中的列数。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  一个值与其各自的列类型不匹配。
                </exception>
      <exception cref="T:System.Data.ConstraintException">
                  添加行使约束无效。
                </exception>
      <exception cref="T:System.Data.NoNullAllowedException">
                  尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>
              清除集合中的所有行。
            </summary>
      <exception cref="T:System.Data.InvalidConstraintException">
                  一个 <see cref="T:System.Data.ForeignKeyConstraint" /> 上强制 <see cref="T:System.Data.DataRowCollection" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>
              获取一个值，该值指示集合中的任意行的主键是否包含指定的值。
            </summary>
      <param name="key">
                若要测试的主键的值。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含 <see cref="T:System.Data.DataRow" /> 用指定的主键值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">
                  表没有主键。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>
              获取一个值，该值指示集合中的任意行的主键列是否包含指定对象数组中的值。
            </summary>
      <param name="keys">
                要测试的主键值的数组。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.DataRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 具有指定键的值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">
                  表没有主键。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将所有复制 <see cref="T:System.Data.DataRow" /> 到给定的目标数组索引处开始的给定数组集合中的对象。
            </summary>
      <param name="ar">
                一维数组，它是从 <see langword="DataRowCollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
                数组中开始复制的位置的索引（从零开始）。
              </param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>
              将所有复制 <see cref="T:System.Data.DataRow" /> 到给定的目标数组索引处开始的给定数组集合中的对象。
            </summary>
      <param name="array">
                一维数组，它是从 <see langword="DataRowCollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
                数组中开始复制的位置的索引（从零开始）。
              </param>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>
              获取的总数 <see cref="T:System.Data.DataRow" /> 此集合中的对象。
            </summary>
      <returns>
              总次数 <see cref="T:System.Data.DataRow" /> 此集合中的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>
              获取指定的主键值的行。
            </summary>
      <param name="key">
                主键值 <see cref="T:System.Data.DataRow" /> 来查找。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> ，其中包含指定的主键值; 否则为空值中不存在的主键值如果 <see cref="T:System.Data.DataRowCollection" />。
            </returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">
                  表没有主键。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>
              获取包含指定的主键值的行。
            </summary>
      <param name="keys">
                若要查找的主键值的数组。
                 数组的类型是<see langword="Object" />。
              </param>
      <returns>
              A<see cref="T:System.Data.DataRow" />指定包含主键值的对象; 否则为空值中不存在的主键值如果<see cref="T:System.Data.DataRowCollection" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  没有行对应于该索引值。
                </exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">
                  表没有主键。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>
              获取 <see cref="T:System.Collections.IEnumerator" /> 为此集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 为此集合。
            </returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>
              获取指定的索引 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
      <param name="row">
                要搜索的 <see langword="DataRow" />。
              </param>
      <returns>
              该行，则为-1 如果集合中找不到行的从零开始的索引。
            </returns>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>
              将新行插入到集合中的指定位置处。
            </summary>
      <param name="row">
                要添加的 <see cref="T:System.Data.DataRow" />。
              </param>
      <param name="pos">
                要添加集合中的 （从零开始） 位置 <see langword="DataRow" />。
              </param>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>
              获取指定索引处的行。
            </summary>
      <param name="index">
                要返回的行的从零开始的索引。
              </param>
      <returns>
              指定的 <see cref="T:System.Data.DataRow" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  索引值大于集合中的项的数目。
                </exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.DataRow" />。
            </summary>
      <param name="row">
                要移除的 <see cref="T:System.Data.DataRow" />。
              </param>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>
              从集合中移除指定索引处的行。
            </summary>
      <param name="index">
                若要删除的行的索引。
              </param>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>
              获取状态 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>
              行已添加到 <see cref="T:System.Data.DataRowCollection" />, ，和 <see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。
            </summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>
              使用已删除该行 <see cref="M:System.Data.DataRow.Delete" /> 方法 <see cref="T:System.Data.DataRow" />。
            </summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>
              行已创建，但不属于任何 <see cref="T:System.Data.DataRowCollection" />。
               一个 <see cref="T:System.Data.DataRow" /> 处于此状态，已创建后和之前添加到一个集合，或者如果已从集合中删除它。
            </summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>
              被修改的行和 <see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。
            </summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>
              以来未更改行 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上一次调用。
            </summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>
              介绍 <see cref="T:System.Data.DataRow" /> 的版本。
            </summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>
              包含其当前值的行。
            </summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>
        <see cref="T:System.Data.DataRowState" /> 的默认版本。
               对于 <see langword="Added" />、<see langword="Modified" /> 或 <see langword="Deleted" /> 的 <see langword="DataRowState" /> 值，默认的版本是 <see langword="Current" />。
               对于 <see langword="Detached" /> 的 <see cref="T:System.Data.DataRowState" /> 值，版本是 <see langword="Proposed" />。
            </summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>
              包含其原始值的行。
            </summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>
              包含建议值的行。
            </summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>
              表示 <see cref="T:System.Data.DataRow" /> 的自定义视图。
            </summary>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>
              开始编辑过程。
            </summary>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>
              取消编辑过程。
            </summary>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>
              返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 与指定的子 <see cref="T:System.Data.DataRelation" />。
            </summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。
              </param>
      <returns>
        <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>
              返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 与指定的子 <see cref="T:System.Data.DataRelation" /> 名称。
            </summary>
      <param name="relationName">
                一个字符串，包含 <see cref="T:System.Data.DataRelation" /> 名称。
              </param>
      <returns>
        <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>
              返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 具有指定 <see cref="T:System.Data.DataRelation" /> 和父...
            </summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。
              </param>
      <param name="followParent">
                父对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>
              返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 具有指定 <see cref="T:System.Data.DataRelation" /> 的名称和父级。
            </summary>
      <param name="relationName">
                一个字符串，包含 <see cref="T:System.Data.DataRelation" /> 名称。
              </param>
      <param name="followParent">
                父级
              </param>
      <returns>
        <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>
              获取 <see cref="T:System.Data.DataView" /> 此行所属。
            </summary>
      <returns>
        <see langword="DataView" /> 此行所属。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>
              删除行。
            </summary>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>
              将更改提交给基础 <see cref="T:System.Data.DataRow" /> 并结束编辑会话与开始 <see cref="M:System.Data.DataRowView.BeginEdit" />。
                使用 <see cref="M:System.Data.DataRowView.CancelEdit" /> 放弃所做的更改 <see cref="T:System.Data.DataRow" />。
            </summary>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>
              获取一个值，该值指示是否当前 <see cref="T:System.Data.DataRowView" /> 等同于指定的对象。
            </summary>
      <param name="other">
        <see cref="T:System.Object" /> 进行比较。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="object" /> 是 <see cref="T:System.Data.DataRowView" /> ，并返回与当前位于同一行 <see cref="T:System.Data.DataRowView" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>
              返回的哈希代码 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
      <returns>
              32 位有符号的整数哈希代码 1，它表示布尔 <see langword="true" /> 如果此实例的值不为零; 否则整数零，它表示一个布尔值 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>
              指示行是否处于编辑模式。
            </summary>
      <returns>
        <see langword="true" /> 如果在行处于，编辑模式，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>
              指示是否 <see cref="T:System.Data.DataRowView" /> 的新增功能。
            </summary>
      <returns>
        <see langword="true" /> 如果该行被新;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>
              获取或设置一个值，指定列中。
            </summary>
      <param name="ndx">
                指定的列。
              </param>
      <returns>
              列的值。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>
              获取或设置一个值，指定列中。
            </summary>
      <param name="property">
                包含指定的列的字符串。
              </param>
      <returns>
              列的值。
            </returns>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>
              是的事件时引发 <see cref="T:System.Data.DataRowView" /> 属性更改。
            </summary>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>
              获取 <see cref="T:System.Data.DataRow" /> 正在查看。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 正被查看 <see cref="T:System.Data.DataRowView" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>
              获取的当前版本说明 <see cref="T:System.Data.DataRow" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。
               可能的值有 <see cref="P:System.Data.DataRowView.RowVersion" /> 属性 <see langword="Default" />, ，<see langword="Original" />, ，<see langword="Current" />, ，和 <see langword="Proposed" />。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>
              返回此组件实例的自定义属性的集合。
            </summary>
      <returns>
              包含此对象的属性的 AttributeCollection。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>
              返回此组件实例的类名称。
            </summary>
      <returns>
              组件的此实例的类名。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>
              返回某个组件的此实例的名称。
            </summary>
      <returns>
              组件的此实例的名称。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>
              返回此组件实例的类型转换器。
            </summary>
      <returns>
              组件的此实例的的类型转换器。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>
              返回某个组件的此实例的默认事件。
            </summary>
      <returns>
              组件的此实例的的默认事件。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>
              返回此组件实例的默认属性。
            </summary>
      <returns>
              组件的此实例的的默认属性。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>
              返回指定类型的此实例的一个组件的编辑器。
            </summary>
      <param name="editorBaseType">
                一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。
              </param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 <see langword="null" /> 如果找不到编辑器中。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>
              返回此组件实例的事件。
            </summary>
      <returns>
              组件的此实例的事件。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>
              返回此实例具有指定特性的组件的事件。
            </summary>
      <param name="attributes">
                属性
              </param>
      <returns>
              组件的此实例的事件。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>
              返回此组件实例的属性。
            </summary>
      <returns>
              组件的此实例的属性。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>
              返回具有指定特性的组件的此实例的属性。
            </summary>
      <param name="attributes">
                属性。
              </param>
      <returns>
              组件的此实例的属性。
            </returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回一个对象，该对象包含指定的属性描述符所描述的属性。
            </summary>
      <param name="pd">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，表示指定属性的所有者。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>
              获取描述对象的任何验证错误的消息。
            </summary>
      <returns>
              该对象上的验证错误。
            </returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>
              获取具有给定名称的属性的错误消息。
            </summary>
      <param name="colName">
                若要获取其错误信息的属性的名称。
              </param>
      <returns>
              错误消息中的属性。
               默认值为空字符串("")。
            </returns>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>
              表示数据在内存中的缓存。
            </summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataSet" /> 具有给定名称的类。
            </summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" /> 的名称。
              </param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataSet" /> 类，该类具有给定序列化信息和上下文。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和给定序列化流的目标。
              </param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
              </param>
      <param name="ConstructSchema">
                布尔值。
              </param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>
              对此所做的所有更改都提交 <see cref="T:System.Data.DataSet" /> 加载以来或自上次以来 <see cref="M:System.Data.DataSet.AcceptChanges" /> 调用。
            </summary>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>
              开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />。
               初始化发生在运行时。
            </summary>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>
              获取或设置一个值，该值指示是否中的字符串比较 <see cref="T:System.Data.DataTable" /> 对象是区分大小写。
            </summary>
      <returns>
        <see langword="true" /> 如果字符串比较是区分大小写。否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>
              清除 <see cref="T:System.Data.DataSet" /> 的所有表中删除所有行的任何数据。
            </summary>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>
              将复制的结构 <see cref="T:System.Data.DataSet" />, ，包括所有 <see cref="T:System.Data.DataTable" /> 架构、 关系和约束。
               不复制任何数据。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.DataSet" /> 具有相同的架构与当前 <see cref="T:System.Data.DataSet" />, ，但是不包含任何数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>
              将结构和数据复制此 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.DataSet" /> 具有相同的结构 （表架构、 关系和约束） 和数据格式设置为这 <see cref="T:System.Data.DataSet" />。
            
                如果已创建这些类的子类，该副本也将属于相同的子类。
              </returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>
              返回 <see cref="T:System.Data.DataTableReader" /> 带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="dataTables">
                要在中返回 DataTables 提供结果的顺序的数组集 <see cref="T:System.Data.DataTableReader" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" /> 源中包含的实例 <see cref="T:System.Data.DataSet" />。
               返回的结果集是按指定顺序 <paramref name="dataTables" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>
              返回 <see cref="T:System.Data.DataTableReader" /> 带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />, ，请在表中出现在相同序列 <see cref="P:System.Data.DataSet.Tables" /> 集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" /> 源中包含的实例 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>
              获取或设置的当前名称 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的名称。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>
              获取中包含的数据的自定义视图 <see cref="T:System.Data.DataSet" /> 以允许筛选、 搜索和导航使用自定义 <see cref="T:System.Data.DataViewManager" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataViewManager" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>
              确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 反序列化时传递的实例 <see cref="T:System.Data.DataSet" />。
              </param>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，该值指示是否已从负载中忽略架构信息。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ， <see langword="DataSet" />的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 使用远程处理方案中的反序列化期间调用。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> ， <see langword="DataSet" />的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 使用远程处理方案中的反序列化期间调用。
              </param>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，该值指示是否已从负载中忽略架构信息。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>
              结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" /> 的初始化。
               初始化发生在运行时。
            </summary>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>
              获取或设置一个值，该值指示是否在尝试任何更新操作时遵循约束规则。
            </summary>
      <returns>
        <see langword="true" /> 如果强制执行规则;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  一个或多个约束不能强制实施。
                </exception>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>
              获取与相关联的自定义的用户信息的集合 <see langword="DataSet" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.PropertyCollection" /> 与自定义用户的所有信息。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>
              获得一份 <see cref="T:System.Data.DataSet" /> 包含自加载后，或自从对它所做的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" /> 上一次调用。
            </summary>
      <returns>
              一份从此更改 <see cref="T:System.Data.DataSet" /> ，可能会有合并回使用在其上及更高版本所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。
               如果找到任何更改的行，该方法返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>
              获得一份 <see cref="T:System.Data.DataSet" /> 包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" /> 被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />。
            </summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。
              </param>
      <returns>
              筛选的副本 <see cref="T:System.Data.DataSet" /> ，可能会有合并回使用它，并随后所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。
               如果所需的任何行 <see cref="T:System.Data.DataRowState" /> 找到，则此方法返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              获得一份 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 为数据集。
            </summary>
      <param name="schemaSet">
                指定的架构集中。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DataSet" /> 关联的序列化数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DataSet" /> 关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>
              返回一个可序列化 <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              反序列化的二进制文件或 XML 流中的表数据。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。
              </param>
      <param name="context">
                流上下文。
              </param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>
              返回的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              一个字符串，它表示形式中存储的数据 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>
              返回的 XML 表示形式中存储的数据的 XML 架构 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              字符串，它 XML 架构的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" /> 已经更改，包括新的、 已删除，或已修改的行。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.DataSet" /> 已更改; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" /> 已经更改，包括新的、 已删除，或已修改的行，通过筛选 <see cref="T:System.Data.DataRowState" />。
            </summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.DataSet" /> 已更改; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>
              获取一个值，该值指示在任何中是否有错误 <see cref="T:System.Data.DataTable" /> 对象在此 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
        <see langword="true" /> 如果任何表中包含错误，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>
              将 XML 架构应用从指定 <see cref="T:System.IO.Stream" /> 到 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="stream">
        <see langword="Stream" /> 从中读取该架构。
              </param>
      <param name="nsArray">
                要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
              </param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>
              将 XML 架构应用从指定 <see cref="T:System.IO.TextReader" /> 到 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="reader">
        <see langword="TextReader" /> 从中读取该架构。
              </param>
      <param name="nsArray">
                要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
              </param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>
              将 XML 架构应用从指定文件 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="fileName">
                从中读取该架构 （包括路径） 的文件的名称。
              </param>
      <param name="nsArray">
                要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
              </param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>
              将 XML 架构应用从指定 <see cref="T:System.Xml.XmlReader" /> 到 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="reader">
        <see langword="XMLReader" /> 从中读取该架构。
              </param>
      <param name="nsArray">
                要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
              </param>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>
              之后，将会 <see cref="T:System.Data.DataSet" /> 初始化。
            </summary>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>
              反序列化的所有表数据从二进制文件或 XML 流的数据集。
            </summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              序列化表示形式的格式将检查 <see langword="DataSet" />。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示 <see langword="DataSet" /> 以二进制格式，序列化 <see langword="false" /> 否则为。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" /> 初始化。
            </summary>
      <returns>
        <see langword="true" /> 指示组件已完成初始化，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>
              填充 <see cref="T:System.Data.DataSet" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />, ，使用数组 <see cref="T:System.Data.DataTable" /> 实例，以提供架构和命名空间的信息。
            </summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。
              </param>
      <param name="loadOption">
                取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 实例内 <see cref="T:System.Data.DataSet" /> 组合在一起共享相同的主键的传入行。
              </param>
      <param name="tables">
                一个数组 <see cref="T:System.Data.DataTable" /> 情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法检索名称和命名空间的信息。
                 每个表必须是属于 <see cref="T:System.Data.DataTableCollection" /> 包含由此 <see cref="T:System.Data.DataSet" />。
              </param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>
              填充 <see cref="T:System.Data.DataSet" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />, ，使用一个字符串数组提供中的表名称，从而 <see langword="DataSet" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。
              </param>
      <param name="loadOption">
                取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 实例内 <see langword="DataSet" /> 组合在一起共享相同的主键的传入行。
              </param>
      <param name="tables">
                一个字符串，从该数组 <see langword="Load" /> 方法检索表名称信息。
              </param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>
              填充 <see cref="T:System.Data.DataSet" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />, ，使用数组 <see cref="T:System.Data.DataTable" /> 实例，以提供架构和命名空间的信息。
            </summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。
              </param>
      <param name="loadOption">
                取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 实例内 <see cref="T:System.Data.DataSet" /> 组合在一起共享相同的主键的传入行。
              </param>
      <param name="errorHandler">
                一个 <see cref="T:System.Data.FillErrorEventHandler" /> 加载数据时出错时要调用委托。
              </param>
      <param name="tables">
                一个数组 <see cref="T:System.Data.DataTable" /> 情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法检索名称和命名空间的信息。
              </param>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>
              获取或设置用来比较字符串表中的区域设置信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Globalization.CultureInfo" /> ，其中包含有关用户的计算机区域设置的数据。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>
              数组合并 <see cref="T:System.Data.DataRow" /> 对象发送到当前 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="rows">
                数组 <see langword="DataRow" /> 对象合并到 <see langword="DataSet" />。
              </param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>
              合并指定 <see cref="T:System.Data.DataSet" /> 到当前及其架构 <see langword="DataSet" />。
            </summary>
      <param name="dataSet">
        <see langword="DataSet" /> 将合并其数据和架构。
              </param>
      <exception cref="T:System.Data.ConstraintException">
                  不能启用一个或多个约束。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>
              合并指定 <see cref="T:System.Data.DataTable" /> 到当前及其架构 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 将合并其数据和架构。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>
              合并指定 <see cref="T:System.Data.DataSet" /> 到当前及其架构 <see langword="DataSet" />, 、 保留或放弃这中的任何更改 <see langword="DataSet" /> 根据给定的参数。
            </summary>
      <param name="dataSet">
        <see langword="DataSet" /> 将合并其数据和架构。
              </param>
      <param name="preserveChanges">
        <see langword="true" /> 若要保留在当前更改 <see langword="DataSet" />; 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>
              数组合并 <see cref="T:System.Data.DataRow" /> 对象发送到当前 <see cref="T:System.Data.DataSet" />, 、 保留或放弃更改 <see langword="DataSet" /> 并处理根据给定的参数不兼容的架构。
            </summary>
      <param name="rows">
                数组 <see cref="T:System.Data.DataRow" /> 对象合并到 <see langword="DataSet" />。
              </param>
      <param name="preserveChanges">
        <see langword="true" /> 若要保留中的更改 <see langword="DataSet" />; 否则为 <see langword="false" />。
              </param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>
              合并指定 <see cref="T:System.Data.DataSet" /> 且其架构与当前 <see langword="DataSet" />, 、 保留或放弃更改在当前 <see langword="DataSet" /> 并处理根据给定的参数不兼容的架构。
            </summary>
      <param name="dataSet">
        <see langword="DataSet" /> 将合并其数据和架构。
              </param>
      <param name="preserveChanges">
        <see langword="true" /> 若要保留在当前更改 <see langword="DataSet" />; 否则为 <see langword="false" />。
              </param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>
              合并指定 <see cref="T:System.Data.DataTable" /> 到当前及其架构 <see langword="DataSet" />, 、 保留或放弃更改 <see langword="DataSet" /> 并处理根据给定的参数不兼容的架构。
            </summary>
      <param name="table">
        <see langword="DataTable" /> 将合并其数据和架构。
              </param>
      <param name="preserveChanges">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
      <param name="missingSchemaAction">
        <see langword="true" /> 若要保留中的更改 <see langword="DataSet" />; 否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>
              当目标和源时发生 <see cref="T:System.Data.DataRow" /> 具有相同的主键值，和 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 设置为 true。
            </summary>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>
              获取或设置的命名空间 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              命名空间 <see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  命名空间已有数据。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
              引发 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。
            </summary>
      <param name="pcevent">
                包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>
              发生时 <see cref="T:System.Data.DataRelation" /> 从中删除对象 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 被删除。
              </param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>
              发生时 <see cref="T:System.Data.DataTable" /> 也会从 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 被删除。
              </param>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>
              获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              XML 前缀 <see cref="T:System.Data.DataSet" /> 命名空间。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>
              将通知发送指定 <see cref="T:System.Data.DataSet" /> 即将更改的属性。
            </summary>
      <param name="name">
                将要更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Data.XmlReadMode" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中进行读取。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。
              </param>
      <returns>
        <see langword="XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定的文件和 <see cref="T:System.Data.XmlReadMode" />。
            </summary>
      <param name="fileName">
                从中进行读取文件名 （包括路径）。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。
              </param>
      <returns>
        <see langword="XmlReadMode" /> 用于读取数据。
            </returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlReadMode" />。
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 从中进行读取。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。
              </param>
      <returns>
        <see langword="XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextReader" /> 和 <see cref="T:System.Data.XmlReadMode" />。
            </summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 从中进行读取。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。
              </param>
      <returns>
        <see langword="XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定的文件。
            </summary>
      <param name="fileName">
                从中进行读取文件名 （包括路径）。
              </param>
      <returns>
        <see langword="XmlReadMode" /> 用于读取数据。
            </returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="reader">
        <see langword="TextReader" /> 从中进行读取的架构和数据。
              </param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                一个对象，派生自 <see cref="T:System.IO.Stream" />。
              </param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中进行读取。
              </param>
      <returns>
        <see langword="XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>
              从指定读取的 XML 架构 <see cref="T:System.IO.Stream" /> 到 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 从中进行读取。
              </param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>
              从指定读取的 XML 架构 <see cref="T:System.IO.TextReader" /> 到 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 从中进行读取。
              </param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>
              从到指定的文件中读取 XML 架构 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="fileName">
                该文件的文件名 （包括路径） 从中进行读取。
              </param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>
              从指定读取的 XML 架构 <see cref="T:System.Xml.XmlReader" /> 到 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中进行读取。
              </param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>
              将忽略属性，并返回一个空数据集。
            </summary>
      <param name="reader">
                指定的 XML 读取器。
              </param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>
              回滚对所做的所有更改 <see cref="T:System.Data.DataSet" /> 创建以来，它，或自从上次 <see cref="M:System.Data.DataSet.AcceptChanges" /> 调用。
            </summary>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>
              获取关系链接表，并允许导航从父表到子表的集合。
            </summary>
      <returns>
              一个包含 <see cref="T:System.Data.DataRelationCollection" /> 对象集合的 <see cref="T:System.Data.DataRelation" />。
               如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" /> 存在的对象。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>
              获取或设置 <see cref="T:System.Data.SerializationFormat" /> 为 <see cref="T:System.Data.DataSet" /> 远程处理期间使用。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SerializationFormat" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>
              清除所有表并删除所有关系、 外部约束和表从 <see cref="T:System.Data.DataSet" />。
               子类应重写 <see cref="M:System.Data.DataSet.Reset" /> 还原 <see cref="T:System.Data.DataSet" /> 到其原始状态。
            </summary>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>
              获取或设置 <see cref="T:System.Data.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              获取或设置 <see cref="T:System.Data.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>
              获取一个值，该值指示是否 <see cref="P:System.Data.DataSet.Relations" /> 应保持。
            </summary>
      <returns>
        <see langword="true" /> 如果已从其默认设置; 更改了属性值否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>
              获取一个值，该值指示是否 <see cref="P:System.Data.DataSet.Tables" /> 应保持。
            </summary>
      <returns>
        <see langword="true" /> 如果已从其默认设置; 更改了属性值否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>
              获取或设置 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.ComponentModel.ISite" />。
            </summary>
      <returns>
              用于 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>
              获取集合中包含的表 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTableCollection" /> 包含由此 <see cref="T:System.Data.DataSet" />。
               如果不是返回一个空集合 <see cref="T:System.Data.DataTable" /> 存在的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用其进行写。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="fileName">
                该文件的文件名 （包括路径） 向其写入。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.IO.TextWriter" /> 用来写入的文档对象。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="stream">
                一个 <see cref="T:System.IO.Stream" /> 用来写入到的文件对象。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>
              当前数据写入 <see cref="T:System.Data.DataSet" /> 写入指定的文件。
            </summary>
      <param name="fileName">
                该文件的文件名 （包括路径） 向其写入。
              </param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>
              当前数据写入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 要写入的对象。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>
              当前数据写入 <see cref="T:System.Data.DataSet" /> 到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用其进行写。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>
              当前数据写入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                一个 <see cref="T:System.IO.Stream" /> 用来写入到的文件对象。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入文件的结构。
            </summary>
      <param name="fileName">
                要写入的文件的名称。
              </param>
      <param name="multipleTargetConverter">
                委托用于将转换 <see cref="T:System.Type" /> 为字符串。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.Stream" /> 对象。
            </summary>
      <param name="stream">
                一个 <see cref="T:System.IO.Stream" /> 用来写入到的文件对象。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>
              将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" /> 对象。
            </summary>
      <param name="writer">
                要进行写入的 <see cref="T:System.IO.TextWriter" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入文件的结构。
            </summary>
      <param name="fileName">
                该文件的文件名 （包括路径） 向其写入。
              </param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。
                </exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.Stream" /> 对象。
            </summary>
      <param name="stream">
                一个 <see cref="T:System.IO.Stream" /> 要写入到对象。
              </param>
      <param name="multipleTargetConverter">
                委托用于将转换 <see cref="T:System.Type" /> 为字符串。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.IO.TextWriter" /> 要写入到对象。
              </param>
      <param name="multipleTargetConverter">
                委托用于将转换 <see cref="T:System.Type" /> 为字符串。
              </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>
              写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlWriter" /> 要写入到对象。
              </param>
      <param name="multipleTargetConverter">
                委托用于将转换 <see cref="T:System.Type" /> 为字符串。
              </param>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。
            </summary>
      <returns>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。
              </param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>
              介绍用于序列化格式 <see cref="T:System.DateTime" /> 中的列 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>
        <see langword="DateTime" /> 始终在本地存储。
               如果 <see cref="F:System.Data.DataSetDateTime.Utc" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式中的列，则首先要将其转换为本地。
               在此模式下的序列化始终在本地执行。
               在序列化期间没有偏移量。
            </summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>
        <see langword="DateTime" /> 始终会存储在未指定。
               如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式中的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" />。
               在此模式下的序列化不会导致某一偏移量。
            </summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>
        <see langword="DateTime" /> 存储在未指定。
               如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式中的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" />。
               在此模式下的序列化会导致偏移量。
               这是默认行为，可以向后兼容。
               此选项应被认为是在存储中未指定，但应用的偏移量，类似于 <see cref="F:System.Data.DataSetDateTime.Local" /> 在序列化过程。
            </summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>
        <see langword="DateTime" /> 以协调世界时 (UTC) 存储。
               如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式中的列，则首先要将其转换为 <see langword="Utc" /> 格式。
               始终在中执行这种模式中的序列化 <see langword="Utc" />。
               在序列化期间没有偏移量。
            </summary>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>
              将标记属性、 事件或扩展程序的说明。
               在引用该成员时，可视化设计器可以显示此说明。
            </summary>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataSysDescriptionAttribute" /> 类使用指定的说明的字符串。
            </summary>
      <param name="description">
                描述字符串中。
              </param>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>
              获取说明的文本。
            </summary>
      <returns>
              描述字符串中。
            </returns>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>
              表示内存中数据的一个表。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataTable" /> 不带任何参数的类。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataTable" /> 初始化具有指定的表名称。
            </summary>
      <param name="tableName">
                要为表提供的名称。
                 如果 <paramref name="tableName" /> 是 <see langword="null" /> 也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataTable" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和给定序列化流的目标。
              </param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.DataTable" /> 类使用指定的表名和命名空间。
            </summary>
      <param name="tableName">
                要为表提供的名称。
                 如果 <paramref name="tableName" /> 是 <see langword="null" /> 也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />。
              </param>
      <param name="tableNamespace">
                XML 表示形式中存储的数据的命名空间 <see langword="DataTable" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>
              提交自上次对此表所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" /> 调用。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>
              开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />。
               初始化发生在运行时。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>
              加载数据时关闭通知、 索引维护和约束。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>
              指示在表中的字符串比较是否区分大小写。
            </summary>
      <returns>
        <see langword="true" /> 如果该比较是区分大小写。否则为 <see langword="false" />。
               默认值设置为 parent <see cref="T:System.Data.DataSet" /> 对象的 <see cref="P:System.Data.DataSet.CaseSensitive" /> 属性，或 <see langword="false" /> 如果 <see cref="T:System.Data.DataTable" /> 独立于创建 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>
              获取此子关系的集合 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataRelationCollection" /> ，包含表的子关系。
               如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" /> 存在的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>
              清除 <see cref="T:System.Data.DataTable" /> 的所有数据。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>
              克隆的结构 <see cref="T:System.Data.DataTable" />, ，包括所有 <see cref="T:System.Data.DataTable" /> 架构和约束。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.DataTable" /> 具有相同的架构与当前 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>
              一个值更改后发生指定 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataRow" />。
            </summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>
              当更改某一值时出现指定 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataRow" />。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>
              获取属于此表的列的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataColumnCollection" /> 包含集合的 <see cref="T:System.Data.DataColumn" /> 表的对象。
               如果不是返回一个空集合 <see cref="T:System.Data.DataColumn" /> 存在的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>
              计算传递的筛选条件的当前行上给定的表达式。
            </summary>
      <param name="expression">
                要计算的表达式。
              </param>
      <param name="filter">
                筛选器来限制在表达式中计算的行。
              </param>
      <returns>
        <see cref="T:System.Object" />, ，设置为计算的结果。
               如果表达式的计算结果为 null，则返回值将 <see cref="F:System.DBNull.Value" />。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>
              获取此表是由约束的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.ConstraintCollection" /> 包含集合的 <see cref="T:System.Data.Constraint" /> 表的对象。
               如果不是返回一个空集合 <see cref="T:System.Data.Constraint" /> 存在的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>
              将结构和数据复制此 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.DataTable" /> 具有相同的结构 （表架构和约束） 和数据格式设置为这 <see cref="T:System.Data.DataTable" />。
            
              如果派生的类，该副本也将属于相同的派生类。
            
              <see cref="M:System.Data.DataTable.Copy" /> 创建一个新 <see cref="T:System.Data.DataTable" /> 具有相同的结构和数据作为原始 <see cref="T:System.Data.DataTable" />。
               若要复制到新结构 <see cref="T:System.Data.DataTable" />, ，但不是数据，使用 <see cref="M:System.Data.DataTable.Clone" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>
              返回 <see cref="T:System.Data.DataTableReader" /> 对应于在此数据 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataTableReader" /> 包含一个结果集，对应于源 <see cref="T:System.Data.DataTable" /> 实例。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>
              创建 <see cref="T:System.Data.DataTable" /> 的新实例。
            </summary>
      <returns>
              新的表达式。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>
              获取 <see cref="T:System.Data.DataSet" /> 此表所属。
            </summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 此表所属。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>
              获取可能包括已筛选的视图或光标位置的表的自定义的视图。
            </summary>
      <returns>
              与 <see cref="T:System.Data.DataView" /> 关联的 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>
              获取或设置返回用来表示此表在用户界面中的值的表达式。
              <see langword="DisplayExpression" /> 属性，允许您在用户界面中显示此表的名称。
            </summary>
      <returns>
              显示字符串。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>
              结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" /> 的初始化。
               初始化发生在运行时。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>
              在加载数据后打开通知、 索引维护和约束。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>
              获取自定义的用户信息的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.PropertyCollection" /> ，包含自定义用户信息。
            </returns>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>
              检查是否正在执行初始化。
               初始化发生在运行时。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>
              获得一份 <see cref="T:System.Data.DataTable" /> 包含自加载后对其进行的所有更改或 <see cref="M:System.Data.DataTable.AcceptChanges" /> 上一次调用。
            </summary>
      <returns>
              一份从此更改 <see cref="T:System.Data.DataTable" />, ，或 <see langword="null" /> 如果找不到任何更改。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>
              获得一份 <see cref="T:System.Data.DataTable" /> 包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" /> 被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />。
            </summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。
              </param>
      <returns>
              筛选的副本 <see cref="T:System.Data.DataTable" /> ，可能会有合并回它，及更高版本所执行的操作 <see cref="T:System.Data.DataTable" /> 使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。
               如果所需的任何行 <see cref="T:System.Data.DataRowState" /> 找到，则此方法返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              此方法返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例，包含 Web 服务描述语言 (WSDL) 描述 <see cref="T:System.Data.DataTable" /> 为 Web 服务。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>
              获取一个数组 <see cref="T:System.Data.DataRow" /> 包含错误的对象。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 具有错误的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含与关联的序列化的数据 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含的源和目标与相关联的序列化流 <see cref="T:System.Data.DataTable" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>
              获取行类型。
            </summary>
      <returns>
              返回的类型 <see cref="T:System.Data.DataRow" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。
            </summary>
      <returns>
               一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>
              获取一个值，该值指示是否有任何任一的表中的行中的错误 <see cref="T:System.Data.DataSet" /> 表属于。
            </summary>
      <returns>
        <see langword="true" /> 如果存在错误;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>
              副本 <see cref="T:System.Data.DataRow" /> 到 <see cref="T:System.Data.DataTable" />, ，保留任何属性的设置，以及原始值和当前值。
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 要导入。
              </param>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>
              之后，将会 <see cref="T:System.Data.DataTable" /> 初始化。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" /> 初始化。
            </summary>
      <returns>
        <see langword="true" /> 指示组件已完成初始化，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>
              填充 <see cref="T:System.Data.DataTable" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />。
               如果 <see cref="T:System.Data.DataTable" /> 已经包含行，从数据源传入的数据将与现有行合并。
            </summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> 提供结果集。
              </param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>
              填充 <see cref="T:System.Data.DataTable" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />。
               如果 <see langword="DataTable" /> 已经包含行，与现有行的值根据合并来自数据源的传入数据 <paramref name="loadOption" /> 参数。
            </summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。
              </param>
      <param name="loadOption">
                取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 与共享相同的主键的传入行组合在一起。
              </param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>
              填充 <see cref="T:System.Data.DataTable" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" /> 使用错误处理委托。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Data.IDataReader" /> 提供结果集。
              </param>
      <param name="loadOption">
                取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 与共享相同的主键的传入行组合在一起。
              </param>
      <param name="errorHandler">
                一个 <see cref="T:System.Data.FillErrorEventHandler" /> 加载数据时出错时要调用委托。
              </param>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>
              查找并更新特定行。
               如果未不找到任何匹配的行，使用给定的值创建一个新行。
            </summary>
      <param name="values">
                用于创建新行的值的数组。
              </param>
      <param name="fAcceptChanges">
        <see langword="true" /> 若要接受更改，则否则为 <see langword="false" />。
              </param>
      <returns>
              新的 <see cref="T:System.Data.DataRow" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该数组将大于表中的列数。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  值不匹配其各自的列类型。
                </exception>
      <exception cref="T:System.Data.ConstraintException">
                  添加行使约束无效。
                </exception>
      <exception cref="T:System.Data.NoNullAllowedException">
                  正在尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。
                </exception>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>
              查找并更新特定行。
               如果未不找到任何匹配的行，使用给定的值创建一个新行。
            </summary>
      <param name="values">
                用于创建新行的值的数组。
              </param>
      <param name="loadOption">
                用于确定如何将数组值应用于现有行中的相应值。
              </param>
      <returns>
              新的 <see cref="T:System.Data.DataRow" />。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>
              获取或设置用来比较字符串表中的区域设置信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Globalization.CultureInfo" /> ，其中包含有关用户的计算机区域设置的数据。
               默认值是 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="T:System.Globalization.CultureInfo" /> (返回 <see cref="P:System.Data.DataSet.Locale" /> 属性) 向其 <see cref="T:System.Data.DataTable" /> 所属; 如果表不属于 <see cref="T:System.Data.DataSet" />, ，默认值是当前系统 <see cref="T:System.Globalization.CultureInfo" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>
              合并指定 <see cref="T:System.Data.DataTable" /> 与当前 <see langword="DataTable" />, ，，该值指示是否保留更改，以及如何处理缺失的架构，在当前 <see langword="DataTable" />。
            </summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 要与当前合并 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="preserveChanges">
        <see langword="true" />, 保留在当前更改 <see cref="T:System.Data.DataTable" />; 否则为 <see langword="false" />。
              </param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>
              合并指定 <see cref="T:System.Data.DataTable" /> 与当前 <see langword="DataTable" />, ，，该值指示是否保留在当前更改 <see langword="DataTable" />。
            </summary>
      <param name="table">
        <see langword="DataTable" /> 要与当前合并 <see langword="DataTable" />。
              </param>
      <param name="preserveChanges">
        <see langword="true" />, 保留在当前更改 <see langword="DataTable" />; 否则为 <see langword="false" />。<see langword="" /></param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>
              合并指定 <see cref="T:System.Data.DataTable" /> 与当前 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 要与当前合并 <see cref="T:System.Data.DataTable" />。
              </param>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>
              获取或设置此表的初始起始大小。
            </summary>
      <returns>
              在此表的行中初始起始大小。
               默认值为 50。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>
              获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              命名空间 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>
              创建一个新 <see cref="T:System.Data.DataRow" /> 具有与表相同的架构。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> 相同的架构与 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>
              返回的数组<see cref="T:System.Data.DataRow" />。
            </summary>
      <param name="size">
                A<see cref="T:System.Int32" />值，该值描述数组的大小。
              </param>
      <returns>
              新数组。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>
              从现有的行创建一个新行。
            </summary>
      <param name="builder">
                一个 <see cref="T:System.Data.DataRowBuilder" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> 派生的类。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.ColumnChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
            </summary>
      <param name="pcevent">
                包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>
              通知 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataColumn" /> 正被删除。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 被删除。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.RowChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.RowDeleting" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.TableCleared" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.TableClearing" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.DataTable.TableNewRow" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。
              </param>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>
              获取为此父关系的集合 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataRelationCollection" /> ，包含表的父关系。
               如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" /> 存在的对象。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>
              获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              前缀 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>
              获取或设置列的数组该函数为数据表为主键。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataColumn" /> 对象数组。
            </returns>
      <exception cref="T:System.Data.DataException">
                  该密钥是外键。
                </exception>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                从派生的对象。 <see cref="T:System.IO.Stream" /></param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 将用于读取数据。
              </param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 从指定的文件。
            </summary>
      <param name="fileName">
                从中读取数据文件的名称。
              </param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>
              将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 将用于读取数据。
              </param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>
              读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 使用指定的流。
            </summary>
      <param name="stream">
                用来读取该架构的流。
              </param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>
              读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 用于读取架构信息。
              </param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>
              读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 从指定的文件。
            </summary>
      <param name="fileName">
                从中进行读取架构信息文件的名称。
              </param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>
              读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 用于读取架构信息。
              </param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>
              从 XML 流中读取。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>
              回滚对表自加载后或从上次所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" /> 调用。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>
              获取或设置序列化格式。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SerializationFormat" /> 枚举指定 <see langword="Binary" /> 或 <see langword="Xml" /> 序列化。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>
              重置 <see cref="T:System.Data.DataTable" /> 到其原始状态。
               重置中删除所有数据、 索引、 关系和表的列。
               如果数据集包含一个数据表，该表表重置之后仍可将数据集的一部分。
            </summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>
              在成功更改 <see cref="T:System.Data.DataRow" /> 后发生。
            </summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>
              发生时 <see cref="T:System.Data.DataRow" /> 正在更改。
            </summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>
              已删除表中的行后发生。
            </summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>
              要删除表中的行之前发生。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>
              获取属于此表的行的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataRowCollection" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 对象; 否则为空值如果没有 <see cref="T:System.Data.DataRow" /> 存在的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>
              获取所有的数组 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> 对象数组。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>
              获取所有的数组 <see cref="T:System.Data.DataRow" /> 与筛选条件匹配的对象。
            </summary>
      <param name="filterExpression">
                要用于筛选的行的条件。
                 有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> 对象数组。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>
              获取所有的数组 <see cref="T:System.Data.DataRow" /> 相匹配的筛选条件，在指定的排序顺序中的对象。
            </summary>
      <param name="filterExpression">
                要用于筛选的行的条件。
                 有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
              </param>
      <param name="sort">
                一个字符串，指定的列和排序方向。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataRow" /> 匹配筛选器表达式的对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>
              获取所有的数组 <see cref="T:System.Data.DataRow" /> 排序顺序的筛选器匹配指定的状态相匹配的对象。
            </summary>
      <param name="filterExpression">
                要用于筛选的行的条件。
                 有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
              </param>
      <param name="sort">
                一个字符串，指定的列和排序方向。
              </param>
      <param name="recordStates">
        <see cref="T:System.Data.DataViewRowState" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataRow" /> 对象数组。
            </returns>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>
              获取或设置 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.ComponentModel.ISite" />。
            </summary>
      <returns>
              用于 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>
              之后，将会 <see cref="T:System.Data.DataTable" /> 被清除。
            </summary>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>
              发生时 <see cref="T:System.Data.DataTable" /> 被清除。
            </summary>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>
              获取或设置 <see cref="T:System.Data.DataTable" /> 的名称。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的名称。
            </returns>
      <exception cref="T:System.ArgumentException">
                  传入 <see langword="null" /> 或空字符串 ("")，此表属于一个集合。
                </exception>
      <exception cref="T:System.Data.DuplicateNameException">
                  该表属于一个集合，该集合已包含同名的表。
                   （比较区分大小写）。
                </exception>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>
              当新时发生 <see cref="T:System.Data.DataRow" /> 插入。
            </summary>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>
              获取 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" />, ，如果有另一个用作的串联字符串。
            </summary>
      <returns>
              组成的字符串 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的文件的 XML。
            </summary>
      <param name="fileName">
                要向其写入的 XML 数据文件。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
               若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于写入的文档。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
               若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="stream">
                数据将写入的流。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于写入的文档。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用来写入的内容。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="fileName">
                数据将写入的文件的名称。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的文件的 XML。
               若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="fileName">
                要向其写入的 XML 数据文件。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于写入的文档。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>
              通过指定的 <see cref="T:System.IO.TextWriter" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。
               若要保存的数据的表及其所有子代，设置<paramref name="writeHierarchy" />参数<see langword="true" />。
            </summary>
      <param name="writer">
                用于写入内容的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <param name="writeHierarchy">
                如果<see langword="true" />，写入当前表及其所有子代的内容。
                 如果<see langword="false" />（默认值），将当前表的数据写入。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
            </summary>
      <param name="stream">
                数据将写入的流。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
               若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于写入的文档。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用来写入的内容。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>
              将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />。
               编写该架构，请设置的值为 <paramref name="mode" /> 参数 <see langword="WriteSchema" />。
               若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="fileName">
                数据将写入的文件的名称。
              </param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>
              通过指定的 <see cref="T:System.IO.TextWriter" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。
            </summary>
      <param name="writer">
                用于写入内容的 <see cref="T:System.IO.TextWriter" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                数据将写入的流。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.IO.Stream" />。
               若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="stream">
                数据将写入的流。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的内容。
                 如果 <see langword="false" /> （默认值），写入当前表的数据。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用其进行写。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的文件。
            </summary>
      <param name="fileName">
                要使用的文件的名称。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                要使用的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的流。
               若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="stream">
                XML 架构将写入的流。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的架构。
                 如果 <see langword="false" /> （默认值），写入当前表的架构。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />。
               若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用其进行写。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的架构。
                 如果 <see langword="false" /> （默认值），写入当前表的架构。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />。
               若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于写入的文档。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的架构。
                 如果 <see langword="false" /> （默认值），写入当前表的架构。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的文件。
               若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 <see langword="true" />。
            </summary>
      <param name="fileName">
                要使用的文件的名称。
              </param>
      <param name="writeHierarchy">
                如果 <see langword="true" />, ，写入当前表及其所有子代的架构。
                 如果 <see langword="false" /> （默认值），写入当前表的架构。
              </param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>
              写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的流。
            </summary>
      <param name="stream">
                XML 架构将写入的流。
              </param>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。
            </summary>
      <returns>
        <see langword="true" /> 如果集合是一套 <see cref="T:System.Collections.IList" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。
            </summary>
      <returns>
               一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。
            </returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。
            </summary>
      <param name="reader">
                XmlReader。
              </param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。
            </summary>
      <param name="writer">
                XmlWriter。
              </param>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>
              将提供数据供 <see cref="M:System.Data.DataTable.Clear" /> 方法。
            </summary>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>
              初始化 <see cref="T:System.Data.DataTableClearEventArgs" /> 类的新实例。
            </summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 正在清除其行。
              </param>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>
              获取正在清除其行的表。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 正在清除其行。
            </returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>
              获取正在清除其行的表名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，该值指示表名。
            </returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>
              获取正在清除其行的表的命名空间。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，该值指示命名空间名称。
            </returns>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>
              表示用于处理的方法 <see cref="M:System.Data.DataTable.Clear" /> 方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。
              </param>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>
              指定 SQL Server 特定数据类型的字段、 属性，用于 <see cref="T:System.Data.SqlClient.SqlParameter" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />。
               64 位带符号整数。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。
               固定长度流，范围在 1 到 8000 个字节之间的二进制数据。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />。
               无符号的数字值，可为 0，1，或 <see langword="null" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />。
               范围在 1 到 8000 个字符之间的非 Unicode 字符固定长度流。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>
              日期数据，从 1 月的值范围为 1，1 AD 到公元 9999 年 12 月 31 日。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />。
               日期和时间数据，值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒到 9999。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>
              日期和时间数据。
               日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
               时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>
              时区的日期和时间数据。
               日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
               时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
               时区值范围是-14:00 至 + 14:00。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />。
               固定的精度和小数位数之间的数值范围为-10 38 -1 和 10 38 -1。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />。
               浮点数，范围在-1.79 e + 308 到 1.79 e + 308 之间。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。
               范围从 0 到 2 的二进制数据的长度可变的流 31 -1 （或者 2147483647） 字节。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />。
               32 位带符号整数。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />。
               货币值，范围从-2 63 （即-9223372036854775808） 到 2 63 -1 （或 9223372036854775807），精确到货币单位的万分之一。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />。
               范围在 1 到 4000 个字符之间的 Unicode 字符的固定长度流。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />。
               最大长度为 2 Unicode 数据的长度可变的流 30 -1 （或者 1073741823） 个字符。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />。
               范围在 1 到 4000 个字符之间的 Unicode 字符长度可变的流。
               如果字符串大于 4000 个字符，隐式转换将失败。
               使用字符串长度超过 4000 个字符时，请显式设置对象。
               使用 <see cref="F:System.Data.SqlDbType.NVarChar" /> 数据库列时 <see langword="nvarchar(max)" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />。
               浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />。
               数值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日精度为一分钟的日期和时间数据。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />。
               16 位带符号整数。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />。
               一个范围从-214，748.3648 到 +214,748.3647，精确到货币单位的万分之一的货币值。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>
              用于指定包含在表值参数中的结构化的数据的特殊数据类型。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />。
               最大长度为 2 的非 Unicode 数据的变量长度流 31 -1 （或者 2147483647） 个字符。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>
              基于 24 小时制时间数据。
               时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
               对应于 SQL Server <see langword="time" /> 值。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。
               自动生成二进制数字，保证在数据库中是唯一。
              <see langword="timestamp" /> 通常用作为表行加版本戳的机制。
               存储大小为 8 个字节。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />。
               8 位无符号整数。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>
              一个 SQL Server 用户定义类型 (UDT)。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />。
               全局唯一标识符 （或 GUID） 中。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。
               范围在 1 到 8000 个字节之间的二进制数据长度可变的流。
               如果字节数组大于 8000 个字节，隐式转换将失败。
               在使用字节数组大于 8000 个字节时，请显式设置对象。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />。
               范围在 1 到 8000 个字符之间的非 Unicode 字符长度可变的流。
               使用 <see cref="F:System.Data.SqlDbType.VarChar" /> 数据库列时 <see langword="varchar(max)" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />。
               可以包含数值的特殊数据类型，字符串、 二进制文件中，或日期数据，以及 SQL Server 值的空和 Null，这将假定如果没有其他声明类型。
            </summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>
              XML 值。
               获取将 XML 作为字符串使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 属性，或指定为 <see cref="T:System.Xml.XmlReader" /> 通过调用 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> 方法。
            </summary>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>
              所有 <see cref="N:System.Data.SqlTypes" /> 对象，而结构实现 <see langword="INullable" /> 接口。
            </summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>
              指示结构是否为 null。
               此属性是只读的。
            </summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
        <see langword="true" /> 如果此对象的值为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。
            </summary>
      <param name="message">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。
            </summary>
      <param name="message">
                要在引发异常时显示的字符串。
              </param>
      <param name="e">
                对内部异常的引用。
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>
              表示要在存储中或从数据库中检索二进制数据的长度可变的流。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性设置为提供的字节数组的内容。
            </summary>
      <param name="value">
                要存储或检索的字节数组。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              串联两个指定 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> x 的串联的值和 y。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象并返回对其相对值的指示。
            </summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较的这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是小于的对象。
                    
                      零 
                    
                      这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是对象相同。
                    
                      大于零 
                    
                      这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是否大于对象。
                    
                      - 或 - 
                    
                      该对象为 null 引用。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象传递给所提供的对象并返回对其相对值的指示。
            </summary>
      <param name="value">
                与此比较的对象 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是小于的对象。
                    
                      零 
                    
                      这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是对象相同。
                    
                      大于零 
                    
                      这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是否大于对象。
                    
                      - 或 - 
                    
                      该对象为 null 引用。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              串联的值 <paramref name="x" /> 和 <paramref name="y" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlBinary" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>
              指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构是否为 null。
               此属性是只读的。
            </summary>
      <returns>
              如果是 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>
              获取从单字节 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性整数参数指示的位置位于 <paramref name="index" />。
               如果 <paramref name="index" /> 指示超出末尾的字节数组中，位置 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 将会引发。
               此属性是只读的。
            </summary>
      <param name="index">
                要检索的字节的位置。
              </param>
      <returns>
              由整数参数指示的位置处的字节。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  该属性为只读时 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />
                
                  - 或 - 
                
                  <paramref name="index" /> 参数指示的位置超过字节数组的长度，如中所示 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性。
                </exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>
              获取用字节表示长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性。
               此属性是只读的。
            </summary>
      <returns>
              中的二进制数据的长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性为只读时 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数，以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              串联的值 <paramref name="x" /> 和 <paramref name="y" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构 <see cref="T:System.Byte" /> 数组。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
        <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
              </param>
      <returns>
              要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>
              将转换的字节数组到 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
      <param name="x">
                要转换的字节数组。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，它表示转换后的字节数组。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>
              将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 到 <see cref="T:System.Data.SqlTypes.SqlGuid" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与字符串。
            </summary>
      <returns>
              一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。
               如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 为的 null 则字符串将包含"null"。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>
              获取的值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性只读的属性时包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>
              表示一个整数值，为 1 或 0，则存储在或者从数据库中检索。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，使用提供的布尔值。
            </summary>
      <param name="value">
                为新值 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构; 两个 <see langword="true" /> 或 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，使用指定的整数值。
            </summary>
      <param name="value">
                其值是要用于新的整数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              计算两个指定的按位与运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              逻辑与运算的结果。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>
              获取的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 字节形式的结构。
            </summary>
      <returns>
              一个字节表示的值的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象并返回对其相对值的指示。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 要比较对象，则为 null 引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
              </param>
      <returns>
              有符号的数字，该值指示此实例和值的相对值。
            
                      值 
                    
                      描述 
                    
                      负整数 
                    
                      此实例小于 <paramref name="value" />。
                    
                      零 
                    
                      此实例等于 <paramref name="value" />。
                    
                      正整数 
                    
                      此实例大于 <paramref name="value" />。
                    
                      - 或 - 
                    
                      <paramref name="value" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构与指定对象并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较对象，则为 null 引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
              </param>
      <returns>
              有符号的数字，该值指示此实例和值的相对值。
            
                      值 
                    
                      描述 
                    
                      负整数 
                    
                      此实例小于 <paramref name="value" />。
                    
                      零 
                    
                      此实例等于 <paramref name="value" />。
                    
                      正整数 
                    
                      此实例大于 <paramref name="value" />。
                    
                      - 或 - 
                    
                      <paramref name="value" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>
              表示一个 false 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 的第一个实例是否大于第二个实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 的第一个实例是否大于或等于第二个实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>
              指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see langword="Value" /> 是 <see langword="False" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为空; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>
              指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see langword="Value" /> 是 <see langword="True" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 如果第一个实例小于第二个实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 如果第一个实例小于或等于第二个实例，; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>
              表示一个值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>
              执行对一个值的求补运算对提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              二进制反码所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              计算两个指定的按位与运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              逻辑与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              计算其操作数的按位 OR。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              逻辑或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是否相等。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              执行按位异或 (XOR) 运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              逻辑异或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为布尔值。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将转换。
              </param>
      <returns>
              一个布尔值设置为 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>
              False 运算符可以用于测试 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定是否为 false。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以进行测试。
              </param>
      <returns>
              返回 <see langword="true" /> 所提供的参数是否 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 false， <see langword="false" /> 否则为。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 的第一个实例是否大于第二个实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 的第一个实例是否大于或等于第二个实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>
              提供的字节将值转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <param name="x">
                要转换为一个字节值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值，该值包含 0 或 1。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定它们是否不相等。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 如果第一个实例小于第二个实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see langword="true" /> 如果第一个实例小于或等于第二个实例，; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>
              对执行 NOT 运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 上执行非运算。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 与 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /><see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 参数是否为 true， <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> 如果参数为空，并且 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 否则为。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>
              执行对一个值的求补运算对提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              二进制反码所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>
              True 运算符可以用于测试 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定其是否为 true。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以进行测试。
              </param>
      <returns>
              返回 <see langword="true" /> 所提供的参数是否 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 true， <see langword="false" /> 否则为。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              执行按位或运算，对两个指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值为按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>
              将指定 <see cref="T:System.String" /> 到一个逻辑值的表示形式及其 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 等效。
            </summary>
      <param name="s">
                要转换的 <see cref="T:System.String" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其中包含已分析的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />, ，新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 1。
               否则为新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" /> 新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 1。
               否则为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" /> 新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 1。
               否则为新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see langword="SqlInt16" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" /> 新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值为 1。
               否则为新 <see langword="SqlInt16" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see langword="SqlInt32" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />, ，新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值为 1。
               否则为新 <see langword="SqlInt32" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see langword="SqlInt64" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />, ，新 <see cref="T:System.Data.SqlTypes.SqlInt64" />  结构的值为 1。
               否则为新 <see langword="SqlInt64" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />, ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 1。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="false" />, ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值不是 1 或 0，新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值为 1 或 0。
            
              如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 1; 否则为新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>
              将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为 1 或 0。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，那么 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 1。
               否则，新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为字符串的结构。
            </summary>
      <returns>
              一个字符串，包含的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
               如果值为 null，则字符串将包含"null"。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>
              表示一个 true 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
            </summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>
              获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值。
               此属性是只读的。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  该属性设置为 null。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              逻辑异或运算的结果。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>
              表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />实例的属性<see cref="T:System.Data.SqlTypes.SqlBoolean" />结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter " />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>
              表示一个 8 位无符号的整数，0 和 255 之间，范围中要存储中或从数据库中检索。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，使用指定的字节值。
            </summary>
      <param name="value">
                要存储在一个字节值 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性的新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see langword="Value" /> 属性包含添加的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              按位与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>
              将与所提供的此实例进行比较 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象并返回对其相对值的指示。
            </summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象进行比较。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>
              将与所提供的此实例进行比较 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null，则 <see langword="SqlByte" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>
              比较提供 <see cref="T:System.Object" /> 参数 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>
              获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>
              一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>
              一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              将两个划分 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值并返回余数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。
              </param>
      <returns>
              得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含相乘的积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>
              二进制反码运算符执行按位码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含与补数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含两个操作数之和。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              按位与运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              按位或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              按位异或运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
        <see langword="SqlString" /> 类的实例。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性是否等于所表示的数字值 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see langword="SqlMoney" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see langword="SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 到字节的结构。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为一个字节。
              </param>
      <returns>
              其值等于一个字节 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see langword="SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>
              提供的字节将值转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <param name="x">
                要转换为一个字节值 <see cref="T:System.Data.SqlTypes.SqlByte" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              比较两个实例<see cref="T:System.Data.SqlTypes.SqlByte" />以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              A<see cref="T:System.Data.SqlTypes.SqlBoolean" />即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果任一实例<see cref="T:System.Data.SqlTypes.SqlByte" />为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />的<see cref="T:System.Data.SqlTypes.SqlBoolean" />将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含其余部分。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              计算两个产品 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含相乘的积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>
              二进制反码运算符执行按位码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含与补数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 为其等效的 8 位无符号整数的数字表示形式。
            </summary>
      <param name="s">
        <see langword="String" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其中包含所表示的 8 位数字 <see langword="String" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个 <see langword="SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个 <see langword="SqlDouble" /> 具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个 <see langword="SqlInt16" /> 具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个 <see langword="SqlInt32" /> 具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个 <see langword="SqlInt64" /> 结构人员 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个 <see langword="SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个 <see langword="SqlSingle" /> 具有相同的结构 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 如下 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>
              将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 到 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see langword="SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" />。
               如果 <see langword="Value" /> 为 null， <see langword="String" /> 将是一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>
              获取的值 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
               此属性是只读的
            </summary>
      <returns>
              值 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
              执行按位异或运算对提供的参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              异或运算的结果。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>
              表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlByte.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlByte" />结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter " />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>
              表示可变的引用类型包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" />。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类根据指定的字节数组。
            </summary>
      <param name="buffer">
                无符号字节的数组。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类根据指定 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类根据指定 <see cref="T:System.IO.Stream" /> 值。
            </summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。
              </param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>
              返回对内部缓冲区的引用。
            </summary>
      <returns>
              返回对内部缓冲区的引用。
               有关 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> ，该值指示指定的 XSD <see langword="XmlSchemaSet" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>
              获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null， <see langword="false" /> 否则为。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>
              获取或设置 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的指定索引位置。
            </summary>
      <param name="offset">
                一个 <see cref="T:System.Int64" /> 值。
              </param>
      <returns>
              一个 <see cref="T:System.Byte" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>
              获取包含中的值的长度<see cref="T:System.Data.SqlTypes.SqlBytes" />实例。
            </summary>
      <returns>
              A<see cref="T:System.Int64" />值，该值表示中包含的值的长度<see cref="T:System.Data.SqlTypes.SqlBytes" />实例。
            
              如果没有缓冲区，对该实例可用，或者如果值为 null，则返回-1。
            
              返回<see cref="P:System.IO.Stream.Length" />流包装的实例。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>
              获取此的内部缓冲区的值的最大长度 <see cref="T:System.Data.SqlTypes.SqlBytes" />。
            </summary>
      <returns>
              Long 值表示的值的内部缓冲区的最大长度。
               则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlBytes" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>
              返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlBytes" />。
            </summary>
      <returns>
              返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" /> 返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              将字节复制从此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 到缓冲区中传递的实例，并返回复制的字节数。
            </summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
              </param>
      <param name="buffer">
                要将复制到的字节数组缓冲区。
              </param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。
              </param>
      <param name="count">
        <see cref="T:System.Int32" /> 表示的字节数要复制的整数。
              </param>
      <returns>
        <see cref="T:System.Int64" /> 表示的数的长整型值复制字节。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>
              设置此长度 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
            </summary>
      <param name="value">
        <see cref="T:System.Int64" /> 长时间值表示长度。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>
              完成这一设置 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例为 null。
            </summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>
              返回有关的存储状态信息 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>
              获取或设置此数据 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 以流的形式。
            </summary>
      <returns>
              包含 SqlBytes 数据的流。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>
              构造并返回 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 从此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 从此实例。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>
              返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlBytes" />。
            </summary>
      <returns>
              此值 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 作为字节数组。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              将从传入的缓冲区的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
            </summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
              </param>
      <param name="buffer">
                要将复制到的字节数组缓冲区。
              </param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。
              </param>
      <param name="count">
        <see cref="T:System.Int32" /> 表示的字节数要复制的整数。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              获取序列化信息，其中包含重新实例化此所需的所有数据 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。
            </summary>
      <param name="info">
                用序列化信息填充的对象。
              </param>
      <param name="context">
                序列化的目标上下文。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 是可变的引用类型包装 <see cref="T:System.Char" /> 数组或 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类根据指定的字符数组。
            </summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 数组。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类根据指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 值。
            </summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>
              返回对内部缓冲区的引用。
            </summary>
      <returns>
              返回对内部缓冲区的引用。
               有关 <see cref="T:System.Data.SqlTypes.SqlChars" /> 在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>
              获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>
              获取或设置 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的指定索引位置。
            </summary>
      <param name="offset">
                一个 <see cref="T:System.Int64" /> 值。
              </param>
      <returns>
              一个 <see cref="T:System.Char" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>
              获取中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Int64" /> 值，该值指示以字符为单位中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
            
              如果没有缓冲区可用的实例，或者如果值为 null，则返回-1。
            
              返回 <see cref="P:System.IO.Stream.Length" /> 流包装的实例。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>
              获取内部缓冲区可以容纳的值的双字节字符中的最大长度。
            </summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值表示双字节字符的值的内部缓冲区的最大长度。
            
              则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlChars" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>
              返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlChars" />。
            </summary>
      <returns>
              返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" /> 返回 <see langword="true" />。
               有关详细信息，请参阅处理 Null 值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符复制从此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 到缓冲区中传递的实例，并返回复制的字符数。
            </summary>
      <param name="offset">
        <see cref="T:System.Int64" />
        <see langword="long" /> 值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
              </param>
      <param name="buffer">
                若要将复制到指定字符数组缓冲区。
              </param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。
              </param>
      <param name="count">
        <see cref="T:System.Int32" /> 整数值，表示要复制的字符数。
              </param>
      <returns>
        <see cref="T:System.Int64" />
        <see langword="long" /> 表示版本号的值复制字节。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>
              设置此长度 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
            </summary>
      <param name="value">
        <see cref="T:System.Int64" />
        <see langword="long" /> 表示长度值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>
              完成这一设置 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例为 null。
            </summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>
              返回有关的存储状态信息 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例传递给它的等效项 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 此类型表示形式。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>
              返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlChars" />。
            </summary>
      <returns>
              此值 <see cref="T:System.Data.SqlTypes.SqlChars" /> 作为一个字符数组。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              将从传入的缓冲区的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
            </summary>
      <param name="offset">
                一个 <see langword="long" /> 值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
              </param>
      <param name="buffer">
                若要将复制到指定字符数组缓冲区。
              </param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。
              </param>
      <param name="count">
        <see cref="T:System.Int32" /> 表示的字符数要复制的整数。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              获取序列化信息，其中包含重新实例化此所需的所有数据 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。
            </summary>
      <param name="info">
                用序列化信息填充的对象。
              </param>
      <param name="context">
                序列化的目标上下文。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>
              指定的比较选项值 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>
              指定的排序应基于字符的数字值而不是其字母数字值。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>
              执行二进制排序。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>
              指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略大小写。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>
              指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略假名类型。
               假名类型是指表示日语中的语音的日语平假名和片假名字符。
               平假名用于本机日语表达式和单词，而片假名用于从"计算机"或"Internet"等其他语言借用的词语。
               拼音声音可以表示在平假名和片假名。
               如果选择此值，则一种声音的平假名字符视为相等的同一个声音的片假名字符。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>
              指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略非空格组合字符，如标注字符。
               Unicode 标准定义为与基的字符，以生成新的字符组合的字符组合字符。
               非空格组合字符不在呈现时本身使用字符空间。
               有关非空格组合字符有关的详细信息，请参阅 http://www.unicode.org Unicode 标准。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>
              指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略字符宽度。
               例如，日语的片假名字符可以写为全角或半角，并且如果选择此值，则片假名字符的全角形式被视为等同于编写的半角字符相同。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>
              指定的默认选项设置 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较。
            </summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>
              表示数值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒要存储中或从数据库中检索到 9999 的日期和时间数据。
              <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构都有其对应的.NET Framework 类型，从不同的基础数据结构 <see cref="T:System.DateTime" />, ，该类型可表示 12:00:00 AM 之间任何时间 0001 年 1 月 1 日和 11:59:59 PM 12/31/9999，100 纳秒的准确性。
              <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实际上都存储到 00:00:00 AM 的相对差值 1900 年 1 月 1 日。
               因此，从转换"00:00:00 AM 1/1/1900年"为整数，则将返回 0。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用指定 <see cref="T:System.DateTime" /> 值。
            </summary>
      <param name="value">
                一个 <see langword="DateTime" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用提供的参数。
            </summary>
      <param name="dayTicks">
                一个整数值，表示为刻度数的日期。
              </param>
      <param name="timeTicks">
                一个整数值，表示为刻度数的时间。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日。
            </summary>
      <param name="year">
                一个整数，表示的年份的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="month">
                表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="day">
                一个整数值，表示新的天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟和第二个新的结构。
            </summary>
      <param name="year">
                一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="month">
                表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="day">
                一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="hour">
                一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="minute">
                一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="second">
                一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫秒，新的结构。
            </summary>
      <param name="year">
                一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="month">
                表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="day">
                一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="hour">
                一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="minute">
                一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="second">
                一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="millisecond">
                一个 double 值，表示最新的毫秒 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫新结构。
            </summary>
      <param name="year">
                一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="month">
                表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="day">
                一个整数值，表示新的一天 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="hour">
                一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="minute">
                一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="second">
                一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="bilisecond">
                一个整数值表示毫第二个） 的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>
              添加 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 到指定 <see langword="TimeSpan" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。
              </param>
      <param name="t">
                一个 <see langword="Timespan" /> 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，并返回对其相对值的指示。
            </summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构进行比较。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。
                    
                      零 
                    
                      此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 相同。
                    
                      大于零 
                    
                      此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
                    
                      - 或 - 
                    
                      <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为空引用 (<see langword="Nothing " />在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 与所提供的结构 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 为 Visual Basic)。
                    </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>
              获取表示此日期的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
      <returns>
              表示日期中包含的计时周期数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  当 <see langword="Value" /> 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 安全以及需要两个相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>
              获取此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>
              表示的最大有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>
              表示的最小有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              执行逻辑比较的两个实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>
              添加由所提供的时间内 <see cref="T:System.TimeSpan" /> 参数， <paramref name="t" />, ，与所提供 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="t">
                一个 <see cref="T:System.TimeSpan" /> 结构。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。
               如果任一参数为 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />, ，新 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <see cref="T:System.DateTime" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.DateTime" /> 对象，其 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性包含相同的日期和时间值 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性所提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于的日期和时间，由表示 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see langword="Value" /> 新创建的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>
              将转换 <see cref="T:System.DateTime" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
      <param name="value">
                一个 <see langword="DateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 是否等同于合并 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性所提供的 <see cref="T:System.DateTime" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              执行逻辑比较的两个实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>
              中减去提供 <see cref="T:System.TimeSpan" /> 结构， <paramref name="t" />, ，所提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
              </param>
      <param name="t">
                一个 <see cref="T:System.TimeSpan" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它表示减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>
              将指定 <see cref="T:System.String" /> 日期和时间表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 等效。
            </summary>
      <param name="s">
        <see langword="string" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构等于的日期和时间指定表示 <see langword="string" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>
              其值为等效于一小时的刻度数的常数。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>
              一个常数，其值是等效为一分钟的刻度数。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>
              其值为等效于 1 秒的刻度数的常数。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>
              中减去指定 <see langword="Timespan" /> 从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实例。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。
              </param>
      <param name="t">
                一个 <see langword="Timespan" /> 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>
              获取表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </summary>
      <returns>
              表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see langword="SqlString" /> 其值是一个字符串，表示日期和时间的结构是否包含在此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个 <see langword="String" /> 表示 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>
              获取的值<see cref="T:System.Data.SqlTypes.SqlDateTime" />结构。
               此属性是只读的。
            </summary>
      <returns>
              此值<see cref="T:System.Data.SqlTypes.SqlDateTime" />结构。
            </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                  当 <see langword="Value" /> 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter " />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>
              表示数值之间-10 ^38 + 1 和 10 ^38-1，具有固定的精度和小数位数。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用所提供 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="value">
        <see cref="T:System.Decimal" /> 值存储为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的双精度型参数。
            </summary>
      <param name="dVal">
                双精度，这表示的值为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的整数值。
            </summary>
      <param name="value">
                提供的整数值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的长整型值。
            </summary>
      <param name="value">
                提供的长整型值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的参数。
            </summary>
      <param name="bPrecision">
                最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="bScale">
                小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="fPositive">
                一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构表示正数或负数。
              </param>
      <param name="bits">
                提供的新值的 128 位无符号的整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的参数。
            </summary>
      <param name="bPrecision">
                最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="bScale">
                小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="fPositive">
                一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构表示正数或负数。
              </param>
      <param name="data1">
                一个 32 位无符号的整数，它将结合 data2、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。
              </param>
      <param name="data2">
                一个 32 位无符号的整数，它将结合 data1、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。
              </param>
      <param name="data3">
                一个 32 位无符号的整数，它将结合 data1、 data2 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。
              </param>
      <param name="data4">
                一个 32 位无符号的整数，它将结合 data1、 data2 和 data3 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>
              Abs 方法获取数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </summary>
      <param name="n">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该无符号的数值表示数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              计算两个总和 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 运算符。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含的总和。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>
              小数位数为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数将调整为数字参数指示的数字个数。
               根据 fRound 参数的值，值将被舍入到相应的数字或截断。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构来进行调整。
              </param>
      <param name="digits">
                调整后的结构中的数字个数。
              </param>
      <param name="fRound">
                如果此参数为 <see langword="true" />, ，新值将舍入，如果 <see langword="false" />, ，则该值将被截断。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含调整后的数字。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>
              获取此值的二进制表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 作为字节数组的结构。
            </summary>
      <returns>
              一个包含二进制表示形式的字节数组 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>
              返回大于或等于指定的最小整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为其上限值进行计算。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 表示最小整数大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 对象并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>
              值调整 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数指定的精度和小数位数。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值进行调整。
              </param>
      <param name="precision">
                新的精度 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="scale">
                新的小数位数 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数中指定其值已调整到的精度和小数位数的结构。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>
              获取的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 作为一个整数数组的结构。
            </summary>
      <returns>
              整数数组，其中包含的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              除法运算符计算除以第一个结果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>
              比较提供 <see cref="T:System.Object" /> 参数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
        <see langword="true" /> 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 和两个是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
               如果任一实例为 null、 的值 <see langword="SqlDecimal" /> 将为 null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>
              指定将舍入 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 数字到下一个较小的整数。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为其最小值是要计算的结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含此的整数部分 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>
              指示是否此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>
              指示是否 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是大于零。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 赋 null 值。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>
              一个常数，表示的最大可能值为 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 属性。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>
              一个常数，表示的最大值 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 属性。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>
              一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>
              一个常数，表示最小值为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含相乘的积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />类。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              计算两个总和 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 运算符。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含的总和。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              除法运算符计算除以第一个结果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换 <see cref="T:System.Double" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Double" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值等于值的 <see cref="T:System.Double" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Decimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see langword="Decimal" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 操作数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Int64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Int64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于的值 <see cref="T:System.Int64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换 <see cref="T:System.Decimal" /> 值赋给 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
        <see cref="T:System.Decimal" /> 要转换的值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于的值 <see langword="Decimal" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> SqlDecimal 的结构。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 到结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" /></summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含相乘的积。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              计算的结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 从第一个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 Value 属性包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>
              一元减运算符求反 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
            </summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 要求反的结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值包含求反的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等效。
            </summary>
      <param name="s">
        <see langword="String" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等效于包含的值中指定 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>
              引发指定的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的指定指数幂。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 要乘幂的结构。
              </param>
      <param name="exp">
                双精度值，该值指示数应乘到其中的幂。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它包含的结果。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>
              获取用于表示的数字的最大数目 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。
            </summary>
      <returns>
              用来表示的数字的最大数 <see langword="Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>
              获取最接近指定的数字 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值与指定的精度。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构要舍入。
              </param>
      <param name="position">
                返回值中的有效小数位数 （精度） 数。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含舍入运算的结果。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>
              获取到的小数位数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 得到解决。
            </summary>
      <returns>
              小数位数数 <see langword="Value" /> 属性是否已解决。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>
              获取一个值，表示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 其符号的计算结果的结构。
              </param>
      <returns>
              一个数字，指示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>
              计算的结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 从第一个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 Value 属性包含该减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>
              返回的内容的双精度等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的此实例的属性。
            </summary>
      <returns>
              十进制表示形式 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 为非零; <see langword="false" /> 如果零; 否则为 Null。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see langword="Value" /> 等于 <see langword="Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
               如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值是 <see langword="true" />, 、 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 1。
               否则为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 0。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值一个字符串，表示在此所包含的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.String" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.String" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>
              将截断指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值与您希望的位置。
            </summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构被截断。
              </param>
      <param name="position">
                数字将被截断的十进制位置。
              </param>
      <returns>
              提供一个负值 <paramref name="position" /> 为了截断到小数点左侧的相应位置的值的参数。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>
              获取的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              范围-79228162514264337593543950335 到 79,228,162,514,162,514,264,337,593,543,950,335 内的数字。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see langword="XmlSchema" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see langword="XmlReader " />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see langword="XmlWriter " />
      </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>
              表示一个浮点数字中范围在-1.79 e + 308 到 1.79 e + 308 之间要存储中或从数据库中检索。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构提供的双精度型参数用于设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性。
            </summary>
      <param name="value">
                一个双精度值，其值将用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              加法运算符计算这两个和 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              这两个 sum <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>
              比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。
            </summary>
      <param name="value">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              一个有符号的数字，指示实例和对象的相对值。
            
                      返回值 
                    
                      条件 
                    
                      小于零 
                    
                      此实例是早于该对象。
                    
                      零 
                    
                      此实例与对象相同。
                    
                      大于零 
                    
                      此实例大于对象 
                    
                      - 或 - 
                    
                      该对象为空引用 (<see langword="Nothing " />在 Visual Basic 中)。
                    </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其中包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>
              将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 对象。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              对两个实例执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>
              返回此哈希代码 <see cref="T:System.Data.SqlTypes.SqlDouble" /> structre。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaSet">
                一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
              一个 <see langword="string" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>
              返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例为 null。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 null。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>
              一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
            </summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>
              一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否不等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>
              表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              加法运算符计算这两个和 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              这两个 sum <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其中包含除法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              对两个实例执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
        <see langword="true" /> 如果两个值是否相等。
               否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是 0 或 1，具体取决于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为双精度值的结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              Double 等效于指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于所表示的数字的值 <see cref="T:System.Data.SqlTypes.SqlString" />。
               如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换为所提供的双精度值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                要转换的双精度值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 与指定的双精度型参数的值相同。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 是 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 是 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 是 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 是 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 是 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>
              将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。
               如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 是 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否不相等。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于或等于第二个。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。
               否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。
               如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              减法运算符第二个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 从第一个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>
              返回求反后的指定值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其中包含的相反的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>
              将转换 <see cref="T:System.String" /> 为它的等效双精度浮点数的数字表示形式。
            </summary>
      <param name="s">
        <see langword="String" /> 要进行分析。
              </param>
      <returns>
              一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> ，其中包含所表示的值 <see langword="String" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
              减法运算符第二个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 从第一个操作数。
            </summary>
      <param name="x">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <param name="y">
                一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
              </param>
      <returns>
              减法运算的结果。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。
            </summary>
      <returns>
              一个 <see langword="SqlBoolean" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为非零 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为零和 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。
            </summary>
      <returns>
              一个 <see langword="SqlByte" /> 结构，它的 <see langword="Value" /> 等于 <see langword="Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。
            </summary>
      <returns>
              一个新 <see langword="SqlDecimal" /> 它的已转换的值等于此舍入的值的结构 <see langword="SqlDouble" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see langword="Value" /> 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see langword="Value" /> 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see langword="Value" /> 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。
            </summary>
      <returns>
              一个新 <see langword="SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 是否等于此值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。
            </summary>
      <returns>
              一个新 <see langword="SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。
            </summary>
      <returns>
              一个 <see langword="SqlString" /> 表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>
              将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为字符串的结构。
            </summary>
      <returns>
              一个字符串，表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" />。
            </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>
              获取的值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
               此属性是只读的。
            </summary>
      <returns>
              值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。
            </returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>
              表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlDouble.Value" />实例的属性<see cref="T:System.Data.SqlTypes.SqlDouble" />结构。
            </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              使用.NET Framework 的 XML 架构。
            </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。
              </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>
              指定相对于查询内使用的参数类型 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>
              该参数为输入参数。
            </summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>
              该参数是支持的输入和输出。
            </summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>
              该参数为输出参数。
            </summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>
              该参数表示从某操作（如存储过程、内置函数或用户定义的函数）返回的值。
            </summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>
              表示可添加到的属性的集合 <see cref="T:System.Data.DataColumn" />, ，<see cref="T:System.Data.DataSet" />, ，或 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和给定序列化流的目标。
              </param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>
              创建 <see cref="T:System.Data.PropertyCollection" /> 对象的浅表副本。
            </summary>
      <returns>
              返回 <see cref="T:System.Object" />, 的浅表副本 <see cref="T:System.Data.PropertyCollection" /> 对象。
            </returns>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>
              表示在尝试更改只读列的值时引发的异常。
            </summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ReadOnlyException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.ReadOnlyException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>
              表示当您尝试上执行操作时引发的异常 <see cref="T:System.Data.DataRow" /> 未处于 <see cref="T:System.Data.DataTable" />。
            </summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.RowNotInTableException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.RowNotInTableException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.Rule">
      <summary>
              指示所发生的操作时 <see cref="T:System.Data.ForeignKeyConstraint" /> 强制执行。
            </summary>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>
              删除或更新相关的行。
               这是默认设置。
            </summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>
              对相关行执行任何操作。
            </summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>
              中包含的值的相关行中设置值 <see cref="P:System.Data.DataColumn.DefaultValue" /> 属性。
            </summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>
              对相关行中设置值 <see langword="DBNull" />。
            </summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>
              表示类型化的架构的序列化模式 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>
              将跳过架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>
              包括架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />。
               默认值。
            </summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>
              指定如何处理现有的架构映射，在执行时 <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 操作。
            </summary>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>
              将任何现有的表映射应用于传入的架构。
               配置 <see cref="T:System.Data.DataSet" /> 用转换的架构。
            </summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>
              忽略任何 DataAdapter 上的一个表映射。
               配置 <see cref="T:System.Data.DataSet" /> 使用传入的架构，而不应用任何转换。
            </summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>
              确定的序列化格式 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>
              将序列化为二进制内容。
               在仅 ADO.NET 2.0 中可用。
            </summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>
              将序列化为 XML 内容。
               默认值。
            </summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>
              提供 .NET Framework 数据提供程序的状态更改事件数据。
            </summary>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>
              新实例初始化 <see cref="T:System.Data.StateChangeEventArgs" /> 类，在给定的原始状态和该对象的当前状态。
            </summary>
      <param name="originalState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。
              </param>
      <param name="currentState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。
              </param>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>
              获取连接的新状态。
               连接对象将事件激发时已处于新建状态。
            </summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>
              获取连接的原始状态。
            </summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。
            </returns>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。
              </param>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>
              为提供附加信息 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件。
            </summary>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>
              创建 <see cref="T:System.Data.StatementCompletedEventArgs" /> 类的新实例。
            </summary>
      <param name="recordCount">
                指示导致的语句所影响的行数 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />  事件发生。
              </param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>
              指示导致的语句所影响的行数 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生。
            </summary>
      <returns>
              受影响的行数。
            </returns>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
              事件处理程序委托类型 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                事件的数据。
              </param>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>
              指定要使用的 SQL 查询的类型 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />, ，<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />, ，<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />, ，或 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 类。
            </summary>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>
              SQL 查询，批语句。
            </summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>
              SQL 查询是 DELETE 语句。
            </summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>
              是一条 INSERT 语句的 SQL 查询。
            </summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>
              是由 SELECT 语句的 SQL 查询。
            </summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>
              是一条 UPDATE 语句的 SQL 查询。
            </summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>
              则会引发该异常通过强类型化 <see cref="T:System.Data.DataSet" /> 当用户访问 <see langword="DBNull" /> 值。
            </summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.StrongTypingException" /> 类，具有指定的字符串。
            </summary>
      <param name="message">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.StrongTypingException" /> 类使用指定的序列化信息和流上下文。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。
              </param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.StrongTypingException" /> 使用指定的字符串和内部异常的类。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
      <param name="innerException">
                对内部异常的引用。
              </param>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>
              表示时，将引发的异常 <see cref="P:System.Data.DataColumn.Expression" /> 属性 <see cref="T:System.Data.DataColumn" /> 包含语法错误。
            </summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的特定序列化的流。
              </param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>
              表示对一组列中所有值必须都是唯一的限制。
            </summary>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>
              使用指定的 <see cref="T:System.Data.UniqueConstraint" /> 初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 与给定的数组类 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="columns">
                数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 类 <see cref="T:System.Data.DataColumn" /> 要约束和指定约束是否为主键的值。
            </summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。
              </param>
      <param name="isPrimaryKey">
        <see langword="true" /> 若要指示约束是主键;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 使用数组类 <see cref="T:System.Data.DataColumn" /> 对象，如果要限制和一个值，指定约束是否为主键。
            </summary>
      <param name="columns">
                一个数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。
              </param>
      <param name="isPrimaryKey">
        <see langword="true" /> 若要指示约束是主键;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 类具有指定名称和 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <param name="name">
                约束的名称。
              </param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 带有指定的名称和构成的数组类 <see cref="T:System.Data.DataColumn" /> 对象。
            </summary>
      <param name="name">
                约束的名称。
              </param>
      <param name="columns">
                数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 初始化具有指定名称 <see cref="T:System.Data.DataColumn" /> 要约束和指定约束是否为主键的值。
            </summary>
      <param name="name">
                约束的名称。
              </param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。
              </param>
      <param name="isPrimaryKey">
        <see langword="true" /> 若要指示约束是主键;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 初始化具有指定名称的数组 <see cref="T:System.Data.DataColumn" /> 对象，如果要限制和一个值，指定约束是否为主键。
            </summary>
      <param name="name">
                约束的名称。
              </param>
      <param name="columns">
                一个数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。
              </param>
      <param name="isPrimaryKey">
        <see langword="true" /> 若要指示约束是主键;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 初始化具有指定名称的数组 <see cref="T:System.Data.DataColumn" /> 对象，如果要限制和一个值，指定约束是否为主键。
            </summary>
      <param name="name">
                约束的名称。
              </param>
      <param name="columnNames">
                一个数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。
              </param>
      <param name="isPrimaryKey">
        <see langword="true" /> 若要指示约束是主键;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>
              获取此约束影响的列的数组。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.DataColumn" /> 对象数组。
            </returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>
              比较此约束到一秒钟，以确定是否两者均相同。
            </summary>
      <param name="key2">
                与此对象 <see cref="T:System.Data.UniqueConstraint" /> 进行比较。
              </param>
      <returns>
        <see langword="true" />, 如果约束相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>
              获取此实例的哈希代码 <see cref="T:System.Data.UniqueConstraint" /> 对象。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>
              获取一个值，该值指示在主键上为该约束。
            </summary>
      <returns>
        <see langword="true" />, 如果约束是对主键;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>
              获取此约束所属的表。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 约束所属。
            </returns>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>
              指定如何将查询命令结果应用于正在更新的行。
            </summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>
              输出参数和返回的第一行映射到已更改的行中 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>
              返回的第一行中的数据映射到已更改的行中 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>
              忽略任何返回的参数或行。
            </summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>
              输出参数映射到已更改的行中 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>
              指定有关当前和其余行期间要执行的操作 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。
            </summary>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 可以继续处理的行。
            </summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>
              事件处理程序会报告更新应被视为错误。
            </summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>
              当前行和所有剩余行将不会更新。
            </summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>
              当前行并不是进行更新。
            </summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>
              表示当尝试返回的版本时引发的异常 <see cref="T:System.Data.DataRow" /> 已被删除。
            </summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类，具有指定的字符串。
            </summary>
      <param name="s">
                要在引发异常时显示的字符串。
              </param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Data.VersionNotFoundException" /> 用序列化信息的类。
            </summary>
      <param name="info">
                要序列化或反序列化对象所需的数据。
              </param>
      <param name="context">
                源和目标的指定的序列化流的说明。
              </param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>
              指定如何读取 XML 数据和关系架构读入 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>
              默认。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>
              读取 DiffGram，将更改应用到的 DiffGram 从 <see cref="T:System.Data.DataSet" />。
               语义是相同的 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作。
               与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作， <see cref="P:System.Data.DataRow.RowState" /> 会保留值。
               输入到 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> 使用 Diffgram 应仅获取使用从输出 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 以 diffgram 形式。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>
              读取 XML 片段，例如那些通过执行针对 SQL Server 实例的 FOR XML 查询生成。
               当 <see cref="T:System.Data.XmlReadMode" /> 设置为 <see langword="Fragment" />, ，默认命名空间将读取内联架构。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>
              忽略任何内联架构并将数据读入现有的 <see cref="T:System.Data.DataSet" /> 架构。
               如果任何数据与现有架构不匹配，则会丢弃 (包括来自不同的命名空间为定义的数据 <see cref="T:System.Data.DataSet" />)。
               如果数据为 DiffGram， <see langword="IgnoreSchema" /> 具有相同的功能 <see langword="DiffGram" />。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>
              忽略任何内联架构，推断的数据的架构并加载数据。
               如果 <see cref="T:System.Data.DataSet" /> 已包含架构，通过添加新表或向现有表添加列来扩展当前架构。
               如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>
              忽略任何内联架构、 推断强类型化的数据，从架构并加载数据。
               如果从数据，不能推断出类型，它被解释为字符串数据。
               如果 <see cref="T:System.Data.DataSet" /> 已经包含一个架构已扩展当前架构，通过添加新表或通过将列添加到现有的表。
               如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。
            </summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>
              读取内联架构并加载数据。
               如果 <see cref="T:System.Data.DataSet" /> 已经包含架构，新表可能会添加到架构，但是如果中已存在内联架构中的任何表，将引发异常 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>
              指定如何编写 XML 数据和从一个关系架构 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>
              以 DiffGram 形式编写整个 <see cref="T:System.Data.DataSet" />，包括原始值和当前值。
               若要生成一个 DiffGram，它包含只会更改值，请调用 <see cref="M:System.Data.DataSet.GetChanges" />, ，然后调用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 对返回 DiffGram 形式 <see cref="T:System.Data.DataSet" />。
            </summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataSet" /> 作为 XML 数据，而无需 XSD 架构。
               如果没有数据加载到 <see cref="T:System.Data.DataSet" />, ，则写入任何内容。
            </summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>
              当前的内容写入 <see cref="T:System.Data.DataSet" /> 以与关系结构作为内联 XSD 架构的 XML 数据形式。
               如果 <see cref="T:System.Data.DataSet" /> 只有架构不包含数据，编写仅内联架构。
               如果 <see cref="T:System.Data.DataSet" /> 未没有当前的架构，则不写入任何内容。
            </summary>
    </member>
    <member name="T:System.DBNull">
      <summary>
              表示不存在的值。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>
              返回一个空字符串 (<see cref="F:System.String.Empty" />)。
            </summary>
      <returns>
              空字符串 (<see cref="F:System.String.Empty" />)。
            </returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>
              返回使用指定一个空字符串 <see cref="T:System.IFormatProvider" />。
            </summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 要用于设置返回值的格式。
              
                - 或 - 
              
                <see langword="null" /> 若要获取从操作系统的当前区域设置的格式信息。
              </param>
      <returns>
              一个空字符串 (<see cref="F:System.String.Empty" />)。
            </returns>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>
              表示的唯一实例<see cref="T:System.DBNull" />类。
            </summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>
              表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源的一组 SQL 命令和一个数据库连接。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DataAdapter" /> 从同一类型的现有对象的类。
            </summary>
      <param name="from">
                一个 <see cref="T:System.Data.Common.DataAdapter" /> 用来创建新对象 <see cref="T:System.Data.Common.DataAdapter" />。
              </param>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上调用 <see cref="T:System.Data.DataRow" /> 添加到后 <see cref="T:System.Data.DataTable" /> 期间的任何 填充 操作。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上调用 <see cref="T:System.Data.DataRow" />; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>
              获取或设置是否 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>
              创建的此实例的副本 <see cref="T:System.Data.Common.DataAdapter" />。
            </summary>
      <returns>
              克隆的实例 <see cref="T:System.Data.Common.DataAdapter" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>
              获取或设置一个值，指定是否生成错误时出现的异常在过程中遇到的行更新。
            </summary>
      <returns>
        <see langword="true" /> 若要继续而不会生成异常，则此更新否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>
              创建一个新的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。
            </summary>
      <returns>
              新的表映射集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Data.Common.DataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>
              添加或刷新中行 <see cref="T:System.Data.DataSet" /> 以匹配数据源中。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>
              添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" /> 名称和指定 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <param name="dataTable">
                一个 <see cref="T:System.Data.DataTable" /> 要用记录填充。
              </param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
              添加或刷新指定范围中的集合中的行 <see cref="T:System.Data.DataTable" /> 要与数据源中匹配的对象。
            </summary>
      <param name="dataTables">
                一套 <see cref="T:System.Data.DataTable" /> 要用记录填充的对象。
              </param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。
              </param>
      <param name="startRecord">
                起始记录的从零开始索引。
              </param>
      <param name="maxRecords">
                一个整数，指示最大记录数。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
              添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充。
              </param>
      <param name="srcTable">
                指示源表的名称的字符串。
              </param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。
              </param>
      <param name="startRecord">
                起始记录的从零开始索引。
              </param>
      <param name="maxRecords">
                一个整数，指示最大记录数。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>
              当在填充操作期间出错时返回。
            </summary>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>
              获取或设置 <see cref="T:System.Data.LoadOption" /> ，它确定适配器的填充方式 <see cref="T:System.Data.DataTable" /> 从 <see cref="T:System.Data.Common.DbDataReader" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.LoadOption" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>
              添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataTable" /> 通过填充 <see cref="T:System.Data.IDataReader" />。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 要用作数据源填充时 <see cref="T:System.Data.DataTable" />。
              </param>
      <returns>
              一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>
              添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" /> 和配置架构的架构以匹配数据源中根据指定 <see cref="T:System.Data.SchemaType" />。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要填充数据源中的架构。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 从数据源返回的对象，其中包含架构信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>
              添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 通过填充 <see cref="T:System.Data.IDataReader" />。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 要用作数据源填充时 <see cref="T:System.Data.DataTable" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> 从数据源返回的对象，其中包含架构信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>
              获取在执行 SQL SELECT 语句时由用户设置的参数。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.IDataParameter" /> 由用户来设置包含的参数的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>
              指示是否 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 已创建。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 已创建; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>
              确定当传入的数据没有匹配的表或列时要执行的操作。
            </summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
               默认值为 <see langword="Passthrough" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" /> 值。
                </exception>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>
              确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" /> 架构与传入的数据不匹配。
            </summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
               默认值为 <see langword="Add" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>
              在过程中出现错误时调用 <see langword="Fill" />。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Data.FillErrorEventArgs" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>
              重置 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 到其默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> 遵守 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />。
            </summary>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>
              获取或设置是否 <see langword="Fill" /> 方法应返回提供程序特定值或常见符合 cls 的值。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see langword="Fill" /> 方法应返回提供程序特定的值; 否则为 <see langword="false" /> 返回常见符合 cls 的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>
              确定是否 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 应保持。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性是持久的; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>
              确定是否 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 应保持。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性是持久的; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>
              确定是否有一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象都存在以及应保留。
            </summary>
      <returns>
        <see langword="true" /> 如果一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 存在的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>
              获取一个集合，它提供了源表之间的主映射的 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />。
               默认值为空集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>
              对于每个插入、 更新或删除了行中指定调用相应的 INSERT、 UPDATE 或 DELETE 语句 <see cref="T:System.Data.DataSet" /> 从 <see cref="T:System.Data.DataTable" /> 名为"Table"。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 用于更新数据源。
              </param>
      <returns>
              从已成功更新的行数 <see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>
              指示如何将源表映射到数据集表。
            </summary>
      <returns>
              一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />。
               默认值为空集合。
            </returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>
              包含继承的对象的一般列映射 <see cref="T:System.Data.Common.DataAdapter" />。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类具有指定的源列名称和 <see cref="T:System.Data.DataSet" /> 要映射到列名称。
            </summary>
      <param name="sourceColumn">
                数据源的区分大小写的列名称。
              </param>
      <param name="dataSetColumn">
                列名称不区分大小写，从 <see cref="T:System.Data.DataSet" /> 映射到。
              </param>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>
              获取或设置中的列名称 <see cref="T:System.Data.DataSet" /> 映射到。
            </summary>
      <returns>
              中的数据列的名称 <see cref="T:System.Data.DataSet" /> 映射到。
               名称不区分大小写。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
              获取 <see cref="T:System.Data.DataColumn" /> 从给定 <see cref="T:System.Data.DataTable" /> 使用 <see cref="T:System.Data.MissingSchemaAction" /> 和 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" /> 属性。
            </summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 要从中获取列。
              </param>
      <param name="dataType">
        <see cref="T:System.Type" /> 的数据列。
              </param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
      <returns>
              数据列。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
              静态版本 <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> 可以无需实例化调用 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
            </summary>
      <param name="sourceColumn">
                数据源的区分大小写的列名称。
              </param>
      <param name="dataSetColumn">
                列名称不区分大小写，从 <see cref="T:System.Data.DataSet" /> 映射到。
              </param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。
              </param>
      <param name="dataType">
                正在映射的列的数据类型。
              </param>
      <param name="schemaAction">
                确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" /> 架构与传入的数据不匹配。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataColumn" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>
              获取或设置数据源从映射中的列的名称。
               名称是区分大小写。
            </summary>
      <returns>
              区分大小写的数据源中的列名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>
              将当前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名称为字符串。
            </summary>
      <returns>
              当前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 作为字符串名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>
              创建作为当前实例副本的新对象。
            </summary>
      <returns>
              当前对象的副本。
            </returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>
              包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的集合。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>
              创建一个空的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>
              将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象添加到集合中。
            </summary>
      <param name="value">
                一个 <see langword="DataColumnMapping" /> 要添加到集合对象。
              </param>
      <returns>
              索引 <see langword="DataColumnMapping" /> 添加到集合的对象。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>
              添加 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象传递给该集合在给定源列名称和 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="sourceColumn">
                要映射到的源列的名称区分大小写。
              </param>
      <param name="dataSetColumn">
                该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要映射到列。
              </param>
      <returns>
        <see langword="DataColumnMapping" /> 添加到集合的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>
              将指定的元素复制 <see cref="T:System.Array" /> 到集合的末尾。
            </summary>
      <param name="values">
                要添加到集合中的 <see cref="T:System.Array" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>
              将指定的元素复制 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组转换为集合的末尾。
            </summary>
      <param name="values">
                数组 <see cref="T:System.Data.Common.DataColumnMapping" /> 要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>
              从集合中删除所有 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象与给定 <see cref="T:System.Object" /> 集合中存在。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" />。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMapping" /> 集合中存在具有给定的源列名称的对象。
            </summary>
      <param name="value">
                区分大小写的源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象与指定的源列名称; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 到指定的数组。
            </summary>
      <param name="array">
        <see cref="T:System.Array" /> 要向其复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 元素。
              </param>
      <param name="index">
                数组的起始索引。
              </param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 到指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组。
            </summary>
      <param name="array">
                一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 要复制到数组 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 元素。
              </param>
      <param name="index">
                中的从零开始索引 <paramref name="array" /> 复制开始处。
              </param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>
              获取的数 <see cref="T:System.Data.Common.DataColumnMapping" /> 集合中的对象。
            </summary>
      <returns>
              集合中项的数目。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>
              获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="value">
                该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要查找列。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 列名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>
              获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 指定 <see cref="T:System.Data.Common.DataColumnMappingCollection" />, ，源列名称和 <see cref="T:System.Data.MissingMappingAction" />。
            </summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。
              </param>
      <param name="sourceColumn">
                要查找的区分大小写的源列名称。
              </param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 <see langword="Error" />, ，且未指定任何映射。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>
              返回的静态方法 <see cref="T:System.Data.DataColumn" /> 对象而无需实例化 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。
            </summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。
              </param>
      <param name="sourceColumn">
                数据源的区分大小写的列名称。
              </param>
      <param name="dataType">
                正在映射的列的数据类型。
              </param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。
              </param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
              </param>
      <param name="schemaAction">
                决定时要采取的操作现有 <see cref="T:System.Data.DataSet" /> 架构与传入的数据不匹配。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataColumn" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>
              获取遍历该集合的枚举器可循环访问。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>
              获取的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的源列名称。
            </summary>
      <param name="sourceColumn">
                区分大小写的源列的名称。
              </param>
      <returns>
              从零开始的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定区分大小写的源列名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>
              获取指定的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 在集合中。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 来查找。
              </param>
      <returns>
              指定的从零开始的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 在集合中。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>
              获取指定的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 与给定 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="dataSetColumn">
                名称，它不区分大小写，要查找的数据集列。
              </param>
      <returns>
              指定的从零开始的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 与给定 <see langword="DataSet" /> 列名称，或者为-1 <see langword="DataColumnMapping" /> 集合中不存在对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>
              在 <see cref="T:System.Data.Common.DataColumnMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。
            </summary>
      <param name="index">
                要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。
              </param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>
              在 <see cref="T:System.Data.Common.DataColumnMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。
            </summary>
      <param name="index">
                要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。
              </param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
              </param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DataColumnMapping" /> 的指定索引处的对象。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.Data.Common.DataColumnMapping" /> 要查找对象。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 中指定索引处的对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。
            </summary>
      <param name="sourceColumn">
                区分大小写的源列的名称。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.Common.DataColumnMapping" />。
            </summary>
      <param name="value">
                要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>
              删除 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 集合中。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 中删除。
              </param>
      <exception cref="T:System.InvalidCastException">
                  指定的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的对象不在集合中。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>
              删除 <see cref="T:System.Data.Common.DataColumnMapping" /> 与从该集合的指定索引的对象。
            </summary>
      <param name="index">
                要移除的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的索引（从零开始）。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  有没有 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定索引的对象。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>
              删除 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的源列名称从集合对象。
            </summary>
      <param name="sourceColumn">
                区分大小写的源列名称。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  有没有 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。
                </exception>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.IList" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>
              添加 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象传递给 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 通过使用源列和 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="sourceColumnName">
                区分大小写的源列的名称。
              </param>
      <param name="dataSetColumnName">
                名称 <see cref="T:System.Data.DataSet" /> 列。
              </param>
      <returns>
              ColumnMapping 对象，该对象添加到集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>
              获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的对象 <see cref="T:System.Data.DataSet" /> 列名称。
            </summary>
      <param name="dataSetColumnName">
                该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要查找列。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的对象 <see cref="T:System.Data.DataSet" /> 列名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>
              获取或设置 <see cref="T:System.Data.IColumnMapping" /> 对象具有指定 <see langword="SourceColumn" /> 名称。
            </summary>
      <param name="index">
                元素的索引。
              </param>
      <returns>
        <see langword="IColumnMapping" /> 对象具有指定 <see langword="SourceColumn" /> 名称。
            </returns>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>
              包含源表与 <see cref="T:System.Data.DataTable" /> 之间的映射关系的说明。
               此类由 <see cref="T:System.Data.Common.DataAdapter" /> 在填充 <see cref="T:System.Data.DataSet" /> 时使用。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 给定源名称和一个与源类 <see cref="T:System.Data.DataTable" /> 名称。
            </summary>
      <param name="sourceTable">
                数据源的区分大小写的源表名称。
              </param>
      <param name="dataSetTable">
                中的表名称 <see cref="T:System.Data.DataSet" /> 映射到。
              </param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类时提供源表名称， <see cref="T:System.Data.DataTable" /> 名称，以及数组 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。
            </summary>
      <param name="sourceTable">
                数据源的区分大小写的源表名称。
              </param>
      <param name="dataSetTable">
                中的表名称 <see cref="T:System.Data.DataSet" /> 映射到。
              </param>
      <param name="columnMappings">
                一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象数组。
              </param>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>
              获取 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              数据列映射集合。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>
              获取或设置中的表名称 <see cref="T:System.Data.DataSet" />。
            </summary>
      <returns>
              中的表名称 <see cref="T:System.Data.DataSet" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>
              获取 <see cref="T:System.Data.DataColumn" /> 从指定 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Data.MissingMappingAction" /> 值和名称 <see cref="T:System.Data.DataColumn" />。
            </summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。
              </param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
              </param>
      <returns>
              数据列。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 <see langword="Error" />, ，且未指定任何映射。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>
              返回 <see cref="T:System.Data.DataColumn" /> 给定的列名称的对象。
            </summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。
              </param>
      <param name="dataType">
                数据类型为 <paramref name="sourceColumn" />。
              </param>
      <param name="dataTable">
                中的表名称 <see cref="T:System.Data.DataSet" /> 映射到。
              </param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
              </param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataColumn" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>
              获取当前 <see cref="T:System.Data.DataTable" /> 指定 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Data.MissingSchemaAction" /> 值。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要从其中获取 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。
              </param>
      <returns>
              构造函数。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>
              获取或设置从数据源的区分大小写的源表名称。
            </summary>
      <returns>
              数据源的区分大小写的源表名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>
              将当前 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称为字符串。
            </summary>
      <returns>
              当前 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称作为一个字符串。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>
              获取派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 为 <see cref="T:System.Data.DataTable" />。
            </summary>
      <returns>
              数据列映射集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>
              创建作为当前实例副本的新对象。
            </summary>
      <returns>
              当前实例副本的新对象。
            </returns>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象的集合。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 类的新实例。
               此新实例为空，也就是说，它不尚未包含任何 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>
              添加 <see cref="T:System.Object" /> ，它是表映射到集合。
            </summary>
      <param name="value">
                一个 <see langword="DataTableMapping" /> 要添加到集合对象。
              </param>
      <returns>
              索引 <see langword="DataTableMapping" /> 对象添加到集合。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  传入的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>
              添加 <see cref="T:System.Data.Common.DataTableMapping" /> 对象传递给集合时提供源表名称和 <see cref="T:System.Data.DataSet" /> 表名。
            </summary>
      <param name="sourceTable">
                要从映射的源表的区分大小写的名称。
              </param>
      <param name="dataSetTable">
                该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要映射到表。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 添加到集合的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>
              将指定的元素复制 <see cref="T:System.Array" /> 到集合的末尾。
            </summary>
      <param name="values">
        <see cref="T:System.Array" /> 要添加到集合的值。
              </param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>
              将指定的元素复制 <see cref="T:System.Data.Common.DataTableMapping" /> 数组转换为集合的末尾。
            </summary>
      <param name="values">
                数组 <see cref="T:System.Data.Common.DataTableMapping" /> 要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>
              从集合中删除所有 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>
              获取一个值，该值指示是否给定 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中存在的对象。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataTableMapping" />。
              </param>
      <returns>
        <see langword="true" /> 如果此集合包含指定 <see cref="T:System.Data.Common.DataTableMapping" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中存在具有指定的源的表名称的对象。
            </summary>
      <param name="value">
                区分大小写的源的表名称包含 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果集合包含 <see cref="T:System.Data.Common.DataTableMapping" /> 对象与此源表名; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 到指定的数组。
            </summary>
      <param name="array">
        <see cref="T:System.Array" /> 要向其复制 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素。
              </param>
      <param name="index">
                数组的起始索引。
              </param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Data.Common.DataTableMapping" /> 到指定的数组。
            </summary>
      <param name="array">
                一个 <see cref="T:System.Data.Common.DataTableMapping" /> 要向其复制 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素。
              </param>
      <param name="index">
                数组的起始索引。
              </param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>
              获取的数 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中的对象。
            </summary>
      <returns>
              数 <see langword="DataTableMapping" /> 集合中的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>
              获取 <see cref="T:System.Data.Common.DataTableMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 表名。
            </summary>
      <param name="dataSetTable">
                该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 表，以查找。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 表名。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>
              获取遍历该集合的枚举器可循环访问。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>
              获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象使用指定的源的表名和 <see cref="T:System.Data.DataSet" /> 表名称、 使用给定 <see cref="T:System.Data.MissingMappingAction" />。
            </summary>
      <param name="tableMappings">
        <see cref="T:System.Data.Common.DataTableMappingCollection" /> 要搜索的集合。
              </param>
      <param name="sourceTable">
                区分大小写映射的源表的名称。
              </param>
      <param name="dataSetTable">
                该名称，不区分大小写，所映射的 <see cref="T:System.Data.DataSet" /> 表。
              </param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 <see langword="Error" />, ，且未指定任何映射。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>
              获取指定的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 在集合中的对象。
            </summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataTableMapping" /> 要查找对象。
              </param>
      <returns>
              指定的从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 在集合中的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>
              获取的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。
            </summary>
      <param name="sourceTable">
                区分大小写的源表的名称。
              </param>
      <returns>
              从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>
              获取的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 表名。
            </summary>
      <param name="dataSetTable">
                该名称，不区分大小写的 <see langword="DataSet" /> 表，以查找。
              </param>
      <returns>
              从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象与给定 <see cref="T:System.Data.DataSet" /> 表名称，则为-1，如果 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中不存在对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>
              在 <see cref="T:System.Data.Common.DataTableMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 对象。
            </summary>
      <param name="index">
                要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。
              </param>
      <param name="value">
                要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>
              在 <see cref="T:System.Data.Common.DataTableMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 对象。
            </summary>
      <param name="index">
                要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。
              </param>
      <param name="value">
                要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DataTableMapping" /> 的指定索引处的对象。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.Data.Common.DataTableMapping" /> 要返回对象。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 中指定索引处的对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。
            </summary>
      <param name="sourceTable">
                区分大小写的源表的名称。
              </param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
            </summary>
      <param name="value">
                要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
            </summary>
      <param name="value">
                要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
      <exception cref="T:System.InvalidCastException">
                  指定的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的对象不在集合中。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>
              删除 <see cref="T:System.Data.Common.DataTableMapping" /> 对象位于集合中的指定索引处。
            </summary>
      <param name="index">
                要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的索引（从零开始）。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在具有指定的索引。
                </exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>
              删除 <see cref="T:System.Data.Common.DataTableMapping" /> 具有指定的源的表名称从集合对象。
            </summary>
      <param name="sourceTable">
                若要查找区分大小写的源表名称。
              </param>
      <exception cref="T:System.IndexOutOfRangeException">
                  一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在使用指定的源的表名。
                </exception>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.IList" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的集合中的项。
            </summary>
      <param name="index">
                要获取或设置项的从零开始索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>
              将表映射添加到集合。
            </summary>
      <param name="sourceTableName">
                区分大小写的源表的名称。
              </param>
      <param name="dataSetTableName">
                名称 <see cref="T:System.Data.DataSet" /> 表。
              </param>
      <returns>
              对新映射的引用 <see cref="T:System.Data.ITableMapping" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>
              获取具有指定的 TableMapping 对象 <see cref="T:System.Data.DataSet" /> 表名。
            </summary>
      <param name="dataSetTableName">
                名称 <see langword="DataSet" /> 在集合中的表。
              </param>
      <returns>
              使用指定的 TableMapping 对象 <see langword="DataSet" /> 表名。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>
              获取或设置的实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称。
            </summary>
      <param name="index">
        <see langword="SourceTable" /> 名称 <see cref="T:System.Data.ITableMapping" />。
              </param>
      <returns>
              实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 <see langword="SourceTable" /> 名称。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbColumn">
      <summary>
              表示数据源中的列。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbColumn.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbColumn" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbColumn.AllowDBNull">
      <summary>
              获取可为 null 的布尔值，该值指示此列中是否允许 <see langword="DBNull" /> 值，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列中是否允许 <see langword="DBNull" /> 值，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列中允许 <see langword="DBNull" /> 值，则返回 <see langword="true" />，否则，返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseCatalogName">
      <summary>
              获取与数据源关联的目录；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为目录名称或 <see langword="null" />。
            </summary>
      <returns>
              与数据源关联的目录名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseColumnName">
      <summary>
              获取列名称；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为列名称或 <see langword="null" />。
            </summary>
      <returns>
              基列名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseSchemaName">
      <summary>
              获取与数据源关联的架构；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为架构名称或 <see langword="null" />。
            </summary>
      <returns>
              与数据源关联的架构名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseServerName">
      <summary>
              获取与列关联的服务器名称；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为服务器名称或 <see langword="null" />。
            </summary>
      <returns>
              与列关联的服务器名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseTableName">
      <summary>
              获取架构中的表名称；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为表名称或 <see langword="null" />。
            </summary>
      <returns>
              架构中的表名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnName">
      <summary>
              获取列的名称。
               在派生类中重写时，可设置为列名称。
            </summary>
      <returns>
              列的名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnOrdinal">
      <summary>
              获取数据源行中的列位置（序号）；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="int32" /> 值（用于指定列位置）或 <see langword="null" />。
            </summary>
      <returns>
              表示列序号的 <see langword="int32" /> 值；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnSize">
      <summary>
              获取列大小；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="int32" /> 值（用于指定列大小）或 <see langword="null" />。
            </summary>
      <returns>
              表示列大小的 <see langword="int32" /> 值；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataType">
      <summary>
              获取列中存储的数据的类型。
               在派生类中重写时，可设置为表示列中数据类型的 <see cref="T:System.Type" /> 对象。
            </summary>
      <returns>
              表示列中包含的数据类型的 <see cref="T:System.Type" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataTypeName">
      <summary>
              获取数据类型的名称；否则，如果未设置任何值，则为 <see langword="null" />。
               在派生类中重写时，可设置为数据类型名称或 <see langword="null" />。
            </summary>
      <returns>
              数据类型的名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAliased">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否具有别名，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否具有别名，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列具有别名，则返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAutoIncrement">
      <summary>
              获取可为 null 的布尔值，该值指示此列中的值是否自动递增，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列中的值是否自动递增，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列中的值自动递增，则返回 <see langword="true" />，否则，返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsExpression">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否是表达式，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是表达式，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列是表达式，将返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsHidden">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否被隐藏，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否被隐藏，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列被隐藏，则返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsIdentity">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否是标识，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是标识，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列是标识，将返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsKey">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否是密钥，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是密钥，也可以设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列是密钥，则返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsLong">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否包含长数据，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否包含长数据，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列包含长数据，则返回 <see langword="true" />；否则，返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsReadOnly">
      <summary>
              获取可为 null 的布尔值，该值指示此列是否是只读的，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是只读的，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果此列为只读，则返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsUnique">
      <summary>
              获取可为 null 的布尔值，该值指示唯一约束是否适用于此列，或者在未设置任何值时返回 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示唯一约束是否适用于此列，也可设置为 <see langword="null" />（在 Visual Studio 中为 <see langword="Nothing" />）。
            </summary>
      <returns>
              如果唯一约束适用于此列，返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.Item(System.String)">
      <summary>
              获取基于列属性名称的对象。
            </summary>
      <param name="property">
                列属性名称。
              </param>
      <returns>
              基于列属性名称的对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericPrecision">
      <summary>
              获取列数据的数值精度，否则在未设置任何值时为 <see langword="null" />。
               在派生类中重写时，可设置为 <see langword="int32" /> 值（用于指定列数据的数值精度）或 <see langword="null" />。
            </summary>
      <returns>
              如果数据是数值，则为指定列数据精度的 <see langword="int32" /> 值，否则在未设置任何值时为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericScale">
      <summary>
              获取可为 null 的 <see langword="int32" /> 值，该值将返回 <see langword="null" /> 或列数据的数值范围。
               在派生类中重写时，可设置为 <see langword="null" /> 或 <see langword="int32" /> 值（用于表示列数据的数值范围）。
            </summary>
      <returns>
              如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）；否则，在数据是数值时，为指定列数据范围的 <see langword="int32" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.UdtAssemblyQualifiedName">
      <summary>
              获取表示列中数据类型的 <see cref="T:System.Type" /> 对象的程序集限定名称，否则，在未设置任何值时为 <see langword="null" />。
               在派生类中重写时，可设置为程序集限定名称或 <see langword="null" />。
            </summary>
      <returns>
              表示列中数据类型的 <see cref="T:System.Type" /> 对象的程序集限定名称，否则，在未设置任何值时为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>
              表示要对数据源执行的 SQL 语句或存储过程。
               提供表示命令的数据库特定类的基类。
              <see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>
              构造一个实例 <see cref="T:System.Data.Common.DbCommand" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>
              尝试取消执行 <see cref="T:System.Data.Common.DbCommand" />。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>
              获取或设置要对数据源运行的文本命令。
            </summary>
      <returns>
              要执行的文本命令。
               默认值为空字符串 ("")。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>
              获取或设置在终止尝试执行命令并生成错误之前的等待时间。
            </summary>
      <returns>
              等待命令执行所需的时间（以秒为单位）。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>
              指示或指定了 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 属性将被解释。
            </summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。
               默认值为 <see langword="Text" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>
              获取或设置此 <see cref="T:System.Data.Common.DbConnection" /> 使用的 <see cref="T:System.Data.Common.DbCommand" />。
            </summary>
      <returns>
              与数据源的连接。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>
              创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>
              创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>
              获取或设置此 <see cref="T:System.Data.Common.DbConnection" /> 使用的 <see cref="T:System.Data.Common.DbCommand" />。
            </summary>
      <returns>
              与数据源的连接。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>
              获取的集合 <see cref="T:System.Data.Common.DbParameter" /> 对象。
            </summary>
      <returns>
              SQL 语句或存储的过程的参数。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>
              获取或设置 <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> 中此 <see cref="T:System.Data.Common.DbCommand" /> 对象执行。
            </summary>
      <returns>
              .NET Framework 数据提供程序的命令对象在其中执行的事务。
               默认值为空引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>
              获取或设置一个值，该值指示命令对象是否应在一个自定义的界面控件中可见。
            </summary>
      <returns>
        <see langword="true" />, 如果命令对象应会显示在控件;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.Dispose">
    </member>
    <member name="M:System.Data.Common.DbCommand.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>
              执行针对连接的命令文本。
            </summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 的一个实例。
              </param>
      <returns>
              表示该操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个无效的 <see cref="T:System.Data.CommandBehavior" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
              提供程序应实现此方法以提供一个非默认实现来 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 重载。
            
              默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> 方法，并返回已完成的任务，阻止调用线程。
               如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
               通过返回的任务异常属性，将向由 ExecuteReader 引发的异常。
            
              此方法接受可用于请求要提前取消的操作的取消标记。
               实现可能会忽略此请求。
            </summary>
      <param name="behavior">
                语句执行和数据检索的选项。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个无效的 <see cref="T:System.Data.CommandBehavior" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>
              执行 SQL 语句对连接对象。
            </summary>
      <returns>
              受影响的行数。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>
              这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />。
               提供程序应使用适当的实现重写。
               （可选） 被忽略的取消标记。
            
              默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 方法，并返回已完成的任务，阻止调用线程。
               如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
                引发的异常 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 将向您提供通过返回的任务异常属性。
            
              不调用其他方法和属性的 <see langword="DbCommand" /> 对象，直到返回的任务已完成。
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />, ，它在执行 SQL 语句对连接对象。
            
              调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。
            </summary>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>
              执行 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" />, ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
              执行 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" />, ，并返回 <see cref="T:System.Data.Common.DbDataReader" /> 使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。
            </summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>
              异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />, ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。
            
              调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> 与 CancellationToken.None。
            </summary>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个无效的 <see cref="T:System.Data.CommandBehavior" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
              异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />, ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。
            
              调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。
            </summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个无效的 <see cref="T:System.Data.CommandBehavior" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
              异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />, ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。
               此方法传播有关应取消操作的通知。
            
              调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个无效的 <see cref="T:System.Data.CommandBehavior" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
              调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。
            </summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个无效的 <see cref="T:System.Data.CommandBehavior" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>
              执行查询并返回第一行的第一列中由查询返回的结果集。
               忽略所有其他列和行。
            </summary>
      <returns>
              在结果中的第一行的第一列设置。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>
              这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />。
               提供程序应使用适当的实现重写。
               （可选） 被忽略的取消标记。
            
              默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 方法，并返回已完成的任务，阻止调用线程。
               如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
               通过返回的任务异常属性，将向由 ExecuteScalar 引发的异常。
            
              不调用其他方法和属性的 <see langword="DbCommand" /> 对象，直到返回的任务已完成。
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />, ，其执行查询并返回第一行的第一列中由查询返回的结果集。
               忽略所有其他列和行。
            
              调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。
            </summary>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>
              获取的集合 <see cref="T:System.Data.Common.DbParameter" /> 对象。
               有关参数的详细信息，请参阅 配置参数和参数数据类型。
            </summary>
      <returns>
              SQL 语句或存储的过程的参数。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>
              在数据源上创建命令的已准备好 （或已编译） 版本。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DbTransaction" /> 中此 <see cref="T:System.Data.Common.DbCommand" /> 对象执行。
            </summary>
      <returns>
              在其中事务 <see langword="Command" /> 对象的.NET Framework 数据提供程序执行。
               默认值为空引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>
              获取或设置如何将命令结果应用于 <see cref="T:System.Data.DataRow" /> 时使用的 Update 方法 <see cref="T:System.Data.Common.DbDataAdapter" />。
            </summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。
               默认值是 <see langword="Both" /> 如果该命令自动生成。
               默认值为 <see langword="None" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>
              获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此实例使用的 <see cref="T:System.Data.IDbConnection" />。
            </summary>
      <returns>
              与数据源的连接。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>
              创建 <see cref="T:System.Data.IDbDataParameter" /> 对象的新实例。
            </summary>
      <returns>
              一个 <see langword="IDbDataParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>
              对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 并生成 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.IDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>
              对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。
            </summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.IDataReader" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>
              获取 <see cref="T:System.Data.IDataParameterCollection" />。
            </summary>
      <returns>
              SQL 语句或存储过程的参数。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>
              获取或设置将在其中执行此 <see cref="T:System.Data.Common.DbCommand" /> 对象的 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />。
            </summary>
      <returns>
              在其中执行 .NET Framework 数据提供程序的 <see langword="Command" /> 对象的事务。
               默认值为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>
              自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" /> 与关联的数据库。
               这是一个抽象类，只能被继承。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>
              初始化继承的类的新实例 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>
              允许的提供程序实现 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类来处理更多的参数属性。
            </summary>
      <param name="parameter">
                一个 <see cref="T:System.Data.Common.DbParameter" /> 对其应用其他修改。
              </param>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 由提供的架构表 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />。
              </param>
      <param name="statementType">
                正在生成; 的命令的类型插入、 更新或删除。
              </param>
      <param name="whereClause">
        <see langword="true" /> 如果该参数是更新或删除 WHERE 子句的一部分 <see langword="false" /> 是否插入或更新值的一部分。
              </param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.CatalogLocation" /> 实例 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CatalogLocation" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>
              设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。
            </summary>
      <returns>
              一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>
              指定使用哪些 <see cref="T:System.Data.ConflictOption" /> 是要使用 <see cref="T:System.Data.Common.DbCommandBuilder" />。
            </summary>
      <returns>
              返回的一个 <see cref="T:System.Data.ConflictOption" /> 描述此行为值 <see cref="T:System.Data.Common.DbCommandBuilder" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.DbDataAdapter" /> 对于的 TRANSACT-SQL 语句会自动生成的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataAdapter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Data.Common.DbCommandBuilder" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>
              获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作在数据源。
            </summary>
      <returns>
              自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>
              获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作在数据源，可以选择使用列作为参数名。
            </summary>
      <param name="useColumnsForParameterNames">
                如果 <see langword="true" />, ，生成与列名称，如有可能匹配的参数名。
                 如果 <see langword="false" />, 、 生成 @p1，@p2，依次类推。
              </param>
      <returns>
              自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>
              获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 需要执行插入操作的数据源对象。
            </summary>
      <returns>
              自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行插入操作。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>
              获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行插入操作在数据源，可以选择使用列作为参数名。
            </summary>
      <param name="useColumnsForParameterNames">
                如果 <see langword="true" />, ，生成与列名称，如有可能匹配的参数名。
                 如果 <see langword="false" />, 、 生成 @p1，@p2，依次类推。
              </param>
      <returns>
              自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行插入操作。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>
              返回指定的参数的名称的格式为 @p#。
               当生成自定义命令生成器时使用。
            </summary>
      <param name="parameterOrdinal">
                要作为参数的名称的一部分包括数...
              </param>
      <returns>
              具有指定数量的参数名称的一部分作为附加参数的名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>
              返回完整参数名称，而在给定部分参数名称。
            </summary>
      <param name="parameterName">
                参数的部分名称。
              </param>
      <returns>
              请求的部分参数名称相对应的完整参数名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>
              在关联的 SQL 语句中返回该参数的占位符。
            </summary>
      <param name="parameterOrdinal">
                要将作为参数的名称的一部分包含的数字。
              </param>
      <returns>
              追加的指定个数的参数的名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>
              返回的架构表 <see cref="T:System.Data.Common.DbCommandBuilder" />。
            </summary>
      <param name="sourceCommand">
        <see cref="T:System.Data.Common.DbCommand" /> 为其检索相应的架构表。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> ，它表示的特定架构 <see cref="T:System.Data.Common.DbCommand" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>
              获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需的数据源执行更新。
            </summary>
      <returns>
              自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行更新。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>
              获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需数据源，可以选择使用列作为参数名在执行更新。
            </summary>
      <param name="useColumnsForParameterNames">
                如果 <see langword="true" />, ，生成与列名称，如有可能匹配的参数名。
                 如果 <see langword="false" />, 、 生成 @p1，@p2，依次类推。
              </param>
      <returns>
              自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行更新。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>
              重置 <see cref="P:System.Data.Common.DbCommand.CommandTimeout" />, ，<see cref="P:System.Data.Common.DbCommand.Transaction" />, ，<see cref="P:System.Data.Common.DbCommand.CommandType" />, ，和 <see cref="T:System.Data.UpdateRowSource" /> 属性 <see cref="T:System.Data.Common.DbCommand" />。
            </summary>
      <param name="command">
        <see cref="T:System.Data.Common.DbCommand" /> 要用于通过命令生成器相应的插入、 更新或删除命令。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DbCommand" /> 实例要用于每个插入、 更新或删除操作。
               传递 null 值时，允许 <see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> 方法来创建 <see cref="T:System.Data.Common.DbCommand" /> 对象基于与关联的 Select 命令 <see cref="T:System.Data.Common.DbCommandBuilder" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>
              给定在正确的目录的情况下不带引号的标识符，将返回正确带引号的该标识符，包括正确转义任何在标识符中嵌入的引号的形式。
            </summary>
      <param name="unquotedIdentifier">
                原始的不带引号的标识符。
              </param>
      <returns>
              带引号的标识符版本。
               适当地转义标识符中嵌入的引号。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>
              获取或设置的起始字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
            </summary>
      <returns>
              开头字符或要使用的字符。
               默认值为一个空字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  生成 insert、 update 或 delete 命令后，不能更改此属性。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>
              获取或设置结束字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
            </summary>
      <returns>
              结束字符或要使用的字符。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>
              清除与此相关的命令 <see cref="T:System.Data.Common.DbCommandBuilder" />。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>
              添加事件处理程序 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件。
            </summary>
      <param name="rowUpdatingEvent">
                一个 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 实例，包含有关事件的信息。
              </param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>
              获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。
            </summary>
      <returns>
              要用作架构分隔符的字符。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>
              指定是否在 update 语句中所有列的值都是包含还是仅更改的列值。
            </summary>
      <returns>
        <see langword="true" /> 如果由生成的 UPDATE 语句 <see cref="T:System.Data.Common.DbCommandBuilder" /> 要包括所有列; <see langword="false" /> 如果它都包含仅更改了列。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>
              注册 <see cref="T:System.Data.Common.DbCommandBuilder" /> 来处理 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件 <see cref="T:System.Data.Common.DbDataAdapter" />。
            </summary>
      <param name="adapter">
        <see cref="T:System.Data.Common.DbDataAdapter" /> 要用于此更新。
              </param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>
              给定带引号的标识符，将返回该标识符，包括正确取消转义的正确不带引号的形式嵌入的任何引号标识符中。
            </summary>
      <param name="quotedIdentifier">
                将删除其嵌入的引号的标识符。
              </param>
      <returns>
              不带引号的标识符，其嵌入的引号正确取消转义。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>
              表示数据库连接。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbConnection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>
              开始数据库事务。
            </summary>
      <param name="isolationLevel">
                指定事务的隔离级别。
              </param>
      <returns>
              表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>
              开始数据库事务。
            </summary>
      <returns>
              表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
              以指定的隔离级别启动数据库事务。
            </summary>
      <param name="isolationLevel">
                指定事务的隔离级别。
              </param>
      <returns>
              表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>
              更改打开的连接的当前数据库。
            </summary>
      <param name="databaseName">
                指定要使用的连接的数据库的名称。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>
              关闭与数据库之间的连接。
               此方法是关闭任何打开连接的首选方法。
            </summary>
      <exception cref="T:System.Data.Common.DbException">
                  打开连接时出现的连接级别的错误。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>
              获取或设置用来打开该连接的字符串。
            </summary>
      <returns>
              用于建立初始连接的连接字符串。
               连接字符串的确切内容取决于此连接的特定数据源。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>
              获取要在终止尝试并生成错误之前的连接时等待的时间。
            </summary>
      <returns>
              等待连接打开所需的时间（以秒为单位）。
               默认值是由正在使用的连接的特定类型确定的。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>
              创建并返回 <see cref="T:System.Data.Common.DbCommand" /> 与当前连接关联的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DbCommand" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>
              创建并返回 <see cref="T:System.Data.Common.DbCommand" /> 与当前连接关联的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DbCommand" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>
              获取打开连接时后, 当前数据库的名称或打开连接前在连接字符串中指定的数据库名称。
            </summary>
      <returns>
              当前数据库的名称或打开连接后要使用的数据库的名称。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>
              获取要连接到数据库服务器的名称。
            </summary>
      <returns>
              要连接到数据库服务器的名称。
               默认值为一个空字符串。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>
              获取此 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.Common.DbConnection" />。
            </summary>
      <returns>
              一组方法用于创建一个提供程序实现的数据源类的实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Dispose">
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>
              在指定的事务中登记。
            </summary>
      <param name="transaction">
                对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>
              返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" />。
            </summary>
      <returns>
              一个包含架构信息的 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>
              返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" /> 使用架构名称指定的字符串。
            </summary>
      <param name="collectionName">
                指定要返回的架构的名称。
              </param>
      <returns>
              一个包含架构信息的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  将 <paramref name="collectionName" /> 指定为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>
              返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" /> 架构名称和指定的字符串数组的限制值使用指定的字符串。
            </summary>
      <param name="collectionName">
                指定要返回的架构的名称。
              </param>
      <param name="restrictionValues">
                指定一组请求的架构的限制值。
              </param>
      <returns>
              一个包含架构信息的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  将 <paramref name="collectionName" /> 指定为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件。
            </summary>
      <param name="stateChange">
                包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>
              打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />, ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />。
               此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。
            </summary>
      <returns>
              表示异步操作的任务。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>
              这是异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />。
               提供程序应使用适当的实现重写。
               （可选） 可以接受取消标记。
            
              默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" /> 调用并返回已完成的任务。
               如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
               打开由引发的异常将通过返回的任务异常属性进行通信。
            
              不调用其他方法和属性的 <see langword="DbConnection" /> 对象，直到返回的任务已完成。
            </summary>
      <param name="cancellationToken">
                取消指令。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>
              获取一个字符串，表示该对象连接到服务器的版本。
            </summary>
      <returns>
              数据库的版本。
               返回的字符串的格式取决于正在使用的连接的特定类型。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当返回的任务未完成，且在调用 <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" /> 后未打开连接时，调用了 <see cref="P:System.Data.Common.DbConnection.ServerVersion" />。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>
              获取一个字符串，描述连接状态。
            </summary>
      <returns>
              连接的状态。
               返回的字符串的格式取决于正在使用的连接的特定类型。
            </returns>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>
              当事件状态更改时发生。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>
              以指定的 <see cref="T:System.Data.IsolationLevel" /> 值开始数据库事务。
            </summary>
      <param name="isolationLevel">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。
              </param>
      <returns>
              一个表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>
              开始一项数据库事务。
            </summary>
      <returns>
              一个表示新事务的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>
              创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。
            </summary>
      <returns>
              与连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>
              提供强类型化连接字符串生成器的基类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例，可以选择使用 ODBC 规则来引用值。
            </summary>
      <param name="useOdbcRules">
                若为 <see langword="true" />，则使用 {} 分隔字段；若为 <see langword="false" />，则使用引号。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>
              将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中。
            </summary>
      <param name="keyword">
                要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的键。
              </param>
      <param name="value">
                指定键的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。
                
                  - 或 -
                
                  <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>
              提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" /> 对象中。
            </summary>
      <param name="builder">
                要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。
              </param>
      <param name="keyword">
                要添加的键。
              </param>
      <param name="value">
                提供的键的值。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>
              提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" /> 对象中。
            </summary>
      <param name="builder">
                要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。
              </param>
      <param name="keyword">
                要添加的键。
              </param>
      <param name="value">
                提供的键的值。
              </param>
      <param name="useOdbcRules">
                若为 <see langword="true" />，则使用 {} 分隔字段，若为 <see langword="false" />，则使用引号。
              </param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>
              获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性是否在 Visual Studio 设计器中可见。
            </summary>
      <returns>
              如果连接字符串在设计器中可见，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>
              清除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例的内容。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>
              清除关联的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 上的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>
              获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 相关联的连接字符串。
            </summary>
      <returns>
              使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中包含的键/值对创建的当前连接字符串。
               默认值为一个空字符串。
            </returns>
      <exception cref="T:System.ArgumentException">
                  提供的连接字符串参数无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>
              确定 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否包含特定键。
            </summary>
      <param name="keyword">
                要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。
              </param>
      <returns>
              如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>
              获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 中包含的键的当前数目。
            </summary>
      <returns>
              由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例维护的连接字符串中包含的键的数目。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>
              将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息与提供的对象中的连接信息进行比较。
            </summary>
      <param name="connectionStringBuilder">
                要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。
              </param>
      <returns>
              如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息生成等效的连接字符串，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>
              使用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的所有属性的信息，填充提供的 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <param name="propertyDescriptors">
                使用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的信息填充的 <see cref="T:System.Collections.Hashtable" />。
              </param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="keyword">
                要获取或设置的项的键。
              </param>
      <returns>
              与指定的键相关联的值。
               如果指定键未找到，尝试让其返回空引用（在 Visual Basic 中为 <see langword="Nothing" />），并尝试设置为使用指定键创建新的元素。
            
              传递 null 键（在 Visual Basic 中为 <see langword="Nothing" />）将引发 <see cref="T:System.ArgumentNullException" />。
               分配一个删除键/值对的 null 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  设置了该属性，但 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。
                
                  - 或 -
                
                  设置了该属性，但 <paramref name="keyword" /> 不存在于集合中，且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的键。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>
              从 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中移除具有指定的键的项。
            </summary>
      <param name="keyword">
                要从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。
              </param>
      <returns>
              如果该键存在于连接字符串中并已被移除，则为 <see langword="true" />；如果该键不存在，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 <see langword="Nothing" />）
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是只读，或 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>
              指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中是否存在指定的键。
            </summary>
      <param name="keyword">
                要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。
              </param>
      <returns>
              如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>
              返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 关联的连接字符串。
            </summary>
      <returns>
              当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>
              从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中检索与提供的键相对应的值。
            </summary>
      <param name="keyword">
                要检索的项的键。
              </param>
      <param name="value">
                与 <paramref name="key" /> 对应的值。
              </param>
      <returns>
              如果在连接字符串中找到 <paramref name="keyword" />，则为 <see langword="true" />，否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 中的值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。
            </summary>
      <param name="keyword">
                用作要添加的元素的键的 <see cref="T:System.Object" />。
              </param>
      <param name="value">
                用作要添加的元素的键的 <see cref="T:System.Object" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。
            </summary>
      <param name="keyword">
                要在 <see cref="T:System.Collections.IDictionary" /> 对象中查找的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.IDictionary" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsFixedSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsReadOnly">
      <returns>
      </returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置具有指定键的元素。
            </summary>
      <param name="keyword">
                要获取或设置的元素的键。
              </param>
      <returns>
              带有指定键的元素。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 对象中移除具有指定键的元素。
            </summary>
      <param name="keyword">
                要移除的元素的键。
              </param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>
              返回此组件实例的自定义属性的集合。
            </summary>
      <returns>
              包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>
              返回此组件实例的类名称。
            </summary>
      <returns>
              对象的类名称，如果该类没有名称，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>
              返回某个组件的此实例的名称。
            </summary>
      <returns>
              对象的名称，如果该对象不具有名称，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>
              返回此组件实例的类型转换器。
            </summary>
      <returns>
              作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>
              返回某个组件的此实例的默认事件。
            </summary>
      <returns>
              表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>
              返回此组件实例的默认属性。
            </summary>
      <returns>
              表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>
              返回指定类型的此实例的一个组件的编辑器。
            </summary>
      <param name="editorBaseType">
                一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。
              </param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 <see langword="null" /> 如果找不到编辑器中。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>
              返回此组件实例的事件。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>
              使用指定的属性数组作为筛选器，返回此组件实例的事件。
            </summary>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>
              返回此组件实例的属性。
            </summary>
      <returns>
              表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>
              使用特性数组作为筛选器，返回此组件实例的属性。
            </summary>
      <param name="attributes">
                用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回一个对象，该对象包含指定的属性描述符所描述的属性。
            </summary>
      <param name="pd">
                一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，表示指定属性的所有者。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>
              帮助实现 <see cref="T:System.Data.IDbDataAdapter" /> 接口。
              <see cref="T:System.Data.Common.DbDataAdapter" /> 的继承类实现了一组功能以提供强类型，但是继承了完全实现 DataAdapter 所需的大部分功能。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>
              新实例初始化 DataAdapter 类。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>
              新实例初始化 <see langword="DataAdapter" /> 从同一类型的现有对象的类。
            </summary>
      <param name="adapter">
                一个 <see langword="DataAdapter" /> 用来创建新对象 <see langword="DataAdapter" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>
              添加 <see cref="T:System.Data.IDbCommand" /> 到当前批次。
            </summary>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 将添加到批次。
              </param>
      <returns>
              然后再添加到批中的命令数 <see cref="T:System.Data.IDbCommand" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该适配器不支持批处理。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>
              删除所有 <see cref="T:System.Data.IDbCommand" /> 批次中的对象。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该适配器不支持批处理。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
              初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。
            </summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 用于更新数据源。
              </param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 期间执行 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。
              </param>
      <param name="statementType">
                该命令是否更新、 插入、 删除或 SELECT 语句。
              </param>
      <param name="tableMapping">
                一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
              初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。
            </summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 更新数据源。
              </param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。
              </param>
      <param name="statementType">
                该命令是否更新、 插入、 删除或 SELECT 语句。
              </param>
      <param name="tableMapping">
                一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。
              </param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。
            </returns>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>
              使用默认名称 <see cref="T:System.Data.Common.DataAdapter" /> 表映射的对象。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>
              获取或设置用于从数据集中删除记录的命令。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 来删除已删除行在数据集中的数据源中的记录。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Data.Common.DbDataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>
              执行当前批次。
            </summary>
      <returns>
              从批处理中的最后一个命令返回的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
              添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和源的表名、 命令字符串和命令的行为。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。
              </param>
      <param name="startRecord">
                要以开头的从零开始记录数。
              </param>
      <param name="maxRecords">
                要检索的记录中最大的数。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <param name="command">
                用来从数据源检索行的 SQL SELECT 语句。
              </param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。
                
                  - 或 - 
                
                  <paramref name="maxRecords" /> 参数小于 0。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
              添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。
            </summary>
      <param name="dataTables">
        <see cref="T:System.Data.DataTable" /> 要从数据源填充对象。
              </param>
      <param name="startRecord">
                要以开头的从零开始记录数。
              </param>
      <param name="maxRecords">
                要检索的记录中最大的数。
              </param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 执行以填充 <see cref="T:System.Data.DataTable" /> 对象。
              </param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              添加到或数据表中的数据刷新的行数。
            </returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                
                  - 或 - 
                
                  连接无效。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  找不到该连接。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。
                
                  - 或 - 
                
                  <paramref name="maxRecords" /> 参数小于 0。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>
              添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。
              </param>
      <param name="startRecord">
                要以开头的从零开始记录数。
              </param>
      <param name="maxRecords">
                要检索的记录中最大的数。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                
                  - 或 - 
                
                  连接无效。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  找不到该连接。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。
                
                  - 或 - 
                
                  <paramref name="maxRecords" /> 参数小于 0。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>
              添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以匹配所指定的记录从开始，并检索由指定的最大记录数的数据源中。
            </summary>
      <param name="startRecord">
                要以开头的从零开始记录数。
              </param>
      <param name="maxRecords">
                要检索的记录中最大的数。
              </param>
      <param name="dataTables">
        <see cref="T:System.Data.DataTable" /> 要从数据源填充对象。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。
               此值不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>
              添加或刷新中行 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>
              添加或刷新中行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。
            </summary>
      <param name="dataSet">
                一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
      <exception cref="T:System.SystemException">
                  此源表是无效的。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>
              添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" /> 名称。
            </summary>
      <param name="dataTable">
                名称 <see cref="T:System.Data.DataTable" /> 用于表映射。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。
               这不包括不返回行的语句影响的行。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
              添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以匹配使用指定的数据源中的那些 <see cref="T:System.Data.DataTable" />, ，<see cref="T:System.Data.IDbCommand" /> 和 <see cref="T:System.Data.CommandBehavior" />。
            </summary>
      <param name="dataTable">
                一个 <see cref="T:System.Data.DataTable" /> 要用记录填充并且如有必要，架构。
              </param>
      <param name="command">
                用来从数据源检索行的 SQL SELECT 语句。
              </param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。
               这不包括不返回行的语句影响的行。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>
              获取或设置用于填充数据适配器的命令的行为。
            </summary>
      <returns>
        <see cref="T:System.Data.CommandBehavior" /> 的用来填充数据适配器的命令。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>
              添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" /> 和配置架构的架构以匹配数据源中根据指定 <see cref="T:System.Data.SchemaType" />。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要填充数据源中的架构。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <param name="command">
                用来从数据源检索行的 SQL SELECT 语句。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              一个数组 <see cref="T:System.Data.DataTable" /> 从数据源中返回包含架构信息的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>
              将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 和 <see cref="T:System.Data.DataTable" /> 配置架构以匹配数据源中的架构。
            </summary>
      <param name="dataSet">
                要插入架构的 <see cref="T:System.Data.DataSet" />。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <returns>
              一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。
            </returns>
      <exception cref="T:System.ArgumentException">
                  找不到从中获取架构的源表。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
              在配置架构的指定 <see cref="T:System.Data.DataTable" /> 根据指定 <see cref="T:System.Data.SchemaType" />, ，命令字符串和 <see cref="T:System.Data.CommandBehavior" /> 值。
            </summary>
      <param name="dataTable">
                要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <param name="command">
                用来从数据源检索行的 SQL SELECT 语句。
              </param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              A 的 <see cref="T:System.Data.DataTable" /> 从数据源返回的对象，其中包含架构信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>
              将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。
            </summary>
      <param name="dataSet">
                要插入架构的 <see cref="T:System.Data.DataSet" />。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。
              </param>
      <returns>
              一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>
              根据指定的 <see cref="T:System.Data.SchemaType" /> 配置指定 <see cref="T:System.Data.DataTable" /> 的架构。
            </summary>
      <param name="dataTable">
                要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.DataTable" />，其中包含从数据源返回的架构信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>
              返回 <see cref="T:System.Data.IDataParameter" /> 从当前批次中的命令之一。
            </summary>
      <param name="commandIdentifier">
                要检索的参数的命令的索引。
              </param>
      <param name="parameterIndex">
                该命令中的参数的索引。
              </param>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 指定。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  该适配器不支持批处理。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>
              返回单个更新内尝试有关的较大的批处理更新的信息。
            </summary>
      <param name="commandIdentifier">
                在批处理中的单个命令的从零开始的列序号。
              </param>
      <param name="recordsAffected">
                在批处理中指定的命令在数据存储区中受影响的行数。
              </param>
      <param name="error">
        <see cref="T:System.Exception" /> 在指定的命令执行期间引发。
                 返回 <see langword="null" /> (<see langword="Nothing" /> 在 Visual Basic 中) 如果不会引发异常。
              </param>
      <returns>
              单个更新内尝试有关的较大的批处理更新的信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>
              获取在执行 SQL SELECT 语句时由用户设置的参数。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Data.IDataParameter" /> 由用户来设置包含的参数的对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>
              初始化用于批处理 <see cref="T:System.Data.Common.DbDataAdapter" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该适配器不支持批处理。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>
              获取或设置用来将新记录插入到数据源的命令。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 以新行在数据集中的数据源中插入记录。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>
              引发 <see langword="RowUpdated" /> 的.NET Framework 数据提供程序的事件。
            </summary>
      <param name="value">
                包含事件数据的 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>
              引发 <see langword="RowUpdating" /> 的.NET Framework 数据提供程序的事件。
            </summary>
      <param name="value">
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" />  包含事件数据。
              </param>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>
              获取或设置用来选择数据源中的记录的命令。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>
              结束用于批处理 <see cref="T:System.Data.Common.DbDataAdapter" />。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  该适配器不支持批处理。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>
              通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 用于更新数据源。
              </param>
      <returns>
              从已成功更新的行数 <see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>
              通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataTable" />。
            </summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 用于更新数据源。
              </param>
      <returns>
              从已成功更新的行数 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
      <exception cref="T:System.SystemException">
                  否 <see cref="T:System.Data.DataRow" /> 存在更新。
                
                  - 或 - 
                
                  否 <see cref="T:System.Data.DataTable" /> 存在更新。
                
                  - 或 - 
                
                  否 <see cref="T:System.Data.DataSet" /> 存在是为了用作源。
                </exception>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>
              通过为每个插入、 更新或删除了行中指定的数组中执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />。
            </summary>
      <param name="dataRows">
                一个数组 <see cref="T:System.Data.DataRow" /> 用于更新数据源的对象。
              </param>
      <returns>
              从已成功更新的行数 <see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
      <exception cref="T:System.SystemException">
                  否 <see cref="T:System.Data.DataRow" /> 存在更新。
                
                  - 或 - 
                
                  否 <see cref="T:System.Data.DataTable" /> 存在更新。
                
                  - 或 - 
                
                  否 <see cref="T:System.Data.DataSet" /> 存在是为了用作源。
                </exception>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>
              通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除行中的更新数据库中的值<see cref="T:System.Data.DataSet" />具有指定<see cref="T:System.Data.DataTable" />名称。
            </summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" />要用于更新数据源。
              </param>
      <param name="srcTable">
                用于表映射的源表的名称。
              </param>
      <returns>
              已成功从更新的行数<see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" />无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  源表无效。
                </exception>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>
              通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除指定的数组中的一行来更新数据库中的值 <see cref="T:System.Data.DataSet" /> 对象。
            </summary>
      <param name="dataRows">
                一个数组 <see cref="T:System.Data.DataRow" /> 用于更新数据源的对象。
              </param>
      <param name="tableMapping">
        <see cref="P:System.Data.IDataAdapter.TableMappings" /> 使用集合。
              </param>
      <returns>
              从已成功更新的行数 <see cref="T:System.Data.DataSet" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此源表是无效的。
                </exception>
      <exception cref="T:System.SystemException">
                  否 <see cref="T:System.Data.DataRow" /> 存在更新。
                
                  - 或 - 
                
                  否 <see cref="T:System.Data.DataTable" /> 存在更新。
                
                  - 或 - 
                
                  否 <see cref="T:System.Data.DataSet" /> 存在是为了用作源。
                </exception>
      <exception cref="T:System.Data.DBConcurrencyException">
                  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>
              获取或设置一个值，启用或禁用批处理支持，并指定可以在一个批次中执行的命令数。
            </summary>
      <returns>
              要处理的每批行数。
            
                      值是
                    
                      效果
                    
                      0
                    
                      批大小没有限制。
                    
                      1
                    
                      禁用批量更新。
                    
                      &gt; 1
                    
                      使用多批发送更改 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 一次的操作。
                    
              当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.Common.DbDataAdapter" /> 必须具有其 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 属性设置为 无 或 输出参数。
               否则将引发异常。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>
              获取或设置用于更新数据源中的记录的命令。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>
              获取或设置用于从数据集中删除记录的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来删除已删除行在数据集中的数据源中的记录。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>
              获取或设置用于将新记录插入到数据源的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />过程中使用<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />以插入新行在数据集中的数据源中的记录。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>
              获取或设置用于在数据源中选择记录的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>
              获取或设置用于更新数据源中的记录的 SQL 语句。
            </summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>
              创建作为当前实例副本的新对象。
            </summary>
      <returns>
              作为此实例副本的新对象。
            </returns>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>
              从数据源中读取行的只进流。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbDataReader" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>
              关闭 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </summary>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>
              获取一个值，该值指示当前行的嵌套深度。
            </summary>
      <returns>
              当前行的嵌套深度。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>
              释放 <see cref="T:System.Data.Common.DbDataReader" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>
              释放托管的资源使用 <see cref="T:System.Data.Common.DbDataReader" /> ，还可以释放非托管的资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管的资源，则为 <see langword="true" />；若要仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>
              获取当前行中的列数。
            </summary>
      <returns>
              当前行中的列数。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  没有当前连接到 SQL Server 的实例。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>
              以布尔值的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>
              以字节的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              从指定的列中，由指示位置处开始读取的字节流 <paramref name="dataOffset" />, ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <param name="dataOffset">
                行中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要将数据复制到的缓冲区。
              </param>
      <param name="bufferOffset">
                要将数据复制到的位置的缓冲区索引。
              </param>
      <param name="length">
                要读取的最大字符数。
              </param>
      <returns>
              读取的实际字节数。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>
              以单个字符的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              从指定的列所指示的位置开始的字符流读入 <paramref name="dataOffset" />, ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <param name="dataOffset">
                行中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要将数据复制到的缓冲区。
              </param>
      <param name="bufferOffset">
                要将数据复制到的位置的缓冲区索引。
              </param>
      <param name="length">
                要读取的最大字符数。
              </param>
      <returns>
              读取的实际字符数。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>
              返回 <see cref="T:System.Data.Common.DbDataReader" /> 对象请求的列序号。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>
              获取指定列的数据类型的名称。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              一个字符串，表示数据类型的名称。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>
              以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>
              为可用提供程序特定的实现重写的已请求的列序号返回一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>
              以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>
              以双精度浮点数字的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>
              返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>
              获取指定列的数据类型。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的数据类型。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>
              作为一种类型，以同步方式获取指定列的值。
            </summary>
      <param name="ordinal">
                要检索的列。
              </param>
      <typeparam name="T">
                作为一种类型，以同步方式获取指定列的值。
              </typeparam>
      <returns>
              要检索的列。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。
                
                  尝试读取顺序模式中的以前读取列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与返回的类型不匹配 SQL Server 或不能强制转换。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>
              以异步方式获取指定列的值作为一种类型。
            </summary>
      <param name="ordinal">
                要返回的值的类型。
              </param>
      <typeparam name="T">
                要返回的值的类型。
                 请参阅备注部分以了解更多信息。
              </typeparam>
      <returns>
              要返回的值的类型。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。
                
                  尝试读取顺序模式中的以前读取列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与数据源返回的类型不匹配或不能强制转换。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>
              以异步方式获取指定列的值作为一种类型。
            </summary>
      <param name="ordinal">
                要返回的值的类型。
              </param>
      <param name="cancellationToken">
                取消指令，传播有关应取消操作的通知。
                 这不保证取消。
                 如果设置为 <see langword="CancellationToken.None" /> 使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)" />。
                 返回的任务必须标记为已取消。
              </param>
      <typeparam name="T">
                要返回的值的类型。
                 请参阅备注部分以了解更多信息。
              </typeparam>
      <returns>
              要返回的值的类型。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。
                
                  尝试读取顺序模式中的以前读取列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与数据源返回的类型不匹配或不能强制转换。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>
              以单精度浮点数字的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>
              以全局唯一标识符 (GUID) 的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>
              16 位有符号整数形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>
              作为 32 位有符号整数获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>
              以 64 位有符号整数的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>
              在给定从零开始的列序号时获取该列的名称。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的名称。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>
              在给定列名时获取相应的列序号。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              从零开始的列序号。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的名称不是有效的列名。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>
              返回指定列的提供程序特定的字段类型。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              描述指定列的数据类型的 <see cref="T:System.Type" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>
              在当前行的集合中获取提供程序特定的所有属性列。
            </summary>
      <param name="values">
                要将属性列复制到的 <see cref="T:System.Object" /> 数组。
              </param>
      <returns>
              数组中的 <see cref="T:System.Object" /> 实例数。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>
              返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.Common.DbDataReader" />。
            </summary>
      <returns>
              一个描述列元数据的 <see cref="T:System.Data.DataTable" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>
              将数据检索为 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="ordinal">
                将数据检索为 <see cref="T:System.IO.Stream" />。
              </param>
      <returns>
              返回的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。
                
                  尝试读取顺序模式中的以前读取列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  返回的类型不是以下类型之一︰
                
                      binary
                    
                      图像
                    
                      varbinary
                    
                      udt
                    </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>
              以 <see cref="T:System.String" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>
              将数据检索为 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="ordinal">
                将数据检索为 <see cref="T:System.IO.TextReader" />。
              </param>
      <returns>
              返回的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。
                
                  尝试读取顺序模式中的以前读取列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  返回的类型不是以下类型之一︰
                
                      char
                    
                      nchar
                    
                      ntext
                    
                      nvarchar
                    
                      文本
                    
                      varchar
                    </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>
              使用来填充数组的对象的当前行的列的值。
            </summary>
      <param name="values">
                要将属性列复制到的 <see cref="T:System.Object" /> 数组。
              </param>
      <returns>
              数组中的 <see cref="T:System.Object" /> 实例数。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>
              获取一个值，该值指示此 <see cref="T:System.Data.Common.DbDataReader" /> 是否包含一个或多个行。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.Common.DbDataReader" /> 包含一个或多个行; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否已关闭。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.Common.DbDataReader" /> 已关闭，否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>
              获取一个值，该值指示列中是否包含不存在或丢失的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
        <see langword="true" /> 如果指定的列等效于 <see cref="T:System.DBNull" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />, ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
               （可选） 将发送告知应取消操作的通知。
            </summary>
      <param name="ordinal">
                要检索的从零开始的列。
              </param>
      <param name="cancellationToken">
                取消指令，传播有关应取消操作的通知。
                 这不保证取消。
                 如果设置为 <see langword="CancellationToken.None" /> 使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />。
                 返回的任务必须标记为已取消。
              </param>
      <returns>
        <see langword="true" /> 如果指定的列的值等效于 <see langword="DBNull" /> 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。
                
                  试图读取顺序模式中的以前读取的列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />, ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
            </summary>
      <param name="ordinal">
                要检索的从零开始列。
              </param>
      <returns>
        <see langword="true" /> 如果指定的列的值等效于 <see langword="DBNull" /> 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接断开或很期间数据检索已关闭。
                
                  <see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。
                
                  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。
                
                  试图读取顺序模式中的以前读取的列。
                
                  没有正在进行的异步操作。
                   这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  试图读取某个列不存在。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              指定列的值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  找到具有指定名称没有列。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>
              在读取一批语句的结果时，使读取器前进到下一个结果。
            </summary>
      <returns>
        <see langword="true" /> 如果有多个结果集;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />, ，它将读取器推进到下一个结果时读取一批语句的结果。
            
              调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。
            </summary>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>
              这是异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />。
               提供程序应使用适当的实现重写。
              <paramref name="cancellationToken" /> （可选） 被忽略。
            
              默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 方法，并返回已完成的任务，阻止调用线程。
               默认实现将返回已取消的任务，如果传递已取消 <paramref name="cancellationToken" />。
               引发的异常 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 将向您提供通过返回的任务异常属性。
            
              其他方法和 DbDataReader 对象的属性不应调用时返回的任务尚未完成。
            </summary>
      <param name="cancellationToken">
                取消指令。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>
              使读取器前进到结果集中的下一条记录。
            </summary>
      <returns>
              如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>
              异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />, ，它将读取器推进到结果集中的下一个记录。
               此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。
            </summary>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>
              这是异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />。
                提供程序应使用适当的实现重写。
               CancellationToken （可选） 可能会被忽略。
            
              默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" /> 方法，并返回已完成的任务，阻止调用线程。
               如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
                读取由引发的异常将通过返回的任务异常属性进行通信。
            
              不调用其他方法和属性的 <see langword="DbDataReader" /> 对象，直到返回的任务已完成。
            </summary>
      <param name="cancellationToken">
                取消指令。
              </param>
      <returns>
              表示异步操作的任务。
            </returns>
      <exception cref="T:System.Data.Common.DbException">
                  执行命令文本时出错。
                </exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>
              获取通过执行 SQL 语句更改、插入或删除的行数。
            </summary>
      <returns>
              更改、插入或删除的行数。
               在为 SELECT 语句; 的-1如果受不影响任何行，则为 0 或语句失败。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>
              获取 <see cref="T:System.Data.Common.DbDataReader" /> 中未隐藏的字段的数目。
            </summary>
      <returns>
              未隐藏的字段的数目。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataReader#Close">
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable">
      <returns>
      </returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              字段指向更多远程结构化数据时使用的 <see cref="T:System.Data.IDataReader" /> 实例。
            </returns>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>
              指定如何 <see cref="T:System.Data.DataColumn" /> 映射。
            </summary>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>
              列映射到一个 XML 属性。
            </summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>
              将列映射到 XML 元素。
            </summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>
              列映射到的内部结构。
            </summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>
              列映射到 <see cref="T:System.Xml.XmlText" /> 节点。
            </summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>
              当目标和源时发生 <see langword="DataRow" /> 具有相同的主键值，和 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 属性设置为 true。
            </summary>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.MergeFailedEventArgs" /> 类 <see cref="T:System.Data.DataTable" /> 和合并冲突的说明。
            </summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 对象。
              </param>
      <param name="conflict">
                合并冲突的说明。
              </param>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>
              返回合并冲突的说明。
            </summary>
      <returns>
              合并冲突的说明。
            </returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>
              返回 <see cref="T:System.Data.DataTable" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象。
            </returns>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Data.DataSet.MergeFailed" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                事件的数据。
              </param>
    </member>
  </members>
</doc>