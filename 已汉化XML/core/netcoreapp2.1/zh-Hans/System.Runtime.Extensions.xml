<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Hashtable">
      <summary>Represents a collection of key/value pairs that are organized based on the hash code of the key.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the default initial capacity, load factor, hash code provider, and comparer.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用指定的初始容量、 加载因子、 哈希代码提供程序和比较器。
            </summary>
      <param name="capacity">
                元素的近似数目的 <see cref="T:System.Collections.Hashtable" /> 对象最初可包含。
              </param>
      <param name="loadFactor">
                0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。
                 结果是元素与存储桶的最大比率。
              </param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 为的所有键提供哈希的对象代码 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序，即每个键实现 <see cref="M:System.Object.GetHashCode" />。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 小于 0.1。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 大于 1.0。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
              初始化的新实例<see cref="T:System.Collections.Hashtable" />通过将指定的字典中的元素复制到新的类<see cref="T:System.Collections.Hashtable" />对象。
               新<see cref="T:System.Collections.Hashtable" />对象具有初始容量与复制的元素数相等，并使用指定的加载因子，哈希代码提供程序和比较器。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" />要复制到新对象<see cref="T:System.Collections.Hashtable" />对象。
              </param>
      <param name="loadFactor">
                0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。
                 结果是元素与存储桶的最大比率。
              </param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" />的所有键的对象，提供哈希代码<see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" />若要使用默认哈希代码提供程序，即每个键实现<see cref="M:System.Object.GetHashCode" />。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />对象可用于确定两个键是否相等。
              
                - 或 - 
              
                <see langword="null" />若要使用默认比较器，这是每个键实现<see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" />小于 0.1。
                
                  - 或 - 
                
                  <paramref name="loadFactor" />大于 1.0。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity, load factor, and <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity">capacity</paramref> is less than zero.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用指定的初始容量、 哈希代码提供程序、 比较器和默认加载因子。
            </summary>
      <param name="capacity">
                元素的近似数目的 <see cref="T:System.Collections.Hashtable" /> 对象最初可包含。
              </param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 为的所有键提供哈希的对象代码 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序，即每个键实现 <see cref="M:System.Object.GetHashCode" />。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d">d</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Hashtable" /> 类将从指定字典的元素复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
               新 <see cref="T:System.Collections.Hashtable" /> 对象拥有与复制的元素数相等的初始容量并使用默认加载因子，指定的哈希代码提供程序和比较器。
               此 API 已废弃不用。
               替代方法，请参阅 <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 对象复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
              </param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 为的所有键提供哈希的对象代码 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序，即每个键实现 <see cref="M:System.Object.GetHashCode" />。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity">capacity</paramref> is less than zero.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity">capacity</paramref> is causing an overflow.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> ，该类使用指定的可序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Hashtable" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Hashtable" /> 关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用默认的初始容量和加载因子，指定的哈希代码提供程序和比较器。
            </summary>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 为的所有键提供哈希的对象代码 <see cref="T:System.Collections.Hashtable" /> 对象。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序，即每个键实现 <see cref="M:System.Object.GetHashCode" />。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，用于确定两个键是否相等。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d">d</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor">loadFactor</paramref> is less than 0.1.  
 -or-  
 <paramref name="loadFactor">loadFactor</paramref> is greater than 1.0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the default initial capacity and load factor, and the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see> object.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Hashtable"></see> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable"></see> object. The new <see cref="T:System.Collections.Hashtable"></see> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> object to copy to a new <see cref="T:System.Collections.Hashtable"></see> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class using the specified initial capacity and <see cref="T:System.Collections.IEqualityComparer"></see>, and the default load factor.</summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"></see> object can initially contain.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable"></see>.  
 -or-  
 null to use the default hash code provider and the default comparer. The default hash code provider is each key&amp;#39;s implementation of <see cref="M:System.Object.GetHashCode"></see> and the default comparer is each key&amp;#39;s implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="System.Collections.Hashtable"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.Hashtable"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.Hashtable"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.Hashtable"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>A shallow copy of the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>
              获取或设置 <see cref="T:System.Collections.IComparer" /> 用于 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> 用于 <see cref="T:System.Collections.Hashtable" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性设置为一个值，但哈希表使用创建 <see cref="T:System.Collections.IEqualityComparer" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Hashtable"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Hashtable"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Hashtable"></see>.</param>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Hashtable"></see> contains a specific value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Hashtable"></see>. The value can be null.</param>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> contains an element with the specified <paramref name="value">value</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Hashtable"></see> elements to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the <see cref="T:System.Collections.DictionaryEntry"></see> objects copied from <see cref="T:System.Collections.Hashtable"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.Hashtable"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.Hashtable"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>The number of key/value pairs contained in the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>Gets the <see cref="T:System.Collections.IEqualityComparer"></see> to use for the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>The <see cref="System.Collections.IEqualityComparer"></see> to use for the <see cref="System.Collections.Hashtable"></see>.</returns>
      <exception cref="T:System.ArgumentException">The property is set to a value, but the hash table was created using an <see cref="System.Collections.IHashCodeProvider"></see> and an <see cref="System.Collections.IComparer"></see>.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> that iterates through the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An <see cref="System.Collections.IDictionaryEnumerator"></see> for the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>Returns the hash code for the specified key.</summary>
      <param name="key">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
      <returns>The hash code for <paramref name="key">key</paramref>.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化所需的数据 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Collections.Hashtable" /> 所需的信息。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Hashtable" /> 关联的序列化流的源和目标。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  集合被修改。
                </exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>
              获取或设置可分配哈希代码的对象。
            </summary>
      <returns>
              可分配哈希代码的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性设置为一个值，但哈希表使用创建 <see cref="T:System.Collections.IEqualityComparer" />。
                </exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Hashtable"></see> has a fixed size.</summary>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Hashtable"></see> is read-only.</summary>
      <returns>true if the <see cref="System.Collections.Hashtable"></see> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Hashtable"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="System.Collections.Hashtable"></see> is synchronized (thread safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new element using the specified key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="System.Collections.Hashtable"></see> is read-only.  
 -or-  
 The property is set, <paramref name="key">key</paramref> does not exist in the collection, and the <see cref="System.Collections.Hashtable"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>Compares a specific <see cref="T:System.Object"></see> with a specific key in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="item">The <see cref="T:System.Object"></see> to compare with key.</param>
      <param name="key">The key in the <see cref="T:System.Collections.Hashtable"></see> to compare with item.</param>
      <returns>true if <paramref name="item">item</paramref> and <paramref name="key">key</paramref> are equal; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item">item</paramref> is null.  
 -or-  
 <paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An <see cref="System.Collections.ICollection"></see> containing the keys in the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>
              实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
            </summary>
      <param name="sender">
                反序列化事件源。
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Hashtable" /> 无效。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.Hashtable"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.Hashtable"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <param name="table">The <see cref="T:System.Collections.Hashtable"></see> to synchronize.</param>
      <returns>A synchronized (thread-safe) wrapper for the <see cref="System.Collections.Hashtable"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table">table</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.Hashtable"></see>.</summary>
      <returns>An <see cref="System.Collections.ICollection"></see> containing the values in the <see cref="System.Collections.Hashtable"></see>.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>
              提供了使用自定义哈希函数的对象的哈希代码。
            </summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>
              返回指定对象的哈希代码。
            </summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要为其哈希代码会返回。
              </param>
      <returns>
              指定对象的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  一种 <paramref name="obj" /> 是引用类型和 <paramref name="obj" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>
              指定用于检索系统特殊文件夹的目录路径的枚举常数。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>
              用于存储各个用户的管理工具的文件系统目录。
               Microsoft Management Console (MMC) 会将自定义的控制台保存在此目录中，并且此目录将随用户一起漫游。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>
              用作当前漫游用户的应用程序特定数据的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>
              充当等待写入 CD 的文件的临时区域的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>
              包含计算机所有用户的管理工具的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>
              用作所有用户使用的应用程序特定数据的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>
              包含在所有用户桌面上出现的文件和文件夹的文件系统目录。
               此特殊文件夹仅对 Windows NT 系统有效。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>
              包含所有用户共有的文档的文件系统目录。
               此特殊文件夹仅对装有 Shfolder.dll 的 Windows NT 系统、Windows 95 和 Windows 98 系统有效。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>
              充当所有用户共有的音乐文件的存储库的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>
              为了实现向后兼容，Windows Vista 中可以识别此值，但该特殊文件夹本身已不再使用。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>
              充当所有用户共有的图像文件的存储库的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>
              用于应用程序间共享的组件的目录。
            
              若要在非 x86 系统上获取 x86 常规程序文件目录，请使用 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 成员。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>
              “Program Files”文件夹。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>
              跨应用程序共享的组件的文件夹。
               此特殊文件夹仅对 Windows NT、Windows 2000 和 Windows XP 系统有效。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>
              包含在所有用户的“开始”菜单上都出现的程序和文件夹的文件系统目录。
               此特殊文件夹仅对 Windows NT 系统有效。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>
              包含在所有用户的“开始”文件夹中都出现的程序的文件系统目录。
               此特殊文件夹仅对 Windows NT 系统有效。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>
              包含所有用户都可以使用的模板的文件系统目录。
               此特殊文件夹仅对 Windows NT 系统有效。
                已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>
              充当所有用户共有的视频文件的存储库的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>
              用作 Internet Cookie 的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>
              逻辑桌面，而不是物理文件系统位置。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>
              用于物理上存储桌面上的文件对象的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>
              用作用户收藏夹项的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>
              包含字体的虚拟文件夹。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>
              用作 Internet 历史记录项的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>
              用作 Internet 临时文件的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>
              用作当前非漫游用户使用的应用程序特定数据的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>
              包含本地化资源数据的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>
              “我的电脑”文件夹。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>
              “我的文档”文件夹。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>
              “我的音乐”文件夹。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>
              “我的图片”文件夹。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>
              充当属于某个用户的视频的存储库的文件系统目录。
                已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>
              包含“网上邻居”虚拟文件夹中可能存在的链接对象的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>
              用作文档的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>
              包含“打印机”虚拟文件夹中可能存在的链接对象的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>
              “Program files”目录。
            
              在非 x86 系统中，将 <see cref="F:System.Environment.SpecialFolder.ProgramFiles" /> 传递到 <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> 方法将返回非 x86 程序的路径。
               若要在非 x86 系统上获取 x86 程序文件目录，请使用 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 成员。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>
              X86 Program Files 文件夹。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>
              包含用户程序组的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>
              包含用户最近使用过的文档的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>
              包含资源数据的文件系统目录。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>
              包含“发送”菜单项的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>
              包含“开始”菜单项的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>
              对应于用户的“开始”程序组的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>
              “System”目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>
              Windows“System”文件夹。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>
              用作文档模板的公共储存库的目录。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>
              用户的配置文件文件夹。
               应用程序不应在此级别上创建文件或文件夹；它们应将其数据放在 <see cref="F:System.Environment.SpecialFolder.ApplicationData" /> 所引用的位置之下。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>
              Windows 目录或 SYSROOT。
               它与 %windir% 或 %SYSTEMROOT% 环境变量相对应。
               已在 .NET Framework 4 中添加。
            </summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>
              指定要使用的特殊文件夹获取路径选项。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>
              如果不存在，则创建该路径的文件夹。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>
              无需验证是否存在的路径，则返回文件夹的路径。
               如果该文件夹位于网络上，指定此选项可减少滞后时间。
            </summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>
              验证该文件夹的路径。
               如果该文件夹存在，则返回该路径。
               如果该文件夹不存在，则返回空字符串。
               这是默认行为。
            </summary>
    </member>
    <member name="T:System.Environment">
      <summary>
              提供有关当前环境和平台的信息以及操作它们的方法。
               无法继承此类。
            </summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>
              获取该进程的命令行。
            </summary>
      <returns>
              包含命令行参数的字符串。
            </returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>
              获取或设置当前工作目录的完全限定路径。
            </summary>
      <returns>
              包含目录路径的字符串。
            </returns>
      <exception cref="T:System.ArgumentException">
                  已尝试设置为空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  已尝试设置为 <see langword="null." /></exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  已尝试设置一个找不到的本地路径。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有相应的权限。
                </exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>
              获取当前托管线程的唯一标识符。
            </summary>
      <returns>
              一个整数，表示此托管线程的唯一标识符。
            </returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>
              终止此进程，并将退出代码返回到操作系统。
            </summary>
      <param name="exitCode">
                返回到操作系统的退出代码。
                 使用 0（零）指示处理已成功完成。
              </param>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有足够的安全权限来执行此函数。
                </exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>
              获取或设置进程的退出代码。
            </summary>
      <returns>
              包含退出代码的 32 位有符号整数。
               默认值为 0（零），这指示已成功完成处理。
            </returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>
              将嵌入到指定字符串中的每个环境变量的名称替换为该变量的值的等效字符串，然后返回结果字符串。
            </summary>
      <param name="name">
                包含零个或多个环境变量名的字符串。
                 每个环境变量都用百分号 (%) 引起来。
              </param>
      <returns>
              一个字符串，其中的每个环境变量均被替换为该变量的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>
              向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息。
            </summary>
      <param name="message">
                一条解释进程终止原因的消息；如果未提供解释，则为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>
              向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和异常信息。
            </summary>
      <param name="message">
                一条解释进程终止原因的消息；如果未提供解释，则为 <see langword="null" />。
              </param>
      <param name="exception">
                一个异常，表示导致终止的错误。
                 通常这是 <see langword="catch" /> 块中的异常。
              </param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>
              返回包含当前进程的命令行参数的字符串数组。
            </summary>
      <returns>
              字符串数组，其中的每个元素都包含一个命令行参数。
               第一个元素是可执行文件名，后面的零个或多个元素包含其余的命令行参数。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  系统不支持命令行参数。
                </exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>
              从当前进程检索环境变量的值。
            </summary>
      <param name="variable">
                环境变量名。
              </param>
      <returns>
        <paramref name="variable" /> 指定的环境变量的值；或者如果找不到环境变量，则返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有执行此操作所需的权限。
                </exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>
              从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量的值。
            </summary>
      <param name="variable">
                环境变量名。
              </param>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 值之一。
              </param>
      <returns>
        <paramref name="variable" /> 和 <paramref name="target" /> 参数指定的环境变量的值；或者如果找不到环境变量，则返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是有效的 <see cref="T:System.EnvironmentVariableTarget" /> 值。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有执行此操作所需的权限。
                </exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>
              从当前进程检索所有环境变量名及其值。
            </summary>
      <returns>
              包含所有环境变量名及其值的字典；如果找不到任何环境变量，则返回空字典。
            </returns>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有执行此操作所需的权限。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  缓冲区内存不足。
                </exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>
              从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索所有环境变量名及其值。
            </summary>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 值之一。
              </param>
      <returns>
              包含 <paramref name="target" /> 参数所指定的源中所有环境变量名及其值的字典；否则，如果找不到任何环境变量，则返回空字典。
            </returns>
      <exception cref="T:System.Security.SecurityException">
                  调用方不具有针对 <paramref name="target" /> 的指定值执行此操作的所需权限。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 包含非法值。
                </exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>
              获取由指定枚举标识的系统特殊文件夹的路径。
            </summary>
      <param name="folder">
                标识系统特殊文件夹的枚举常数。
              </param>
      <returns>
              如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。
            
              如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成员。
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  不支持当前平台。
                </exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>
              获取由指定枚举标识的系统特殊文件夹的路径，并使用用于访问特殊文件夹的指定选项。
            </summary>
      <param name="folder">
                标识系统特殊文件夹的枚举常数。
              </param>
      <param name="option">
                指定用于访问特殊文件夹的选项。
              </param>
      <returns>
              如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。
            
              如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成员
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.PlatformNotSupportedException" />
      </exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>
              返回包含当前计算机中的逻辑驱动器名称的字符串数组。
            </summary>
      <returns>
              字符串数组，其中的每个元素都包含逻辑驱动器名称。
               例如，如果计算机的硬盘是第一个逻辑驱动器，则返回的第一个元素是“C:\”。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所需的权限。
                </exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>
              获取一个值，该值指示当前的应用程序域是否正在卸载或者公共语言运行时 (CLR) 是否正在关闭。
            </summary>
      <returns>
              如果当前的应用程序域正在卸载或者 CLR 正在关闭，为 <see langword="true" />；否则，为 <see langword="false." /></returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>
              确定当前操作系统是否为 64 位操作系统。
            </summary>
      <returns>
              如果操作系统为 64 位操作系统，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>
              确定当前进程是否为 64 位进程。
            </summary>
      <returns>
              如果进程为 64 位进程，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>
              获取此本地计算机的 NetBIOS 名称。
            </summary>
      <returns>
              包含此计算机的名称的字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  无法获取此计算机的名称。
                </exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>
              获取为此环境定义的换行字符串。
            </summary>
      <returns>
              对于非 Unix 平台为包含“\r\n”的字符串，对于 Unix 平台则为包含“\n”的字符串。
            </returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>
              获取包含当前平台标识符和版本号的 <see cref="T:System.OperatingSystem" /> 对象。
            </summary>
      <returns>
              一个包含平台标识符和版本号的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此属性不能获得系统版本。
                
                  - 或 - 
                
                  获得的平台标识符不是 <see cref="T:System.PlatformID" /> 的成员
                </exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>
              获取当前计算机上的处理器数。
            </summary>
      <returns>
              指定当前计算机上处理器个数的 32 位有符号整数。
               没有默认值。
               如果当前计算机包含多个处理器组，则此属性返回可用的逻辑处理器数以供公共语言运行时 (CLR) 使用。
            </returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>
              创建、修改或删除当前进程中存储的环境变量。
            </summary>
      <param name="variable">
                环境变量名。
              </param>
      <param name="value">
                要分配给 <paramref name="variable" /> 的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 包含一个长度为零的字符串、一个初始十六进制零字符 (0x00) 或一个等号 ("=")。
                
                  - 或 -
                
                  <paramref name="variable" /> 或 <paramref name="value" /> 的长度大于或等于 32,767 个字符。
                
                  - 或 -
                
                  执行此操作期间出错。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有执行此操作所需的权限。
                </exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>
              创建、修改或删除当前进程中或者为当前用户或本地计算机保留的 Windows 操作系统注册表项中存储的环境变量。
            </summary>
      <param name="variable">
                环境变量名。
              </param>
      <param name="value">
                要分配给 <paramref name="variable" /> 的值。
              </param>
      <param name="target">
                一个用于指定环境变量的位置的枚举值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 包含一个长度为零的字符串、一个初始十六进制零字符 (0x00) 或一个等号 ("=")。
                
                  - 或 -
                
                  <paramref name="variable" /> 的长度大于或等于 32,767 个字符。
                
                  - 或 -
                
                  <paramref name="target" /> 不是 <see cref="T:System.EnvironmentVariableTarget" /> 枚举的一个成员。
                
                  - 或 -
                
                  <paramref name="target" /> 为 <see cref="F:System.EnvironmentVariableTarget.Machine" /> 或 <see cref="F:System.EnvironmentVariableTarget.User" />，且 <paramref name="variable" /> 的长度大于或等于 255。
                
                  - 或 -
                
                  <paramref name="target" /> 为 <see cref="F:System.EnvironmentVariableTarget.Process" />，且 <paramref name="value" /> 的长度大于或等于 32767 个字符。
                
                  - 或 -
                
                  执行此操作期间出错。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有执行此操作所需的权限。
                </exception>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>
              获取当前的堆栈跟踪信息。
            </summary>
      <returns>
              包含堆栈跟踪信息的字符串。
               此值可为 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>
              获取系统目录的完全限定路径。
            </summary>
      <returns>
              包含目录路径的字符串。
            </returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>
              获取操作系统的内存页的字节数。
            </summary>
      <returns>
              系统内存页中的字节数。
            </returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>
              获取系统启动后经过的毫秒数。
            </summary>
      <returns>
              一个 32 位带符号整数，它包含自上次启动计算机以来所经过的时间（以毫秒为单位）。
            </returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>
              获取与当前用户关联的网络域名。
            </summary>
      <returns>
              与当前用户关联的网络域名。
            </returns>
      <exception cref="T:System.PlatformNotSupportedException">
                  操作系统不支持检索网络域名。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  无法检索的网络域名。
                </exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>
              获取一个值，用以指示当前进程是否在用户交互模式中运行。
            </summary>
      <returns>
              如果当前进程在用户交互模式中运行，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>
              获取当前已登录到 Windows 操作系统的人员的用户名。
            </summary>
      <returns>
              已登录到 Windows 的人员的用户名。
            </returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>
              获取一个 <see cref="T:System.Version" /> 对象，该对象描述公共语言运行时的主版本、次版本、内部版本和修订号。
            </summary>
      <returns>
              用于显示公共语言运行时版本的对象。
            </returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>
              获取映射到进程上下文的物理内存量。
            </summary>
      <returns>
              一个 64 位带符号整数，包含映射到进程上下文的物理内存字节的数目。
            </returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>
              Set 或 get 操作中指定的位置存储或检索环境变量的位置。
            </summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>
              存储或检索环境变量 <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> Windows 操作系统注册表中的键。
            </summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>
              环境变量存储或检索与当前进程关联的环境块中。
            </summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>
              存储或检索环境变量 <see langword="HKEY_CURRENT_USER\Environment" /> Windows 操作系统注册表中的键。
            </summary>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>
              创建一个流，其后备存储为内存。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>
              使用初始化为零的可扩展容量初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>
              基于指定的字节数组初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。
            </summary>
      <param name="buffer">
                从中创建当前流的无符号字节数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>
              使用按指定要求初始化的可扩展容量初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。
            </summary>
      <param name="capacity">
                内部数组的初始大小（以字节为单位）。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 为负数。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>
              在 <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性按指定设置的状态下，基于指定的字节数组初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。
            </summary>
      <param name="buffer">
                从中创建此流的无符号字节的数组。
              </param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定该流是否支持写入。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
              基于字节数组的指定区域（索引）初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。
            </summary>
      <param name="buffer">
                从中创建此流的无符号字节的数组。
              </param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。
              </param>
      <param name="count">
                流的长度（以字节为单位）。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
              在 <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性按指定设置的状态下，基于字节数组的指定区域，初始化 <see cref="T:System.IO.MemoryStream" /> 类的无法调整大小的新实例。
            </summary>
      <param name="buffer">
                从中创建此流的无符号字节的数组。
              </param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。
              </param>
      <param name="count">
                流的长度（以字节为单位）。
              </param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定该流是否支持写入。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
              在 <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性和调用 <see cref="M:System.IO.MemoryStream.GetBuffer" /> 的能力按指定设置的状态下，基于字节数组的指定区域初始化 <see cref="T:System.IO.MemoryStream" /> 类的新实例。
            </summary>
      <param name="buffer">
                从中创建此流的无符号字节的数组。
              </param>
      <param name="index">
        <paramref name="buffer" /> 内的索引，流从此处开始。
              </param>
      <param name="count">
                流的长度（以字节为单位）。
              </param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 属性的设置，确定该流是否支持写入。
              </param>
      <param name="publiclyVisible">
                设置为 <see langword="true" /> 可以启用 <see cref="M:System.IO.MemoryStream.GetBuffer" />，它返回无符号字节数组，流从该数组创建；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer">
      </param>
      <param name="offset">
      </param>
      <param name="count">
      </param>
      <param name="callback">
      </param>
      <param name="state">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer">
      </param>
      <param name="offset">
      </param>
      <param name="count">
      </param>
      <param name="callback">
      </param>
      <param name="state">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>
              获取一个值，该值指示当前流是否支持读取。
            </summary>
      <returns>
              如果流是打开的，则为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>
              获取一个值，该值指示当前流是否支持查找。
            </summary>
      <returns>
              如果流是打开的，则为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>
              获取一个值，该值指示当前流是否支持写入。
            </summary>
      <returns>
              如果流支持写入，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>
              获取或设置分配给该流的字节数。
            </summary>
      <returns>
              流的缓冲区的可使用部分的长度。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  容量设置为负或小于该流的当前长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  当前流已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see langword="set" /> 调用不能修改其容量的流。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <param name="destination">
      </param>
      <param name="bufferSize">
      </param>
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>
              使用指定的缓冲区大小和取消令牌，从当前流中异步读取所有字节并将其写入到另一个流中。
            </summary>
      <param name="destination">
                当前流的内容将复制到的流。
              </param>
      <param name="bufferSize">
                缓冲区的大小（以字节为单位）。
                 此值必须大于零。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步复制操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 为负数或零。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放当前的流或目标流。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前的流不支持读取，或目标流不支持写入。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.IO.MemoryStream" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <param name="asyncResult">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <param name="asyncResult">
      </param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>
              重写 <see cref="M:System.IO.Stream.Flush" /> 方法以便不执行任何操作。
            </summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>
              异步清除此流的所有缓冲区，并监视取消请求。
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步刷新操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>
              返回从中创建此流的无符号字节的数组。
            </summary>
      <returns>
              创建此流所用的字节数组；或者如果在当前实例的构造期间没有向 <see cref="T:System.IO.MemoryStream" /> 构造函数提供字节数组，则为基础数组。
            </returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <see langword="MemoryStream" /> 实例不用公共可见缓冲区创建。
                </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>
              获取流的长度（以字节为单位）。
            </summary>
      <returns>
              流的长度（以字节为单位）。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>
              获取或设置流中的当前位置。
            </summary>
      <returns>
              流中的当前位置。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  位置设置为负数值或一个值大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              从当前流中读取字节块并将数据写入缓冲区。
            </summary>
      <param name="buffer">
                当此方法返回时，包含指定的字节数组，该数组中从 <paramref name="offset" /> 到 (<paramref name="offset" /> + <paramref name="count" /> -1) 之间的值由从当前流中读取的字符替换。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储当前流中的数据。
              </param>
      <param name="count">
                最多读取的字节数。
              </param>
      <returns>
              写入缓冲区中的总字节数。
               如果字节数当前不可用，则总字节数可能小于所请求的字节数；如果在读取到任何字节前已到达流结尾，则为零。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 从缓冲区长度减去小于比 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  关闭当前的流实例。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。
            </summary>
      <param name="buffer">
                数据写入的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。
              </param>
      <param name="count">
                最多读取的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  之前的读取操作当前正在使用流。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>
              从当前流中读取一个字节。
            </summary>
      <returns>
              强制转换为 <see cref="T:System.Int32" /> 的字节；或者如果已到达流的末尾，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  关闭当前的流实例。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
              将当前流中的位置设置为指定值。
            </summary>
      <param name="offset">
                流内的新位置。
                 它是相对于 <paramref name="loc" /> 参数的位置，而且可正可负。
              </param>
      <param name="loc">
                类型 <see cref="T:System.IO.SeekOrigin" /> 的值，它用作查找引用点。
              </param>
      <returns>
              流内的新位置，通过将初始引用点和偏移量合并计算而得。
            </returns>
      <exception cref="T:System.IO.IOException">
                  试图在流的开始位置之前进行查找。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有无效<see cref="T:System.IO.SeekOrigin" />。
                
                  - 或 -
                
                  <paramref name="offset" />导致算术溢出。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  当前的流实例已关闭。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>
              将当前流的长度设为指定值。
            </summary>
      <param name="value">
                用于设置长度的值。
              </param>
      <exception cref="T:System.NotSupportedException">
                  当前流不可调整大小和 <paramref name="value" /> 大于当前容量。
                
                  - 或 - 
                
                  当前的流不支持写入。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为负或超过最大长度的概率大于 <see cref="T:System.IO.MemoryStream" />, ，其中的最大长度是 (<see cref="F:System.Int32.MaxValue" /> 的原点)，源是到基础流开始的缓冲区的索引。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>
              将流内容写入字节数组，而与 <see cref="P:System.IO.MemoryStream.Position" /> 属性无关。
            </summary>
      <returns>
              新的字节数组。
            </returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>
              返回从中创建此流的无符号字节的数组。
               用于指示转换是否成功的返回值。
            </summary>
      <param name="buffer">
                用于创建此流的字节数组段。
              </param>
      <returns>
              如果转换成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              使用从缓冲区读取的数据将字节块写入当前流。
            </summary>
      <param name="buffer">
                从中写入数据的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
              </param>
      <param name="count">
                最多写入的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                   有关更多信息请参阅 <see cref="P:System.IO.Stream.CanWrite" />。
                
                  - 或 - 
                
                  当前的位置是比更接近 <paramref name="count" /> 个字节写入流和容量的末尾不能修改。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 从缓冲区长度减去小于比 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  关闭当前的流实例。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
            </summary>
      <param name="buffer">
                从中写入数据的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。
              </param>
      <param name="count">
                最多写入的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  流正在由前一次写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>
              将一个字节写入当前位置上的当前流。
            </summary>
      <param name="value">
                要写入的字节。
              </param>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                   有关更多信息请参阅 <see cref="P:System.IO.Stream.CanWrite" />。
                
                  - 或 - 
                
                  当前位置位于流的结尾，不能修改容量。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  当前流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>
              将此内存流的整个内容写入到另一个流中。
            </summary>
      <param name="stream">
                要写入此内存流的流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  当前或目标流已关闭。
                </exception>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>
              定义组件、 类型或类型成员，可以跨多个版本的兼容性保证。
            </summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 类，具有一个值，指示库、 类型或成员的保证跨多个版本的兼容性级别。
            </summary>
      <param name="guarantees">
                指定的保证跨多个版本的兼容性级别的枚举值之一。
              </param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>
              获取一个值，该值指示的有保证的库、 类型或类型成员跨越多个版本的兼容级别。
            </summary>
      <returns>
              指定的保证跨多个版本的兼容性级别的枚举值之一。
            </returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>
              描述组件、 类型或类型成员，可以跨多个版本的兼容性保证。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>
              开发人员保证多版本 exchange 的兼容性类型。
               类型的使用者可能会在将来的版本之间的兼容性，并且可以使用在其所有接口的类型。
               通过并行执行不能解决版本控制问题。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>
              开发人员并不保证版本间的兼容性。
               组件、 类型或成员的使用者可以预期将来的版本会中断现有客户端。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>
              组件已经过测试时进行多个版本的程序集加载到同一应用程序域。
               未来版本可能会破坏兼容性。
               但是，当进行此类重大更改时，旧版本不会被修改，但继续与新版本同时存在。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>
              开发人员保证版本间的稳定兼容性。
               类型的使用者可以预期将来的版本不会中断现有客户端。
               但是，如果是这样，客户端在其接口中不使用该类型，通过并行执行可以解决此问题。
            </summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>
              表示 .NET Framework 的版本名称。
            </summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 从一个字符串，包含有关.NET Framework 的版本信息的类。
            </summary>
      <param name="frameworkName">
                一个字符串，包含.NET Framework 的版本信息。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> 为 <see cref="F:System.String.Empty" />。
                
                  - 或 -
                
                  <paramref name="frameworkName" /> 具有少于两个部分或三个以上的组件。
                
                  - 或 -
                
                  <paramref name="frameworkName" /> 不包括主版本号和次版本号。
                
                  - 或 -
                
                  <paramref name="frameworkName " />不包括有效的版本号。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 从字符串的类和一个 <see cref="T:System.Version" /> 标识的.NET Framework 版本的对象。
            </summary>
      <param name="identifier">
                一个字符串，标识的.NET Framework 版本。
              </param>
      <param name="version">
                一个包含.NET Framework 的版本信息的对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="version" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 类，从字符串 <see cref="T:System.Version" /> 标识的.NET Framework 版本，以及配置文件名称的对象。
            </summary>
      <param name="identifier">
                一个字符串，标识的.NET Framework 版本。
              </param>
      <param name="version">
                一个包含.NET Framework 的版本信息的对象。
              </param>
      <param name="profile">
                配置文件名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="version" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>
              返回一个值，该值指示是否此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例表示相同的.NET Framework 版本与指定的对象。
            </summary>
      <param name="obj">
                要与当前类型进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果当前的每个组件 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的相应部分匹配 <paramref name="obj" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>
              返回一个值，该值指示是否此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例表示与指定相同的.NET Framework 版本 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例。
            </summary>
      <param name="other">
                要与当前类型进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果当前的每个组件 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的相应部分匹配 <paramref name="other" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>
              获取此的完整名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </summary>
      <returns>
              完整名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>
              返回的哈希代码 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </summary>
      <returns>
              32 位有符号的整数，表示此实例的哈希代码。
            </returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>
              获取此标识符 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </summary>
      <returns>
              此标识符 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象是否表示相同的 .NET Framework 版本。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 参数表示相同的 .NET Framework 版本，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象是否表示不同的 .NET Framework 版本。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 参数表示不同的 .NET Framework 版本，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>
              获取此配置文件名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </summary>
      <returns>
              此配置文件名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>
              返回的字符串表示形式 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </summary>
      <returns>
              表示此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的字符串。
            </returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>
              获取此版本 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </summary>
      <returns>
              一个对象，包含有关此版本信息 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。
            </returns>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>
              定义由权限类型实现的方法。
            </summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>
              创建并返回当前权限的相同副本。
            </summary>
      <returns>
              当前权限的副本。
            </returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>
              引发 <see cref="T:System.Security.SecurityException" /> 在运行时，如果不满足安全要求。
            </summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>
              创建并返回一个权限，该权限是当前权限与指定权限的交集。
            </summary>
      <param name="target">
                要与当前权限相交的权限。
                 它必须与当前权限属于同一类型。
              </param>
      <returns>
              表示当前权限和指定权限的交集的一个新权限。
               如果交集为空，则此新权限为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且是与当前权限不属于同一类的实例。
                </exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
              确定当前权限是否为指定权限的子集。
            </summary>
      <param name="target">
                将要测试子集关系的权限。
                 此权限必须与当前权限属于同一类型。
              </param>
      <returns>
              如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。
                </exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>
              创建一个权限，该权限是当前权限与指定权限的并集。
            </summary>
      <param name="target">
                与当前权限合并的权限。
                 它必须与当前权限属于同一类型。
              </param>
      <returns>
              表示同时兼具当前权限和指定权限的新权限。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。
                </exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>
              定义与 XML 元素表示形式转换权限对象状态的方法。
            </summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>
              通过 XML 编码重新构造具有指定状态的安全对象。
            </summary>
      <param name="e">
                用于重新构造安全对象的 XML 编码。
              </param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>
              创建安全对象及其当前状态的 XML 编码。
            </summary>
      <returns>
              安全对象的 XML 编码，包括任何状态信息。
            </returns>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>
              指定代码访问安全性的基属性类。
            </summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 具有指定 <see cref="T:System.Security.Permissions.SecurityAction" />。
            </summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。
              </param>
    </member>
    <member name="T:System.StringComparer">
      <summary>
              表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。
            </summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>
              初始化 <see cref="T:System.StringComparer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>
              当在派生类中重写时，将比较两个对象并返回其相对排序顺序的指示。
            </summary>
      <param name="x">
                要与 <paramref name="y" /> 比较的对象。
              </param>
      <param name="y">
                要与 <paramref name="x" /> 比较的对象。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。
            
                      值
                    
                      含义
                    
                      小于零
                    
                      <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之前。
                    
                      - 或 -
                    
                      <paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。
                    
                      零
                    
                      <paramref name="x" /> 等于 <paramref name="y" />。
                    
                      - 或 -
                    
                      <paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。
                    
                      大于零
                    
                      <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。
                    
                      - 或 -
                    
                      <paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
                  既不<paramref name="x" />也不<paramref name="y" />是<see cref="T:System.String" />对象，它们都无法<paramref name="x" />也不<paramref name="y" />实现<see cref="T:System.IComparable" />接口。
                </exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>
              当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。
            </summary>
      <param name="x">
                要与 <paramref name="y" /> 比较的字符串。
              </param>
      <param name="y">
                要与 <paramref name="x" /> 比较的字符串。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。
            
                      值
                    
                      含义
                    
                      小于零
                    
                      <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之前。
                    
                      - 或 -
                    
                      <paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。
                    
                      零
                    
                      <paramref name="x" /> 等于 <paramref name="y" />。
                    
                      - 或 -
                    
                      <paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。
                    
                      大于零
                    
                      <paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。
                    
                      - 或 -
                    
                      <paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。
                    </returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>
              创建 <see cref="T:System.StringComparer" /> 对象，该对象根据指定区域性的规则对字符串进行比较。
            </summary>
      <param name="culture">
                一个区域性，其语言规则用于执行字符串比较。
              </param>
      <param name="ignoreCase">
        <see langword="true" /> 指定比较操作不区分大小写；<see langword="false" /> 指定比较操作区分大小写。
              </param>
      <returns>
              一个新 <see cref="T:System.StringComparer" /> 对象，该对象根据 <paramref name="culture" /> 参数使用的比较规则以及 <paramref name="ignoreCase" /> 参数指定的大小写规则执行字符串比较。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>
              获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。
            </summary>
      <returns>
              一个新 <see cref="T:System.StringComparer" /> 对象。
            </returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>
              获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。
            </summary>
      <returns>
              一个新 <see cref="T:System.StringComparer" /> 对象。
            </returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>
              当在派生类中重写时，指示两个对象是否相等。
            </summary>
      <param name="x">
                要与 <paramref name="y" /> 比较的对象。
              </param>
      <param name="y">
                要与 <paramref name="x" /> 比较的对象。
              </param>
      <returns>
              如果 <see langword="true" /> 和 <paramref name="x" /> 引用同一对象，或者 <paramref name="y" /> 和 <paramref name="x" /> 是相同的对象类型且这些对象相等，或者 <paramref name="y" /> 和 <paramref name="x" /> 都是 <paramref name="y" />，则为 <see langword="null" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>
              当在派生类中重写时，指示两个字符串是否相等。
            </summary>
      <param name="x">
                要与 <paramref name="y" /> 比较的字符串。
              </param>
      <param name="y">
                要与 <paramref name="x" /> 比较的字符串。
              </param>
      <returns>
              如果 <see langword="true" /> 和 <paramref name="x" /> 引用同一对象，或者 <paramref name="y" /> 和 <paramref name="x" /> 相等，或者 <paramref name="y" /> 和 <paramref name="x" /> 都是 <paramref name="y" />，则为 <see langword="null" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>
              当在派生类中重写时，将获取指定对象的哈希代码。
            </summary>
      <param name="obj">
                一个对象。
              </param>
      <returns>
              根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的内存可用于分配计算哈希代码所需的缓冲区。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>
              当在派生类中重写时，将获取指定字符串的哈希代码。
            </summary>
      <param name="obj">
                一个字符串。
              </param>
      <returns>
              根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的内存可用于分配计算哈希代码所需的缓冲区。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>
              获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行区分大小写的字符串比较。
            </summary>
      <returns>
              一个新 <see cref="T:System.StringComparer" /> 对象。
            </returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>
              获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行不区分大小写的字符串比较。
            </summary>
      <returns>
              一个新 <see cref="T:System.StringComparer" /> 对象。
            </returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>
              获取一个 <see cref="T:System.StringComparer" /> 对象，该对象执行区分大小写的序号字符串比较。
            </summary>
      <returns>
              一个 <see cref="T:System.StringComparer" /> 对象。
            </returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>
              获取一个 <see cref="T:System.StringComparer" /> 对象，该对象执行不区分大小写的序号字符串比较。
            </summary>
      <returns>
              一个 <see cref="T:System.StringComparer" /> 对象。
            </returns>
    </member>
    <member name="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>
              提供用于规范化字符串的扩展方法。
            </summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>
              指示指定字符串是否符合 Unicode 范式 C。 
            </summary>
      <param name="value">
                一个字符串。
              </param>
      <returns>
              如果 <paramref name="value" /> 符合范式 C，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含无效的 Unicode 字符。
                </exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>
              指示某一字符串是否符合指定 Unicode 范式。
            </summary>
      <param name="value">
                一个字符串。
              </param>
      <param name="normalizationForm">
                一个 Unicode 范式。
              </param>
      <returns>
              如果 <paramref name="value" /> 符合范式 <paramref name="normalizationForm" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含无效的 Unicode 字符。
                </exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>
              将字符串规范化为 Unicode 范式 C。 
            </summary>
      <param name="value">
                要规范化的字符串。
              </param>
      <returns>
              一个新字符串，其文本值与 <paramref name="value" /> 相同，但其二进制表示形式符合 Unicode 范式 C。 
            </returns>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>
              将字符串规范化为指定的 Unicode 范式。
            </summary>
      <param name="value">
                要规范化的字符串。
              </param>
      <param name="normalizationForm">
                Unicode 范式。
              </param>
      <returns>
              一个新字符串，其文本值与 <paramref name="value" /> 相同，但其二进制表示形式符合 <paramref name="normalizationForm" /> 范式。
            </returns>
    </member>
    <member name="T:System.AppDomain">
      <summary>
              表示应用程序域，它是一个应用程序在其中执行的独立环境。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>
              将指定的目录名追加到专用路径列表。
            </summary>
      <param name="path">
                要追加到专用路径的目录名称。
              </param>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>
              返回应用策略后的程序集显示名称。
            </summary>
      <param name="assemblyName">
                程序集显示名称，采用 <see cref="P:System.Reflection.Assembly.FullName" /> 属性提供的格式。
              </param>
      <returns>
              包含应用策略后的程序集显示名称的字符串。
            </returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>
              在加载程序集时发生。
            </summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>
              在对程序集的解析失败时发生。
            </summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>
              获取基目录，它由程序集冲突解决程序用来探测程序集。
            </summary>
      <returns>
              基目录，由程序集冲突解决程序用来探测程序集。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>
              将指定专用程序集位置的路径重置为空字符串 ("")。
            </summary>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>
              将包含影像复制的程序集的目录列表重置为空字符串 ("")。
            </summary>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>
              使用指定的名称新建应用程序域。
            </summary>
      <param name="friendlyName">
                域的友好名称。
              </param>
      <returns>
              新创建的应用程序域。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>
              获取当前 <see cref="T:System.Threading.Thread" /> 的当前应用程序域。
            </summary>
      <returns>
              当前应用程序域。
            </returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>
              在即将卸载 <see cref="T:System.AppDomain" /> 时发生。
            </summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>
              获取目录，它由程序集冲突解决程序用来探测动态创建的程序集。
            </summary>
      <returns>
              目录，它由程序集冲突解决程序用来探测动态创建的程序集。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>
              使用指定的自变量、哈希值和哈希算法执行指定文件中包含的程序集。
            </summary>
      <param name="assemblyFile">
                包含要执行程序集的文件的名称。
              </param>
      <param name="args">
                程序集的入口点的自变量。
              </param>
      <param name="hashValue">
                表示计算所得的哈希代码的值。
              </param>
      <param name="hashAlgorithm">
                表示程序集清单使用的哈希算法。
              </param>
      <returns>
              程序集的入口点返回的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
                
                  - 或 -
                
                  <paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定程序集具有不到入口点。
                </exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>
              使用指定的自变量执行指定文件中包含的程序集。
            </summary>
      <param name="assemblyFile">
                包含要执行程序集的文件的名称。
              </param>
      <param name="args">
                程序集的入口点的自变量。
              </param>
      <returns>
              程序集的入口点返回的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
                
                  - 或 -
                
                  <paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定程序集具有不到入口点。
                </exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>
              执行指定文件中包含的程序集。
            </summary>
      <param name="assemblyFile">
                包含要执行程序集的文件的名称。
              </param>
      <returns>
              程序集的入口点返回的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定程序集具有不到入口点。
                </exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>
              在给定其显示名称的情况下执行程序集。
            </summary>
      <param name="assemblyName">
                程序集的显示名称。
                 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。
              </param>
      <returns>
              程序集的入口点返回的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  通过指定的程序集 <paramref name="assemblyName" /> 找不到。
                </exception>
      <exception cref="T:System.BadImageFormatException">
                  通过指定的程序集 <paramref name="assemblyName" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载版本 2.0 或更高版本的公共语言运行时和 <paramref name="assemblyName" /> 编译时所用的更高版本。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  通过指定的程序集 <paramref name="assemblyName" /> 发现，但无法加载。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定程序集具有不到入口点。
                </exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>
              根据给定的 <see cref="T:System.Reflection.AssemblyName" /> 使用指定的参数执行程序集。
            </summary>
      <param name="assemblyName">
        <see cref="T:System.Reflection.AssemblyName" /> 对象，表示程序集名称。
              </param>
      <param name="args">
                启动该进程时传递的命令行参数。
              </param>
      <returns>
              程序集的入口点返回的值。
            </returns>
      <exception cref="T:System.IO.FileNotFoundException">
                  通过指定的程序集 <paramref name="assemblyName" /> 找不到。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  通过指定的程序集 <paramref name="assemblyName" /> 发现，但无法加载。
                </exception>
      <exception cref="T:System.BadImageFormatException">
                  通过指定的程序集 <paramref name="assemblyName" /> 不是有效的程序集。
                
                  - 或 -
                
                  <paramref name="assemblyName" /> 编译时所用的公共语言运行时更高版本比当前加载的版本。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定程序集具有不到入口点。
                </exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>
              在给定显示名称的情况下，使用指定自变量执行程序集。
            </summary>
      <param name="assemblyName">
                程序集的显示名称。
                 请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。
              </param>
      <param name="args">
                启动该进程时传递的命令行参数。
              </param>
      <returns>
              程序集的入口点返回的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  通过指定的程序集 <paramref name="assemblyName" /> 找不到。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  通过指定的程序集 <paramref name="assemblyName" /> 发现，但无法加载。
                </exception>
      <exception cref="T:System.BadImageFormatException">
                  通过指定的程序集 <paramref name="assemblyName" /> 不是有效的程序集。
                
                  - 或 -
                
                  <paramref name="assemblyName" /> 编译时所用的公共语言运行时更高版本比当前加载的版本。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定程序集具有不到入口点。
                </exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>
              当托管代码抛出异常时发生，在运行时在调用堆栈中搜索应用程序域中的异常处理程序之前。
            </summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>
              获取此应用程序域的友好名称。
            </summary>
      <returns>
              此应用程序域的友好名称。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>
              获取已加载到此应用程序域的执行上下文中的程序集。
            </summary>
      <returns>
              此应用程序域中的程序集的数组。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>
              获取当前线程标识符。
            </summary>
      <returns>
              一个 32 位带符号整数，它是当前线程的标识符。
            </returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>
              为指定名称获取存储在当前应用程序域中的值。
            </summary>
      <param name="name">
                预定义应用程序域属性的名称，或已定义的应用程序域属性的名称。
              </param>
      <returns>
        <paramref name="name" /> 属性的值，或 <see langword="null" />（如果属性不存在）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>
              获得一个整数，该整数唯一标识进程中的应用程序域。
            </summary>
      <returns>
              标识应用程序域的整数。
            </returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>
              获取可以为 null 的布尔值，该值指示是否设置了任何兼容性开关，如果已设置，则指定是否设置了指定的兼容性开关。
            </summary>
      <param name="value">
                要测试的兼容性开关。
              </param>
      <returns>
              如果未设置任何兼容性开关，则为 null 引用（Visual Basic 中的 <see langword="Nothing" />）；否则，为布尔值，指示是否设置了由 <paramref name="value" /> 指定的兼容性开关。
            </returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>
              返回一个值，指示应用程序域是否是进程的默认应用程序域。
            </summary>
      <returns>
              如果当前 <see cref="T:System.AppDomain" /> 对象表示进程的默认应用程序域，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>
              指示此应用程序域是否正在卸载以及公共语言运行时是否正在终止该域包含的对象。
            </summary>
      <returns>
              如果此应用程序域正在卸载，并且公共语言运行时已开始调用终止程序，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>
              获取一个值，该值指示加载到当前应用程序域的程序集是否是以完全信任方式执行的。
            </summary>
      <returns>
              如果加载到当前应用程序域的程序集是以完全信任方式执行的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>
              获取一个值，该值指示当前应用程序域是否拥有一个为加载到该应用程序域的所有程序集授予的权限集。
            </summary>
      <returns>
              如果当前应用程序域具有一组同构权限，则为 <see langword="true" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>
              加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。
            </summary>
      <param name="rawAssembly">
        <see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。
              </param>
      <returns>
              加载的程序集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高版本编译的。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
              在给定 <see cref="T:System.Reflection.AssemblyName" /> 的情况下加载 <see cref="T:System.Reflection.Assembly" />。
            </summary>
      <param name="assemblyRef">
                描述要加载的程序集的对象。
              </param>
      <returns>
              加载的程序集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> 未找到。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高版本编译的。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>
              在给定其显示名称的情况下加载 <see cref="T:System.Reflection.Assembly" />。
            </summary>
      <param name="assemblyString">
                程序集的显示名称。
                 请参阅<see cref="P:System.Reflection.Assembly.FullName" />。
              </param>
      <returns>
              加载的程序集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 为 <see langword="null" /></exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 未找到。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高版本编译的。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>
              加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。
               还加载表示 <see cref="T:System.Reflection.Assembly" /> 的符号的原始字节。
            </summary>
      <param name="rawAssembly">
        <see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。
              </param>
      <param name="rawSymbolStore">
        <see langword="byte" /> 类型的数组，它包含表示程序集符号的原始字节。
              </param>
      <returns>
              加载的程序集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载版本 2.0 或更高版本的公共语言运行时和 <paramref name="rawAssembly" /> 编译时所用的更高版本。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  一个程序集或模块用两个不同的证据加载了两次。
                </exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>
              获取或设置一个值，该值指示是否对当前进程启用应用程序域的 CPU 和内存监视。
               一旦对进程启用了监视，则无法将其禁用。
            </summary>
      <returns>
              如果启用监视，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  当前进程试图将值 <see langword="false" /> 赋予此属性。
                </exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>
              获取上次回收后保留下来的，已知由当前应用程序域引用的字节数。
            </summary>
      <returns>
              保留下来的字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>
              获取进程中所有应用程序域的上次回收后保留下来的总字节数。
            </summary>
      <returns>
              进程的保留下来的总字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>
              获取自从创建应用程序域后由应用程序域进行的所有内存分配的总大小（以字节为单位，不扣除已回收的内存）。
            </summary>
      <returns>
              所有内存分配的总大小。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>
              获取自从进程启动后所有线程在当前应用程序域中执行时所使用的总处理器时间。
            </summary>
      <returns>
              当前应用程序域的总处理器时间。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>
              当默认应用程序域的父进程存在时发生。
            </summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>
              当程序集的解析在仅限反射的上下文中失败时发生。
            </summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>
              返回已加载到应用程序域的只反射上下文中的程序集。
            </summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 对象数组，表示加载到应用程序域的只反射上下文中的程序集。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  试图对卸载的应用程序域的操作。
                </exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>
              获取基目录下的路径，在此程序集冲突解决程序应探测专用程序集。
            </summary>
      <returns>
              基目录下的路径，在此程序集冲突解决程序应探测专用程序集。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>
              当资源解析因资源不是程序集中的有效链接资源或嵌入资源而失败时发生。
            </summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>
              确定指定目录路径为对程序集进行影像复制的位置。
            </summary>
      <param name="path">
                到卷影副本位置的完全限定路径。
              </param>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>
              为指定的应用程序域属性分配指定值。
            </summary>
      <param name="name">
                要创建或更改的用户定义应用程序域属性的名称。
              </param>
      <param name="data">
                该属性的值。
              </param>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>
              建立指定的目录路径，作为存储和访问动态生成的文件的子目录的基目录。
            </summary>
      <param name="path">
                完全限定路径，是存储动态程序集的子目录的基目录。
              </param>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>
              指定在此应用程序域中执行时如果线程尝试绑定到用户，用户和标识对象应如何附加到该线程。
            </summary>
      <param name="policy">
        <see cref="T:System.Security.Principal.PrincipalPolicy" /> 值之一，指定要附加到线程的主体对象类型。
              </param>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>
              打开影像复制功能。
            </summary>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>
              确定指定目录路径为要进行影像复制的程序集的位置。
            </summary>
      <param name="path">
                目录名列表，各名称用分号隔开。
              </param>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>
              设置在以下情况下要附加到线程的默认主体对象，即当线程在此应用程序域中执行时，如果线程尝试绑定到主体这种情况。
            </summary>
      <param name="principal">
                要附加到线程的主体对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Policy.PolicyException">
                  已设置线程的主体。
                </exception>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>
              获取应用程序域是否配置为影像副本文件的指示。
            </summary>
      <returns>
              如果应用程序域配置为卷影副本文件，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  在卸载的应用程序域上尝试该操作。
                </exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>
              获取一个字符串表示，包含应用程序域友好名称和任意上下文策略。
            </summary>
      <returns>
              一个字符串，通过连接字符串“Name:”、应用程序域的友好名称以及上下文策略的字符串表示或字符串“There are no context policies”而成。
            </returns>
      <exception cref="T:System.AppDomainUnloadedException">
                  表示由当前的应用程序域<see cref="T:System.AppDomain" />已卸载。
                </exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>
              在对类型的解析失败时发生。
            </summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>
              当某个异常未被捕获时出现。
            </summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>
              卸载指定的应用程序域。
            </summary>
      <param name="domain">
                要卸载的应用程序域。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.CannotUnloadAppDomainException">
        <paramref name="domain" />无法卸载。
                </exception>
      <exception cref="T:System.Exception">
                  在卸载过程中出错。
                </exception>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>
              提供的文本编写器可以通过将选项卡上的字符串标记缩进新行。
            </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
              新实例初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类使用指定的文本编写器和默认选项卡上的字符串。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于输出。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类使用指定的文本编写器和选项卡字符串。
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于输出。
              </param>
      <param name="tabString">
                要用于缩进的选项卡上字符串。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>
              关闭正在写入到的文档。
            </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>
              指定默认选项卡上字符串。
               此字段为常数。
            </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>
              获取文本编写器使用的编码。
            </summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 指示文本编写器使用的编码。
            </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>
              刷新流。
            </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>
              获取或设置要缩进的空格数。
            </summary>
      <returns>
              要缩进的空格数。
            </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>
              获取 <see cref="T:System.IO.TextWriter" /> 使用。
            </summary>
      <returns>
              要使用的 <see cref="T:System.IO.TextWriter" />。
            </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>
              获取或设置要使用的新行字符。
            </summary>
      <returns>
              要使用的新行字符。
            </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>
              将输出一次为每个符合缩进级别的选项卡上字符串 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 属性。
            </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
              写出格式化的字符串，指定使用相同的语义。
            </summary>
      <param name="format">
                要使用的格式设置字符串。
              </param>
      <param name="arg0">
                要写入的格式化字符串的第一个对象。
              </param>
      <param name="arg1">
                要写入的格式化字符串的第二个对象。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
              字符的子数组写入文本流。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                缓冲区中的起始索引。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>
              写出格式化的字符串，指定使用相同的语义。
            </summary>
      <param name="format">
                要使用的格式设置字符串。
              </param>
      <param name="arg">
                要输出的参数数组。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>
              将指定的字符串写入文本流。
            </summary>
      <param name="s">
                要写入的字符串。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>
              使用单一的文本表示形式写入文本流。
            </summary>
      <param name="value">
                要写入的 <see langword="single" />。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>
              一个对象的文本表示形式写入文本流。
            </summary>
      <param name="value">
                要写入的对象。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>
              写出格式化的字符串，指定使用相同的语义。
            </summary>
      <param name="format">
                格式设置字符串。
              </param>
      <param name="arg0">
                要写入的格式化字符串的对象。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>
              一个整数的文本表示写入文本流。
            </summary>
      <param name="value">
                要写入的整数。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>
              一个双精度值的文本表示形式写入文本流。
            </summary>
      <param name="value">
                要写入的 <see langword="double" />。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>
              将字符数组写入文本流。
            </summary>
      <param name="buffer">
                要写入的字符数组。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>
              将字符写入文本流。
            </summary>
      <param name="value">
                要写入的字符。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>
              一个布尔值的文本表示写入文本流。
            </summary>
      <param name="value">
                要写入的布尔值。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>
              将一个 8 字节整数的文本表示写入文本流。
            </summary>
      <param name="value">
                要写入的 8 字节整数。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
              写入字符后, 跟行终止符，写入文本流的子的数组。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                缓冲区中的起始索引。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>
              写出格式化的字符串后, 跟行终止符，使用指定的相同的语义。
            </summary>
      <param name="format">
                要使用的格式设置字符串。
              </param>
      <param name="arg">
                要输出的参数数组。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>
              写出格式化的字符串后, 跟行终止符，使用指定的相同的语义。
            </summary>
      <param name="format">
                格式设置字符串。
              </param>
      <param name="arg0">
                要写入的格式化字符串的对象。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>
              写入的文本表示形式的 UInt32 跟行终止符，写入文本流。
            </summary>
      <param name="value">
                若要输出 UInt32。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>
              将指定的字符串后, 跟行终止符，写入文本流。
            </summary>
      <param name="s">
                要写入的字符串。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>
              写入的文本表示形式的单个，跟行终止符，写入文本流。
            </summary>
      <param name="value">
                要写入的 <see langword="single" />。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>
              写入的文本表示形式的对象，跟行终止符，写入文本流。
            </summary>
      <param name="value">
                要写入的对象。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>
              写入的文本表示形式双精度，这跟行终止符，写入文本流。
            </summary>
      <param name="value">
                要写入的 <see langword="double" />。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>
              写入的文本表示形式的整数，后面带有行结束符，写入文本流。
            </summary>
      <param name="value">
                要写入的整数。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>
              将字符数组，跟行终止符，写入文本流。
            </summary>
      <param name="buffer">
                要写入的字符数组。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>
              将后跟行终止符，写入文本流的字符。
            </summary>
      <param name="value">
                要写入的字符。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>
              写入一个布尔值后, 跟行终止符，写入文本流的文本表示形式。
            </summary>
      <param name="value">
                要写入的布尔值。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>
              将行结束符的字符串。
            </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
              写出格式化的字符串后, 跟行终止符，使用指定的相同的语义。
            </summary>
      <param name="format">
                要使用的格式设置字符串。
              </param>
      <param name="arg0">
                要写入的格式化字符串的第一个对象。
              </param>
      <param name="arg1">
                要写入的格式化字符串的第二个对象。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>
              写入的文本表示形式的 8 字节整数后, 跟行终止符，写入文本流。
            </summary>
      <param name="value">
                要写入的 8 字节整数。
              </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>
              将指定的字符串写入无制表符的行。
            </summary>
      <param name="s">
                要写入的字符串。
              </param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>Implements the <see cref="T:System.Collections.IList"></see> interface using an array whose size is dynamically increased as required.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList"></see> class that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList"></see> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</summary>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements are copied to the new list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c">c</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList"></see> class that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>Creates an <see cref="T:System.Collections.ArrayList"></see> wrapper for a specific <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to wrap.</param>
      <returns>The <see cref="System.Collections.ArrayList"></see> wrapper around the <see cref="System.Collections.IList"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to be added to the end of the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>The <see cref="System.Collections.ArrayList"></see> index at which the <paramref name="value">value</paramref> has been added.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>Adds the elements of an <see cref="T:System.Collections.ICollection"></see> to the end of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements should be added to the end of the <see cref="T:System.Collections.ArrayList"></see>. The collection itself cannot be null, but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c">c</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>Searches the entire sorted <see cref="T:System.Collections.ArrayList"></see> for an element using the default comparer and returns the zero-based index of the element.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate. The value can be null.</param>
      <returns>The zero-based index of <paramref name="value">value</paramref> in the sorted <see cref="System.Collections.ArrayList"></see>, if <paramref name="value">value</paramref> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count"></see>.</returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="value">value</paramref> nor the elements of <see cref="System.Collections.ArrayList"></see> implement the <see cref="System.IComparable"></see> interface.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value">value</paramref> is not of the same type as the elements of the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>Searches the entire sorted <see cref="T:System.Collections.ArrayList"></see> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate. The value can be null.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 null to use the default comparer that is the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <returns>The zero-based index of <paramref name="value">value</paramref> in the sorted <see cref="System.Collections.ArrayList"></see>, if <paramref name="value">value</paramref> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count"></see>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer">comparer</paramref> is null and neither <paramref name="value">value</paramref> nor the elements of <see cref="System.Collections.ArrayList"></see> implement the <see cref="System.IComparable"></see> interface.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer">comparer</paramref> is null and <paramref name="value">value</paramref> is not of the same type as the elements of the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Searches a range of elements in the sorted <see cref="T:System.Collections.ArrayList"></see> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="value">The <see cref="T:System.Object"></see> to locate. The value can be null.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 null to use the default comparer that is the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <returns>The zero-based index of <paramref name="value">value</paramref> in the sorted <see cref="System.Collections.ArrayList"></see>, if <paramref name="value">value</paramref> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ArrayList.Count"></see>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range in the <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 <paramref name="comparer">comparer</paramref> is null and neither <paramref name="value">value</paramref> nor the elements of <see cref="System.Collections.ArrayList"></see> implement the <see cref="System.IComparable"></see> interface.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer">comparer</paramref> is null and <paramref name="value">value</paramref> is not of the same type as the elements of the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>Gets or sets the number of elements that the <see cref="T:System.Collections.ArrayList"></see> can contain.</summary>
      <returns>The number of elements that the <see cref="System.Collections.ArrayList"></see> can contain.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="System.Collections.ArrayList.Capacity">
        </see> is set to a value that is less than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>A shallow copy of the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="item">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="System.Collections.ArrayList"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>Copies the entire <see cref="T:System.Collections.ArrayList"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the beginning of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.ArrayList"></see> is greater than the number of elements that the destination <paramref name="array">array</paramref> can contain.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ArrayList"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array">array</paramref> is multidimensional.  
 -or-  
 The number of elements in the source <see cref="System.Collections.ArrayList"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from the <see cref="T:System.Collections.ArrayList"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="index">The zero-based index in the source <see cref="T:System.Collections.ArrayList"></see> at which copying begins.</param>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="arrayIndex">arrayIndex</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array">array</paramref> is multidimensional.  
 -or-  
 <paramref name="index">index</paramref> is equal to or greater than the <see cref="System.Collections.ArrayList.Count"></see> of the source <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 The number of elements from <paramref name="index">index</paramref> to the end of the source <see cref="System.Collections.ArrayList"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>The number of elements actually contained in the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> wrapper with a fixed size.</summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList"></see> to wrap.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> wrapper with a fixed size.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>Returns an <see cref="T:System.Collections.IList"></see> wrapper with a fixed size.</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to wrap.</param>
      <returns>An <see cref="System.Collections.IList"></see> wrapper with a fixed size.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>Returns an enumerator for the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>An <see cref="System.Collections.IEnumerator"></see> for the entire <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>Returns an enumerator for a range of elements in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based starting index of the <see cref="T:System.Collections.ArrayList"></see> section that the enumerator should refer to.</param>
      <param name="count">The number of elements in the <see cref="T:System.Collections.ArrayList"></see> section that the enumerator should refer to.</param>
      <returns>An <see cref="System.Collections.IEnumerator"></see> for the specified range of elements in the <see cref="System.Collections.ArrayList"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not specify a valid range in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> which represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList"></see> index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> which represents a subset of the elements in the source <see cref="System.Collections.ArrayList"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the entire <see cref="System.Collections.ArrayList"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that extends from the specified index to the last element.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that extends from <paramref name="startIndex">startIndex</paramref> to the last element, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that starts at <paramref name="startIndex">startIndex</paramref> and contains <paramref name="count">count</paramref> number of elements, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.  
 -or-  
 <paramref name="startIndex">startIndex</paramref> and <paramref name="count">count</paramref> do not specify a valid section in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ArrayList"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to insert. The value can be null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>Inserts the elements of a collection into the <see cref="T:System.Collections.ArrayList"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements should be inserted into the <see cref="T:System.Collections.ArrayList"></see>. The collection itself cannot be null, but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c">c</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList"></see> has a fixed size.</summary>
      <returns>true if the <see cref="System.Collections.ArrayList"></see> has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList"></see> is read-only.</summary>
      <returns>true if the <see cref="System.Collections.ArrayList"></see> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ArrayList"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="System.Collections.ArrayList"></see> is synchronized (thread safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is equal to or greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value">value</paramref> within the entire the <see cref="System.Collections.ArrayList"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that extends from the first element to the specified index.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that extends from the first element to <paramref name="startIndex">startIndex</paramref>, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList"></see> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value">value</paramref> within the range of elements in the <see cref="System.Collections.ArrayList"></see> that contains <paramref name="count">count</paramref> number of elements and ends at <paramref name="startIndex">startIndex</paramref>, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex">startIndex</paramref> is outside the range of valid indexes for the <see cref="System.Collections.ArrayList"></see>.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.  
 -or-  
 <paramref name="startIndex">startIndex</paramref> and <paramref name="count">count</paramref> do not specify a valid section in the <see cref="System.Collections.ArrayList"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>Returns a read-only <see cref="T:System.Collections.ArrayList"></see> wrapper.</summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList"></see> to wrap.</param>
      <returns>A read-only <see cref="System.Collections.ArrayList"></see> wrapper around <paramref name="list">list</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>Returns a read-only <see cref="T:System.Collections.IList"></see> wrapper.</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to wrap.</param>
      <returns>A read-only <see cref="System.Collections.IList"></see> wrapper around <paramref name="list">list</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> is equal to or greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements from the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> whose elements are copies of the specified value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to copy multiple times in the new <see cref="T:System.Collections.ArrayList"></see>. The value can be null.</param>
      <param name="count">The number of times value should be copied.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> with <paramref name="count">count</paramref> number of elements, all of which are copies of <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count">count</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>Copies the elements of a collection over a range of elements in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList"></see> index at which to start copying the elements of c.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection"></see> whose elements to copy to the <see cref="T:System.Collections.ArrayList"></see>. The collection itself cannot be null, but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="index">index</paramref> plus the number of elements in <paramref name="c">c</paramref> is greater than <see cref="System.Collections.ArrayList.Count"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c">c</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.ArrayList"></see> using the specified comparer.</summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 A null reference (Nothing in Visual Basic) to use the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
      <exception cref="T:System.ArgumentException">null is passed for <paramref name="comparer">comparer</paramref>, and the elements in the list do not implement <see cref="System.IComparable"></see>.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts the elements in a range of elements in <see cref="T:System.Collections.ArrayList"></see> using the specified comparer.</summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> implementation to use when comparing elements.  
 -or-  
 A null reference (Nothing in Visual Basic) to use the <see cref="T:System.IComparable"></see> implementation of each element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index">index</paramref> is less than zero.  
 -or-  
 <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not specify a valid range in the <see cref="System.Collections.ArrayList"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>Returns an <see cref="T:System.Collections.ArrayList"></see> wrapper that is synchronized (thread safe).</summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList"></see> to synchronize.</param>
      <returns>An <see cref="System.Collections.ArrayList"></see> wrapper that is synchronized (thread safe).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>Returns an <see cref="T:System.Collections.IList"></see> wrapper that is synchronized (thread safe).</summary>
      <param name="list">The <see cref="T:System.Collections.IList"></see> to synchronize.</param>
      <returns>An <see cref="System.Collections.IList"></see> wrapper that is synchronized (thread safe).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Collections.ArrayList"></see> to a new <see cref="T:System.Object"></see> array.</summary>
      <returns>An <see cref="System.Object"></see> array containing copies of the elements of the <see cref="System.Collections.ArrayList"></see>.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ArrayList"></see> to a new array of the specified element type.</summary>
      <param name="type">The element <see cref="T:System.Type"></see> of the destination array to create and copy elements to.</param>
      <returns>An array of the specified element type containing copies of the elements of the <see cref="System.Collections.ArrayList"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="System.Collections.ArrayList"></see> cannot be cast automatically to the specified type.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.ArrayList"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="System.Collections.ArrayList"></see> is read-only.  
 -or-  
 The <see cref="System.Collections.ArrayList"></see> has a fixed size.</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>
              用特定的编码将基元数据类型读作二进制值。
            </summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>
              基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。
            </summary>
      <param name="input">
                输入流。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持读取，是 <see langword="null" />, ，或连接已经关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
              基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。
            </summary>
      <param name="input">
                输入流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持读取，是 <see langword="null" />, ，或连接已经关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
              基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例，有选择性的打开流。
            </summary>
      <param name="input">
                输入流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="leaveOpen">
                如果在释放 <see cref="T:System.IO.BinaryReader" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持读取，是 <see langword="null" />, ，或连接已经关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 或 <paramref name="input" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>
              公开对 <see cref="T:System.IO.BinaryReader" /> 的基础流的访问。
            </summary>
      <returns>
              与 <see langword="BinaryReader" /> 关联的基础流。
            </returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>
              关闭当前阅读器及基础流。
            </summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>
              释放 <see cref="T:System.IO.BinaryReader" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.IO.BinaryReader" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>
              用从流中读取的指定字节数填充内部缓冲区。
            </summary>
      <param name="numBytes">
                要读取的字节数。
              </param>
      <exception cref="T:System.IO.EndOfStreamException">
                  之前已到达流的结尾 <paramref name="numBytes" /> 无法读取。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  请求 <paramref name="numBytes" /> 大于内部缓冲区的大小。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>
              返回下一个可用的字符，并且不提升字节或字符的位置。
            </summary>
      <returns>
              下一个可用的字符，或者，如果没有可用字符或者流不支持查找时为 -1。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ArgumentException">
                  当前字符不能通过使用解码为的内部字符缓冲区 <see cref="T:System.Text.Encoding" /> 为该流选择。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>
              从基础流中读取字符，并根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，提升流的当前位置。
            </summary>
      <returns>
              输入流中的下一个字符，如果当前无可用字符则为 -1。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              从字节数组中的指定点开始，从流中读取指定的字节数。
            </summary>
      <param name="buffer">
                将数据读入的缓冲区。
              </param>
      <param name="index">
                缓冲区中的起始点，在该处开始读入缓冲区。
              </param>
      <param name="count">
                要读取的字节数。
              </param>
      <returns>
              读入 <paramref name="buffer" /> 的字节数。
               如果可用的字节没有请求的那么多，此数可能小于所请求的字节数；如果到达了流的末尾，此数可能为零。
            </returns>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                
                  - 或 -
                
                  已解码要读取的字符数超过了 <paramref name="count" />。
                   这可以是 Unicode 解码器返回回退字符或代理项对。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
              从字符数组中的指定点开始，从流中读取指定的字符数。
            </summary>
      <param name="buffer">
                将数据读入的缓冲区。
              </param>
      <param name="index">
                缓冲区中的起始点，在该处开始读入缓冲区。
              </param>
      <param name="count">
                要读取的字符数。
              </param>
      <returns>
              读入缓冲区的总字符数。
               如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。
            </returns>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                
                  - 或 -
                
                  已解码要读取的字符数超过了 <paramref name="count" />。
                   这可以是 Unicode 解码器返回回退字符或代理项对。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>
              以压缩格式读入 32 位整数。
            </summary>
      <returns>
              压缩格式的 32 位整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
                  流已损坏。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>
              从当前流中读取 <see langword="Boolean" /> 值，并使该流的当前位置提升 1 个字节。
            </summary>
      <returns>
              如果字节为非零，则为 <see langword="true" />，否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>
              从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。
            </summary>
      <returns>
              从当前流中读取的下一个字节。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>
              从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。
            </summary>
      <param name="count">
                要读取的字节数。
                 此值必须为 0 或非负数字，否则将出现异常。
              </param>
      <returns>
              包含从基础流中读取的数据的字节数组。
               如果到达了流的末尾，则该字节数组可能小于所请求的字节数。
            </returns>
      <exception cref="T:System.ArgumentException">
                  已解码要读取的字符数超过了 <paramref name="count" />。
                   这可以是 Unicode 解码器返回回退字符或代理项对。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>
              从当前流中读取下一个字符，并根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，提升流的当前位置。
            </summary>
      <returns>
              从当前流中读取的字符。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ArgumentException">
                  读取一个代理项字符。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>
              从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，将当前位置前移。
            </summary>
      <param name="count">
                要读取的字符数。
              </param>
      <returns>
              包含从基础流中读取的数据的字节数组。
               如果到达了流的末尾，则该字符数组可能小于所请求的字符数。
            </returns>
      <exception cref="T:System.ArgumentException">
                  已解码要读取的字符数超过了 <paramref name="count" />。
                   这可以是 Unicode 解码器返回回退字符或代理项对。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>
              从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。
            </summary>
      <returns>
              从当前流中读取的十进制数值。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>
              从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。
            </summary>
      <returns>
              从当前流中读取的 8 字节浮点值。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>
              从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。
            </summary>
      <returns>
              从当前流中读取的 2 字节有符号整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>
              从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。
            </summary>
      <returns>
              从当前流中读取的 2 字节有符号整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>
              从当前流中读取 8 字节有符号整数，并使流的当前位置提升 8 个字节。
            </summary>
      <returns>
              从当前流中读取的 8 字节有符号整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>
              从此流中读取 1 个有符号字节，并使流的当前位置提升 1 个字节。
            </summary>
      <returns>
              从当前流中读取的一个有符号字节。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>
              从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。
            </summary>
      <returns>
              从当前流中读取的 4 字节浮点值。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>
              从当前流中读取一个字符串。
               字符串有长度前缀，一次 7 位地被编码为整数。
            </summary>
      <returns>
              正被读取的字符串。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>
              使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。
            </summary>
      <returns>
              从该流中读取的 2 字节无符号整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>
              从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。
            </summary>
      <returns>
              从该流中读取的 4 字节无符号整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>
              从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。
            </summary>
      <returns>
              从该流中读取的 8 字节无符号整数。
            </returns>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>
              将二进制中的基元类型写入流并支持用特定的编码写入字符串。
            </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IO.BinaryWriter" /> 写入流的类。
            </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>
              基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。
            </summary>
      <param name="output">
                输出流。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持写入，或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
              基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。
            </summary>
      <param name="output">
                输出流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持写入，或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
              基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例，有选择性的打开流。
            </summary>
      <param name="output">
                输出流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="leaveOpen">
                如果在释放 <see cref="T:System.IO.BinaryWriter" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持写入，或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>
              获取基础流的 <see cref="T:System.IO.BinaryWriter" />。
            </summary>
      <returns>
              与 <see langword="BinaryWriter" /> 关联的基础流。
            </returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>
              关闭当前 <see cref="T:System.IO.BinaryWriter" /> 和基础流。
            </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>
              释放 <see cref="T:System.IO.BinaryWriter" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.BinaryWriter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>
              清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>
              指定 <see cref="T:System.IO.BinaryWriter" /> 无后备存储区。
            </summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>
              包含基础流。
            </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>
              设置当前流中的位置。
            </summary>
      <param name="offset">
                字节偏移量相对于 <paramref name="origin" />。
              </param>
      <param name="origin">
                一个字段 <see cref="T:System.IO.SeekOrigin" /> ，该值指示是要获取新位置的参考点。
              </param>
      <returns>
              包含当前流位置。
            </returns>
      <exception cref="T:System.IO.IOException">
                  文件指针移到无效的位置。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 值无效。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将写入当前流的字节数组的区域。
            </summary>
      <param name="buffer">
                包含要写入的数据的字节数组。
              </param>
      <param name="index">
                中的起始点 <paramref name="buffer" /> 从此处开始写入。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>
              八字节无符号的整数写入当前流，并将流的位置提升 8 个字节。
            </summary>
      <param name="value">
                要写入的 8 字节无符号的整数。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>
              将 4 字节无符号的整数写入到当前流并将流的位置提升 4 个字节。
            </summary>
      <param name="value">
                要写入的 4 字节无符号的整数。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>
              双字节无符号的整数写入当前流，并将流的位置提升 2 个字节。
            </summary>
      <param name="value">
                要写入的双字节无符号的整数。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>
              将长度前缀的字符串写入此流的当前编码的 <see cref="T:System.IO.BinaryWriter" />, ，并根据所使用的编码的流和特定的字符写入到流的当前位置向前移动。
            </summary>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>
              4 字节浮点值写入当前流，并将流的位置提升 4 个字节。
            </summary>
      <param name="value">
                要写入的 4 字节浮点值。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>
              一个有符号的字节写入当前流并将流的位置前移一个字节。
            </summary>
      <param name="value">
                要写入的有符号的字节。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>
              8 字节有符号的整数写入当前流，并将流的位置提升 8 个字节。
            </summary>
      <param name="value">
                要写入的 8 字节有符号的整数。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>
              一个 Unicode 字符写入当前流，并根据所使用的流的当前位置 <see langword="Encoding" /> 使用和的特定字符写入到流。
            </summary>
      <param name="ch">
                要写入的非代理 Unicode 字符。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> 是一个单一代理项字符。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>
              双字节有符号的整数写入当前流，并将流的位置提升 2 个字节。
            </summary>
      <param name="value">
                要写入的双字节有符号的整数。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>
              8 字节浮点值写入当前流，并将流的位置提升 8 个字节。
            </summary>
      <param name="value">
                要写入的 8 字节浮点值。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>
              将十进制值写入当前流并将流的位置提升十六个字节。
            </summary>
      <param name="value">
                要写入的十进制值。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>
              字符数组写入当前流，并根据流的当前位置向前移动<see langword="Encoding" />使用和的特定字符写入到流。
            </summary>
      <param name="chars">
                包含要写入的数据的字符数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符数组中的一部分写入到当前流，并根据所使用的流的当前位置 <see langword="Encoding" /> 使用并且可能的特定字符写入到流。
            </summary>
      <param name="chars">
                包含要写入的数据的字符数组。
              </param>
      <param name="index">
                中的起始点 <paramref name="chars" /> 从此处开始写入。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>
              将写入基础流的字节数组。
            </summary>
      <param name="buffer">
                包含要写入的数据的字节数组。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>
              无符号的字节写入当前流并将流的位置前移一个字节。
            </summary>
      <param name="value">
                要写入的无符号的字节。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>
              将一个字节 <see langword="Boolean" /> 值写入当前流，其中 0 表示 <see langword="false" /> ，1 表示 <see langword="true" />。
            </summary>
      <param name="value">
        <see langword="Boolean" /> 要写入 （0 或 1） 值。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>
              四字节有符号的整数写入当前流，并将流的位置提升 4 个字节。
            </summary>
      <param name="value">
                要写入的 4 字节有符号的整数。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>
              以压缩格式写入 32 位整数。
            </summary>
      <param name="value">
                要写入的 32 位整数。
              </param>
      <exception cref="T:System.IO.EndOfStreamException">
                  已到达流的结尾。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  流已关闭。
                </exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>
              添加缓冲层以读取和写入另一个流上的操作。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>
              新实例初始化 <see cref="T:System.IO.BufferedStream" /> 类使用默认的缓冲区大小为 4096 字节。
            </summary>
      <param name="stream">
                当前流中。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.IO.BufferedStream" /> 类具有指定的缓冲区大小。
            </summary>
      <param name="stream">
                当前流中。
              </param>
      <param name="bufferSize">
                缓冲区大小（以字节为单位）。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
              开始异步读操作。
               （考虑使用 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 进行替换；请参见“备注”部分。）
            </summary>
      <param name="buffer">
                数据读入的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。
              </param>
      <param name="count">
                最多读取的字节数。
              </param>
      <param name="callback">
                可选的异步回调，在完成读取时调用。
              </param>
      <param name="state">
                一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。
              </param>
      <returns>
              一个对象，表示可能仍处于挂起状态的异步读取。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
                  尝试超出末尾的流的异步读取。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减 <paramref name="offset" /> 是小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前的流不支持读取的操作。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
              开始异步写操作。
               （考虑使用 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 进行替换；请参见“备注”部分。）
            </summary>
      <param name="buffer">
                包含要写入当前流的数据的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
              </param>
      <param name="count">
                最多写入的字节数。
              </param>
      <param name="callback">
                异步写操作完成后调用的方法。
              </param>
      <param name="state">
                一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
              </param>
      <returns>
              一个引用异步写入可能仍处于挂起状态的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 长度减去 <paramref name="offset" /> 是小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                </exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>
              获取一个值，该值指示当前流是否支持读取。
            </summary>
      <returns>
              如果流支持读取，则为 <see langword="true" />；如果流已关闭或是通过只写访问方式打开的，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>
              获取一个值，该值指示当前流是否支持查找。
            </summary>
      <returns>
        <see langword="true" /> 如果流支持查找，则， <see langword="false" /> 如果流已关闭或者如果流从操作系统句柄如管道或输出到控制台构造。
            </returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>
              获取一个值，该值指示当前流是否支持写入。
            </summary>
      <returns>
              如果流支持写入，则为 <see langword="true" />；如果流已关闭或是通过只读访问方式打开的，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>
              等待挂起的异步读操作完成。
               （考虑使用 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 进行替换；请参见“备注”部分。）
            </summary>
      <param name="asyncResult">
                对所等待的挂起异步请求的引用。
              </param>
      <returns>
              从流中读取的字节数，介于 0（零）和你请求的字节数之间。
               流仅返回 0 仅在流结尾，否则，它们应至少 1 个字节可用之前。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  这 <see cref="T:System.IAsyncResult" /> 对象不是通过调用 <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 此类上。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>
              结束异步写入操作，在 I/O 操作完成之前一直阻止。
               （考虑使用 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 进行替换；请参见“备注”部分。）
            </summary>
      <param name="asyncResult">
                挂起的异步请求。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  这 <see cref="T:System.IAsyncResult" /> 对象不是通过调用 <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 此类上。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>
              清除此流的所有缓冲区并导致所有缓冲的数据写入基础设备。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.IO.IOException">
                  数据源或存储库中未打开。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>
              异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步刷新操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>
              获取流的长度以字节为单位。
            </summary>
      <returns>
              流的长度以字节为单位。
            </returns>
      <exception cref="T:System.IO.IOException">
                  基础流是 <see langword="null" /> 或已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持查找。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>
              获取当前流中的位置。
            </summary>
      <returns>
              当前流中的位置。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值传递给 <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> 为负。
                </exception>
      <exception cref="T:System.IO.IOException">
                  发生了 I/O 错误，如流被关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持查找。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将字节从当前缓冲的流复制到一个数组。
            </summary>
      <param name="array">
                字节将被复制到缓冲区。
              </param>
      <param name="offset">
                从此处开始读取的字节缓冲区的字节偏移量。
              </param>
      <param name="count">
                要读取的字节数。
              </param>
      <returns>
              总字节数读入 <paramref name="array" />。
               这可能小于请求的字节数; 如果读取很多字节当前不可用，或者如果任何数据前就已到达流结尾为 0 可以。
            </returns>
      <exception cref="T:System.ArgumentException">
                  长度 <paramref name="array" /> 减去 <paramref name="offset" /> 是小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
                  流不是打开的或者是 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。
            </summary>
      <param name="buffer">
                数据写入的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。
              </param>
      <param name="count">
                最多读取的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  之前的读取操作当前正在使用流。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>
              从基础流中读取一个字节，并返回转换为字节 <see langword="int" />, ，或如果读取来自流的末尾，则返回-1。
            </summary>
      <returns>
              字节的强制转换为 <see langword="int" />, ，否则为-1 读取来自流的末尾。
            </returns>
      <exception cref="T:System.IO.IOException">
                  发生了 I/O 错误，如流被关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
              当前缓冲的流中设置的位置。
            </summary>
      <param name="offset">
                字节偏移量相对于 <paramref name="origin" />。
              </param>
      <param name="origin">
                类型的值 <see cref="T:System.IO.SeekOrigin" /> ，该值指示要从中获取新位置的参考点。
              </param>
      <returns>
              当前缓冲的流中的新位置。
            </returns>
      <exception cref="T:System.IO.IOException">
                  流不是打开的或者是 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持查找。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>
              设置缓冲的流的长度。
            </summary>
      <param name="value">
                一个整数，指示所需的以字节为单位当前缓冲的流长度。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
                  流不是打开的或者是 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  该流不支持写入和查找。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将字节复制到缓冲的流，并使中缓冲的流的当前位置提升写入的字节数。
            </summary>
      <param name="array">
                要从其中复制的字节数组 <paramref name="count" /> 个字节写入当前缓冲的流。
              </param>
      <param name="offset">
                从此处开始将字节复制到当前缓冲的流缓冲区的偏移量。
              </param>
      <param name="count">
                要写入到当前缓冲的流的字节数。
              </param>
      <exception cref="T:System.ArgumentException">
                  长度 <paramref name="array" /> 减去 <paramref name="offset" /> 是小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.IO.IOException">
                  该流已关闭或 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
            </summary>
      <param name="buffer">
                从中写入数据的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。
              </param>
      <param name="count">
                最多写入的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  流正在由前一次写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>
              将一个字节写入中缓冲的流的当前位置。
            </summary>
      <param name="value">
                要写入流的字节。
              </param>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在流关闭后调用方法。
                </exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>
              尝试在流末尾之后读取时引发的异常。
            </summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IO.EndOfStreamException" /> 带有其消息字符串设置为系统提供的消息和将设置为 COR_E_ENDOFSTREAM 其 HRESULT 的类。
            </summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IO.EndOfStreamException" /> 类，其消息字符串设置为 <paramref name="message" /> 并其 HRESULT 将设置为 COR_E_ENDOFSTREAM。
            </summary>
      <param name="message">
                描述错误的字符串。
                <paramref name="message" /> 的内容设计为易于理解。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              初始化的新实例 <see cref="T:System.IO.EndOfStreamException" /> 用指定的序列化和上下文信息的类。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.EndOfStreamException" /> 类的新实例。
            </summary>
      <param name="message">
                描述错误的字符串。
                <paramref name="message" /> 的内容设计为易于理解。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>
              数据流格式无效时引发的异常。
            </summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.IO.InvalidDataException" /> 类提供对导致此异常的内部异常的引用。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>
              提供与全球化相关的扩展方法。
            </summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>
              根据指定 <see cref="T:System.Globalization.CompareInfo" /> 对象区分区域性的字符串比较规则，返回 <see cref="T:System.StringComparer" /> 对象。
            </summary>
      <param name="compareInfo">
                一个对象，该对象支持区分区域性的字符串比较。
              </param>
      <param name="options">
                一个值，用于定义应如何比较字符串。
                <paramref name="options" /> 可以是枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，也可以是以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。
              </param>
      <returns>
              可用于执行字符串比较的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 无效。
                </exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>
              对包含文件或目录路径信息的 <see cref="T:System.String" /> 实例执行操作。
               这些操作是以跨平台的方式执行的。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>
              提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。
            </summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>
              更改路径字符串的扩展名。
            </summary>
      <param name="path">
                要修改的路径信息。
                 该路径不能包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的任何字符。
              </param>
      <param name="extension">
                新的扩展名（有或没有前导句点）。
                 指定 <see langword="null" /> 以从 <paramref name="path" /> 移除现有扩展名。
              </param>
      <returns>
              已修改的路径信息。
            
              在基于 Windows 的桌面平台上，如果 <paramref name="path" /> 是 <see langword="null" /> 或空字符串 (“”)，则返回的路径信息是未修改的。
               如果 <paramref name="extension" /> 为 <see langword="null" />，则返回的字符串包含指定的路径（其扩展名已移除）。
               如果 <paramref name="path" /> 不具有扩展名且 <paramref name="extension" /> 不为 <see langword="null" />，则返回的路径字符串包含追加到 <paramref name="path" /> 结尾的 <paramref name="extension" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>
              将字符串数组组合成一个路径。
            </summary>
      <param name="paths">
                由路径的各部分构成的数组。
              </param>
      <returns>
              已组合的路径。
            </returns>
      <exception cref="T:System.ArgumentException">
                  一个数组中的字符串包含一个或多个无效字符中定义 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  一个数组中的字符串是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>
              将两个字符串组合成一个路径。
            </summary>
      <param name="path1">
                要组合的第一个路径。
              </param>
      <param name="path2">
                要组合的第二个路径。
              </param>
      <returns>
              已组合的路径。
               如果指定的路径之一是零长度字符串，则该方法返回其他路径。
               如果 <paramref name="path2" /> 包含绝对路径，则该方法返回 <paramref name="path2" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>
              将三个字符串组合成一个路径。
            </summary>
      <param name="path1">
                要组合的第一个路径。
              </param>
      <param name="path2">
                要组合的第二个路径。
              </param>
      <param name="path3">
                要组合的第三个路径。
              </param>
      <returns>
              已组合的路径。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>
              将四个字符串组合成一个路径。
            </summary>
      <param name="path1">
                要组合的第一个路径。
              </param>
      <param name="path2">
                要组合的第二个路径。
              </param>
      <param name="path3">
                要组合的第三个路径。
              </param>
      <param name="path4">
                要组合的第四个路径。
              </param>
      <returns>
              已组合的路径。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>
              提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。
            </summary>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>
              返回指定路径字符串的目录信息。
            </summary>
      <param name="path">
                文件或目录的路径。
              </param>
      <returns>
        <paramref name="path" /> 的目录信息；如果 <paramref name="path" /> 表示根目录或为 null，则为 <see langword="null" />。
               如果 <paramref name="path" /> 不包含目录信息，则返回 <see cref="F:System.String.Empty" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该 <paramref name="path" /> 参数包含无效字符，为空，或仅包含空格。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                    在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。
                  
                  <paramref name="path" /> 参数超过系统定义的最大长度。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>
              返回指定的路径字符串的扩展名。
            </summary>
      <param name="path">
                从中获取扩展名的路径字符串。
              </param>
      <returns>
              指定路径的扩展名（包含句点“.”）、或 <see langword="null" />、或 <see cref="F:System.String.Empty" />。
               如果 <paramref name="path" /> 为 <see langword="null" />，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see langword="null" />。
               如果 <paramref name="path" /> 不具有扩展名信息，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see cref="F:System.String.Empty" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>
              返回指定路径字符串的文件名和扩展名。
            </summary>
      <param name="path">
                从中获取文件名和扩展名的路径字符串。
              </param>
      <returns>
        <paramref name="path" /> 中最后一个目录字符后的字符。
               如果 <paramref name="path" /> 的最后一个字符是目录或卷分隔符，则此方法返回 <see cref="F:System.String.Empty" />。
               如果 <paramref name="path" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>
              返回不具有扩展名的指定路径字符串的文件名。
            </summary>
      <param name="path">
                文件的路径。
              </param>
      <returns>
              返回的字符串 <see cref="M:System.IO.Path.GetFileName(System.String)" />, ，减去最后的句点 （.）
               和之后的所有字符。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>
              返回指定路径字符串的绝对路径。
            </summary>
      <param name="path">
                要获取其绝对路径信息的文件或目录。
              </param>
      <returns>
        <paramref name="path" /> 的完全限定的位置，例如“C:\MyFile.txt”。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是零长度字符串，仅包含空白，或者包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                
                  - 或 - 
                
                  系统无法检索的绝对路径。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所需的权限。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含一个冒号 (":")，它不是属于卷标识符 (例如，"c:\")。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                   例如，在基于 Windows 的平台上，路径必须少于 248 个字符，且文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>
              获取包含不允许在文件名中使用的字符的数组。
            </summary>
      <returns>
              包含不允许在文件名中使用的字符的数组。
            </returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>
              获取包含不允许在路径名中使用的字符的数组。
            </summary>
      <returns>
              包含不允许在路径名中使用的字符的数组。
            </returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>
              获取指定路径的根目录信息。
            </summary>
      <param name="path">
                从中获取根目录信息的路径。
              </param>
      <returns>
        <paramref name="path" /> 的根目录，例如“C:\”；如果 <paramref name="path" /> 为 <see langword="null" />，则为 <see langword="null" />；如果 <paramref name="path" /> 不包含根目录信息，则为空字符串。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                
                  - 或 - 
                
                  <see cref="F:System.String.Empty" /> 传递给 <paramref name="path" />。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>
              返回随机文件夹名或文件名。
            </summary>
      <returns>
              随机文件夹名或文件名。
            </returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <param name="relativeTo">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>
              在磁盘上创建磁唯一命名的零字节的临时文件并返回该文件的完整路径。
            </summary>
      <returns>
              临时文件的完整路径。
            </returns>
      <exception cref="T:System.IO.IOException">
                  将发生 I/O 错误，如没有唯一的临时文件的名称。
                
                  - 或 -
                
                  此方法不能创建一个临时文件。
                </exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>
              返回当前用户的临时文件夹的路径。
            </summary>
      <returns>
              临时文件夹的路径，以反斜杠结尾。
            </returns>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所需的权限。
                </exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>
              确定路径是否包括文件扩展名。
            </summary>
      <param name="path">
                用于搜索扩展名的路径。
              </param>
      <returns>
        <see langword="true" /> 如果按照最后一个目录分隔符的字符 (\\ 或 /) 或卷分隔符 （:） 的路径中包括句点 （.）
               后跟一个或多个字符;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>
              提供平台特定的字符数组，这些字符不能在传递到 <see cref="T:System.IO.Path" /> 类的成员的路径字符串参数中指定。
            </summary>
      <returns>
              当前平台的无效路径字符的字符数组。
            </returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>
              获取一个值，该值指示指定的路径字符串是否包含根。
            </summary>
      <param name="path">
                要测试的路径。
              </param>
      <returns>
              如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 包含一个或多个中定义的无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" />。
                </exception>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>
              用于在环境变量中分隔路径字符串的平台特定的分隔符。
            </summary>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>
              提供平台特定的卷分隔符。
            </summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>
              实现一个 <see cref="T:System.IO.TextReader" />，使其以一种特定的编码从字节流中读取字符。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>
              为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>
              为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例。
            </summary>
      <param name="path">
                要读取的完整文件路径。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  无法找到该文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效，例如位于未映射的驱动器上。
                </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标语法。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
              用指定的字节顺序标记检测选项，为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                指示是否在文件头查找字节顺序标记。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
              用指定的字符编码为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>
              为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字节顺序标记检测选项。
            </summary>
      <param name="path">
                要读取的完整文件路径。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                指示是否在文件头查找字节顺序标记。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  无法找到该文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效，例如位于未映射的驱动器上。
                </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标语法。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>
              用指定的字符编码，为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。
            </summary>
      <param name="path">
                要读取的完整文件路径。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  无法找到该文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效，例如位于未映射的驱动器上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标语法。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
              为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码和字节顺序标记检测选项。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                指示是否在文件头查找字节顺序标记。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支持读取。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>
              为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码和字节顺序标记检测选项。
            </summary>
      <param name="path">
                要读取的完整文件路径。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                指示是否在文件头查找字节顺序标记。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  无法找到该文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效，例如位于未映射的驱动器上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标语法。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>
              为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                指示是否在文件头查找字节顺序标记。
              </param>
      <param name="bufferSize">
                最小缓冲区大小。
              </param>
      <exception cref="T:System.ArgumentException">
                  流不支持读取。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 小于或等于零。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>
              为指定的文件名初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定字符编码、字节顺序标记检测选项和缓冲区大小。
            </summary>
      <param name="path">
                要读取的完整文件路径。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                指示是否在文件头查找字节顺序标记。
              </param>
      <param name="bufferSize">
                最小缓冲区大小（以 16 位字符的数目为单位）。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  无法找到该文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效，例如位于未映射的驱动器上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标语法。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 小于或等于零。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>
              为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小，有选择性的打开流。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="detectEncodingFromByteOrderMarks">
                如果要在文件开头查找字节顺序标记，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <param name="bufferSize">
                最小缓冲区大小。
              </param>
      <param name="leaveOpen">
                如果在释放 <see cref="T:System.IO.StreamReader" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>
              返回基础流。
            </summary>
      <returns>
              基础流。
            </returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>
              关闭 <see cref="T:System.IO.StreamReader" /> 对象和基础流，并释放与读取器关联的所有系统资源。
            </summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>
              获取当前 <see cref="T:System.IO.StreamReader" /> 对象正在使用的当前字符编码。
            </summary>
      <returns>
              当前读取器所使用的当前字符编码。
               第一次调用 <see cref="T:System.IO.StreamReader" /> 的任何 <see cref="Overload:System.IO.StreamReader.Read" /> 方法后，该值可能会不同，因为直到第一次调用 <see cref="Overload:System.IO.StreamReader.Read" /> 方法时，才会进行编码的自动检测。
            </returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>
              清除内部缓冲区。
            </summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>
              关闭基础流，释放 <see cref="T:System.IO.StreamReader" /> 使用的未托管资源，同时还可以根据需要释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>
              获取一个值，该值指示当前的流位置是否在流结尾。
            </summary>
      <returns>
              如果当前流位置位于流的末尾，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放基础流。
                </exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>
              空流周围的 <see cref="T:System.IO.StreamReader" />。
            </summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>
              返回下一个可用字符，但不使用它。
            </summary>
      <returns>
              为表示下一个要读取的字符的整数，或者，如果没有要读取的字符或该流不支持查找，则为 -1。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>
              读取输入流中的下一个字符并使该字符位置提升一个字符。
            </summary>
      <returns>
              输入流中表示为 <see cref="T:System.Int32" /> 对象的下一个字符。如果不再有可用的字符，则为 -1。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
              从指定的索引位置开始将来自当前流的指定的最多字符读到缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index + count - 1" />) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                开始写入的 <paramref name="buffer" /> 的索引。
              </param>
      <param name="count">
                要读取的最大字符数。
              </param>
      <returns>
              已读取的字符数，或者如果已到达流结尾并且未读取任何数据，则为 0。
               该数小于或等于 <paramref name="count" /> 参数，具体取决于流中是否有可用的数据。
            </returns>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
                  发生 I/O 错误，例如流关闭。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              从当前流中异步读取指定的最大字符，并且从指定的索引位置开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在将指定的字符数写入缓冲区之前已到达流结尾，则将返回当前方法。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字符数。
               如果当前可用字符数少于所请求的字符数，则该结果值可小于所请求的字符数；如果已到达流结尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>
              从当前流中读取指定的最大字符数并从指定的索引位置开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index + count - 1" />) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
              </param>
      <returns>
              已读取的字符数。
               该数字将小于或等于 <paramref name="count" />，取决于是否所有的输入字符都已读取。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              从当前流中异步读取指定的最大字符，并且从指定的索引位置开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在将指定的字符数写入到缓冲区之前就已经达到流结尾，则将返回此方法。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字符数。
               如果当前可用字符数少于所请求的字符数，则该结果值可小于所请求的字符数；如果已到达流结尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>
              从当前流中读取一行字符并将数据作为字符串返回。
            </summary>
      <returns>
              输入流中的下一行；如果到达了输入流的末尾，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来为返回的字符串分配缓冲区。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>
              从当前流中异步读取一行字符并将数据作为字符串返回。
            </summary>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含来自流的下一行；如果读取了所有字符，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>
              读取来自流的当前位置到结尾的所有字符。
            </summary>
      <returns>
              字符串形式的流的其余部分（从当前位置到结尾）。
               如果当前位置位于流结尾，则返回空字符串 (“”)。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来为返回的字符串分配缓冲区。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>
              异步读取来自流的当前位置到结尾的所有字符并将它们作为一个字符串返回。
            </summary>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数值包括带有从流的当前位置到结尾的字符的字符串。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  字符数大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>
              实现 <see cref="T:System.IO.TextWriter" /> 用于将字符写入到流中特定的编码。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 类为使用 utf-8 编码及默认的缓冲区大小指定的流。
            </summary>
      <param name="stream">
                要写入的流。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不是可写的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 类为指定的文件使用默认的编码和缓冲区大小。
            </summary>
      <param name="path">
                要写入的完整文件路径。
                <paramref name="path" /> 可以是文件名称。
              </param>
      <exception cref="T:System.UnauthorizedAccessException">
                  拒绝访问。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                
                  - 或 -
                
                  <paramref name="path" /> 包含 （com1 和 com2，等） 的系统设备的名称。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效（例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                   例如，在基于 Windows 的平台上，路径长度不得超过 248 个字符，文件名长度不得超过 260 个字符。
                </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含文件的名称、 目录名称或卷标签语法不正确或无效的语法。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 为通过使用指定的编码及默认的缓冲区大小指定的流的类。
            </summary>
      <param name="stream">
                要写入的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不是可写的。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 类为指定的文件使用默认的编码和缓冲区大小。
               如果该文件存在，则可以将其覆盖或向其追加。
               如果该文件不存在，此构造函数将创建一个新文件。
            </summary>
      <param name="path">
                要写入的完整文件路径。
              </param>
      <param name="append">
        <see langword="true" /> 若要将数据追加到该文件; <see langword="false" /> 覆盖该文件。
                 如果指定的文件不存在，该参数无效，且构造函数将创建一个新文件。
              </param>
      <exception cref="T:System.UnauthorizedAccessException">
                  拒绝访问。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空。
                
                  - 或 -
                
                  <paramref name="path" /> 包含 （com1 和 com2，等） 的系统设备的名称。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效（例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含文件的名称、 目录名称或卷标签语法不正确或无效的语法。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                   例如，在基于 Windows 的平台上，路径长度不得超过 248 个字符，文件名长度不得超过 260 个字符。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 为指定的流类通过使用指定的编码和缓冲区大小。
            </summary>
      <param name="stream">
                要写入的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="bufferSize">
                缓冲区大小（以字节为单位）。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不是可写的。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 类通过使用指定的编码和默认的缓冲区大小指定的文件。
               如果该文件存在，则可以将其覆盖或向其追加。
               如果该文件不存在，此构造函数将创建一个新文件。
            </summary>
      <param name="path">
                要写入的完整文件路径。
              </param>
      <param name="append">
        <see langword="true" /> 若要将数据追加到该文件; <see langword="false" /> 覆盖该文件。
                 如果指定的文件不存在，该参数无效，且构造函数将创建一个新文件。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <exception cref="T:System.UnauthorizedAccessException">
                  拒绝访问。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空。
                
                  - 或 -
                
                  <paramref name="path" /> 包含 （com1 和 com2，等） 的系统设备的名称。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效（例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含文件的名称、 目录名称或卷标签语法不正确或无效的语法。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                   例如，在基于 Windows 的平台上，路径长度不得超过 248 个字符，文件名长度不得超过 260 个字符。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 为通过使用为指定的编码和缓冲区大小，并可以选择保持流处于打开指定的流的类。
            </summary>
      <param name="stream">
                要写入的流。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="bufferSize">
                缓冲区大小（以字节为单位）。
              </param>
      <param name="leaveOpen">
                如果在释放 <see cref="T:System.IO.StreamWriter" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不是可写的。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StreamWriter" /> 类上使用指定的编码为指定路径的指定文件和缓冲区大小。
               如果该文件存在，则可以将其覆盖或向其追加。
               如果该文件不存在，此构造函数将创建一个新文件。
            </summary>
      <param name="path">
                要写入的完整文件路径。
              </param>
      <param name="append">
        <see langword="true" /> 若要将数据追加到该文件; <see langword="false" /> 覆盖该文件。
                 如果指定的文件不存在，该参数无效，且构造函数将创建一个新文件。
              </param>
      <param name="encoding">
                要使用的字符编码。
              </param>
      <param name="bufferSize">
                缓冲区大小（以字节为单位）。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")。
                
                  - 或 -
                
                  <paramref name="path" /> 包含 （com1 和 com2，等） 的系统设备的名称。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。
                </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含文件的名称、 目录名称或卷标签语法不正确或无效的语法。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  拒绝访问。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效（例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                   例如，在基于 Windows 的平台上，路径长度不得超过 248 个字符，文件名长度不得超过 260 个字符。
                </exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.IO.StreamWriter" /> 将其缓冲区刷新到基础流在每次调用后 <see cref="M:System.IO.StreamWriter.Write(System.Char)" />。
            </summary>
      <returns>
        <see langword="true" /> 若要强制 <see cref="T:System.IO.StreamWriter" /> 刷新其缓冲区中; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>
              获取同后备存储连接的基础流。
            </summary>
      <returns>
              流这 <see langword="StreamWriter" /> 正在写入。
            </returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>
              关闭当前 <see langword="StreamWriter" /> 对象和基础流。
            </summary>
      <exception cref="T:System.Text.EncoderFallbackException">
                  当前的编码不支持显示 Unicode 代理项对的一半。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.StreamWriter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
      <exception cref="T:System.Text.EncoderFallbackException">
                  当前的编码不支持显示 Unicode 代理项对的一半。
                </exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>
              获取在其中写入输出的 <see cref="T:System.Text.Encoding" />。
            </summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 在当前实例的构造函数中指定或 <see cref="T:System.Text.UTF8Encoding" /> 如果未指定的编码。
            </returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>
              清理当前写入器的所有缓冲区，并使所有缓冲数据写入基础流。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  关闭当前编写器。
                </exception>
      <exception cref="T:System.IO.IOException">
                  发生了 I/O 错误。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  当前的编码不支持显示 Unicode 代理项对的一半。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>
              异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。
            </summary>
      <returns>
              表示异步刷新操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>
              提供 <see langword="StreamWriter" />，它不带任何可写入但无法从中读取的后备存储。
            </summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>
              将字符写入流。
            </summary>
      <param name="value">
                要写入流中的字符。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且关闭当前编写器。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，且无法写入基础的固定的大小流写入缓冲区的内容，因为 <see cref="T:System.IO.StreamWriter" /> 位于流结尾。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>
              将字符数组写入流。
            </summary>
      <param name="buffer">
                包含要写入的数据的字符数组。
                 如果 <paramref name="buffer" /> 为 <see langword="null" />，则不写入任何内容。
              </param>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且关闭当前编写器。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，且无法写入基础的固定的大小流写入缓冲区的内容，因为 <see cref="T:System.IO.StreamWriter" /> 位于流结尾。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>
              将字符串写入流。
            </summary>
      <param name="value">
                要写入流的字符串。
                 如果 <paramref name="value" /> 是 null，则不写入。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且关闭当前编写器。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，且无法写入基础的固定的大小流写入缓冲区的内容，因为 <see cref="T:System.IO.StreamWriter" /> 位于流结尾。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符的子数组写入流。
            </summary>
      <param name="buffer">
                包含要写入的数据的字符数组。
              </param>
      <param name="index">
                在开始读取数据时缓冲区中的字符位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，并且关闭当前编写器。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 是，则返回 true 或 <see cref="T:System.IO.StreamWriter" /> 缓冲区已满，且无法写入基础的固定的大小流写入缓冲区的内容，因为 <see cref="T:System.IO.StreamWriter" /> 位于流结尾。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>
              将字符异步写入该流。
            </summary>
      <param name="value">
                要写入流中的字符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>
              将字符串异步写入该流。
            </summary>
      <param name="value">
                要写入流的字符串。
                 如果 <paramref name="value" /> 为 <see langword="null" />，则不写入任何内容。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符的子数组异步写入该流。
            </summary>
      <param name="buffer">
                包含要写入的数据的字符数组。
              </param>
      <param name="index">
                在开始读取数据时缓冲区中的字符位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>
              将行终止符异步写入该流。
            </summary>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>
              将后跟行终止符的字符异步写入该流。
            </summary>
      <param name="value">
                要写入流中的字符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>
              将后跟行终止符的字符串异步写入该流。
            </summary>
      <param name="value">
                要写入的字符串。
                 如果值为 <see langword="null" />，则只写入行终止符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              将后跟行终止符的字符的子数组异步写入该流。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                在开始读取数据时缓冲区中的字符位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放的流编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前正在使用以前的写操作的流编写器。
                </exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>
              实现 <see cref="T:System.IO.TextReader" /> ，使其从字符串读取。
            </summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StringReader" /> 读取指定的字符串中的类。
            </summary>
      <param name="s">
                字符串 <see cref="T:System.IO.StringReader" /> 应进行初始化。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>
              关闭 <see cref="T:System.IO.StringReader" />。
            </summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.StringReader" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>
              返回下一个可用字符，但不使用它。
            </summary>
      <returns>
              读取，表示下一个字符的整数或-1，如果没有更多的可用字符或者流不支持查找。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  当前读取器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>
              输入字符串中读取下一个字符并将字符位置提升一个字符。
            </summary>
      <returns>
              下一步中的字符基础字符串，或者如果没有更多的可用字符则为-1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  当前读取器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
              在输入字符串中读取的字符块，并通过将字符位置提升 <paramref name="count" />。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                缓冲区中的起始索引。
              </param>
      <param name="count">
                要读取的字符数。
              </param>
      <returns>
              读入缓冲区的总字符数。
               这可以是小于的字符数请求如果许多字符当前不可用，或零个如果已到达基础字符串的末尾。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  当前读取器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              异步从当前字符串中读取指定的最大字符数并将数据写入缓冲区中，指定索引处开始。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在指定的数目的字符写入到缓冲区之前已到达字符串的末尾，该方法返回。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               结果值可能小于请求的字节数的如果当前可用字节数小于所请求的数目，或者如果已到达字符串结尾，它可以是 0 （零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  字符串读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              异步从当前字符串中读取指定的最大字符数并将数据写入缓冲区中，指定索引处开始。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在指定的数目的字符写入到缓冲区之前已到达字符串的末尾，该方法返回。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               结果值可能小于请求的字节数的如果当前可用字节数小于所请求的数目，或者如果已到达字符串结尾，它可以是 0 （零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  字符串读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>
              从当前字符串中读取一行字符并返回数据作为字符串。
            </summary>
      <returns>
              从当前字符串的下一行或 <see langword="null" /> 如果已到达字符串的结尾。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  当前读取器已关闭。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来为返回的字符串分配缓冲区。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>
              从当前字符串的异步读取一行字符并返回字符串形式的数据。
            </summary>
      <returns>
              表示异步读取操作的任务。
               值 <paramref name="TResult" /> 参数包含来自字符串读取器的下一行或 <see langword="null" /> 如果已读取所有字符。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  字符串读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>
              读取从当前位置到字符串结尾的所有字符并将它们作为一个字符串返回。
            </summary>
      <returns>
              来自当前位置到基础字符串末尾的内容。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来为返回的字符串分配缓冲区。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  当前读取器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>
              异步读取所有字符从当前位置到字符串的末尾，并将它们作为一个字符串返回。
            </summary>
      <returns>
              表示异步读取操作的任务。
               值 <paramref name="TResult" /> 参数包含从当前位置到字符串结尾的字符的字符串。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  字符数大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  字符串读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>
              实现用于将信息写入字符串的 <see cref="T:System.IO.TextWriter" />。
               信息存储在基础 <see cref="T:System.Text.StringBuilder" /> 中。
            </summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.StringWriter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>
              使用指定的格式控件初始化 <see cref="T:System.IO.StringWriter" /> 类的新实例。
            </summary>
      <param name="formatProvider">
                控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。
              </param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>
              初始化写入到指定的 <see cref="T:System.Text.StringBuilder" /> 中的 <see cref="T:System.IO.StringWriter" /> 类的新实例。
            </summary>
      <param name="sb">
                要写入的 <see cref="T:System.Text.StringBuilder" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>
              新实例初始化 <see cref="T:System.IO.StringWriter" /> 写入指定的类 <see cref="T:System.Text.StringBuilder" /> 并且具有指定的格式提供程序。
            </summary>
      <param name="sb">
                要写入的 <see cref="T:System.Text.StringBuilder" /> 对象。
              </param>
      <param name="formatProvider">
                控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>
              关闭当前 <see cref="T:System.IO.StringWriter" /> 和基础流。
            </summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.StringWriter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>
              获取在其中写入输出的 <see cref="T:System.Text.Encoding" />。
            </summary>
      <returns>
              在其中写入输出的 <see langword="Encoding" />。
            </returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>
              异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
      <returns>
              表示异步刷新操作的任务。
            </returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>
              返回基础 <see cref="T:System.Text.StringBuilder" />。
            </summary>
      <returns>
              基础 <see langword="StringBuilder" />。
            </returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>
              返回包含迄今为止写入到当前 <see langword="StringWriter" /> 中的字符的字符串。
            </summary>
      <returns>
              包含写入到当前 <see langword="StringWriter" /> 中的字符的字符串。
            </returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>
              将字符写入字符串。
            </summary>
      <param name="value">
                要写入的字符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  编写器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>
              将字符串写入当前字符串。
            </summary>
      <param name="value">
                要写入的字符串。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  编写器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符的子数组写入字符串。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                缓冲区中开始读取数据的位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  (<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />.
                  <see langword="Length" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  编写器已关闭。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>
              将字符异步写入该字符串。
            </summary>
      <param name="value">
                要写入字符串中的字符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放字符串编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  字符串编写器正在由前一个写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>
              以异步方式将字符串写入当前的字符串。
            </summary>
      <param name="value">
                要写入的字符串。
                 如果 <paramref name="value" /> 为 <see langword="null" />，则不会将任何内容写入文本流。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放字符串编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  字符串编写器正在由前一个写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符的子数组异步写入字符串。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                缓冲区中开始读取数据的位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放字符串编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  字符串编写器正在由前一个写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>
              将后跟行终止符的字符异步写入字符串。
            </summary>
      <param name="value">
                要写入字符串中的字符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放字符串编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  字符串编写器正在由前一个写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>
              将后跟行终止符的字符串异步写入当前字符串。
            </summary>
      <param name="value">
                要写入的字符串。
                 如果值为 <see langword="null" />，则只写入行终止符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放字符串编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  字符串编写器正在由前一个写操作使用。
                </exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              将写入到字符串以异步方式跟行结束符的字符子数组。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                缓冲区中开始读取数据的位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放字符串编写器。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  字符串编写器正在由前一个写操作使用。
                </exception>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>
              表示可读取有序字符系列的读取器。
            </summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>
              关闭 <see cref="T:System.IO.TextReader" /> 并释放与该 <see langword="TextReader" /> 关联的所有系统资源。
            </summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>
              释放由 <see cref="T:System.IO.TextReader" /> 对象使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.TextReader" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>
              提供一个无数据可供读取的 <see langword="TextReader" />。
            </summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>
              读取下一个字符，而不更改读取器状态或字符源。
               返回下一个可用字符，而实际上并不从读取器中读取此字符。
            </summary>
      <returns>
              一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该读取器不支持查找，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>
              读取文本读取器中的下一个字符并使该字符的位置前移一个字符。
            </summary>
      <returns>
              文本读取器中的下一个字符，或为 -1（如果没有更多可用字符）。
               默认实现将返回 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
              从当前读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在将指定数量的字符读入缓冲区之前就已达读取器的末尾，则返回该方法。
              </param>
      <returns>
              已读取的字符数。
               该数会小于或等于 <paramref name="count" />，具体取决于读取器中是否有可用的数据。
               如果调用此方法时没有留下更多的字符供读取，则此方法返回 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              异步从当前文本读取器中读取指定最大字符数并从指定索引开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在将指定数量的字符读入缓冲区之前已到达文本的末尾，则当前方法将返回。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               如果当前可用字节数少于所请求的字节数，则该结果值可能小于所请求的字节数，或者如果已达到文本的末尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  文本读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>
              从当前文本读取器中读取指定的最大字符数并从指定索引处开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，此参数包含指定的字符数组，该数组中从 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> -1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
              </param>
      <returns>
              已读取的字符数。
               该数字将小于或等于 <paramref name="count" />，取决于是否所有的输入字符都已读取。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              异步从当前文本读取器中读取指定最大字符数并从指定索引开始将该数据写入缓冲区。
            </summary>
      <param name="buffer">
                此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。
              </param>
      <param name="index">
                在 <paramref name="buffer" /> 中开始写入的位置。
              </param>
      <param name="count">
                要读取的最大字符数。
                 如果在将指定数量的字符读入缓冲区之前已到达文本的末尾，则当前方法将返回。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               如果当前可用字节数少于所请求的字节数，则该结果值可能小于所请求的字节数，或者如果已达到文本的末尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  文本读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>
              从文本读取器中读取一行字符并将数据作为字符串返回。
            </summary>
      <returns>
              读取器中的下一行，或 <see langword="null" />（如果已读取所有字符）。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来为返回的字符串分配缓冲区。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  在下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>
              异步读取一行字符并将数据作为字符串返回。
            </summary>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含来自文本读取器的下一行或为 <see langword="null" />（如已读取所有字符）。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  文本读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>
              读取从当前位置到文本读取器末尾的所有字符并将它们作为一个字符串返回。
            </summary>
      <returns>
              一个包含从当前位置到文本读取器末尾的所有字符的字符串。
            </returns>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已关闭。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来为返回的字符串分配缓冲区。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  在下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>
              异步读取从当前位置到文本读取器末尾的所有字符并将它们作为一个字符串返回。
            </summary>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数值包括字符串来自当前位置到结束文本读取器字符。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  字符数大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  文本读取器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  以前的读取操作当前正在使用读取器。
                </exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>
              在指定的 <see langword="TextReader" /> 周围创建线程安全包装。
            </summary>
      <param name="reader">
                要同步的 <see langword="TextReader" />。
              </param>
      <returns>
              一个线程安全的 <see cref="T:System.IO.TextReader" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>
              表示可以编写一个有序字符系列的编写器。
               此类为抽象类。
            </summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>
              使用指定的格式提供程序初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。
            </summary>
      <param name="formatProvider">
                控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。
              </param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>
              关闭当前编写器并释放任何与该编写器关联的系统资源。
            </summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>
              存储用于此 <see langword="TextWriter" /> 的换行符。
            </summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>
              释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.TextWriter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>
              当在派生类中重写时，返回用来写输出的该字符编码。
            </summary>
      <returns>
              用来写入输出的字符编码。
            </returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>
              清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>
              异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
      <returns>
              表示异步刷新操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>
              获取控制格式设置的对象。
            </summary>
      <returns>
              特定区域性的 <see cref="T:System.IFormatProvider" /> 对象，或者如果未指定任何其他区域性，则为当前区域性的格式设置。
            </returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>
              获取或设置由当前 <see langword="TextWriter" /> 使用的行结束符字符串。
            </summary>
      <returns>
              当前 <see langword="TextWriter" /> 的行结束符字符串。
            </returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>
              提供 <see langword="TextWriter" />，它不带任何可写入但无法从中读取的后备存储。
            </summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>
              在指定的 <see langword="TextWriter" /> 周围创建线程安全包装。
            </summary>
      <param name="writer">
                要同步的 <see langword="TextWriter" />。
              </param>
      <returns>
              线程安全包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg0">
                要格式化和写入的第一个对象。
              </param>
      <param name="arg1">
                要格式化和写入的第二个对象。
              </param>
      <param name="arg2">
                要设置格式和写入的第三个对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零），或者大于或等于 （即，此方法重载，三个） 要进行格式化的对象数量。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符的子数组写入文本字符串或流。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                在开始接收数据时缓存中的字符位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg">
                一个对象数组，其中包含零个或多个要设置格式和写入的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="arg" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0（零），或者大于或等于 <paramref name="arg" /> 数组的长度。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg0">
                要格式化和写入的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零），或者大于或等于 （即，此方法重载，其中一个） 要进行格式化的对象数量。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>
              将 8 字节无符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 8 字节无符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>
              将 4 字节无符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 4 字节无符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>
              以异步形式将字符串写入到文本字符串或流。
            </summary>
      <param name="value">
                要写入的字符串。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>
              将 4 字节浮点值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 4 字节浮点值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg0">
                要格式化和写入的第一个对象。
              </param>
      <param name="arg1">
                要格式化和写入的第二个对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零） 或者大于或等于 （即，此方法重载，两个） 要进行格式化的对象数量。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>
              将 8 字节有符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 8 字节有符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>
              将 4 字节有符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 4 字节有符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>
              将 8 字节浮点值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 8 字节浮点值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>
              将十进制值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的十进制值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>
              将字符数组写入该文本字符串或流。
            </summary>
      <param name="buffer">
                要写入文本流中的字符数组。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>
              将字符写入该文本字符串或流。
            </summary>
      <param name="value">
                要写入文本流中的字符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>
              通过在对象上调用 <see langword="ToString" /> 方法将此对象的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的对象。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>
              将 <see langword="Boolean" /> 值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 <see langword="Boolean" /> 值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              将字符的子数组异步写入文本字符串或流。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                在开始接收数据时缓存中的字符位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>
              以异步形式将字符串写入到下一字符串或流。
            </summary>
      <param name="value">
                要写入的字符串。
                 如果 <paramref name="value" /> 为 <see langword="null" />，则不会将任何内容写入文本流。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>
              以异步形式将字符写入到下一个文本字符串或流。
            </summary>
      <param name="value">
                要写入文本流中的字符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>
              以异步形式将字符数组写入到下一个字符串或流。
            </summary>
      <param name="buffer">
                要写入文本流中的字符数组。
                 如果 <paramref name="buffer" /> 为 <see langword="null" />，则不写入任何内容。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>
              将后跟行结束符的字符串写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的字符串。
                 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg0">
                要格式化和写入的第一个对象。
              </param>
      <param name="arg1">
                要格式化和写入的第二个对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零），或者大于或等于 （即，此方法重载，两个） 要进行格式化的对象数量。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
              将后跟行结束符的字符子数组写入文本字符串或流。
            </summary>
      <param name="buffer">
                从其读取数据的字符数组。
              </param>
      <param name="index">
                在开始读取数据时 <paramref name="buffer" /> 中的字符位置。
              </param>
      <param name="count">
                要写入的最大字符数。
              </param>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义写出格式化的字符串和一个新行。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg">
                一个对象数组，其中包含零个或多个要设置格式和写入的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  字符串或对象作为传入 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零），或者大于或等于的长度 <paramref name="arg" /> 数组。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本字符串或流。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg0">
                要格式化和写入的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零），或者大于或等于 （即，此方法重载，其中一个） 要进行格式化的对象数量。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>
              将后跟行结束符的 8 字节无符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 8 字节无符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
              使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义写出格式化的字符串和一个新行。
            </summary>
      <param name="format">
                复合格式字符串（请参见“备注”）。
              </param>
      <param name="arg0">
                要格式化和写入的第一个对象。
              </param>
      <param name="arg1">
                要格式化和写入的第二个对象。
              </param>
      <param name="arg2">
                要设置格式和写入的第三个对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的复合格式字符串。
                
                  - 或 - 
                
                  格式项的索引小于 0 （零），或者大于或等于 （即，此方法重载，三个） 要进行格式化的对象数量。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>
              将后跟行结束符的 4 字节无符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 4 字节无符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>
              将后跟行结束符的 4 字节浮点值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 4 字节浮点值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>
              将后跟行结束符的 8 字节浮点值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 8 字节浮点值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>
              将后跟行结束符的 8 字节有符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 8 字节有符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>
              将后跟行结束符的 4 字节有符号整数的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 4 字节有符号整数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>
              将后面带有行结束符的十进制值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的十进制值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>
              将后跟行结束符的字符数组写入文本字符串或流。
            </summary>
      <param name="buffer">
                从其读取数据的字符数组。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>
              将后跟行结束符的字符写入文本字符串或流。
            </summary>
      <param name="value">
                要写入文本流中的字符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>
              将后面带有行结束符的 <see langword="Boolean" /> 值的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的 <see langword="Boolean" /> 值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>
              将行结束符的字符串写入文本字符串或流。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>
              通过在对象上调用 <see langword="ToString" /> 方法将后跟行结束符的此对象的文本表示形式写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的对象。
                 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已关闭。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>
              将后跟行结束符的字符串异步写入文本字符串或流。
            </summary>
      <param name="value">
                要写入的字符串。
                 如果值为 <see langword="null" />，则只写入行终止符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>
              将行结束符的字符串异步写入文本字符串或流。
            </summary>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>
              将后跟行结束符的字符异步写入文本字符串或流。
            </summary>
      <param name="value">
                要写入文本流中的字符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>
              将后跟行结束符的字符数组异步写入文本字符串或流。
            </summary>
      <param name="buffer">
                要写入文本流中的字符数组。
                 如果字符数组为 <see langword="null" />，则仅写入行结束符。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              将后跟行结束符的字符子数组异步写入文本字符串或流。
            </summary>
      <param name="buffer">
                要从中写出数据的字符数组。
              </param>
      <param name="index">
                在开始接收数据时缓存中的字符位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 为负。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  文本编写器已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  文本编写器当前正在使用以前的写入操作。
                </exception>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>
              指定由类的成员使用的资源。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 类指定所用资源的作用域。
            </summary>
      <param name="resourceScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 所用资源。
              </param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 类指定所用资源的作用域和使用方式的作用域。
            </summary>
      <param name="resourceScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 所用资源。
              </param>
      <param name="consumptionScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 此成员使用。
              </param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>
              获取此成员的消耗作用域。
            </summary>
      <returns>
              一个 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 对象，它指定使用此成员的资源范围。
            </returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>
              获取所用资源的资源范围。
            </summary>
      <returns>
              一个 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 对象，它指定所用成员的资源范围。
            </returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>
              指定类的成员的资源公开范围。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> 类，具有指定的暴露程度。
            </summary>
      <param name="exposureLevel">
                资源的范围。
              </param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>
              获取资源公开范围。
            </summary>
      <returns>
              一个 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 对象。
            </returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>
              标识可共享资源的范围。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>
              该状态共享中的对象通过 <see cref="T:System.AppDomain" />。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>
              在程序集范围内的资源是可见的。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>
              该状态共享的库中的对象。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>
              该状态共享的计算机中的对象。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>
              没有任何共享的状态。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>
              资源是仅对该类型可见。
            </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>
              该状态在进程内共享。
            </summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>
              提供可帮助开发人员编写版本安全代码的方法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>
              返回基于指定的资源名称和目标的资源占用源版本安全的名称。
            </summary>
      <param name="name">
                资源的名称。
              </param>
      <param name="from">
                资源的范围。
              </param>
      <param name="to">
                所需的资源消耗作用域。
              </param>
      <returns>
              版本安全的名称。
            </returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>
              返回基于指定的资源名称、 目标的资源消耗范围和使用的资源的类型的安全版本名称。
            </summary>
      <param name="name">
                资源的名称。
              </param>
      <param name="from">
                作用域范围的起始处。
              </param>
      <param name="to">
                作用域范围的末尾。
              </param>
      <param name="type">
        <see cref="T:System.Type" /> 的资源。
              </param>
      <returns>
              版本安全的名称。
            </returns>
      <exception cref="T:System.ArgumentException">
                  值 <paramref name="from " />和 <paramref name="to " />无效。
                   中的资源类型 <see cref="T:System.Runtime.Versioning.ResourceScope" />  枚举从限制性更强的资源类型转到更全面的资源类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type " /> 为 <see langword=" null" />。
                </exception>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>
              表示用于编码安全对象的 XML 对象模型。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.SecurityElement" /> 具有指定标记的类。
            </summary>
      <param name="tag">
                XML 元素的标记名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 参数是在 XML 中无效。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.SecurityElement" /> 类具有指定的标记和文本。
            </summary>
      <param name="tag">
                XML 元素的标记名称。
              </param>
      <param name="text">
                该元素内的文本内容。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 参数或 <paramref name="text" /> 参数是在 XML 中无效。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>
              将名称/值特性添加到一个 XML 元素。
            </summary>
      <param name="name">
                属性名。
              </param>
      <param name="value">
                属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数或 <paramref name="value" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数或 <paramref name="value" /> 参数是在 XML 中无效。
                
                  - 或 - 
                
                  具有指定的名称的属性 <paramref name="name" /> 参数已存在。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>
              将子元素添加到 XML 元素。
            </summary>
      <param name="child">
                要添加的子元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>
              在一个 XML 元素按名称查找属性。
            </summary>
      <param name="name">
                若要搜索的属性的名称。
              </param>
      <returns>
              与已命名特性关联的值或 <see langword="null" /> 如果无特性与 <paramref name="name" /> 存在。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>
              获取或设置一个 XML 元素的属性作为名称/值对。
            </summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> XML 元素的属性值的对象。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  名称或值 <see cref="T:System.Collections.Hashtable" /> 对象无效。
                </exception>
      <exception cref="T:System.ArgumentException">
                  名称不是有效的 XML 属性名称。
                </exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>
              获取或设置 XML 元素的子元素的数组。
            </summary>
      <returns>
              作为安全元素的 XML 元素的有序的子元素。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XML 父节点的子节点是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>
              创建并返回当前的相同副本 <see cref="T:System.Security.SecurityElement" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:System.Security.SecurityElement" /> 对象的副本。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>
              比较两个 XML 元素对象相等。
            </summary>
      <param name="other">
                XML 元素的当前 XML 元素对象进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 标记、 特性名称和值、 子元素和当前的 XML 元素中的文本字段是与中的对应项相同 <paramref name="other" /> 参数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>
              替换无效的 XML 字符在字符串中使用其有效的 XML 等效项。
            </summary>
      <param name="str">
                在其中进行转义的无效字符字符串。
              </param>
      <returns>
              输入的字符串与无效的字符替换。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>
              从 XML 编码的字符串创建安全元素。
            </summary>
      <param name="xml">
                从其创建安全元素的 XML 编码的字符串。
              </param>
      <returns>
              从 XML 创建的 <see cref="T:System.Security.SecurityElement" />。
            </returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" /> 包含一个或多个单引号字符。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 为 <see langword=" null" />。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>
              确定字符串是否是有效的特性名。
            </summary>
      <param name="name">
                要测试其有效性的属性名称。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="name" /> 参数是有效的 XML 属性名称; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>
              确定字符串是否是有效的特性值。
            </summary>
      <param name="value">
                要测试其有效性的属性值。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="value" /> 参数是有效的 XML 属性值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>
              确定字符串是否是有效的标记。
            </summary>
      <param name="tag">
                要测试其有效性的标记。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="tag" /> 参数是一个有效的 XML 标记; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>
              确定字符串是否是有效 XML 元素中的文本。
            </summary>
      <param name="text">
                要测试其有效性的文本。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="text" /> 参数都是有效的 XML 文本元素; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>
              查找子级的标记名称。
            </summary>
      <param name="tag">
                要搜索的子元素标记。
              </param>
      <returns>
              具有指定的标记值的第一个子 XML 元素或 <see langword="null" /> 如果没有子元素具有 <paramref name="tag" /> 存在。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>
              查找子级的标记名称，并返回所包含的文本。
            </summary>
      <param name="tag">
                要搜索的子元素标记。
              </param>
      <returns>
              具有指定的标记值的第一个子元素的文本内容。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>
              获取或设置一个 XML 元素的标记名称。
            </summary>
      <returns>
              XML 元素的标记名称。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  标记是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  标记不是在 XML 中无效的。
                </exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>
              获取或设置 XML 元素中的文本。
            </summary>
      <returns>
              在 XML 元素文本的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  文本不是在 XML 中无效的。
                </exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>
              生成的字符串表示形式的 XML 元素及其构成特性、 子元素和文本。
            </summary>
      <returns>
              XML 元素，其内容。
            </returns>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>
              定义所有上下文绑定类的基类。
            </summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>
              实例化 <see cref="T:System.ContextBoundObject" /> 类的实例。
            </summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>
              在尝试跨上下文边界封送对象失败时引发的异常。
            </summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>
              使用默认属性初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。
            </summary>
      <param name="info">
                包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ContextMarshalException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>
              提供一组方法和属性，可用于准确地测量运行时间。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>
              获取当前实例测量得出的总运行时间。
            </summary>
      <returns>
              一个只读的 <see cref="T:System.TimeSpan" />，表示当前实例测量得出的总运行时间。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>
              获取当前实例测量得出的总运行时间（以毫秒为单位）。
            </summary>
      <returns>
              一个只读长整型，表示当前实例测量得出的总毫秒数。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>
              获取当前实例测量得出的总运行时间（用计时器刻度表示）。
            </summary>
      <returns>
              一个只读长整型，表示当前实例测量得出的计时器刻度总数。
            </returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>
              获取以每秒刻度数表示的计时器频率。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>
              获取计时器机制中的当前刻度数。
            </summary>
      <returns>
              一个长整型，表示基础计时器机制中的刻度计数器值。
            </returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>
              指示计时器是否基于高分辨率性能计数器。
               此字段为只读。
            </summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>
              获取一个值，该值表示 <see cref="T:System.Diagnostics.Stopwatch" /> 计时器是否正在运行。
            </summary>
      <returns>
              如果 <see cref="T:System.Diagnostics.Stopwatch" /> 实例当前正在运行，并且正在测量时间间隔花费的时间，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>
              停止时间间隔测量，并将运行时间重置为零。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>
              停止时间间隔测量，将运行时间重置为零，然后开始测量运行时间。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>
              开始或继续测量某个时间间隔的运行时间。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>
              初始化新的 <see cref="T:System.Diagnostics.Stopwatch" /> 实例，将运行时间属性设置为零，然后开始测量运行时间。
            </summary>
      <returns>
              刚刚开始测量运行时间的 <see cref="T:System.Diagnostics.Stopwatch" />。
            </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>
              停止测量某个时间间隔的运行时间。
            </summary>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>
              提供的可远程处理版本 <see langword="AssemblyName" />。
            </summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>
              初始化 <see cref="T:System.Reflection.AssemblyNameProxy" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>
              获取 <see langword="AssemblyName" /> 对于给定的文件。
            </summary>
      <param name="assemblyFile">
                要为其获取程序集文件 <see langword="AssemblyName" />。
              </param>
      <returns>
        <see langword="AssemblyName" /> 表示给定的文件的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 为空。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。
                </exception>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>
              指定可以使用声明性安全执行的安全操作。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>
              调用代码可以访问当前权限对象所标识的资源，即使尚未对堆栈中的高级调用方授予访问该资源的权限（请参阅使用断言方法）。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>
              要求调用堆栈中的所有高级调用方已被授予当前权限对象所指定的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>
              即使调用方已被授予访问权限，也会拒绝其访问当前权限对象指定的资源的能力（参见使用 Deny 方法）。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>
              要求继承此类或重写方法的派生的类已被授予指定的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>
              要求直接调用方已被授予指定的权限。
               请不要在 .NET Framework 4 中使用。
               对于完全信任，请改用 <see cref="T:System.Security.SecurityCriticalAttribute" />；对于部分信任，请使用 <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>
              仅可以访问此权限对象所指定的资源，即使代码已被授予访问其他资源的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>
              代码运行所需的最低权限请求。
               此操作仅可以在程序集的作用域内使用。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>
              可选的其他权限请求（不要求运行）。
               此请求隐式拒绝所有未明确请求的其他权限。
               此操作仅可以在程序集的作用域内使用。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>
              可能被误用的权限将不授予给调用代码的请求。
               此操作仅可以在程序集的作用域内使用。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>
              指定从其声明性安全的基属性类 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 派生。
            </summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Permissions.SecurityAttribute" /> 具有指定 <see cref="T:System.Security.Permissions.SecurityAction" />。
            </summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。
              </param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>
              获取或设置安全性操作。
            </summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>
              当在派生类中重写时，创建一个权限对象，随后可将其序列化为二进制形式并连同 <see cref="T:System.Security.Permissions.SecurityAction" /> 长久存储在程序集的元数据中。
            </summary>
      <returns>
              可序列化的权限对象。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>
              获取或设置一个值，该值指示是否声明对受该属性的资源的完整 （无限制） 权限。
            </summary>
      <returns>
        <see langword="true" /> 如果声明对受保护资源的完全权限;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>
              允许的操作安全 <see cref="T:System.Security.Permissions.SecurityPermission" /> 要应用于代码中使用声明性安全。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
              使用指定的 <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。
            </summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。
              </param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>
              获取或设置一个值，该值指示是否已声明以下要断言的权限：所有此代码的调用方具有此操作的所需权限。
            </summary>
      <returns>
              如果声明了要断言的权限，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>
              获取或设置一个值，该值表示代码是否具有在应用程序配置文件中执行绑定重定向的权限。
            </summary>
      <returns>
              如果代码可以执行绑定重定向，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>
              获取或设置一个值，该值指示是否声明了操作 <see cref="T:System.AppDomain" /> 的权限。
            </summary>
      <returns>
              如果声明了操作 <see cref="T:System.AppDomain" /> 的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>
              获取或设置一个值，该值指示是否声明改变或操作域安全策略的权限。
            </summary>
      <returns>
              如果声明改变或操作应用程序域中的安全策略的权限，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>
              获取或设置一个值，该值指示是否声明了改变或操作证据的权限。
            </summary>
      <returns>
              如果声明了改变或操作证据的功能，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>
              获取或设置一个值，该值指示是否声明了查看和操作安全策略的权限。
            </summary>
      <returns>
              如果声明了操作安全策略的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>
              获取或设置一个值，该值指示是否声明了操作当前主体的权限。
            </summary>
      <returns>
              如果声明了操作当前主体的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>
              获取或设置一个值，该值指示是否声明了操作线程的权限。
            </summary>
      <returns>
              如果声明了操作线程的权限，则为 <see langword="true" /> ；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>
              创建并返回一个新的 <see cref="T:System.Security.Permissions.SecurityPermission" />。
            </summary>
      <returns>
              与此属性对应的 <see cref="T:System.Security.Permissions.SecurityPermission" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>
              获取或设置一个值，该值指示是否声明了执行代码的权限。
            </summary>
      <returns>
              如果声明了执行代码的权限，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>
              获取或设置构成 <see cref="T:System.Security.Permissions.SecurityPermission" /> 权限的所有权限标志。
            </summary>
      <returns>
              使用按位“或”运算结合的一个或多个 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试将此属性设置为无效值。
                   有关有效值，请参阅 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。
                </exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>
              获取或设置一个值，该值指示代码是否可以插入公共语言运行时基础结构中，例如添加远程上下文接收器、特使接收器和动态接收器。
            </summary>
      <returns>
              如果代码可以插入公共语言运行时基础结构中，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>
              获取或设置一个值，该值指示代码是否可以配置远程处理类型和信道。
            </summary>
      <returns>
              如果代码可以配置远程处理类型和信道，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>
              获取或设置一个值，该值指示代码是否可以使用序列化格式化程序来序列化或反序列化对象。
            </summary>
      <returns>
              如果代码可以使用序列化格式化程序来序列化或反序列化对象，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>
              获取或设置一个值，该值指示是否声明跳过代码验证的权限。
            </summary>
      <returns>
              如果声明跳过代码验证的权限，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>
              获取或设置一个值，该值指示是否声明调用非托管代码的权限。
            </summary>
      <returns>
              如果声明调用非托管代码的权限，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>
              指定安全权限对象的访问标志。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>
              不受限制权限的状态。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>
              能够断言此代码的所有调用方均有操作所需的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>
              在应用程序配置文件中执行显式绑定重定向权限。
               这包括进行了统一以及找到.NET Framework 之外的其他程序集的.NET Framework 程序集重定向。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>
              能够创建和操作 <see cref="T:System.AppDomain" />。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>
              若要指定域策略的能力。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>
              能够提供证据，包括更改公共语言运行时提供的证据的功能。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>
              若要查看和修改策略的能力。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>
              能够操作主体对象。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>
              若要使用某些高级的线程操作的能力。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>
              要运行的代码的权限。
               如果没有此权限，将不会执行托管的代码。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>
              将代码插入到公共语言运行时结构，如添加远程处理上下文接收器、 Envoy 接收器和动态接收器的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>
              不能安全访问。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>
              若要配置远程处理类型和信道的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>
              能够提供序列化服务。
               使用序列化格式化程序。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>
              若要跳过验证此程序集中的代码的能力。
               如果授予此权限，也无法进行验证的代码可以运行。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>
              调用非托管的代码的能力。
            </summary>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>
              指示某静态字段的值对于特定上下文是唯一的。
            </summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ContextStaticAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Convert">
      <summary>
              将一个基本数据类型转换为另一个基本数据类型。
            </summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>
              返回一个指定类型的对象，该对象的值等效于指定的对象。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="conversionType">
                要返回的对象的类型。
              </param>
      <returns>
              一个对象，其类型为 <paramref name="conversionType" />，并且其值等效于 <paramref name="value" />。
            
              - 或 -
            
              如果 <see langword="Nothing" /> 为 <paramref name="value" />，并且 <see langword="null" /> 不是值类型，则为空引用（在 Visual Basic 中为 <paramref name="conversionType" />）。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                
                  - 或 -
                
                  <paramref name="value" /> 是 <see langword="null" /> 并且 <paramref name="conversionType" /> 是一个值类型。
                
                  - 或 -
                
                  <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="conversionType" /> 可识别的格式。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="conversionType" /> 的范围内的数字。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>
              返回指定类型的对象，其值等效于指定对象。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="typeCode">
                要返回的对象的类型。
              </param>
      <returns>
              一个对象，其基础类型为 <paramref name="typeCode" />，并且其值等效于 <paramref name="value" />。
            
              - 或 -
            
              如果 <see langword="Nothing" /> 为 <paramref name="value" /> 并且 <see langword="null" /> 为 <paramref name="typeCode" />、<see cref="F:System.TypeCode.Empty" /> 或 <see cref="F:System.TypeCode.String" />，则为空引用（在 Visual Basic 中为 <see cref="F:System.TypeCode.Object" />）。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see langword="null" />，并且 <paramref name="typeCode" /> 指定值类型。
                
                  - 或 -
                
                  <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="typeCode" /> 类型可识别的格式。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="typeCode" /> 类型的范围内的数字。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 无效。
                </exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>
              返回指定类型的对象，其值等效于指定对象。
               参数提供区域性特定的格式设置信息。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="conversionType">
                要返回的对象的类型。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个对象，其类型为 <paramref name="conversionType" />，并且其值等效于 <paramref name="value" />。
            
              - 或 - 
            
              <paramref name="value" />，前提是 <see cref="T:System.Type" /> 的 <paramref name="value" /> 和 <paramref name="conversionType" /> 相等。
            
              - 或 - 
            
              如果 <see langword="Nothing" /> 为 <paramref name="value" />，并且 <see langword="null" /> 不是值类型，则为空引用（在 Visual Basic 中为 <paramref name="conversionType" />）。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                
                  - 或 -
                
                  <paramref name="value" /> 是 <see langword="null" /> 并且 <paramref name="conversionType" /> 是一个值类型。
                
                  - 或 -
                
                  <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="provider" /> 可识别的 <paramref name="conversionType" /> 的格式。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="conversionType" /> 的范围内的数字。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>
              返回指定类型的对象，其值等效于指定对象。
               参数提供区域性特定的格式设置信息。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="typeCode">
                要返回的对象的类型。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个对象，其基础类型为 <paramref name="typeCode" />，并且其值等效于 <paramref name="value" />。
            
              - 或 - 
            
              如果 <see langword="Nothing" /> 为 <paramref name="value" /> 并且 <see langword="null" /> 为 <paramref name="typeCode" />、<see cref="F:System.TypeCode.Empty" /> 或 <see cref="F:System.TypeCode.String" />，则为空引用（在 Visual Basic 中为 <see cref="F:System.TypeCode.Object" />）。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see langword="null" />，并且 <paramref name="typeCode" /> 指定值类型。
                
                  - 或 -
                
                  <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不是 <paramref name="provider" /> 可识别的 <paramref name="typeCode" /> 类型的格式。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示不在 <paramref name="typeCode" /> 类型的范围内的数字。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 无效。
                </exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>
              一个常数，用于表示没有数据的数据库列；即数据库为空。
            </summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>
              将 Unicode 字符数组（它将二进制数据编码为 Base64 数字）的子集转换为等效的 8 位无符号整数数组。
               参数指定输入数组的子集以及要转换的元素数。
            </summary>
      <param name="inArray">
                Unicode 字符数组。
              </param>
      <param name="offset">
        <paramref name="inArray" /> 内的位置。
              </param>
      <param name="length">
        <paramref name="inArray" /> 中要转换的元素数目。
              </param>
      <returns>
              等效于 <paramref name="length" /> 中位于 <paramref name="offset" /> 位置的 <paramref name="inArray" /> 元素的 8 位无符号整数数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 小于 0。
                
                  - 或 - 
                
                  <paramref name="offset" /> 加 <paramref name="length" /> 表示不在 <paramref name="inArray" /> 内的位置。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="inArray" /> 的长度（忽略空格）不是 0 或 4 的倍数。
                
                  - 或 -
                
                  <paramref name="inArray" /> 的格式无效。
                  <paramref name="inArray" /> 包含非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空格字符。
                </exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>
              将指定的字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与 <paramref name="s" /> 等效的 8 位无符号整数数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的长度（忽略空格）不是 0 或 4 的倍数。
                
                  - 或 -
                
                  <paramref name="s" /> 的格式无效。
                  <paramref name="s" /> 包含非 base 64 字符、两个以上的填充字符或者在填充字符中包含非空格字符。
                </exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>
              返回指定对象的 <see cref="T:System.TypeCode" />。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <returns>
              如果 <see cref="T:System.TypeCode" /> 是 <paramref name="value" />，则为 <see cref="F:System.TypeCode.Empty" /> 的 <paramref name="value" /> 或 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>
              返回有关指定对象是否为 <see cref="T:System.DBNull" /> 类型的指示。
            </summary>
      <param name="value">
                一个对象。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型是 <paramref name="value" />，则为 <see cref="T:System.DBNull" /> ；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
              将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。
               参数将子集指定为输入和输出数组中的偏移量和输入数组中要转换的元素数。
            </summary>
      <param name="inArray">
                8 位无符号整数的输入数组。
              </param>
      <param name="offsetIn">
        <paramref name="inArray" /> 内的位置。
              </param>
      <param name="length">
                要转换的 <paramref name="inArray" /> 的元素数。
              </param>
      <param name="outArray">
                Unicode 字符的输出数组。
              </param>
      <param name="offsetOut">
        <paramref name="outArray" /> 内的位置。
              </param>
      <returns>
              包含 <paramref name="outArray" /> 中的字节数的 32 位带符号整数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" /> 或 <paramref name="length" /> 为负数。
                
                  - 或 - 
                
                  <paramref name="offsetIn" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。
                
                  - 或 - 
                
                  <paramref name="offsetOut" /> 加上要返回的元素数，大于 <paramref name="outArray" /> 的长度。
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>
              将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。
               参数指定作为输入和输出数组中偏移量的子集、输入数组中要转换的元素数以及是否在输出数组中插入分行符。
            </summary>
      <param name="inArray">
                8 位无符号整数的输入数组。
              </param>
      <param name="offsetIn">
        <paramref name="inArray" /> 内的位置。
              </param>
      <param name="length">
                要转换的 <paramref name="inArray" /> 的元素数。
              </param>
      <param name="outArray">
                Unicode 字符的输出数组。
              </param>
      <param name="offsetOut">
        <paramref name="outArray" /> 内的位置。
              </param>
      <param name="options">
                如果每 76 个字符插入一个分行符，则使用 <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />，如果不插入分行符，则使用 <see cref="F:System.Base64FormattingOptions.None" />。
              </param>
      <returns>
              包含 <paramref name="outArray" /> 中的字节数的 32 位带符号整数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" /> 或 <paramref name="length" /> 为负数。
                
                  - 或 - 
                
                  <paramref name="offsetIn" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。
                
                  - 或 - 
                
                  <paramref name="offsetOut" /> 加上要返回的元素数，大于 <paramref name="outArray" /> 的长度。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>
              将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。
               参数指定作为输入数组中偏移量的子集、数组中要转换的元素数以及是否在返回值中插入分行符。
            </summary>
      <param name="inArray">
                8 位无符号整数数组。
              </param>
      <param name="offset">
        <paramref name="inArray" /> 中的偏移量。
              </param>
      <param name="length">
                要转换的 <paramref name="inArray" /> 的元素数。
              </param>
      <param name="options">
                如果每 76 个字符插入一个分行符，则使用 <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />，如果不插入分行符，则使用 <see cref="F:System.Base64FormattingOptions.None" />。
              </param>
      <returns>
        <paramref name="length" /> 中从位置 <paramref name="inArray" /> 开始的 <paramref name="offset" /> 个元素的字符串表示形式，以 Base64 表示。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 为负数。
                
                  - 或 - 
                
                  <paramref name="offset" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。
               参数将子集指定为输入数组中的偏移量和数组中要转换的元素数。
            </summary>
      <param name="inArray">
                8 位无符号整数数组。
              </param>
      <param name="offset">
        <paramref name="inArray" /> 中的偏移量。
              </param>
      <param name="length">
                要转换的 <paramref name="inArray" /> 的元素数。
              </param>
      <returns>
        <paramref name="length" /> 中从位置 <paramref name="inArray" /> 开始的 <paramref name="offset" /> 个元素的字符串表示形式，以 Base64 表示。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 为负数。
                
                  - 或 - 
                
                  <paramref name="offset" /> 加上 <paramref name="length" /> 大于 <paramref name="inArray" /> 的长度。
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>
              将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。
            </summary>
      <param name="inArray">
                8 位无符号整数数组。
              </param>
      <returns>
        <paramref name="inArray" /> 的内容的字符串表示形式，以 Base64 表示。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>
              将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。
               参数指定是否在返回值中插入分行符。
            </summary>
      <param name="inArray">
                8 位无符号整数数组。
              </param>
      <param name="options">
                如果每 76 个字符插入一个分行符，则使用 <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />，如果不插入分行符，则使用 <see cref="F:System.Base64FormattingOptions.None" />。
              </param>
      <returns>
        <paramref name="inArray" /> 中元素的字符串表示形式，以 Base64 表示。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Base64FormattingOptions" /> 值。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>
              将指定的 8 位有符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将逻辑值的指定字符串表示形式转换为其等效的布尔值。
            </summary>
      <param name="value">
                包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
                 忽略此参数。
              </param>
      <returns>
              如果 <see langword="true" /> 等于 <paramref name="value" />，则为 <see cref="F:System.Boolean.TrueString" />；如果 <see langword="false" /> 等于 <paramref name="value" /> 或 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的布尔值。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />，它将反映通过对 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 的基础类型调用 <paramref name="value" /> 方法而返回的值。
               如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是一个不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />的字符串。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持 <paramref name="value" /> 到 <see cref="T:System.Boolean" /> 的转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>
              将逻辑值的指定字符串表示形式转换为其等效的布尔值。
            </summary>
      <param name="value">
                包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 值的字符串。
              </param>
      <returns>
              如果 <see langword="true" /> 等于 <paramref name="value" />，则为 <see cref="F:System.Boolean.TrueString" />；如果 <see langword="false" /> 等于 <paramref name="value" /> 或 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>
              将指定对象的值转换为等效的布尔值。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />，它将反映通过对 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 的基础类型调用 <paramref name="value" /> 方法而返回的值。
               如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是一个不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />的字符串。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持 <paramref name="value" /> 到 <see cref="T:System.Boolean" /> 的转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>
              将指定的十进制数字的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>
              返回指定的布尔值；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的布尔值。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的布尔值。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示 10 为基的无符号数字）的前面带一个负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定对象的值转换为 8 位无符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Byte" /> 值的属性格式。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
                
                  - 或 -
                
                  不支持从 <paramref name="value" /> 转换为 <see cref="T:System.Byte" /> 类型。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>
              将指定的 8 位有符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位有符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>
              返回指定的 8 位无符号整数；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的 8 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>
              将指定 Unicode 字符的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 8 位无符号整数。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>
              将指定对象的值转换为 8 位无符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 未采用 <see cref="T:System.Byte" /> 值的属性格式。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
                
                  - 或 -
                
                  不支持从 <paramref name="value" /> 转换为 <see cref="T:System.Byte" /> 类型。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定字符串的第一个字符转换为 Unicode 字符。
            </summary>
      <param name="value">
                长度为 1 或 <see langword="null" /> 的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
                 忽略此参数。
              </param>
      <returns>
              与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度不是 1。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>
              将指定对象的值转换为 Unicode 字符。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <returns>
              与 value 等效的 Unicode 字符，或者如果 <see cref="F:System.Char.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是一个 null 字符串。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持 <paramref name="value" /> 到 <see cref="T:System.Char" /> 的转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的 Unicode 字符。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的 Unicode 字符，或者如果 <see cref="F:System.Char.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是一个 null 字符串。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持 <paramref name="value" /> 到 <see cref="T:System.Char" /> 的转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为其等效的 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为其等效的 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为其等效的 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>
              将指定字符串的第一个字符转换为 Unicode 字符。
            </summary>
      <param name="value">
                长度为 1 的字符串。
              </param>
      <returns>
              与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度不是 1。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>
              将指定的 8 位有符号整数的值转换为它的等效 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为它的等效 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为它的等效 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>
              返回指定的 Unicode 字符值；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的 Unicode 字符。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为其等效的 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为它的等效 Unicode 字符。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的 Unicode 字符。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的单精度浮点值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>
              将日期和时间的指定字符串表示形式转换为等效的日期和时间值。
            </summary>
      <param name="value">
                日期和时间的字符串表示形式。
              </param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正确的日期和时间字符串。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的日期和时间。
            </summary>
      <param name="value">
                包含要转换的日期和时间的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是格式正确的日期和时间字符串。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将指定对象的值转换为 <see cref="T:System.DateTime" /> 对象。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是无效的日期和时间值。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>
              将指定对象的值转换为 <see cref="T:System.DateTime" /> 对象。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
        <paramref name="value" /> 的值的日期和时间等效项，如果 <see cref="F:System.DateTime.MinValue" /> 为 <paramref name="value" />，则为 <see langword="null" /> 的日期和时间等效项。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 是无效的日期和时间值。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的双精度浮点值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>
              返回指定的 <see cref="T:System.DateTime" /> 对象；不执行任何实际的转换。
            </summary>
      <param name="value">
                日期和时间值。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的十进制数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的十进制数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
                  对于 <see cref="T:System.Decimal" /> 类型，<paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的十进制数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>
              将指定对象的值转换为等效的十进制数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的十进制数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
                  对于 <see cref="T:System.Decimal" /> 类型，<paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>
              将指定的 32 位带符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>
              将指定的 64 位带符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>
              返回指定的十进制数；不执行任何实际的转换。
            </summary>
      <param name="value">
                十进制数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>
              将指定的 16 位带符号整数的值转换为等效的十进制数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的十进制数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定对象的值转换为双精度浮点数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
                  对于 <see cref="T:System.Double" /> 类型，<paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                单精度浮点数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>
              将指定对象的值转换为双精度浮点数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的双精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
                  对于 <see cref="T:System.Double" /> 类型，<paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>
              将指定的 32 位带符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>
              将指定的 64 位带符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>
              返回指定的双精度浮点数；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的双精度浮点数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>
              将指定的 16 位带符号整数的值转换为等效的双精度浮点数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 16 位带符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
                  对于 <see cref="T:System.Int16" /> 类型，<paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>
              将指定对象的值转换为 16 位带符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
                  对于 <see cref="T:System.Int16" /> 类型，<paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>
              返回指定的 16 位有符号整数；不执行实际的转换。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>
              将指定的 Unicode 字符的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 16 位带符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 16 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 32 位带符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>
              将指定对象的值转换为 32 位带符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个等效于 <paramref name="value" /> 的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 32 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>
              返回指定的 32 位有符号整数；不执行实际的转换。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>
              将指定的 Unicode 字符的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的 32 位有符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 32 位带符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" /> 或小于 <see cref="F:System.Int32.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 64 位带符号整数。
            </summary>
      <param name="value">
                实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>
              将指定对象的值转换为 64 位带符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>
              返回指定的 64 位有符号整数；不执行实际的转换。
            </summary>
      <param name="value">
                64 位带符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>
              将指定的 Unicode 字符的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 64 位带符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>
              返回指定的 8 位有符号整数；不执行实际的转换。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的 8 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示基数不为 10 的符号数字）的前缀为负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 8 位带符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的 8 位带符号整数，如果值为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>
              将指定对象的值转换为 8 位带符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>
              将指定的 Unicode 字符的值转换为等效的 8 位有符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>
              将指定的 16 位带符号整数的值转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 8 位带符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 8 位带符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 8 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定对象的值转换为单精度浮点数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" />。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              与 <paramref name="value" /> 中数字等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是一个具有有效格式的数字。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>
              返回指定的单精度浮点数；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的单精度浮点数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>
              将指定对象的值转换为单精度浮点数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的单精度浮点数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>
              将指定的 32 位带符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>
              将指定的 16 位带符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            
              使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。
               例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            
              使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。
               例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>
              将指定的 64 位带符号整数的值转换为等效的单精度浮点数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>
              将 16 位带符号整数的值转换为其指定基的等效字符串表示形式。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <param name="toBase">
                返回值的基数，必须是 2、8、10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将指定的 <see cref="T:System.DateTime" /> 的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将指定的十进制数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>
              将指定的双精度浮点数的值转换其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>
              将 32 位带符号整数的值转换为其指定基的等效字符串表示形式。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <param name="toBase">
                返回值的基数，必须是 2、8、10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>
              将 64 位带符号整数的值转换为其指定基的等效字符串表示形式。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <param name="toBase">
                返回值的基数，必须是 2、8、10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                一个对象，用于提供要转换的值，或 <see langword="null" />。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式；如果 <see cref="F:System.String.Empty" /> 是一个值为 <paramref name="value" /> 的对象，则为 <see langword="null" />。
               如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的单精度浮点数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>
              返回指定的字符串实例；不执行任何实际转换。
            </summary>
      <param name="value">
                要返回的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
                 忽略此参数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将指定的 Unicode 字符的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
                 忽略此参数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>
              将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <param name="toBase">
                返回值的基数，必须是 2、8、10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="toBase" /> 的字符串表示形式。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。
                </exception>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>
              将指定的布尔值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <param name="provider">
                一个对象的实例。
                 忽略此参数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>
              将指定的布尔值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>
              将指定的 Unicode 字符的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>
              将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>
              将指定的 <see cref="T:System.DateTime" /> 的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>
              将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>
              将指定对象的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                一个对象，用于提供要转换的值，或 <see langword="null" />。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表现形式；如果 <paramref name="value" /> 为 <see langword="null" />，则为 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>
              将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>
              返回指定的字符串实例；不执行任何实际转换。
            </summary>
      <param name="value">
                要返回的字符串。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>
              将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>
              返回指定的 16 位无符号整数；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的 16 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 16 位无符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>
              将指定的 8 位有符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>
              将指定对象的值转换为 16 位无符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>
              将指定 Unicode 字符的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 16 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 16 位无符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 16 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 32 位无符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>
              将指定的 64 位无符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>
              返回指定的 32 位无符号整数；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的 32 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>
              将指定的 8 位有符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 32 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>
              将指定 Unicode 字符的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 32 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 32 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>
              将指定对象的值转换为 32 位无符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个等效于 <paramref name="value" /> 的 32 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>
              将指定的单精度浮点数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的单精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>
              将数字的指定字符串表示形式转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 64 位带符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式信息，将指定对象的值转换为 64 位无符号整数。
            </summary>
      <param name="value">
                一个实现 <see cref="T:System.IConvertible" /> 接口的对象。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>
              将指定的 32 位无符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>
              返回指定的 64 位无符号整数；不执行任何实际的转换。
            </summary>
      <param name="value">
                要返回的 64 位无符号整数。
              </param>
      <returns>
              不经更改即返回 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>
              将指定的 8 位有符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>
              将指定的 16 位无符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>
              将指定对象的值转换为 64 位无符号整数。
            </summary>
      <param name="value">
                用于实现 <see cref="T:System.IConvertible" /> 接口的对象，或为 <see langword="null" />。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的格式不正确。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不实现 <see cref="T:System.IConvertible" /> 接口。
                
                  - 或 -
                
                  不支持该转换。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>
              将指定的十进制数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的十进制数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>
              将指定的 32 位有符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 32 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>
              将指定的 16 位有符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 16 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>
              将指定的双精度浮点数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的双精度浮点数。
              </param>
      <returns>
        <paramref name="value" />，舍入为最接近的 64 位无符号整数。
               如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>
              调用此方法始终引发 <see cref="T:System.InvalidCastException" />。
            </summary>
      <param name="value">
                要转换的日期和时间值。
              </param>
      <returns>
              不支持此转换。
               不返回任何值。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  不支持此转换。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>
              将指定 Unicode 字符的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 Unicode 字符。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>
              将指定的 8 位无符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 8 位无符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位带符号整数。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>
              将指定的布尔值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的布尔值。
              </param>
      <returns>
              如果 <paramref name="value" /> 为 <see langword="true" />，则为数字 1；否则，为 0。
            </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不由一个可选符号后跟一系列数字 (0-9) 组成。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>
              将指定的 64 位有符号整数的值转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                要转换的 64 位带符号整数。
              </param>
      <returns>
              一个与 <paramref name="value" /> 等效的 64 位无符号整数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>
              将指定基数的数字的字符串表示形式转换为等效的 64 位无符号整数。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="fromBase">
        <paramref name="value" /> 中数字的基数，它必须是 2、8、10 或 16。
              </param>
      <returns>
              一个与 <paramref name="value" /> 中数字等效的 64 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。
                
                  - 或 -
                
                  <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含一个字符，该字符不是由 <paramref name="fromBase" /> 指定的基数中的有效数字。
                   如果 <paramref name="value" /> 中的第一个字符无效，则该异常消息指示没有要转换的数字；否则，该消息指示 <paramref name="value" /> 包含无效的尾随字符。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />（表示非 10 为基数的无符号数字）的前面带一个负号。
                
                  - 或 -
                
                  <paramref name="value" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>
              指定数学舍入方法应如何处理两个数字间的中间值。
            </summary>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>
              当一个数字是其他两个数字的中间值时，会将其舍入为两个值中绝对值较小的值。
            </summary>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>
              当一个数字是其他两个数字的中间值时，会将其舍入为最接近的偶数。
            </summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>
              提供<see cref="T:System.IProgress`1" />，它调用回调，为每个报告进度值。
            </summary>
      <typeparam name="T">
                指定的进度报表值的类型。
              </typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>
              初始化<see cref="T:System.Progress`1" />对象。
            </summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>
              初始化<see cref="T:System.Progress`1" />具有指定的回调对象。
            </summary>
      <param name="handler">
                要调用的每个报告进度值的处理程序。
                 除了注册的任何委托，将调用此处理程序<see cref="E:System.Progress`1.ProgressChanged" />事件。
                 具体取决于<see cref="T:System.Threading.SynchronizationContext" />通过捕获实例<see cref="T:System.Progress`1" />在构造，则可能会，无法与本身并发调用此处理程序实例。
              </param>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>
              报告进行更改。
            </summary>
      <param name="value">
                更新进度的值。
              </param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>
              为每个报告的进度值引发。
            </summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>
              报告进行更改。
            </summary>
      <param name="value">
                更新进度的值。
              </param>
    </member>
    <member name="T:System.Random">
      <summary>
              表示伪随机数生成器，这是一种能够产生满足某些随机性统计要求的数字序列的设备。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Random" /> 类，使用依赖于时间的默认种子值。
            </summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Random" /> 类，使用指定的种子值。
            </summary>
      <param name="Seed">
                用来计算伪随机数序列起始值的数字。
                 如果指定的是负数，则使用其绝对值。
              </param>
    </member>
    <member name="M:System.Random.Next">
      <summary>
              返回一个非负随机整数。
            </summary>
      <returns>
              一个 32 位有符号的整数，它是大于或等于 0 且小于比<see cref="F:System.Int32.MaxValue" />。
            </returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>
              返回一个小于所指定最大值的非负随机整数。
            </summary>
      <param name="maxValue">
                要生成的随机数字含上限。
                <paramref name="maxValue" />必须大于或等于 0。
              </param>
      <returns>
              一个 32 位有符号的整数，它是大于或等于 0，且小于比<paramref name="maxValue" />; 返回值的范围，即通常包括 0 但不是<paramref name="maxValue" />。
               但是，如果<paramref name="maxValue" />等于 0，<paramref name="maxValue" />返回。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> 小于 0。
                </exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>
              返回在指定范围内的任意整数。
            </summary>
      <param name="minValue">
                返回的随机数字包含下限。
              </param>
      <param name="maxValue">
                返回随机数的不含上限。
                <paramref name="maxValue" />必须大于或等于<paramref name="minValue" />。
              </param>
      <returns>
              32 位有符号的整数大于或等于<paramref name="minValue" />和小于<paramref name="maxValue" />; 即，返回值的范围包括<paramref name="minValue" />但不是<paramref name="maxValue" />。
               如果<paramref name="minValue" />等于<paramref name="maxValue" />，<paramref name="minValue" />返回。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> 大于 <paramref name="maxValue" />。
                </exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>
              用随机数填充指定字节数组的元素。
            </summary>
      <param name="buffer">
                要包含随机数字的字节数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>
              返回一个大于或等于 0.0 且小于 1.0 的随机浮点数。
            </summary>
      <returns>
              大于或等于 0.0 且小于 1.0 的双精度浮点数。
            </returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>
              返回一个介于 0.0 和 1.0 之间的随机浮点数。
            </summary>
      <returns>
              大于或等于 0.0 且小于 1.0 的双精度浮点数。
            </returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>
              为 <see cref="E:System.AppDomain.AssemblyLoad" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>
              使用指定的 <see cref="T:System.AssemblyLoadEventArgs" /> 初始化 <see cref="T:System.Reflection.Assembly" /> 类的新实例。
            </summary>
      <param name="loadedAssembly">
                表示当前加载的程序集的实例。
              </param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>
              获取 <see cref="T:System.Reflection.Assembly" /> ，它表示当前加载的程序集。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Reflection.Assembly" /> ，它表示当前加载的程序集。
            </returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>
              表示处理的方法<see cref="E:System.AppDomain.AssemblyLoad" />事件<see cref="T:System.AppDomain" />。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="args">
                包含事件数据的 <see cref="T:System.AssemblyLoadEventArgs" />。
              </param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>
              指定相关 <see cref="Overload:System.Convert.ToBase64CharArray" /> 和 <see cref="Overload:System.Convert.ToBase64String" /> 方法是否在其输出中插入换行符。
            </summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>
              在字符串表示形式中每隔 76 个字符插入换行符。
            </summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>
              不在字符串表示形式中每隔 76 个字符插入换行符。
            </summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>
              将基数据类型转换为一个字节数组以及将一个字节数组转换为基数据类型。
            </summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>
              将指定的双精度浮点数转换为 64 位有符号整数。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              一个 64 位有符号的整数，其值等效于 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>
              字节数组的形式返回指定的布尔值。
            </summary>
      <param name="value">
                一个布尔值。
              </param>
      <returns>
              具有长度为 1 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>
              字节数组形式返回指定的 Unicode 字符值。
            </summary>
      <param name="value">
                要转换的字符。
              </param>
      <returns>
              长度为 2 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>
              字节数组形式返回指定的双精度浮点值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 8 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>
              字节数组形式返回指定的 16 位有符号的整数值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 2 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>
              字节数组形式返回指定的 32 位有符号的整数值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 4 字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>
              以字节数组的形式返回指定 64 位带符号整数值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 8 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>
              字节数组形式返回指定的单精度浮点值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 4 字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>
              字节数组形式返回指定的 16 位无符号的整数值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 2 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>
              字节数组形式返回指定的 32 位无符号的整数值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 4 字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>
              字节数组形式返回指定的 64 位无符号的整数值。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              长度为 8 的字节数组。
            </returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>
              将指定的 64 位有符号的整数转换为双精度浮点数。
            </summary>
      <param name="value">
                要转换的数字。
              </param>
      <returns>
              其值等效于来双精度浮点数<paramref name="value" />。
            </returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>
              指示数据存储在此计算机体系结构中的字节顺序（“endianness”）。
            </summary>
      <returns>
              如果体系结构是 little-endian，则为 <see langword="true" />；如果体系结构是 big-endian，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>
              返回一个布尔值，从字节数组中的指定位置处的字节转换。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
                中的字节的索引 <paramref name="value" />。
              </param>
      <returns>
        <see langword="true" /> 如果在字节 <paramref name="startIndex" /> 中 <paramref name="value" /> 非零; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于该长度的 <paramref name="value" /> 减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>
              返回从字节数组中指定位置处的两个字节转换的 Unicode 字符。
            </summary>
      <param name="value">
                一个数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的两个字节构成的字符<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />长度等于<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>
              返回从字节数组中指定位置的八个字节转换来双精度浮点数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的八个字节构成的双精度浮点数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />大于或等于的长度<paramref name="value" />减去 7，并且小于或等于的长度<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>
              返回转换的字节数组中指定位置处的两个字节从一个 16 位带符号的整数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的两个字节构成的 16 位有符号的整数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />长度等于<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>
              返回转换的字节数组中指定位置处的四个字节从 32 位有符号的整数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的四个字节构成的一个 32 位带符号的整数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />大于或等于的长度<paramref name="value" />减 3，并且小于或等于的长度<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>
              返回转换的字节数组中指定位置处的八个字节从一个 64 位带符号的整数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              一个 64 位带符号的整数的八个字节从开始形成<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />大于或等于的长度<paramref name="value" />减去 7，并且小于或等于的长度<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>
              返回从字节数组中指定位置的四个字节转换来单精度浮点数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的四个字节构成的单精度浮点数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />大于或等于的长度<paramref name="value" />减 3，并且小于或等于的长度<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>
              将指定的字节数组的每个元素的数值转换为其等效的十六进制字符串表示形式。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <returns>
              十六进制对字符串连字符分隔的其中的每个对表示中的相应元素<paramref name="value" />; 例如，"7F-2c-4A-00"。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>
              将字节的指定子数组的每个元素的数值转换为其等效的十六进制字符串表示形式。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              十六进制对字符串连字符分隔的其中的每个对表示的子数组中的相应元素<paramref name="value" />; 例如，"7F-2c-4A-00"。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将字节的指定子数组的每个元素的数值转换为其等效的十六进制字符串表示形式。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <param name="length">
                数组中的元素数<paramref name="value" />要转换。
              </param>
      <returns>
              十六进制对字符串连字符分隔的其中的每个对表示的子数组中的相应元素<paramref name="value" />; 例如，"7F-2c-4A-00"。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。
                
                  - 或 -
                
                  <paramref name="startIndex" />大于零且大于或等于的长度<paramref name="value" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  组合<paramref name="startIndex" />和<paramref name="length" />并不指定内的位置<paramref name="value" />; 即，<paramref name="startIndex" />参数的长度大于<paramref name="value" />减<paramref name="length" />参数。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>
              返回从字节数组中指定位置处的两个字节转换的 16 位无符号的整数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的两个字节构成的 16 位无符号的整数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />长度等于<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>
              返回从字节数组中指定位置的四个字节转换的 32 位无符号的整数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始的四个字节构成的 32 位无符号的整数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />大于或等于的长度<paramref name="value" />减 3，并且小于或等于的长度<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>
              返回从字节数组中指定位置的八个字节转换的 64 位无符号的整数。
            </summary>
      <param name="value">
                字节数组。
              </param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。
              </param>
      <returns>
              由开始八个字节构成的 64 位无符号的整数<paramref name="startIndex" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />大于或等于的长度<paramref name="value" />减去 7，并且小于或等于的长度<paramref name="value" />减 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />小于零或大于的长度<paramref name="value" />减 1。
                </exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>
              当尝试卸载应用程序域失败时引发的异常。
            </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>
              初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该错误的 <see cref="T:System.String" />。
              </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。
              </param>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>
              与 <see cref="T:System.LoaderOptimizationAttribute" /> 类配合使用的枚举，用于指定可执行文件的加载程序优化。
            </summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>
              被公共语言运行时忽略。
            </summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>
              请勿使用。
               该掩码选择与域相关的值，筛选出未使用的 <see cref="F:System.LoaderOptimization.DisallowBindings" /> 标志。
            </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>
              表示应用程序将可能有多个使用相同代码的域，并且加载程序必须跨应用程序域最大限度地共享内部资源。
            </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>
              表示应用程序可能将承载多个域中的唯一代码，加载程序必须跨应用程序域共享资源，仅限已添加到全局程序集缓存的全局可用（具有强名称）程序集。
            </summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>
              表示未指定任何针对共享内部资源的优化。
               如果默认域或宿主接口指定了一种优化，那么加载程序将使用该优化；否则，加载程序将使用 <see cref="F:System.LoaderOptimization.SingleDomain" />。
            </summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>
              表示应用程序将可能只有单个域，并且加载程序不可以跨应用程序域共享内部资源。
            </summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>
              用于设置可执行的应用程序的主要方法的默认加载程序优化策略。
            </summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>
              新实例初始化 <see cref="T:System.LoaderOptimizationAttribute" /> 类传递给指定的值。
            </summary>
      <param name="value">
                值等效于 <see cref="T:System.LoaderOptimization" /> 常量。
              </param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>
              新实例初始化 <see cref="T:System.LoaderOptimizationAttribute" /> 类传递给指定的值。
            </summary>
      <param name="value">
                一个 <see cref="T:System.LoaderOptimization" /> 常数。
              </param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>
              获取当前 <see cref="T:System.LoaderOptimization" /> 此实例的值。
            </summary>
      <returns>
              一个 <see cref="T:System.LoaderOptimization" /> 常数。
            </returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>
              提供在处理 Web 请求时用于编码和解码 URL 的方法。
            </summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>
              将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
            </summary>
      <param name="value">
                要解码的字符串。
              </param>
      <returns>
              已解码的字符串。
            </returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>
              将已经过 HTML 编码的字符串转换为已解码的字符串并将其发送给 <see cref="T:System.IO.TextWriter" /> 输出流。
            </summary>
      <param name="value">
                要解码的字符串。
              </param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 输出流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 参数不能为 <see langword="null" /> 如果 <paramref name="value" /> 参数不是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>
              将字符串转换为 HTML 编码字符串。
            </summary>
      <param name="value">
                要编码的字符串。
              </param>
      <returns>
              已编码的字符串。
            </returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>
              将字符串转换为 HTML 编码的字符串，并以 <see cref="T:System.IO.TextWriter" /> 输出流的形式返回输出。
            </summary>
      <param name="value">
                要编码的字符串。
              </param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 输出流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 参数不能为 <see langword="null" /> 如果 <paramref name="value" /> 参数不是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>
              将已编码用于 URL 传输的字符串转换为解码的字符串。
            </summary>
      <param name="encodedValue">
                要解码的 URL 编码的字符串。
              </param>
      <returns>
              返回 <see cref="T:System.String" />。
            
              已解码的字符串。
            </returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将已编码以便在 URL 中传输到已解码的字节数组编码的字节数组转换。
            </summary>
      <param name="encodedValue">
                URL 编码 <see cref="T:System.Byte" /> 数组进行解码。
              </param>
      <param name="offset">
                以字节为单位，从开始处的偏移量 <see cref="T:System.Byte" /> 数组进行解码。
              </param>
      <param name="count">
                计数，以字节为单位，从解码 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              返回 <see cref="T:System.Byte" />。
            
              已解码 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>
              将文本字符串转换为 URL 编码的字符串。
            </summary>
      <param name="value">
                要进行 URL 编码的文本。
              </param>
      <returns>
              返回 <see cref="T:System.String" />。
            
              URL 编码的字符串。
            </returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将一个字节数组转换为 URL 编码的字节数组。
            </summary>
      <param name="value">
        <see cref="T:System.Byte" /> 要进行 URL 编码的数组。
              </param>
      <param name="offset">
                以字节为单位，从开始处的偏移量 <see cref="T:System.Byte" /> 数组进行编码。
              </param>
      <param name="count">
                以字节为单位，从其进行编码的计数 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              返回 <see cref="T:System.Byte" />。
            
              经过编码 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="T:System.UriBuilder">
      <summary>
              提供统一资源标识符 (Uri) 的自定义的构造函数以及修改为 Uri<see cref="T:System.Uri" />类。
            </summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
              初始化 <see cref="T:System.UriBuilder" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>
              用指定的 URI 初始化 <see cref="T:System.UriBuilder" /> 类的新实例。
            </summary>
      <param name="uri">
                一个 URI 字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UriFormatException">
                    在.NET for Windows Store apps或可移植类库，捕获该基类异常， <see cref="T:System.FormatException" />，而不是。
                  
                  <paramref name="uri" /> 字符串长度为零或只包含空格。
                
                  - 或 - 
                
                  分析例程检测到格式无效的架构。
                
                  - 或 - 
                
                  分析器在不使用 "file" 架构的 URI 中检测到两个以上的连续斜杠。
                
                  - 或 - 
                
                  <paramref name="uri" /> 不是有效的 URI。
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>
              使用指定的 <see cref="T:System.UriBuilder" /> 实例初始化 <see cref="T:System.Uri" /> 类的新实例。
            </summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 类的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>
              初始化的新实例<see cref="T:System.UriBuilder" />包含指定的方案和主机的类。
            </summary>
      <param name="schemeName">
                Internet 访问协议。
              </param>
      <param name="hostName">
                DNS 样式域名或 IP 地址。
              </param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>
              初始化的新实例<see cref="T:System.UriBuilder" />类指定的方案、 主机和端口。
            </summary>
      <param name="scheme">
                Internet 访问协议。
              </param>
      <param name="host">
                DNS 样式域名或 IP 地址。
              </param>
      <param name="portNumber">
                服务 IP 端口号。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" />小于-1 或大于 65,535。
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>
              初始化的新实例<see cref="T:System.UriBuilder" />与指定的方案、 主机、 端口号和路径的类。
            </summary>
      <param name="scheme">
                Internet 访问协议。
              </param>
      <param name="host">
                DNS 样式域名或 IP 地址。
              </param>
      <param name="port">
                服务 IP 端口号。
              </param>
      <param name="pathValue">
                Internet 资源的路径。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" />小于-1 或大于 65,535。
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>
              初始化的新实例<see cref="T:System.UriBuilder" />类与指定的方案、 主机、 端口号、 路径和查询字符串或段标识符。
            </summary>
      <param name="scheme">
                Internet 访问协议。
              </param>
      <param name="host">
                DNS 样式域名或 IP 地址。
              </param>
      <param name="port">
                服务 IP 端口号。
              </param>
      <param name="path">
                Internet 资源的路径。
              </param>
      <param name="extraValue">
                查询字符串或片段标识符。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" />既不是<see langword="null" />也不<see cref="F:System.String.Empty" />，也不有效片断标识符开头数字符号 （#），也有效的查询字符串开头问号 （？）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" />小于-1 或大于 65,535。
                </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>
              比较现有 <see cref="T:System.Uri" /> 实例的内容与 <see cref="T:System.UriBuilder" /> 是否相等。
            </summary>
      <param name="rparam">
                要与当前实例进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="rparam" /> 表示相同 <see cref="T:System.Uri" /> 作为 <see cref="T:System.Uri" /> 由此构造 <see cref="T:System.UriBuilder" /> 实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>
              获取或设置 URI 片段部分。
            </summary>
      <returns>
              URI 片段部分中。
               片段标识符 （"#"） 添加到片段的开头。
            </returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>
              对于 URI 返回的哈希代码。
            </summary>
      <returns>
              对于 URI 生成的哈希代码。
            </returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>
              获取或设置域名系统 (DNS) 主机名或服务器的 IP 地址。
            </summary>
      <returns>
              DNS 主机名或 IP 地址的服务器。
            </returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>
              获取或设置与用户访问 URI 相关联的密码。
            </summary>
      <returns>
              访问 URI 的用户的密码。
            </returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>
              获取或设置由 URI 引用的资源的路径。
            </summary>
      <returns>
              由 URI 引用资源的路径。
            </returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>
              获取或设置 URI 的端口号。
            </summary>
      <returns>
              URI 的端口号。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  端口不能设置为小于-1 的值或大于 65,535。
                </exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>
              获取或设置 URI 中包含的任何查询信息。
            </summary>
      <returns>
              在 URI 中包含的查询信息。
            </returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>
              获取或设置 URI 的方案名称。
            </summary>
      <returns>
              URI 的方案。
            </returns>
      <exception cref="T:System.ArgumentException">
                  方案不能设置为无效的方案名称。
                </exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>
              返回指定 <see cref="T:System.UriBuilder" /> 实例的显示字符串。
            </summary>
      <returns>
              包含 <see cref="T:System.UriBuilder" /> 非转义显示字符串的字符串。
            </returns>
      <exception cref="T:System.UriFormatException">
                    在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
                  
                  <see cref="T:System.UriBuilder" /> 实例包含错误密码。
                </exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>
              获取由指定的 <see cref="T:System.UriBuilder" /> 实例构造的 <see cref="T:System.Uri" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" />，它包含由 <see cref="T:System.UriBuilder" /> 构造的 URI。
            </returns>
      <exception cref="T:System.UriFormatException">
                    在.NET for Windows Store apps或可移植类库，捕获该基类异常， <see cref="T:System.FormatException" />，而不是。
                  
                  由 <see cref="T:System.UriBuilder" /> 属性构造的 URI 无效。
                </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>
              与用户访问 URI 相关联的用户名。
            </summary>
      <returns>
              访问 URI 的用户的用户名。
            </returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>
              当尝试访问已卸载的应用程序域时引发的异常。
            </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>
              初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AppDomainUnloadedException" /> 类的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。
              </param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>
              包含用来唯一标识基于清单的应用程序的信息。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.ApplicationId" /> 类的新实例。
            </summary>
      <param name="publicKeyToken">
                表示原始公钥数据的字节数组。
              </param>
      <param name="name">
                应用程序的名称。
              </param>
      <param name="version">
                A<see cref="T:System.Version" />对象，它指定应用程序的版本。
              </param>
      <param name="processorArchitecture">
                应用程序的处理器体系结构。
              </param>
      <param name="culture">
                应用程序的区域性。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name " /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="version " /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="publicKeyToken " /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name " />为一个空字符串。
                </exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>
              创建并返回当前的应用程序标识的相同副本。
            </summary>
      <returns>
        <see cref="T:System.ApplicationId" />对象，表示原始的一个精确副本。
            </returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>
              获取一个字符串，表示应用程序的区域性信息。
            </summary>
      <returns>
              应用程序的区域性信息。
            </returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.ApplicationId" /> 对象是否等效于当前 <see cref="T:System.ApplicationId" />。
            </summary>
      <param name="o">
        <see cref="T:System.ApplicationId" /> 要与当前 <see cref="T:System.ApplicationId" />。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.ApplicationId" /> 对象是否等效于当前 <see cref="T:System.ApplicationId" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>
              获取当前应用程序标识的哈希代码。
            </summary>
      <returns>
              当前的应用程序标识哈希代码。
            </returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>
              获取应用程序的名称。
            </summary>
      <returns>
              应用程序的名称。
            </returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>
              获取应用程序的目标处理器体系结构。
            </summary>
      <returns>
              应用程序的处理器体系结构。
            </returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>
              获取应用程序的公钥令牌。
            </summary>
      <returns>
              包含应用程序的公钥标记的字节数组。
            </returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>
              创建并返回的字符串表示形式的应用程序标识。
            </summary>
      <returns>
              应用程序标识的字符串表示形式。
            </returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>
              获取应用程序的版本。
            </summary>
      <returns>
              一个 <see cref="T:System.Version" /> ，它指定版本的应用程序。
            </returns>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>Compares two objects for equivalence, where string comparisons are case-sensitive.</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Comparer"></see> class using the specified <see cref="T:System.Globalization.CultureInfo"></see>.</summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use for the new <see cref="T:System.Collections.Comparer"></see>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture">culture</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>Performs a case-sensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="a">a</paramref> and <paramref name="b">b</paramref>, as shown in the following table.  
  Value  

  Meaning  

  Less than zero  

 <paramref name="a">a</paramref> is less than <paramref name="b">b</paramref>.  

  Zero  

 <paramref name="a">a</paramref> equals <paramref name="b">b</paramref>.  

  Greater than zero  

 <paramref name="a">a</paramref> is greater than <paramref name="b">b</paramref>.  

 </returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="a">a</paramref> nor <paramref name="b">b</paramref> implements the <see cref="System.IComparable"></see> interface.  
 -or-  
 <paramref name="a">a</paramref> and <paramref name="b">b</paramref> are of different types and neither one can handle comparisons with the other.</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>Represents an instance of <see cref="T:System.Collections.Comparer"></see> that is associated with the <see cref="P:System.Threading.Thread.CurrentCulture"></see> of the current thread. This field is read-only.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>Represents an instance of <see cref="T:System.Collections.Comparer"></see> that is associated with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"></see>. This field is read-only.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象序列化所需的数据。
            </summary>
      <param name="info">
                要填充数据的对象。
              </param>
      <param name="context">
                有关源或目标的序列化的上下文信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Math">
      <summary>
              为三角函数、对数函数和其他通用数学函数提供常数和静态方法。
            
              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
            </summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>
              返回 <see cref="T:System.Decimal" /> 数字的绝对值。
            </summary>
      <param name="value">
                一个大于或等于 <see cref="F:System.Decimal.MinValue" /> 但小于或等于 <see cref="F:System.Decimal.MaxValue" /> 的数字。
              </param>
      <returns>
              十进制数 x，使其满足 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />。
            </returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>
              返回双精度浮点数字的绝对值。
            </summary>
      <param name="value">
                一个大于或等于 <see cref="F:System.Double.MinValue" /> 但小于或等于 <see cref="F:System.Double.MaxValue" /> 的数字。
              </param>
      <returns>
              一个双精度浮点数 x，满足 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />。
            </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>
              返回 16 位有符号整数的绝对值。
            </summary>
      <param name="value">
                一个大于 <see cref="F:System.Int16.MinValue" /> 但小于或等于 <see cref="F:System.Int16.MaxValue" /> 的数字。
              </param>
      <returns>
              16 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int16.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>
              返回 32 位有符号整数的绝对值。
            </summary>
      <param name="value">
                一个大于 <see cref="F:System.Int32.MinValue" /> 但小于或等于 <see cref="F:System.Int32.MaxValue" /> 的数字。
              </param>
      <returns>
              32 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int32.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>
              返回 64 位有符号整数的绝对值。
            </summary>
      <param name="value">
                一个大于 <see cref="F:System.Int64.MinValue" /> 但小于或等于 <see cref="F:System.Int64.MaxValue" /> 的数字。
              </param>
      <returns>
              64 位带符号整数 x，满足 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.Int64.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>
              返回 8 位有符号整数的绝对值。
            </summary>
      <param name="value">
                一个大于 <see cref="F:System.SByte.MinValue" /> 但小于或等于 <see cref="F:System.SByte.MaxValue" /> 的数字。
              </param>
      <returns>
              8 位有符号整数 x，满足 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等于 <see cref="F:System.SByte.MinValue" />。
                </exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>
              返回单精度浮点数字的绝对值。
            </summary>
      <param name="value">
                一个大于或等于 <see cref="F:System.Single.MinValue" /> 但小于或等于 <see cref="F:System.Single.MaxValue" /> 的数字。
              </param>
      <returns>
              一个单精度浮点数 x，满足 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />。
            </returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>
              返回余弦值为指定数字的角度。
            </summary>
      <param name="d">
                一个表示余弦值的数字，其中 <paramref name="d" /> 必须大于或等于 -1 但小于或等于 1。
              </param>
      <returns>
              角度 θ，以弧度为单位，满足 0 ≤θ≤π
            
              - 或 - 
            
              如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>
              返回正弦值为指定数字的角度。
            </summary>
      <param name="d">
                一个表示正弦值的数字，其中 <paramref name="d" /> 必须大于或等于 -1 但小于或等于 1。
              </param>
      <returns>
              角度 θ，以弧度为单位，满足 π/2 ≤θ≤π/2 
            
              - 或 - 
            
              如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>
              返回正切值为指定数字的角度。
            </summary>
      <param name="d">
                表示正切值的数字。
              </param>
      <returns>
              角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2。
            
              - 或 - 
            
              如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />；如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则为舍入为双精度值 (-1.5707963267949) 的 -π/2；或者如果 <paramref name="d" /> 等于 <see cref="F:System.Double.PositiveInfinity" />，则为舍入为双精度值 (1.5707963267949) 的 π/2。
            </returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>
              返回正切值为两个指定数字的商的角度。
            </summary>
      <param name="y">
                点的 y 坐标。
              </param>
      <param name="x">
                点的 x 坐标。
              </param>
      <returns>
              角度 θ，以弧度为单位，满足 -π≤θ≤π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡尔平面中的点。
               请看下面：
            
                  For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt;&gt;θ &lt;&gt;π/2.
                
                  For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt;&gt;θ≤π.
                
                  For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt;&gt;θ &lt;&gt;π/2.
                
                  For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt;&gt;θ&lt; 0.&gt;&lt;/ 0.&gt;
                
              如果点在象限的边界上，则返回值如下：
            
                  如果 y 为 0 并且 x 不为负值，则 θ = 0。
                
                  如果 y 为 0 并且 x 为负值，则 θ = π。
                
                  如果 y 为正值并且 x 为 0，则 θ = π/2。
                
                  如果 y 为负值并且 x 为 0，则 θ = -π/2。
                
                  如果 y 为 0 并且 x 为 0，则 θ = 0。
                
              如果 <paramref name="x" /> 或 <paramref name="y" /> 为 <see cref="F:System.Double.NaN" />，或者如果 <paramref name="x" /> 和 <paramref name="y" /> 为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则该方法返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>
              生成两个 32 位数字的完整乘积。
            </summary>
      <param name="a">
                要相乘的第一个数。
              </param>
      <param name="b">
                要相乘的第二个数。
              </param>
      <returns>
              包含指定数字乘积的数。
            </returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>
              返回大于或等于指定的十进制数的最小整数值。
            </summary>
      <param name="d">
                十进制数。
              </param>
      <returns>
              大于或等于 <paramref name="d" /> 的最小整数值。
               请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。
            </returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>
              返回大于或等于指定的双精度浮点数的最小整数值。
            </summary>
      <param name="a">
                一个双精度浮点数。
              </param>
      <returns>
              大于或等于 <paramref name="a" /> 的最小整数值。
               如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。
               请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。
            </returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <param name="value">
      </param>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>
              返回指定角度的余弦值。
            </summary>
      <param name="d">
                以弧度计量的角度。
              </param>
      <returns>
        <paramref name="d" /> 的余弦值。
               如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>
              返回指定角度的双曲余弦值。
            </summary>
      <param name="value">
                以弧度计量的角度。
              </param>
      <returns>
        <paramref name="value" /> 的双曲余弦值。
               如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回 <see cref="F:System.Double.PositiveInfinity" />。
               如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>
              计算两个 64 位有符号整数的商，并通过输出参数返回余数。
            </summary>
      <param name="a">
                被除数。
              </param>
      <param name="b">
                除数。
              </param>
      <param name="result">
                余数。
              </param>
      <returns>
              指定数字的商。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> 为零。
                </exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>
              计算两个 32 位有符号整数的商，并通过输出参数返回余数。
            </summary>
      <param name="a">
                被除数。
              </param>
      <param name="b">
                除数。
              </param>
      <param name="result">
                余数。
              </param>
      <returns>
              指定数字的商。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> 为零。
                </exception>
    </member>
    <member name="F:System.Math.E">
      <summary>
              表示自然对数的底，它由常数 <see langword="e" /> 指定。
            </summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>
              返回 <see langword="e" /> 的指定次幂。
            </summary>
      <param name="d">
                指定幂的数字。
              </param>
      <returns>
              数字 <see langword="e" /> 的 <paramref name="d" /> 次幂。
               如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。
               如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则返回 0。
            </returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>
              返回小于或等于指定小数的最大整数。
            </summary>
      <param name="d">
                十进制数。
              </param>
      <returns>
              小于或等于 <paramref name="d" /> 的最大整数。
                请注意，该方法将返回 <see cref="T:System.Math" /> 类型的整数值。
            </returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>
              返回小于或等于指定双精度浮点数的最大整数。
            </summary>
      <param name="d">
                一个双精度浮点数。
              </param>
      <returns>
              小于或等于 <paramref name="d" /> 的最大整数。
               如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。
            </returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>
              返回一指定数字被另一指定数字相除的余数。
            </summary>
      <param name="x">
                被除数。
              </param>
      <param name="y">
                除数。
              </param>
      <returns>
              一个数等于 <paramref name="x" /> - (<paramref name="y" /> Q)，其中 Q 是 <paramref name="x" /> / <paramref name="y" /> 的商的最接近整数（如果 <paramref name="x" /> / <paramref name="y" /> 在两个整数中间，则返回偶数）。
            
              如果 <paramref name="x" /> - (<paramref name="y" /> Q) 为零，则在 <paramref name="x" /> 为正时返回值 +0，而在 <paramref name="x" /> 为负时返回 -0。
            
              如果 <paramref name="y" /> = 0，则返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>
              返回指定数字的自然对数（底为 <see langword="e" />）。
            </summary>
      <param name="d">
                要查找其对数的数字。
              </param>
      <returns>
              下表中的值之一。
            
                      <paramref name="d" />参数
                    
                      返回值 
                    
                      正 
                    
                      自然对数<paramref name="d" />; 即，ln <paramref name="d" />，或日志e<paramref name="d" />
                    
                      零 
                    
                      <see cref="F:System.Double.NegativeInfinity" />
                    
                      负数 
                    
                      <see cref="F:System.Double.NaN" />
                    
                      等于<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />
                    
                      等于<see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>
              返回指定数字在使用指定底时的对数。
            </summary>
      <param name="a">
                要查找其对数的数字。
              </param>
      <param name="newBase">
                对数的底。
              </param>
      <returns>
              下表中的值之一。
               （+Infinity 表示 <see cref="F:System.Double.PositiveInfinity" />，-Infinity 表示 <see cref="F:System.Double.NegativeInfinity" />，NaN 表示 <see cref="F:System.Double.NaN" />。）
            
                      <paramref name="a" /><paramref name="newBase" />
                    
                      返回值
                    
                      <paramref name="a" />&gt; 0
                    
                      (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)
                    
                      日志newBase(a)
                    
                      <paramref name="a" />&lt; 0
                    
                      （任意值）
                    
                      NaN
                    
                      （任意值）
                    
                      <paramref name="newBase" />&lt; 0
                    
                      NaN
                    
                      <paramref name="a" /> != 1
                    
                      <paramref name="newBase" /> = 0
                    
                      NaN
                    
                      <paramref name="a" /> != 1
                    
                      <paramref name="newBase" />= 正无穷
                    
                      NaN
                    
                      <paramref name="a" /> = NaN
                    
                      （任意值）
                    
                      NaN
                    
                      （任意值）
                    
                      <paramref name="newBase" /> = NaN
                    
                      NaN
                    
                      （任意值）
                    
                      <paramref name="newBase" /> = 1
                    
                      NaN
                    
                      <paramref name="a" /> = 0
                    
                      0 &lt;<paramref name="newBase" />&lt; 1 
                    
                      +Infinity
                    
                      <paramref name="a" /> = 0
                    
                      <paramref name="newBase" />&gt; 1
                    
                      -Infinity
                    
                      <paramref name="a" />= 正无穷
                    
                      0 &lt;<paramref name="newBase" />&lt; 1
                    
                      -Infinity
                    
                      <paramref name="a" />= 正无穷
                    
                      <paramref name="newBase" />&gt; 1
                    
                      +Infinity
                    
                      <paramref name="a" /> = 1
                    
                      <paramref name="newBase" /> = 0
                    
                      0
                    
                      <paramref name="a" /> = 1
                    
                      <paramref name="newBase" />= 正无穷
                    
                      0
                    </returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>
              返回指定数字以 10 为底的对数。
            </summary>
      <param name="d">
                要查找其对数的数字。
              </param>
      <returns>
              下表中的值之一。
            
                      <paramref name="d" />参数 
                    
                      返回值 
                    
                      正 
                    
                      基 10 日志<paramref name="d" />; 即，登录10<paramref name="d" />。
                    
                      零 
                    
                      <see cref="F:System.Double.NegativeInfinity" />
                    
                      负数 
                    
                      <see cref="F:System.Double.NaN" />
                    
                      等于<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />
                    
                      等于<see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>
              返回两个 16 位无符号整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 16 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 16 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>
              返回两个单精度浮点数字中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个单精度浮点数中的第一个。
              </param>
      <param name="val2">
                要比较的两个单精度浮点数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
               如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>
              返回两个 64 位无符号整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 64 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 64 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>
              返回两个 32 位无符号整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 32 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 32 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>
              返回两个 8 位有符号的整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 8 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 8 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>
              返回两个 32 位有符号的整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 32 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 32 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>
              返回两个 16 位有符号的整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 16 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 16 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>
              返回两个双精度浮点数字中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个双精度浮点数中的第一个。
              </param>
      <param name="val2">
                要比较的两个双精度浮点数中的第二个
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
               如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>
              返回两个十进制数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个十进制数字中的第一个。
              </param>
      <param name="val2">
                要比较的两个十进制数字中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>
              返回两个 8 位无符号整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 8 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 8 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>
              返回两个 64 位有符号的整数中较大的一个。
            </summary>
      <param name="val1">
                要比较的两个 64 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 64 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>
              返回两个 64 位有符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 64 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 64 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>
              返回两个 64 位无符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 64 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 64 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>
              返回两个 32 位无符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 32 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 32 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>
              返回两个 16 位无符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 16 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 16 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>
              返回两个单精度浮点数字中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个单精度浮点数中的第一个。
              </param>
      <param name="val2">
                要比较的两个单精度浮点数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
               如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>
              返回两个 8 位有符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 8 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 8 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>
              返回两个 16 位有符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 16 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 16 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>
              返回两个双精度浮点数字中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个双精度浮点数中的第一个。
              </param>
      <param name="val2">
                要比较的两个双精度浮点数中的第二个
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
               如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>
              返回两个十进制数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个十进制数字中的第一个。
              </param>
      <param name="val2">
                要比较的两个十进制数字中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>
              返回两个 8 位无符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 8 位无符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 8 位无符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>
              返回两个 32 位有符号整数中较小的一个。
            </summary>
      <param name="val1">
                要比较的两个 32 位有符号整数中的第一个。
              </param>
      <param name="val2">
                要比较的两个 32 位有符号整数中的第二个。
              </param>
      <returns>
        <paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。
            </returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>
              表示圆的周长与其直径的比值，由常数 π 指定。
            </summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>
              返回指定数字的指定次幂。
            </summary>
      <param name="x">
                要乘幂的双精度浮点数。
              </param>
      <param name="y">
                指定幂的双精度浮点数。
              </param>
      <returns>
              数字 <paramref name="x" /> 的 <paramref name="y" /> 次幂。
            </returns>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>
              将双精度浮点值舍入为最接近的整数值。
            </summary>
      <param name="a">
                要舍入的双精度浮点数。
              </param>
      <returns>
              最接近 <paramref name="a" /> 的整数。
               如果 <paramref name="a" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。
               请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。
            </returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>
              将小数值按指定的小数位数舍入。
               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
            </summary>
      <param name="d">
                要舍入的小数。
              </param>
      <param name="decimals">
                返回值中的小数位数。
              </param>
      <param name="mode">
                在两个数字之间时如何舍入 <paramref name="d" /> 的规范。
              </param>
      <returns>
              最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。
               如果 <paramref name="d" /> 比 <paramref name="decimals" /> 少部分数字，<paramref name="d" /> 原样返回。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />不是有效的值<see cref="T:System.MidpointRounding" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  结果超出了范围<see cref="T:System.Decimal" />。
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>
              将双精度浮点值按指定的小数位数舍入。
               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
            </summary>
      <param name="value">
                要舍入的双精度浮点数。
              </param>
      <param name="digits">
                返回值中的小数数字。
              </param>
      <param name="mode">
                在两个数字之间时如何舍入 <paramref name="value" /> 的规范。
              </param>
      <returns>
              最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。
               如果 <paramref name="value" /> 比 <paramref name="digits" /> 少部分数字，<paramref name="value" /> 原样返回。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" />小于 0 或大于 15。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />不是有效的值<see cref="T:System.MidpointRounding" />。
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>
              将双精度浮点值舍入为最接近的整数。
               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
            </summary>
      <param name="value">
                要舍入的双精度浮点数。
              </param>
      <param name="mode">
                在两个数字之间时如何舍入 <paramref name="value" /> 的规范。
              </param>
      <returns>
              最接近 <paramref name="value" /> 的整数。
               如果 <paramref name="value" /> 是两个整数的中值，这两个整数一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个整数中的哪一个。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />不是有效的值<see cref="T:System.MidpointRounding" />。
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>
              将小数值舍入到最接近的整数值。
            </summary>
      <param name="d">
                要舍入的小数。
              </param>
      <returns>
              最接近参数 <paramref name="d" /> 的整数。
               如果 <paramref name="d" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。
               请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。
            </returns>
      <exception cref="T:System.OverflowException">
                  结果超出了范围<see cref="T:System.Decimal" />。
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>
              将小数值舍入到最接近的整数。
               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
            </summary>
      <param name="d">
                要舍入的小数。
              </param>
      <param name="mode">
                在两个数字之间时如何舍入 <paramref name="d" /> 的规范。
              </param>
      <returns>
              最接近 <paramref name="d" /> 的整数。
               如果 <paramref name="d" /> 是两个数字的中值，这两个数字一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个数字中的哪一个。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />不是有效的值<see cref="T:System.MidpointRounding" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  结果超出了范围<see cref="T:System.Decimal" />。
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>
              将小数值按指定的小数位数舍入。
            </summary>
      <param name="d">
                要舍入的小数。
              </param>
      <param name="decimals">
                返回值中的小数位数。
              </param>
      <returns>
              最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。
                </exception>
      <exception cref="T:System.OverflowException">
                  结果超出了范围<see cref="T:System.Decimal" />。
                </exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>
              将双精度浮点值按指定的小数位数舍入。
            </summary>
      <param name="value">
                要舍入的双精度浮点数。
              </param>
      <param name="digits">
                返回值中的小数数字。
              </param>
      <returns>
              最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" />小于 0 或大于 15。
                </exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>
              返回表示十进制数符号的整数。
            </summary>
      <param name="value">
                已签名的十进制数。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" />等于零。
                    
                      1 
                    
                      <paramref name="value" />大于零。
                    </returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>
              返回一个整数，该整数表示双精度浮点数字的符号。
            </summary>
      <param name="value">
                有符号的数字。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" />等于零。
                    
                      1 
                    
                      <paramref name="value" />大于零。
                    </returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。
                </exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>
              返回表示 16 位带符号整数的整数。
            </summary>
      <param name="value">
                有符号的数字。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" />等于零。
                    
                      1 
                    
                      <paramref name="value" />大于零。
                    </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>
              返回表示 32 位带符号整数的整数。
            </summary>
      <param name="value">
                有符号的数字。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" />等于零。
                    
                      1 
                    
                      <paramref name="value" />大于零。
                    </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>
              返回一个整数，该整数指示 64 位带符号整数的符号。
            </summary>
      <param name="value">
                有符号的数字。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" /> 等于零。
                    
                      1 
                    
                      <paramref name="value" /> 大于零。
                    </returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>
              返回一个整数，该整数指示 8 位带符号整数的符号。
            </summary>
      <param name="value">
                有符号的数字。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" />等于零。
                    
                      1 
                    
                      <paramref name="value" />大于零。
                    </returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>
              返回一个整数，该整数表示单精度浮点数字的符号。
            </summary>
      <param name="value">
                有符号的数字。
              </param>
      <returns>
              一个指示 <paramref name="value" /> 的符号的数字，如下表所示。
            
                      返回值 
                    
                      含义 
                    
                      -1 
                    
                      <paramref name="value" /> 小于零。
                    
                      0 
                    
                      <paramref name="value" />等于零。
                    
                      1 
                    
                      <paramref name="value" />大于零。
                    </returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等于 <see cref="F:System.Single.NaN" />。
                </exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>
              返回指定角度的正弦值。
            </summary>
      <param name="a">
                以弧度计量的角度。
              </param>
      <returns>
        <paramref name="a" /> 的正弦值。
               如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>
              返回指定角度的双曲正弦值。
            </summary>
      <param name="value">
                以弧度计量的角度。
              </param>
      <returns>
        <paramref name="value" /> 的双曲正弦值。
               如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NaN" />，则此方法返回等于 <paramref name="value" /> 的 <see cref="T:System.Double" />。
            </returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>
              返回指定数字的平方根。
            </summary>
      <param name="d">
                将查找其平方根的数字。
              </param>
      <returns>
              下表中的值之一。
            
                      <paramref name="d" />参数 
                    
                      返回值 
                    
                      零或正数 
                    
                      正平方根<paramref name="d" />。
                    
                      负数 
                    
                      <see cref="F:System.Double.NaN" />
                    
                      等于<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />
                    
                      等于<see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>
              返回指定角度的正切值。
            </summary>
      <param name="a">
                以弧度计量的角度。
              </param>
      <returns>
        <paramref name="a" /> 的正切值。
               如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>
              返回指定角度的双曲正切值。
            </summary>
      <param name="value">
                以弧度计量的角度。
              </param>
      <returns>
        <paramref name="value" /> 的双曲正切值。
               如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则此方法返回 -1。
               如果值等于 <see cref="F:System.Double.PositiveInfinity" />，则此方法返回 1。
               如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则此方法返回 <see cref="F:System.Double.NaN" />。
            </returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>
              计算一个数字的整数部分。
            </summary>
      <param name="d">
                要截断的数字。
              </param>
      <returns>
        <paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数）。
            </returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>
              计算指定双精度浮点数的整数部分。
            </summary>
      <param name="d">
                要截断的数字。
              </param>
      <returns>
        <paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数或下表所列出的值之一）。
            
                      <paramref name="d" />
                    
                      返回值
                    
                      <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <param name="y">
      </param>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:System.MathF.E">
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:System.MathF.PI">
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <param name="x">
      </param>
      <param name="digits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <param name="x">
      </param>
      <param name="mode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <param name="x">
      </param>
      <param name="digits">
      </param>
      <param name="mode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>
              表示有关操作系统的信息，如版本和平台标识符。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>
              使用指定的平台标识符值和版本对象来初始化 <see cref="T:System.OperatingSystem" /> 类的新实例。
            </summary>
      <param name="platform">
        <see cref="T:System.PlatformID" /> 值之一，指示操作系统平台。
              </param>
      <param name="version">
        <see cref="T:System.Version" /> 对象，指示操作系统的版本。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> 不是 <see cref="T:System.PlatformID" /> 枚举值。
                </exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>
              创建与此实例相同的 <see cref="T:System.OperatingSystem" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.OperatingSystem" /> 对象，是此实例的副本。
            </returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用反序列化此实例所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
            </summary>
      <param name="info">
                要用序列化信息填充的对象。
              </param>
      <param name="context">
                存储和检索序列化数据的位置。
                 留待将来使用。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>
              获取标识操作系统平台的 <see cref="T:System.PlatformID" /> 枚举值。
            </summary>
      <returns>
        <see cref="T:System.PlatformID" /> 值之一。
            </returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>
              获取此 <see cref="T:System.OperatingSystem" /> 对象表示的 Service Pack 版本。
            </summary>
      <returns>
              如果支持 Service Pack 并至少安装了一个 Service Pack，则为该 Service Pack 版本；否则为空字符串 ("")。
            </returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>
              将此 <see cref="T:System.OperatingSystem" /> 对象的值转换为其等效的字符串表示形式。
            </summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" /> 和 <see cref="P:System.OperatingSystem.ServicePack" /> 属性的返回值的字符串表示形式。
            </returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>
              获取标识操作系统的 <see cref="T:System.Version" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Version" /> 对象，描述操作系统的主版本号、次版本号、内部版本号和修订版本号。
            </returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>
              获取平台标识符、版本和当前安装在操作系统上的 Service Pack 的连接字符串表示形式。
            </summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />、<see cref="P:System.OperatingSystem.Version" /> 和 <see cref="P:System.OperatingSystem.ServicePack" /> 属性的返回值的字符串表示形式。
            </returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>
              标识程序集所支持的操作系统（或平台）。
            </summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>
              操作系统为 Macintosh。
            </summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>
              操作系统为 Unix。
            </summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>
              操作系统为 Windows NT 或更新版本。
            </summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>
              操作系统为 Win32s。
               Win32s 是在 16 位版本的 Windows 上运行的层，它提供对 32 位应用程序的访问。
            </summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>
              操作系统为 Windows 95 或 Windows 98。
            </summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>
              操作系统为 Windows CE。
            </summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>
              开发平台为 Xbox 360。
            </summary>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>
              表示处理的方法的 <see cref="E:System.AppDomain.TypeResolve" />, ，<see cref="E:System.AppDomain.ResourceResolve" />, ，或 <see cref="E:System.AppDomain.AssemblyResolve" /> 事件 <see cref="T:System.AppDomain" />。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="args">
                事件数据。
              </param>
      <returns>
              解析类型、 程序集或资源，则该程序集或 <see langword="null" /> 如果无法解析的程序集。
            </returns>
    </member>
  </members>
</doc>