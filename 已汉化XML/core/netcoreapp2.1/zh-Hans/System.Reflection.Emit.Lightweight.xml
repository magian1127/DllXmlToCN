<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>
              定义并表示可以编译、执行和丢弃的一种动态方法。
               丢弃的方法可用于垃圾回收。
            </summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>
              初始化匿名承载的动态方法，指定方法名称、返回类型和参数类型。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是一种 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>
              初始化匿名托管的动态方法，同时指定方法名称、返回类型、参数类型并指定是否应针对动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员跳过实时 (JIT) 可见性检查。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="restrictedSkipVisibility">
                如果为 <see langword="true" />，则跳过针对动态方法的 MSIL 访问的类型和成员进行的 JIT 可见性检查，含此限制：包含这些类型和成员的程序集的信任级别必须等于或小于发出动态方法的调用堆栈的信任级别；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是一种 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>
              创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="m">
                一个 <see cref="T:System.Reflection.Module" />，表示动态方法将与之逻辑关联的模块。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                
                  - 或 -
                
                  <paramref name="m" /> 是为动态方法提供匿名承载的模块。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="m" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是一种 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>
              创建动态方法，并指定方法的名称、 返回类型、 参数类型和此动态方法与之在逻辑上相关联的类型。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="owner">
                动态方法与之在逻辑上相关联的 <see cref="T:System.Type" />。
                 动态方法有权访问此类型的所有成员。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                
                  - 或 - 
                
                  <paramref name="owner" /> 是一个接口、数组、开放式泛型类型，或者是泛型类型或方法的类型参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="owner" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是 <see langword="null" />，或 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>
              创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="m">
                一个 <see cref="T:System.Reflection.Module" />，表示动态方法将与之逻辑关联的模块。
              </param>
      <param name="skipVisibility">
                若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <see langword="true" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                
                  - 或 -
                
                  <paramref name="m" /> 是为动态方法提供匿名承载的模块。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="m" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是一种 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>
              创建一个动态方法，指定方法名称、返回类型、参数类型，以及与该动态方法逻辑上相关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="owner">
                动态方法与之在逻辑上相关联的 <see cref="T:System.Type" />。
                 动态方法有权访问此类型的所有成员。
              </param>
      <param name="skipVisibility">
                若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                
                  - 或 - 
                
                  <paramref name="owner" /> 是一个接口、数组、开放式泛型类型，或者是泛型类型或方法的类型参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="owner" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是 <see langword="null" />，或 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>
              创建一个对模块全局有效的动态方法，指定方法名称、属性、调用约定、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="attributes">
                用于指定动态方法属性的 <see cref="T:System.Reflection.MethodAttributes" /> 值的按位组合。
                 允许的唯一组合为 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。
              </param>
      <param name="callingConvention">
                动态方法的调用约定。
                 必须为 <see cref="F:System.Reflection.CallingConventions.Standard" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="m">
                一个 <see cref="T:System.Reflection.Module" />，表示动态方法将与之逻辑关联的模块。
              </param>
      <param name="skipVisibility">
                若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                
                  - 或 -
                
                  <paramref name="m" /> 是为动态方法提供匿名承载的模块。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="m" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> 是标志的组合，而不是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 的组合。
                
                  - 或 -
                
                  <paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。
                
                  - 或 -
                
                  <paramref name="returnType" /> 是一种 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>
              创建一个动态方法，指定方法名称、属性、调用约定、返回类型、参数类型，以及与该动态方法逻辑上相关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
            </summary>
      <param name="name">
                动态方法的名称。
                 它可以是长度为零的字符串，但不能为 <see langword="null" />。
              </param>
      <param name="attributes">
                用于指定动态方法属性的 <see cref="T:System.Reflection.MethodAttributes" /> 值的按位组合。
                 允许的唯一组合为 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。
              </param>
      <param name="callingConvention">
                动态方法的调用约定。
                 必须为 <see cref="F:System.Reflection.CallingConventions.Standard" />。
              </param>
      <param name="returnType">
                一个 <see cref="T:System.Type" /> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <see langword="null" />。
              </param>
      <param name="parameterTypes">
                指定动态方法的参数类型的 <see cref="T:System.Type" /> 对象数组，如果此方法不具有任何参数，则为 <see langword="null" />。
              </param>
      <param name="owner">
                动态方法与之在逻辑上相关联的 <see cref="T:System.Type" />。
                 动态方法有权访问此类型的所有成员。
              </param>
      <param name="skipVisibility">
                若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的元素为 <see langword="null" /> 或 <see cref="T:System.Void" />。
                
                  - 或 -
                
                  <paramref name="owner" /> 是一个接口、数组、开放式泛型类型，或者是泛型类型或方法的类型参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="owner" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> 是标志的组合，而不是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 的组合。
                
                  - 或 -
                
                  <paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。
                
                  - 或 -
                
                  <paramref name="returnType" /> 是一种 <see cref="P:System.Type.IsByRef" /> 为其返回 <see langword="true" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>
              创建动态方法后获取指定的属性。
            </summary>
      <returns>
              表示此方法的属性的 <see cref="T:System.Reflection.MethodAttributes" /> 的值的按位组合。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>
              创建动态方法后获取指定的调用约定。
            </summary>
      <returns>
              表示此方法的调用约定的一个 <see cref="T:System.Reflection.CallingConventions" /> 的值。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>
              完成动态方法并创建一个可执行此方法的委托。
            </summary>
      <param name="delegateType">
                其签名与动态方法匹配的委托类型。
              </param>
      <returns>
              可用于执行此动态方法的指定类型的委托。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  动态方法没有方法体。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 的参数数量或参数类型不正确。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>
              完成动态方法并创建一个可用于执行该方法的委托，指定委托类型和委托绑定到的对象。
            </summary>
      <param name="delegateType">
                一个签名与动态方法的签名匹配的委托类型，不包括第一个参数。
              </param>
      <param name="target">
                委托绑定到的对象。
                 其类型必须与动态方法的第一个参数的类型相同。
              </param>
      <returns>
              一个指定类型的委托，可用于对指定的目标对象执行动态方法。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  动态方法没有方法体。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型与动态方法的第一个参数的类型不同，不能赋值给该类型。
                
                  - 或 -
                
                  <paramref name="delegateType" /> 的参数数量或参数类型不正确。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>
              获取声明方法的类型，对于动态方法，此类型始终为 <see langword="null" />。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>
              返回方法的基实现。
            </summary>
      <returns>
              方法的基实现。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>
              返回为该方法定义的所有自定义属性。
            </summary>
      <param name="inherit">
                如果为 <see langword="true" />，则搜索方法的继承链以查找自定义属性；如果为 <see langword="false" />，则仅检查当前方法。
              </param>
      <returns>
              一个对象数组，这些对象表示此方法的所有自定义属性。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回已应用到此方法的指定类型的自定义属性。
            </summary>
      <param name="attributeType">
                表示要返回的自定义属性的类型的 <see cref="T:System.Type" />。
              </param>
      <param name="inherit">
                如果为 <see langword="true" />，则搜索方法的继承链以查找自定义属性；如果为 <see langword="false" />，则仅检查当前方法。
              </param>
      <returns>
              对象的数组，其中的对象表示方法的类型为 <paramref name="attributeType" /> 的属性，或从类型 <paramref name="attributeType" /> 派生的属性。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>
              为方法返回一个具有指定 MSIL 流大小的 Microsoft 中间语言 (MSIL) 生成器。
            </summary>
      <param name="streamSize">
                MSIL 流的大小（以字节为单位）。
              </param>
      <returns>
              方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 对象，具有指定的 MSIL 流大小。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>
              为具有默认 64 字节 Microsoft 中间语言 (MSIL) 流大小的方法返回 MSIL 生成器。
            </summary>
      <returns>
              该方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 对象。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>
              为此方法返回实现标志。
            </summary>
      <returns>
              表示此方法的实现标志的 <see cref="T:System.Reflection.MethodImplAttributes" /> 值的按位组合。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>
              返回动态方法的参数。
            </summary>
      <returns>
              表示动态方法的参数的 <see cref="T:System.Reflection.ParameterInfo" /> 对象数组。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>
              获取或设置一个值，该值指示方法中的本地变量是否初始化为零。
            </summary>
      <returns>
              如果该方法中的本地变量初始化为零，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              在指定的活页夹的约束下，用指定的区域性信息，使用指定的参数调用动态方法。
            </summary>
      <param name="obj">
                对动态方法忽略此参数，因为它们是静态的。
                 指定 <see langword="null" />。
              </param>
      <param name="invokeAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。
              </param>
      <param name="binder">
                一个 <see cref="T:System.Reflection.Binder" /> 对象，用于启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。
                 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。
                 有关更多详细信息，请参阅 <see cref="T:System.Reflection.Binder" />。
              </param>
      <param name="parameters">
                参数列表。
                 此参数数组在数量、顺序和类型方面与要调用的方法的参数相同。
                 如果不存在任何参数，则此参数应为 <see langword="null" />。
              </param>
      <param name="culture">
                用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo" /> 的实例。
                 如果这是 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。
                 例如，需要此信息将表示 1000 的 <see cref="T:System.String" /> 正确转换为 <see cref="T:System.Double" /> 值，因为不同的区域性以不同的方式表示 1000。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它包含被调用的方法的返回值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 调用约定。
                </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 中的元素数与动态方法中的参数数目不匹配。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 的一个或多个元素的类型与动态方法的相应参数的类型不匹配。
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  动态方法与模块关联、未以匿名方式托管，并且在 <paramref name="skipVisibility" /> 设置为 <see langword="false" /> 的情况下构造，但动态方法访问不是 <see langword="public" /> 或 <see langword="internal" />（Visual Basic 中的 <see langword="Friend" />）的成员。
                
                  - 或 -
                
                  动态方法被以匿名方式托管，并在 <paramref name="skipVisibility" /> 设置为 <see langword="false" /> 的情况下构造，但是它访问不是 <see langword="public" /> 的成员。
                
                  - 或 -
                
                  动态方法包含无法验证的代码。
                   请参阅“验证”部分中的 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 注释。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>
              表示是否定义了指定的自定义属性类型。
            </summary>
      <param name="attributeType">
                表示要搜索的自定义属性的类型的 <see cref="T:System.Type" />。
              </param>
      <param name="inherit">
                如果为 <see langword="true" />，则搜索方法的继承链以查找自定义属性；如果为 <see langword="false" />，则仅检查当前方法。
              </param>
      <returns>
              如果定义了指定的自定义属性类型，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>
              不支持动态方法。
            </summary>
      <returns>
              不支持动态方法。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不允许动态方法。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>
              获取动态方法的名称。
            </summary>
      <returns>
              方法的简单名称。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>
              获取在反射中用于获取该方法的类。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>
              获取动态方法的返回参数。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>
              获取动态方法的返回值的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" />，表示当前方法的返回值的类型；如果该方法没有返回类型，则为 <see cref="T:System.Void" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>
              获取动态方法的返回类型的自定义属性。
            </summary>
      <returns>
              表示动态方法的返回类型的自定义属性的 <see cref="T:System.Reflection.ICustomAttributeProvider" />。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>
              返回表示为字符串的方法的签名。
            </summary>
      <returns>
              一个表示方法签名的字符串。
            </returns>
    </member>
  </members>
</doc>