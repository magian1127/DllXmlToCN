<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>
              只读集合的生成器。
            </summary>
      <typeparam name="T">
                集合元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>
              构造一个 ReadOnlyCollectionBuilder。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              构造 ReadOnlyCollectionBuilder, ，复制给定集合的内容。
            </summary>
      <param name="collection">
                从中复制元素的集合。
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>
              构造 ReadOnlyCollectionBuilder 使用给定的初始容量。
               内容为空但生成器将保留空间给定数量的元素之前是必需的任何重新分配。
            </summary>
      <param name="capacity">
                初始容量。
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>
              将某项添加到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的对象。
              </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>
              获取和设置此容量 ReadOnlyCollectionBuilder。
            </summary>
      <returns>
              此容量 ReadOnlyCollectionBuilder.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>
              从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除所有项。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>
              确定是否 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 包含特定值
            </summary>
      <param name="item">
                要在中找到的对象 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。
              </param>
      <returns>
              如果在中找到该项，则 true <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; 否则为 false。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 到 <see cref="T:System.Array" />, ，起价特定 <see cref="T:System.Array" /> 索引。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 复制的元素的目标。
              </param>
      <param name="arrayIndex">
                数组中从零开始的索引，在此处开始复制。
              </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>
              返回中的元素数 ReadOnlyCollectionBuilder。
            </summary>
      <returns>
              ReadOnlyCollectionBuilder 中的元素的数量。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>
              在生成器中返回给定值的第一个匹配项的索引。
            </summary>
      <param name="item">
                要搜索的项。
              </param>
      <returns>
              第一个匹配项的索引。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>
              在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的指定索引处插入一个项。
            </summary>
      <param name="index">
                从零开始的索引，应在该位置插入项。
              </param>
      <param name="item">
                要插入到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的对象。
              </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>
              从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="item">
                要从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中删除的对象。
              </param>
      <returns>
              如果从成功移除了该项，则为 true <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; 否则为 false。
               此方法也返回 false，如果在原始找不到项 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>
              移除位于指定索引处的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 项。
            </summary>
      <param name="index">
                要移除的项的从零开始的索引。
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>
              将指定范围中元素的顺序反转。
            </summary>
      <param name="index">
                要反转的范围的从零开始的起始索引。
              </param>
      <param name="count">
                要反转的范围内的元素数。
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>
              将整个 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中元素的顺序反转。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>
              将 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素复制到新数组中。
            </summary>
      <returns>
              一个包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素副本的数组。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>
              创建 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 其中包含的元素的所有 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, ，避免如有可能将元素复制到新数组。
               重置 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 后 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 已创建。
            </summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的新实例。
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个数组中。
            </summary>
      <param name="array">
                一维数组，用作从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标位置。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>
              将某项添加到 <see cref="T:System.Collections.IList" /> 中。
            </summary>
      <param name="value">
                要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.IList" /> 中定位的对象。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。
            </summary>
      <param name="index">
                应插入 <paramref name="item" /> 的从零开始的索引。
              </param>
      <param name="value">
                要插入到 <see cref="T:System.Collections.IList" /> 中的对象。
              </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="value">
                要从 <see cref="T:System.Collections.IList" /> 中删除的对象。
              </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>
              表示运行时绑定规则的缓存。
            </summary>
      <typeparam name="T">
                委托类型。
              </typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>
              动态站点类型。
            </summary>
      <typeparam name="T">
                委托类型。
              </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>
              创建动态调用站点，负责此调用站点上的动态操作的运行时绑定联编程序使用初始化的实例。
            </summary>
      <param name="binder">
                负责此调用站点上的动态操作的运行时绑定联编程序。
              </param>
      <returns>
              动态调用站点的新实例。
            </returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>
              级别 0 缓存中的专用的委托基于站点历史记录。
            </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>
              更新委托。
               当动态站点遇到缓存未命中时调用。
            </summary>
      <returns>
              更新委托。
            </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>
              动态调用站点基类。
               此类型用作动态站点目标的参数类型。
            </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>
              类负责绑定动态站点上的动态操作。
            </summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 负责绑定动态操作的对象。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>
              创建一个调用站点使用给定的委托类型和联编程序。
            </summary>
      <param name="delegateType">
                调用站点的委托类型。
              </param>
      <param name="binder">
                调用站点绑定程序。
              </param>
      <returns>
              新的调用站点。
            </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>
              类负责对动态调用站点的动态操作的运行时绑定。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>
              执行上一组参数的动态操作的运行时绑定。
            </summary>
      <param name="args">
                动态操作的参数的数组。
              </param>
      <param name="parameters">
                数组 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例，表示调用站点绑定进程中的参数。
              </param>
      <param name="returnLabel">
                LabelTarget 用来返回动态绑定的结果。
              </param>
      <returns>
              动态操作的参数，执行测试和执行动态操作，如果测试是有效的表达式。
               如果测试失败的动态操作的后续匹配项上，将会再次调用 Bind 生成新 <see cref="T:System.Linq.Expressions.Expression" /> 了解新的参数类型。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>
              提供低级别的运行时绑定支持。
               类可以重写此和为规则的实现提供直接的委托。
               这使规则保存到磁盘、 使专用规则可在运行时，或者提供不同的缓存策略。
            </summary>
      <param name="site">
                对于正在进行的调用站点绑定。
              </param>
      <param name="args">
                对于联编程序参数。
              </param>
      <typeparam name="T">
                调用站点的目标类型。
              </typeparam>
      <returns>
              一个新委托，它将替换调用站点目标。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>
              将目标添加到已知目标的缓存。
               在调用 BindDelegate 以生成新规则之前，将扫描缓存的目标。
            </summary>
      <param name="target">
                要添加到缓存的目标委托。
              </param>
      <typeparam name="T">
                要添加的目标类型。
              </typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>
              获取可用于导致绑定要更新的标签。
               它指示表达式的绑定将不再有效。
               它通常用于动态对象的"版本"已更改。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象表示可用于触发绑定更新的标签。
            </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>
              包含 DLR 调用站点的帮助器方法的类。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>
              检查是否 <see cref="T:System.Reflection.MethodBase" /> DLR 在内部使用，不应显示的语言代码的堆栈上。
            </summary>
      <param name="mb">
                输入 <see cref="T:System.Reflection.MethodBase" /></param>
      <returns>
              True 输入 <see cref="T:System.Reflection.MethodBase" /> DLR 在内部使用，不应显示的语言代码的堆栈上。
               否则为 false。
            </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>
              在表达式目录树中生成调试信息的 lambda 表达式。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>
              创建程序数据库 (PDB) 符号生成器。
            </summary>
      <returns>
              PDB 符号生成器。
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>
              将 Microsoft 中间语言 (MSIL) 代码中的序列点的标记。
            </summary>
      <param name="method">
                生成 lambda 表达式。
              </param>
      <param name="ilOffset">
                在标记的序列点从该处的 MSIL 代码的偏移量。
              </param>
      <param name="sequencePoint">
                调试序列点相对应的信息。
              </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>
              指示使用 <see cref="T:System.Object" /> 成员上应被视为动态调度类型。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>
              初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。
            </summary>
      <param name="transformFlags">
                指定类型的构造的前缀的遍历中其 <see cref="T:System.Object" /> 出现旨在被视为动态调度类型。
              </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>
              指定类型的构造的前缀的遍历中其 <see cref="T:System.Object" /> 出现旨在被视为动态调度类型。
            </summary>
      <returns>
              列表 <see cref="T:System.Object" /> 应被视为动态调度类型的匹配项。
            </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>
              表示运行时变量的值。
            </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>
              获取运行时变量的计数。
            </summary>
      <returns>
              运行时变量的数目。
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>
              获取指定索引处的运行时变量的值。
            </summary>
      <param name="index">
                其值是要返回的运行时变量的从零开始的索引。
              </param>
      <returns>
              运行时变量的值。
            </returns>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>
              表示调用站点的二进制动态操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
              初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。
            </summary>
      <param name="operation">
                二元运算类型。
              </param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态的二元运算的绑定。
            </summary>
      <param name="target">
                动态操作的目标。
              </param>
      <param name="args">
                动态操作的参数数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              如果将绑定目标动态对象不能，执行的二进制动态操作的绑定。
            </summary>
      <param name="target">
                动态的二元运算的目标。
              </param>
      <param name="arg">
                右操作数的动态二元运算。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果将绑定目标动态对象不能执行的二进制动态操作的绑定。
            </summary>
      <param name="target">
                动态的二元运算的目标。
              </param>
      <param name="arg">
                右操作数的动态二元运算。
              </param>
      <param name="errorSuggestion">
                绑定结果，如果绑定失败，则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>
              二元运算类型。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 表示二元运算的类型的对象。
            </returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
              操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>
              表示一组上的绑定限制 <see cref="T:System.Dynamic.DynamicMetaObject" /> 下动态绑定无效。
            </summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>
              将从列表中的绑定限制 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例保存到一个组限制。
            </summary>
      <param name="contributingObjects">
                列表 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例从相组合的限制。
              </param>
      <returns>
              新的绑定限制集。
            </returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>
              表示一组空的绑定限制。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>
              创建检查表达式中的不可变的任意属性的绑定限制。
            </summary>
      <param name="expression">
                表示这些限制的表达式。
              </param>
      <returns>
              新的绑定限制。
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>
              创建检查表达式中的对象实例标识的绑定限制。
            </summary>
      <param name="expression">
                要测试的表达式。
              </param>
      <param name="instance">
                要测试的确切对象实例。
              </param>
      <returns>
              新的绑定限制。
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建用来检查表达式中的运行时类型标识绑定限制。
            </summary>
      <param name="expression">
                要测试的表达式。
              </param>
      <param name="type">
                要测试的确切类型。
              </param>
      <returns>
              新的绑定限制。
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>
              合并绑定当前绑定限制的限制条件的集。
            </summary>
      <param name="restrictions">
                要合并的当前绑定限制的限制的组。
              </param>
      <returns>
              新的绑定限制集。
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.Expression" /> 表示绑定限制。
            </summary>
      <returns>
              表达式树表示限制。
            </returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>
              描述动态绑定过程中的自变量。
            </summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              创建新的 CallInfo，表示在动态绑定过程中的参数。
            </summary>
      <param name="argCount">
                自变量的数量。
              </param>
      <param name="argNames">
                参数名称。
              </param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>
              创建一个新的 PositionalArgumentInfo。
            </summary>
      <param name="argCount">
                自变量的数量。
              </param>
      <param name="argNames">
                参数名称。
              </param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>
              自变量的数量。
            </summary>
      <returns>
              自变量的数量。
            </returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>
              参数名称。
            </summary>
      <returns>
              参数名称的只读集合。
            </returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>
              确定是否已指定的 CallInfo 实例被视为等同于当前。
            </summary>
      <param name="obj">
                实例 <see cref="T:System.Dynamic.CallInfo" /> 要与当前实例进行比较。
              </param>
      <returns>
              如果指定的实例等于当前的一个否则为 false 则 true。
            </returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>
              用作当前哈希函数 <see cref="T:System.Dynamic.CallInfo" />。
            </summary>
      <returns>
              当前 <see cref="T:System.Dynamic.CallInfo" /> 的哈希代码。
            </returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>
              表示调用站点的转换动态操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 的新实例。
            </summary>
      <param name="type">
                要转换为的类型。
              </param>
      <param name="explicit">
                如果应将转换视为显式转换; 也是如此否则为 false。
              </param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态转换操作的绑定。
            </summary>
      <param name="target">
                动态转换操作的目标。
              </param>
      <param name="args">
                动态转换操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>
              获取一个值，指示转换应视为显式转换。
            </summary>
      <returns>
        <see langword="True" /> 如果没有显式转换，否则 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>
              如果无法绑定目标动态对象，请执行动态转换操作的绑定。
            </summary>
      <param name="target">
                动态转换操作的目标。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果目标动态对象不能将绑定执行动态转换操作的绑定。
            </summary>
      <param name="target">
                动态转换操作的目标。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>
              要转换为的类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示要转换的类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>
              表示调用站点的动态创建操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              初始化的新实例 <see cref="T:System.Dynamic.CreateInstanceBinder" />。
            </summary>
      <param name="callInfo">
                调用站点处参数的签名。
              </param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行的动态绑定创建操作。
            </summary>
      <param name="target">
                目标的动态创建操作。
              </param>
      <param name="args">
                动态参数的数组创建操作。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>
              在调用站点处获取参数的签名。
            </summary>
      <returns>
              调用站点处参数的签名。
            </returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行的动态绑定创建操作，如果目标动态对象不能绑定。
            </summary>
      <param name="target">
                目标的动态创建操作。
              </param>
      <param name="args">
                动态的参数创建操作。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              当在派生类中重写，则执行的动态创建操作，如果目标动态对象不能绑定。
            </summary>
      <param name="target">
                目标的动态创建操作。
              </param>
      <param name="args">
                动态的参数创建操作。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>
              表示调用站点的动态删除索引操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。
            </summary>
      <param name="callInfo">
                调用站点上的参数签名。
              </param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态删除索引操作的绑定。
            </summary>
      <param name="target">
                动态删除索引操作的目标。
              </param>
      <param name="args">
                动态删除索引操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>
              在调用站点处获取参数的签名。
            </summary>
      <returns>
              调用站点处参数的签名。
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              如果目标动态对象不能绑定，请执行动态删除索引操作的绑定。
            </summary>
      <param name="target">
                动态删除索引操作的目标。
              </param>
      <param name="indexes">
                参数的动态删除索引操作。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果目标动态对象不能将绑定执行动态删除索引操作的绑定。
            </summary>
      <param name="target">
                动态删除索引操作的目标。
              </param>
      <param name="indexes">
                参数的动态删除索引操作。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>
              表示调用站点的动态删除成员操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。
            </summary>
      <param name="name">
                要删除的成员的名称。
              </param>
      <param name="ignoreCase">
                如果应该忽略大小写; 匹配名称也是如此false 否则为。
              </param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态删除成员操作的绑定。
            </summary>
      <param name="target">
                动态删除成员操作的目标。
              </param>
      <param name="args">
                动态删除成员操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>
              如果目标动态对象不能绑定，请执行动态删除成员操作的绑定。
            </summary>
      <param name="target">
                动态删除成员操作的目标。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果目标动态对象不能将绑定执行动态删除成员操作的绑定。
            </summary>
      <param name="target">
                动态删除成员操作的目标。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>
              获取一个值，指示字符串比较应忽略成员名称的大小写。
            </summary>
      <returns>
              如果字符串比较应忽略大小写，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>
              获取要删除的成员的名称。
            </summary>
      <returns>
              要删除的成员的名称。
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>
              表示动态绑定以及参与动态绑定的对象的绑定逻辑。
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>
              初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。
            </summary>
      <param name="expression">
                表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。
              </param>
      <param name="restrictions">
                绑定的限制在其下的绑定是有效的集。
              </param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>
              初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。
            </summary>
      <param name="expression">
                表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。
              </param>
      <param name="restrictions">
                绑定的限制在其下的绑定是有效的集。
              </param>
      <param name="value">
                运行时的值由 <see cref="T:System.Dynamic.DynamicMetaObject" />。
              </param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>
              执行动态的二元运算的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="arg">
                一个实例 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示二元运算的右侧。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>
              执行动态转换操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.ConvertBinder" /> 表示动态操作的详细信息。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态创建实例操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="args">
                一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例的参数创建实例操作。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态删除索引操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="indexes">
                一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例删除索引操作的索引。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
              执行动态删除成员操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.DeleteMemberBinder" /> 表示动态操作的详细信息。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态获取索引操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.GetIndexBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="indexes">
                一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例获取索引操作的索引。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>
              执行动态获取成员操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.GetMemberBinder" /> 表示动态操作的详细信息。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态调用绑定操作。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.InvokeBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="args">
                一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例的调用操作的参数。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行的动态绑定调用成员操作。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="args">
                一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例的参数调用成员操作。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              执行动态设置索引操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.SetIndexBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="indexes">
                一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例设置索引操作的索引。
              </param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示用于设置索引操作的值。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>
              执行动态设置成员操作的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.SetMemberBinder" /> 表示动态操作的详细信息。
              </param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示用于设置成员操作的值。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>
              执行动态一元运算的绑定。
            </summary>
      <param name="binder">
                一个实例 <see cref="T:System.Dynamic.UnaryOperationBinder" /> 表示动态操作的详细信息。
              </param>
      <returns>
              新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>
              创建指定对象的元对象。
            </summary>
      <param name="value">
                要获取的元对象的对象。
              </param>
      <param name="expression">
                表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。
              </param>
      <returns>
              如果给定的对象实现 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> 并不是从当前的 AppDomain 外部的远程对象，则返回该对象的特定元对象返回的 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />。
               否则为创建并返回一个普通新元对象不带任何限制。
            </returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>
              表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的空数组。
               此字段为只读。
            </summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>
              表示表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。
            </summary>
      <returns>
              表示表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>
              返回的所有动态成员名称的枚举。
            </summary>
      <returns>
              动态成员名称的列表。
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Dynamic.DynamicMetaObject" /> 具有运行时的值。
            </summary>
      <returns>
              True <see cref="T:System.Dynamic.DynamicMetaObject" /> 具有的运行时值，否则为 false。
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>
              获取限制类型 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> 运行时的值是否可用，一种类型的 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 否则为。
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>
              绑定的限制在其下的绑定是有效的集。
            </summary>
      <returns>
              一组绑定限制。
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>
              获取 <see cref="T:System.Type" /> 时为空值的运行时值的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 没有与其相关联的值。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 运行时的值，则为 null。
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>
              表示此的运行时值 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </summary>
      <returns>
              表示此的运行时值 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>
              参与动态调用站点绑定程序 <see cref="T:System.Dynamic.DynamicMetaObject" /> 绑定协议。
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>
              初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              当在派生类中重写，执行动态操作的绑定。
            </summary>
      <param name="target">
                动态操作的目标。
              </param>
      <param name="args">
                动态操作的参数数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>
              执行上一组参数的动态操作的运行时绑定。
            </summary>
      <param name="args">
                动态操作的参数的数组。
              </param>
      <param name="parameters">
                数组 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例，表示调用站点绑定进程中的参数。
              </param>
      <param name="returnLabel">
                LabelTarget 用来返回动态绑定的结果。
              </param>
      <returns>
              动态操作的参数，执行测试和执行动态操作，如果测试是有效的表达式。
               如果测试失败的动态操作的后续匹配项上，将会再次调用 Bind 生成新 <see cref="T:System.Linq.Expressions.Expression" /> 了解新的参数类型。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>
              将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
            </summary>
      <param name="args">
                动态操作的参数数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
            </summary>
      <param name="target">
                动态操作的目标。
              </param>
      <param name="args">
                动态操作的参数数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>
              获取一个表达式，将导致要更新的绑定。
               它指示表达式的绑定将不再有效。
               它通常用于动态对象的"版本"已更改。
            </summary>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所得到的表达式; 可以是任何类型。
              </param>
      <returns>
              更新表达式。
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>
              提供用于在运行时指定动态行为的基类。
               必须继承此类；不能直接对其进行实例化。
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>
              允许派生的类型来初始化的新实例 <see cref="T:System.Dynamic.DynamicObject" /> 类型。
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>
              返回的所有动态成员名称的枚举。
            </summary>
      <returns>
              一个包含动态成员名称的序列。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
              提供了 <see cref="T:System.Dynamic.DynamicMetaObject" /> 调度到动态虚拟方法。
               该对象可封装到另一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 以提供各项操作的自定义行为。
               此方法为语言实现者支持的动态语言运行时基础结构，不宜在代码中直接使用。
            </summary>
      <param name="parameter">
                表达式，它表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 要调度到动态虚拟方法。
              </param>
      <returns>
              对象 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>
              提供对于二元运算的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为，例如加法和乘法操作。
            </summary>
      <param name="binder">
                提供有关二进制文件操作的信息。
                binder.Operation 属性将返回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。
                 例如，对于 sum = first + second 语句，其中 first 和 second 派生自 <see langword="DynamicObject" /> 类， binder.Operation 返回 ExpressionType.Add。
              </param>
      <param name="arg">
                对于二元运算右操作数。
                 例如，对于 sum = first + second 语句，其中 first 和 second 派生自 <see langword="DynamicObject" /> 类， <paramref name="arg" /> 是否等同于 second。
              </param>
      <param name="result">
                二元运算的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>
              提供实现类型的转换运算。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，从一种类型的对象转换为另一个。
            </summary>
      <param name="binder">
                提供了有关转换操作的信息。
                binder.Type 属性提供该对象必须转换为的类型。
                 例如，对于该语句 (String)sampleObject C# 中 (CType(sampleObject, Type) 在 Visual Basic 中)，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Type 返回 <see cref="T:System.String" /> 类型。
                binder.Explicit 属性提供关于发生转换的类型信息。
                 它将返回 <see langword="true" /> 用于显式转换和 <see langword="false" /> 隐式转换。
              </param>
      <param name="result">
                类型转换运算的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>
              提供用于初始化动态对象的新实例的操作的实现。
               此方法不是在 C# 或 Visual Basic 中使用。
            </summary>
      <param name="binder">
                提供有关初始化操作的信息。
              </param>
      <param name="args">
                在初始化期间传递给对象的参数。
                 例如，对于 new SampleType(100) 操作，其中 SampleType 类型派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="args[0]" /> 等于 100。
              </param>
      <param name="result">
                初始化的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>
              提供按索引删除某一对象的操作的实现。
               此方法不是在 C# 或 Visual Basic 中使用。
            </summary>
      <param name="binder">
                提供有关删除的信息。
              </param>
      <param name="indexes">
                要删除的索引。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
              提供删除对象成员的操作的实现。
               此方法不是在 C# 或 Visual Basic 中使用。
            </summary>
      <param name="binder">
                提供有关删除的信息。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>
              提供按索引获取一个值的操作的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定为索引操作的动态行为。
            </summary>
      <param name="binder">
                提供有关操作的信息。
              </param>
      <param name="indexes">
                此操作中使用的索引。
                 例如，对于 sampleObject[3] C# 中的操作 (sampleObject(3) 在 Visual Basic 中)，其中 sampleObject 派生自 <see langword="DynamicObject" /> 类， <paramref name="indexes[0]" /> 等于 3。
              </param>
      <param name="result">
                索引操作的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
              提供用于获取成员值的操作的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如获取的属性的值。
            </summary>
      <param name="binder">
                提供有关调用动态操作的对象信息。
                binder.Name 属性提供对其执行动态操作的成员的名称。
                 例如，对于 Console.WriteLine(sampleObject.SampleProperty) 语句，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Name 返回"SampleProperty"。
                binder.IgnoreCase 属性指定的成员名称是否区分大小写。
              </param>
      <param name="result">
                获取操作的结果。
                 例如，如果为属性调用方法，您可以将属性值赋给 <paramref name="result" />。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>
              提供调用对象的操作的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如调用一个或多个委托。
            </summary>
      <param name="binder">
                提供有关调用操作的信息。
              </param>
      <param name="args">
                调用操作期间传递给对象的参数。
                 例如，对于 sampleObject(100) 操作，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="args[0]" /> 等于 100。
              </param>
      <param name="result">
                对象调用的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
              提供用于调用成员的操作的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如调用方法。
            </summary>
      <param name="binder">
                提供有关动态操作的信息。
                binder.Name 属性提供对其执行动态操作的成员的名称。
                 例如，对于该语句 sampleObject.SampleMethod(100), ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Name 返回"SampleMethod"。
                binder.IgnoreCase 属性指定的成员名称是否区分大小写。
              </param>
      <param name="args">
                调用操作期间传递给对象成员的参数。
                 例如，对于该语句 sampleObject.SampleMethod(100), ，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="args[0]" /> 等于 100。
              </param>
      <param name="result">
                该成员的调用的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>
              提供按索引设置一个值的操作的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，按指定的索引访问的对象。
            </summary>
      <param name="binder">
                提供有关操作的信息。
              </param>
      <param name="indexes">
                此操作中使用的索引。
                 例如，对于 sampleObject[3] = 10 C# 中的操作 (sampleObject(3) = 10 在 Visual Basic 中)，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="indexes[0]" /> 等于 3。
              </param>
      <param name="value">
                要设置为具有指定的索引的对象的值。
                 例如，对于 sampleObject[3] = 10 C# 中的操作 (sampleObject(3) = 10 在 Visual Basic 中)，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="value" /> 等于 10。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
              提供设置成员值的操作的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如设置属性的值。
            </summary>
      <param name="binder">
                提供有关调用动态操作的对象信息。
                binder.Name 属性提供向其分配值的成员的名称。
                 例如，对于该语句 sampleObject.SampleProperty = "Test", ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Name 返回"SampleProperty"。
                binder.IgnoreCase 属性指定的成员名称是否区分大小写。
              </param>
      <param name="value">
                要设置为成员的值。
                 例如，对于 sampleObject.SampleProperty = "Test", ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="value" /> 是"测试"。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>
              提供一元运算的实现。
               类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法，以指定动态行为的操作，例如求反、 递增，则为递减。
            </summary>
      <param name="binder">
                提供有关一元运算的信息。
                binder.Operation 属性将返回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。
                 例如，对于 negativeNumber = -number 语句，其中 number 派生自 <see langword="DynamicObject" /> 类， binder.Operation 返回"Negate"。
              </param>
      <param name="result">
                一元运算的结果。
              </param>
      <returns>
              如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果此方法返回 <see langword="false" />, ，语言运行时联编程序确定的行为。
               （在大多数情况下，特定于语言的运行时异常引发。）
            </returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>
              表示可在运行时动态添加和删除其成员的对象。
            </summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>
              初始化新 <see langword="ExpandoObject" /> 没有成员。
            </summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              将指定值添加到具有指定键的 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构，表示要添加到集合中的键和值。
              </param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Clear">
      <summary>
              从集合中移除所有项。
            </summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含一个指定键和值。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。
              </param>
      <returns>
              如果集合包含一个特定键和值，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一个数组。
            </summary>
      <param name="array">
                类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，将从此索引处开始进行复制。
              </param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Count">
      <summary>
              获取中的元素数 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素的数量。
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              从集合中移除键和值。
            </summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构，表示要从集合中移除的键和值。
              </param>
      <returns>
              如果成功找到并移除键和值，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到键和值，则此方法返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
      <summary>
              将指定的键和值添加到字典中。
            </summary>
      <param name="key">
                要用作键的对象。
              </param>
      <param name="value">
                要用作值的对象。
              </param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#ContainsKey(System.String)">
      <summary>
              确定字典是否包含指定键。
            </summary>
      <param name="key">
                要在字典中查找的键。
              </param>
      <returns>
              如果字典包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Item(System.String)">
      <summary>
              获取或设置具有指定的键的元素。
            </summary>
      <param name="key">
                要获取或设置的元素的键。
              </param>
      <returns>
              具有指定键的元素。
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Keys">
      <summary>
              获取 <see cref="T:System.Collections.Generic.ICollection`1" /> ，它包含的关键字 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> ，包含实现的对象的键 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Remove(System.String)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中删除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <returns>
              如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#TryGetValue(System.String,System.Object@)">
      <summary>
              获取与指定键关联的值。
            </summary>
      <param name="key">
                要获取的值的键。
              </param>
      <param name="value">
                当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Values">
      <summary>
              获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的值的 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> ，其中包含实现的对象中的值 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
              提供元对象会调度到动态虚拟方法。
               该对象可封装在另一个元对象以提供各项操作的自定义行为。
            </summary>
      <param name="parameter">
                表示动态虚方法调度元对象的表达式。
              </param>
      <returns>
              对象的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>
              表示调用站点的动态获取索引操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 的新实例。
            </summary>
      <param name="callInfo">
                调用站点上的参数签名。
              </param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态获取索引操作的绑定。
            </summary>
      <param name="target">
                动态获取索引操作的目标。
              </param>
      <param name="args">
                动态获取索引操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>
              在调用站点处获取参数的签名。
            </summary>
      <returns>
              调用站点处参数的签名。
            </returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              如果目标动态对象不能绑定，请执行动态获取索引操作的绑定。
            </summary>
      <param name="target">
                动态获取索引操作的目标。
              </param>
      <param name="indexes">
                动态的参数获取索引操作。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果目标动态对象不能将绑定执行动态获取索引操作的绑定。
            </summary>
      <param name="target">
                动态获取索引操作的目标。
              </param>
      <param name="indexes">
                动态的参数获取索引操作。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>
              表示调用站点的动态获取成员操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 的新实例。
            </summary>
      <param name="name">
                要获取的成员的名称。
              </param>
      <param name="ignoreCase">
                如果应该忽略大小写; 匹配名称也是如此false 否则为。
              </param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态获取成员操作的绑定。
            </summary>
      <param name="target">
                动态获取成员操作的目标。
              </param>
      <param name="args">
                动态获取成员操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>
              如果目标动态对象不能绑定，请执行动态获取成员操作的绑定。
            </summary>
      <param name="target">
                动态获取成员操作的目标。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果目标动态对象不能将绑定执行动态获取成员操作的绑定。
            </summary>
      <param name="target">
                动态获取成员操作的目标。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>
              获取一个值，指示字符串比较应忽略成员名称的大小写。
            </summary>
      <returns>
              如果这种情况会将其忽略，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>
              获取要获取的成员的名称。
            </summary>
      <returns>
              要获取的成员的名称。
            </returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>
              表示可在运行时绑定其操作的动态对象。
            </summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
              返回 <see cref="T:System.Dynamic.DynamicMetaObject" /> 负责对此对象绑定操作执行。
            </summary>
      <param name="parameter">
                表达式树值的表示形式运行时。
              </param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 要绑定此对象。
            </returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>
              表示有关动态获取成员操作的信息，该操作指示当属性执行获取操作时，该获取成员是否应调用属性。
            </summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>
              获取一个值，指示是否在执行 get 操作时，该获取成员操作应调用属性。
               此接口不存在时的默认值为 true。
            </summary>
      <returns>
              如果在执行 get 操作中; 时，该获取成员操作应调用属性则为 true否则为 false。
            </returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>
              表示调用站点的调用动态操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 的新实例。
            </summary>
      <param name="callInfo">
                调用站点上的参数签名。
              </param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态调用绑定操作。
            </summary>
      <param name="target">
                动态调用操作的目标。
              </param>
      <param name="args">
                动态调用操作的参数数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>
              在调用站点处获取参数的签名。
            </summary>
      <returns>
              调用站点处参数的签名。
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              如果无法绑定目标动态对象，则指定动态调用操作的绑定。
            </summary>
      <param name="target">
                动态调用操作的目标。
              </param>
      <param name="args">
                动态调用操作的参数。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              如果无法绑定目标动态对象，则指定动态调用操作的绑定。
            </summary>
      <param name="target">
                动态调用操作的目标。
              </param>
      <param name="args">
                动态调用操作的参数。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>
              表示调用站点的调用成员动态操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>
              初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的新实例。
            </summary>
      <param name="name">
                要调用的成员的名称。
              </param>
      <param name="ignoreCase">
                如果应该忽略大小写; 匹配名称则为 truefalse 否则为。
              </param>
      <param name="callInfo">
                调用站点处参数的签名。
              </param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行的动态绑定调用成员操作。
            </summary>
      <param name="target">
                目标动态调用成员操作。
              </param>
      <param name="args">
                动态参数的数组调用成员操作。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>
              在调用站点处获取参数的签名。
            </summary>
      <returns>
              调用站点处参数的签名。
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              当在派生类中重写时执行的动态绑定调用操作，如果目标动态对象不能绑定。
            </summary>
      <param name="target">
                动态调用操作的目标。
              </param>
      <param name="args">
                动态调用操作的参数。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行的动态绑定调用成员操作，如果目标动态对象不能绑定。
            </summary>
      <param name="target">
                目标动态调用成员操作。
              </param>
      <param name="args">
                成员操作调用的动态参数。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              当在派生类中重写时执行的动态绑定调用成员操作，如果目标动态对象不能绑定。
            </summary>
      <param name="target">
                目标动态调用成员操作。
              </param>
      <param name="args">
                成员操作调用的动态参数。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>
              获取一个值，指示字符串比较应忽略成员名称的大小写。
            </summary>
      <returns>
              如果这种情况会将其忽略，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>
              获取要调用的成员的名称。
            </summary>
      <returns>
              要调用的成员的名称。
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>
              表示调用站点的动态设置索引操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 的新实例。
            </summary>
      <param name="callInfo">
                调用站点上的参数签名。
              </param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态设置索引操作的绑定。
            </summary>
      <param name="target">
                动态设置索引操作的目标。
              </param>
      <param name="args">
                动态设置索引操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>
              在调用站点处获取参数的签名。
            </summary>
      <returns>
              调用站点处参数的签名。
            </returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              如果目标动态对象不能绑定，请执行动态设置索引操作的绑定。
            </summary>
      <param name="target">
                动态设置索引操作的目标。
              </param>
      <param name="indexes">
                动态设置索引操作的参数。
              </param>
      <param name="value">
                要设置为集合的值。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              在派生类中重写时，如果目标动态对象不能将绑定执行动态设置索引操作的绑定。
            </summary>
      <param name="target">
                动态设置索引操作的目标。
              </param>
      <param name="indexes">
                动态设置索引操作的参数。
              </param>
      <param name="value">
                要设置为集合的值。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>
              表示调用站点的动态设置成员操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 的新实例。
            </summary>
      <param name="name">
                要获取的成员的名称。
              </param>
      <param name="ignoreCase">
                如果应该忽略大小写; 匹配名称也是如此false 否则为。
              </param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态设置成员操作的绑定。
            </summary>
      <param name="target">
                动态设置成员操作的目标。
              </param>
      <param name="args">
                动态设置成员操作的参数的数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              如果目标动态对象不能绑定，请执行动态设置成员操作的绑定。
            </summary>
      <param name="target">
                动态设置成员操作的目标。
              </param>
      <param name="value">
                要设置为成员的值。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              如果目标动态对象不能绑定，请执行动态设置成员操作的绑定。
            </summary>
      <param name="target">
                动态设置成员操作的目标。
              </param>
      <param name="value">
                要设置为成员的值。
              </param>
      <param name="errorSuggestion">
                如果绑定失败，则为要使用的绑定结果；否则为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>
              获取一个值，指示字符串比较应忽略成员名称的大小写。
            </summary>
      <returns>
              如果这种情况会将其忽略，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>
              获取要获取的成员的名称。
            </summary>
      <returns>
              要获取的成员的名称。
            </returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>
              表示调用站点的一元动态操作，提供有关操作的绑定语义和详细信息。
            </summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
              初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。
            </summary>
      <param name="operation">
                一元运算类型。
              </param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              执行动态一元运算的绑定。
            </summary>
      <param name="target">
                动态操作的目标。
              </param>
      <param name="args">
                动态操作的参数数组。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>
              如果将绑定目标动态对象不能，执行的一元动态操作的绑定。
            </summary>
      <param name="target">
                动态一元运算的目标。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              如果将绑定目标动态对象不能，执行的一元动态操作的绑定。
            </summary>
      <param name="target">
                动态一元运算的目标。
              </param>
      <param name="errorSuggestion">
                绑定导致绑定失败的情况下，或为 null。
              </param>
      <returns>
              表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。
            </returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>
              一元运算类型。
            </summary>
      <returns>
              对象的 <see cref="T:System.Linq.Expressions.ExpressionType" /> 表示一元运算类型。
            </returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>
              操作的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>
              表示具有二进制运算符的表达式。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>
              获取一个值，该值指示是否可以减少表达式目录树节点。
            </summary>
      <returns>
              如果表达式目录树节点可以降低，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>
              获取由的合并或复合赋值运算的类型转换函数。
            </summary>
      <returns>
              一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>
              获取一个值，该值指示表达式目录树节点是否表示 提升 号召操作员。
            </summary>
      <returns>
        <see langword="true" /> 如果该节点表示的提升的调用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>
              获取一个值，该值指示表达式目录树节点是否表示 提升 对其返回类型提升为可以为 null 的类型的运算符的调用。
            </summary>
      <returns>
        <see langword="true" /> 如果该运算符的返回类型提升为可以为 null 的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>
              获取二元运算的左的操作数。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示二元运算的左的操作数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>
              获取对于二元运算的实现方法。
            </summary>
      <returns>
              表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>
              将二进制表达式节点简化为更简单的表达式。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>
              获取二元运算的右操作数。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示二元运算的右操作数。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 结果属性。
              </param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 结果属性。
              </param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>
              表示包含一个表达式序列的块，表达式中可定义变量。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>
              获取此块中的表达式。
            </summary>
      <returns>
              包含此块中的所有表达式的只读集合。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>
              返回此表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>
              获取此块中的最后一个表达式。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示此块中的最后一个表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 结果属性。
              </param>
      <param name="expressions">
        <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 结果属性。
              </param>
      <returns>
              如果没有子级发生更改，此表达式或带有更新的子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>
              获取在此块中定义的变量。
            </summary>
      <returns>
              包含在此块中定义的所有变量的只读集合。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>
              表示 try 块中的 catch 语句。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>
              获取在 catch 块的正文。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 catch 正文的对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>
              获取的正文 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示正文 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>
              获取的类型 <see cref="T:System.Exception" /> 此处理程序捕捉。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示的一种 <see cref="T:System.Exception" /> 此处理程序捕捉。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>
              返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="variable">
        <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 结果属性。
              </param>
      <param name="filter">
        <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 结果属性。
              </param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>
              获取对 <see cref="T:System.Exception" /> 此处理程序捕获的对象。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示对引用 <see cref="T:System.Exception" /> 此处理程序捕获的对象。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>
              表示具有条件运算符的表达式。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>
              获取要在执行测试的计算结果的表达式 <see langword="false" />。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，它表示要执行如果测试表达式 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>
              获取要在执行测试的计算结果的表达式 <see langword="true" />。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，它表示要执行如果测试表达式 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>
              返回此表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>
              获取条件运算的测试。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示条件运算的测试。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级都相同，则会返回此表达式
            </summary>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 结果属性。
              </param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 结果属性。
              </param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 结果属性。
              </param>
      <returns>
              如果没有子级发生更改，此表达式或带有更新的子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>
              表示具有常数值的表达式。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>
              返回表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>
              获取常量表达式的值。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 表示表达式的值相等。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>
              发出或清除调试信息的序列点。
               这使调试器能够在调试时突出显示正确的源代码。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 表示源代码文件。
            </summary>
      <returns>
              表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>
              获取此的结束列 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <returns>
              用于生成包装的表达式的代码的结束列数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>
              获取此的结束行 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <returns>
              用于生成包装的表达式的代码的结束行号。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>
              获取的值以指示如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点。
            </summary>
      <returns>
              True <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点，否则为 false。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>
              获取此的起始列 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <returns>
              用于生成包装的表达式的代码的起始列数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>
              获取此的起始行 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <returns>
              用于生成包装的表达式的代码的起始行数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>
              表示一个类型或空表达式的默认值。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>
              返回此表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>
              表示一个动态操作。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>
              获取动态操作的参数。
            </summary>
      <returns>
              包含动态操作参数的只读集合。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>
              获取 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。
            </summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>
              获取 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，它表示 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arguments">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arguments">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <param name="arg3">
                动态操作的第四个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <param name="arg3">
                动态操作的第四个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arguments">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arguments">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>
              返回此表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              将发送到参数 arguments 的值和发送到 <see langword="DynamicExpression" /> 当前实例的 <see langword="Arguments" /> 属性的值进行比较。
               如果参数和属性的值相等，则返回当前实例。
               如果它们不相等，则返回新的 <see langword="DynamicExpression" /> 实例，该实例与当前实例相同，只是 <see langword="Arguments" /> 属性设置为参数 arguments 的值。
            </summary>
      <param name="arguments">
                结果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              返回表达式树节点的参数数目。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              索引时返回参数，当索引超出界限时引发。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <param name="index">
                自变量的索引。
              </param>
      <returns>
              返回 <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>
              根据需要创建 CallSite 并返回 DynamicExpression 的多态内联缓存的 CallSite。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <returns>
              返回 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>
              重写此节点，该节点可将动态表达式的参数替换为提供的值。
              args 的数目需要与当前表达式的数目匹配。
                不应使用此类型。
                仅在程序集重构时公开，并且仅用于内部性能优化。
                此辅助方法允许重新编写要独立于特定实现类的节点，该实现类是从调用站点正在使用的 DynamicExpression 派生的。
            </summary>
      <param name="args">
                参数。
              </param>
      <returns>
              返回 <see cref="T:System.Linq.Expressions.Expression" />，重新编写表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>
              表示动态表达式树的访问者或重写者。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>
              初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.DynamicExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              返回 <see cref="T:System.Linq.Expressions.Expression" />, ，修改后的表达式中，如果修改它或任何子表达式; 否则，返回原始的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
              表示 <see cref="T:System.Collections.IEnumerable" /> 集合的单个元素的初始值设定项。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>
              获取用于将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合的实例方法。
            </summary>
      <returns>
              一个 <see cref="T:System.Reflection.MethodInfo" />，表示将元素添加到集合的实例方法。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>
              获取传递到相应方法的参数的集合，该方法将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，这些对象表示将元素添加到集合的方法的参数。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
              返回 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="arguments">
                结果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              返回表达式树节点的参数数目。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              索引时返回参数，当索引超出界限时引发。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <param name="index">
                自变量的索引。
              </param>
      <returns>
              返回 <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>
              将强类型化的 Lambda 表达式表示为表达式树形式的数据结构。
               此类不能被继承。
            </summary>
      <typeparam name="TDelegate">
                该委托的类型， <see cref="T:System.Linq.Expressions.Expression`1" /> 表示。
              </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>
              编译表达式树由描述为可执行代码的 lambda 表达式，并生成一个委托，表示 lambda 表达式。
            </summary>
      <returns>
              类型的委托 <paramref name="TDelegate" /> 表示所描述的已编译的 lambda 表达式 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>
              将表达式树描述的 Lambda 表达式编译为已解释或已编译的代码，并生成表示该 Lambda 表达式的委托。
            </summary>
      <param name="preferInterpretation">
                如果可用，则为 <see langword="true" />，指示表达式应编译为已解释的形式；否则为 <see langword="false" />。
              </param>
      <returns>
              一个委托，表示 <see cref="T:System.Linq.Expressions.Expression`1" /> 所描述的已编译 Lambda 表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>
              将生成一个委托，表示 lambda 表达式。
            </summary>
      <param name="debugInfoGenerator">
                由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。
              </param>
      <returns>
              一个包含已编译的版本的 lambda 的委托。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 结果属性。
              </param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>
              提供一种基类，表示表达式树节点的类派生自该基类。
               它还包含用来创建各种节点类型的 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）工厂方法。
               这是一个 <see langword="abstract" /> 类。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>
              构造 <see cref="T:System.Linq.Expressions.Expression" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>
              初始化 <see cref="T:System.Linq.Expressions.Expression" /> 类的新实例。
            </summary>
      <param name="nodeType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 设置为节点类型。
              </param>
      <param name="type">
                此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 <see langword="AND" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  按位 <see langword="AND" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 <see langword="AND" />。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 <see langword="AND" /> 运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数解析为 true 时，才计算第二个操作数的条件 <see langword="AND" /> 运算。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和按位 <see langword="AND" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                
                  - 或 -
                
                  <paramref name="method" /> 是 <see langword="null" /> 和 <paramref name="left" />。类型和 <paramref name="right" />。类型不是同一个布尔值类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 <see langword="AND" /> 时才计算第二个操作数的条件 <see langword="true" /> 运算。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  按位 <see langword="AND" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                
                  - 或 -
                
                  <paramref name="left" />.类型和 <paramref name="right" />。类型不是同一个布尔值类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个用于访问多维数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </summary>
      <param name="array">
                一个表示多维数组的表达式。
              </param>
      <param name="indexes">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用于为数组编制索引的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个用于访问数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </summary>
      <param name="array">
                一个表示要编制索引的数组的表达式。
              </param>
      <param name="indexes">
                一个数组，其中包含用于为数组编制索引的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示将数组索引运算符应用到多维数组中。
            </summary>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 实例的数组 - 数组索引操作的索引。
              </param>
      <param name="indexes">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。
                
                  - 或 -
                
                  秩 <paramref name="array" />。类型不匹配中的元素数 <paramref name="indexes" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="indexes" /> 不表示 <see cref="T:System.Int32" /> 类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示将数组索引运算符应用到多个级别的数组中。
            </summary>
      <param name="array">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。
              </param>
      <param name="indexes">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。
                
                  - 或 -
                
                  秩 <paramref name="array" />。类型不匹配中的元素数 <paramref name="indexes" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="indexes" /> 不表示 <see cref="T:System.Int32" /> 类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示将数组索引运算符应用到级别一的数组中。
            </summary>
      <param name="array">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="index">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="index" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。
                
                  - 或 -
                
                  <paramref name="array" />.类型表示其排名不为 1 的数组类型。
                
                  - 或 -
                
                  <paramref name="index" />.类型不表示 <see cref="T:System.Int32" /> 类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示获取一维数组的长度的表达式。
            </summary>
      <param name="array">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />，<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性等于 <paramref name="array" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />，它表示字段或属性的初始化。
            </summary>
      <param name="member">
                要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。
              </param>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。
                
                  - 或 -
                
                  表示的属性 <paramref name="member" /> 没有 <see langword="set" /> 取值函数。
                
                  - 或 -
                
                  <paramref name="expression" />.类型不能分配给字段或属性的类型， <paramref name="member" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>
              使用属性访问器方法，创建一个表示成员初始化的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。
            </summary>
      <param name="propertyAccessor">
                一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为 <see cref="T:System.Reflection.PropertyInfo" />（表示 <paramref name="propertyAccessor" /> 中访问的属性），<see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为 <paramref name="expression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。
                
                  - 或 -
                
                  <paramref name="propertyAccessor" /> 访问的属性没有 <see langword="set" /> 访问器。
                
                  - 或 -
                
                  不能将 <paramref name="expression" />.Type 分配给 <paramref name="member" /> 所表示的字段或属性的类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。
            </summary>
      <param name="type">
                块的结果类型。
              </param>
      <param name="variables">
                块中的变量。
              </param>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含三个表达式，但不包含任何变量。
            </summary>
      <param name="arg0">
                块中的第一个表达式。
              </param>
      <param name="arg1">
                块中的第二个表达式。
              </param>
      <param name="arg2">
                块中的第三个表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含五个表达式，但不包含任何变量。
            </summary>
      <param name="arg0">
                块中的第一个表达式。
              </param>
      <param name="arg1">
                块中的第二个表达式。
              </param>
      <param name="arg2">
                块中的第三个表达式。
              </param>
      <param name="arg3">
                块中的第四个表达式。
              </param>
      <param name="arg4">
                块中的第五个表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。
            </summary>
      <param name="type">
                块的结果类型。
              </param>
      <param name="variables">
                块中的变量。
              </param>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。
            </summary>
      <param name="type">
                块的结果类型。
              </param>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含四个表达式，但不包含任何变量。
            </summary>
      <param name="arg0">
                块中的第一个表达式。
              </param>
      <param name="arg1">
                块中的第二个表达式。
              </param>
      <param name="arg2">
                块中的第三个表达式。
              </param>
      <param name="arg3">
                块中的第四个表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含两个表达式，但不包含任何变量。
            </summary>
      <param name="arg0">
                块中的第一个表达式。
              </param>
      <param name="arg1">
                块中的第二个表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。
            </summary>
      <param name="variables">
                块中的变量。
              </param>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。
            </summary>
      <param name="variables">
                块中的变量。
              </param>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。
            </summary>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。
            </summary>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。
            </summary>
      <param name="type">
                块的结果类型。
              </param>
      <param name="expressions">
                块中的表达式。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>
              创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               可以指定在跳转时传递给标签的值。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有将在跳转时传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               可以指定在跳转时传递给标签的值。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用五个参数的静态方法的调用。
            </summary>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg1">
                用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg2">
                用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg3">
                用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg4">
                用于表示第五个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的方法的调用。
            </summary>
      <param name="instance">
                指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。
                 （对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。
              </param>
      <param name="method">
                表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg1">
                用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg2">
                用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>
              通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）方法的调用。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 指定包含指定的 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）方法的类型。
              </param>
      <param name="methodName">
                方法的名称。
              </param>
      <param name="typeArguments">
                指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。
                 当 methodName 指定非泛型方法时，此自变量应为 null。
              </param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，表示方法的参数。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为表示指定的 <see cref="T:System.Reflection.MethodInfo" />（在 Visual Basic 中为 <see langword="static" />）方法的 <see langword="Shared" />，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="methodName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  任何方法︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="type" /> 或其基类型。
                
                  - 或 -
                
                  多个方法︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="type" /> 或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的静态方法的调用。
            </summary>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg1">
                用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg2">
                用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>
              通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示方法调用。
            </summary>
      <param name="instance">
                将搜索 <see cref="T:System.Linq.Expressions.Expression" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性值，查看其是否有特定方法。
              </param>
      <param name="methodName">
                方法的名称。
              </param>
      <param name="typeArguments">
                指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。
                 当 methodName 指定非泛型方法时，此自变量应为 null。
              </param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，表示方法的参数。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性等于 <paramref name="instance" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 设置为表示指定实例方法的 <see cref="T:System.Reflection.MethodInfo" /> 且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 设置为指定参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  任何方法︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="instance" />。类型或其基类型。
                
                  - 或 -
                
                  多个方法︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="instance" />。类型或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对采用两个参数的方法的调用。
            </summary>
      <param name="instance">
                指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。
                 （对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。
              </param>
      <param name="method">
                表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg1">
                用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用四个参数的静态方法的调用。
            </summary>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg1">
                用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg2">
                用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg3">
                用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。
            </summary>
      <param name="instance">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用，对于 <see langword="null" /> 方法（在 Visual Basic 中为 <see langword="static" /> 方法）应传递 <see langword="Shared" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arguments">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="instance" /> 是 <see langword="null" />，且 <paramref name="method" /> 表示一种实例方法。
                
                  - 或 -
                
                  <paramref name="arguments" /> 不是 <see langword="null" />，其中一个或多个元素是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不可分配给由 <paramref name="method" /> 表示的方法声明类型。
                
                  - 或 -
                
                  <paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 表示的方法的参数数量不相等。
                
                  - 或 -
                
                  无法将 <paramref name="arguments" /> 的一个或多个元素分配给由 <paramref name="method" /> 表示的方法的相应参数。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。
            </summary>
      <param name="instance">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />，它为 <see langword="null" />（在 Visual Basic 中则为<see langword="static" />）方法传递 <see langword="Shared" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arguments">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="instance" /> 是 <see langword="null" /> 和 <paramref name="method" /> 表示的实例方法。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.类型不能分配给所表示的方法的声明类型 <paramref name="method" />。
                
                  - 或 -
                
                  中的元素数 <paramref name="arguments" /> 不等于所表示的方法的参数的数目 <paramref name="method" />。
                
                  - 或 -
                
                  一个或多个元素的 <paramref name="arguments" /> 不能分配给所表示的方法的相应参数 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示调用有参数的 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）方法。
            </summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 表示 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）方法，以将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等。
              </param>
      <param name="arguments">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  中的元素数 <paramref name="arguments" /> 不等于所表示的方法的参数的数目 <paramref name="method" />。
                
                  - 或 -
                
                  一个或多个元素的 <paramref name="arguments" /> 不能分配给所表示的方法的相应参数 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用一个参数的 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）的调用。
            </summary>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static 方法（在 Visual Basic 中为 Shared 方法）的调用。
            </summary>
      <param name="method">
                表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="arguments">
                表示调用参数的 <see cref="T:System.Linq.Expressions.Expression" /> 的集合。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示调用不带参数的方法。
            </summary>
      <param name="instance">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用，对于 <see langword="null" /> 方法（在 Visual Basic 中为 <see langword="static" /> 方法）应传递 <see langword="Shared" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="instance" /> 是 <see langword="null" /> 和 <paramref name="method" /> 表示的实例方法。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.类型不能分配给所表示的方法的声明类型 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用两个参数的静态方法的调用。
            </summary>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。
              </param>
      <param name="arg0">
                用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="arg1">
                用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。
                </exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>
              指示可将节点简化为更简单的节点。
               如果返回 true，则可以调用 Reduce() 以生成简化形式。
            </summary>
      <returns>
              如果可以简化节点，则为 True；否则为 false。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有对已捕获的 <see cref="T:System.Exception" /> 对象的引用以便在处理程序主体中使用。
            </summary>
      <param name="variable">
                一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。
              </param>
      <param name="body">
                catch 语句的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </summary>
      <param name="type">
                此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
              </param>
      <param name="body">
                catch 语句的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器和对已捕获的 <see cref="T:System.Exception" /> 对象的引用。
            </summary>
      <param name="variable">
                一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。
              </param>
      <param name="body">
                catch 语句的主体。
              </param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器，但没有对已捕获的 <see cref="T:System.Exception" /> 对象的引用。
            </summary>
      <param name="type">
                此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
              </param>
      <param name="body">
                catch 语句的主体。
              </param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>
              创建一个用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <param name="document">
                表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。
              </param>
      <returns>
              用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>
              在给定转换函数的情况下，创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.类型和 <paramref name="right" />。类型是不能相互转换。
                
                  - 或 -
                
                  <paramref name="conversion" /> 不是 <see langword="null" /> 和 <paramref name="conversion" />。类型为不带一个参数的委托类型。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="left" /> 不表示引用类型或为空值类型。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="left" /> 表示不能分配给委托类型的参数类型的类型 <paramref name="conversion" />。类型。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="right" /> 是否不等于委托类型的返回类型 <paramref name="conversion" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="left" /> 不表示引用类型或为空值类型。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.类型和 <paramref name="right" />。类型是不能相互转换。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。
            </summary>
      <param name="test">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。
              </param>
      <param name="ifTrue">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。
              </param>
      <param name="ifFalse">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" />、<paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.类型不是 <see cref="T:System.Boolean" />。
                
                  - 或 -
                
                  <paramref name="ifTrue" />.类型不等同于 <paramref name="ifFalse" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。
            </summary>
      <param name="test">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。
              </param>
      <param name="ifTrue">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。
              </param>
      <param name="ifFalse">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。
              </param>
      <param name="type">
                要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值。
            </summary>
      <param name="value">
                要将 <see cref="T:System.Object" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。
            </summary>
      <param name="value">
                要将 <see cref="T:System.Object" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see langword="null" /> 和 <paramref name="type" /> 不能分配的动态类型从 <paramref name="value" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>
              创建一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              创建一个表示具有指定类型的 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示类型转换运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示为其指定实现方法的转换运算。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，或者不带且只有一个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。
                
                  - 或 -
                
                  <paramref name="expression" />.类型不能分配给所表示的方法的参数类型 <paramref name="method" />。
                
                  - 或 -
                
                  所表示的方法的返回类型 <paramref name="method" /> 不能赋给 <paramref name="type" />。
                
                  - 或 -
                
                  <paramref name="expression" />.类型或 <paramref name="type" /> 是可以为 null 的值类型和相应的不可为 null 的值类型不等于参数类型或返回类型，分别表示的方法的 <paramref name="method" />。
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                  匹配的多个方法 <paramref name="method" /> 找到说明。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常的转换运算。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常且为其指定实现方法的转换运算。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，或者不带且只有一个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。
                
                  - 或 -
                
                  <paramref name="expression" />.类型不能分配给所表示的方法的参数类型 <paramref name="method" />。
                
                  - 或 -
                
                  所表示的方法的返回类型 <paramref name="method" /> 不能赋给 <paramref name="type" />。
                
                  - 或 -
                
                  <paramref name="expression" />.类型或 <paramref name="type" /> 是可以为 null 的值类型和相应的不可为 null 的值类型不等于参数类型或返回类型，分别表示的方法的 <paramref name="method" />。
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                  匹配的多个方法 <paramref name="method" /> 找到说明。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              创建一个具有指定跨度的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <param name="document">
                表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。
              </param>
      <param name="startLine">
                此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。
                 必须大于 0。
              </param>
      <param name="startColumn">
                此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。
                 必须大于 0。
              </param>
      <param name="endLine">
                此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。
                 必须大于或等于起始行。
              </param>
      <param name="endColumn">
                此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。
                 如果结束行与起始行相同，则它必须大于或等于起始列。
                 任何情况下都必须大于 0。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。
            </summary>
      <param name="expression">
                要递减的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。
            </summary>
      <param name="expression">
                要递减的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。
            </summary>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                作为 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                作为 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  除法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <param name="arg3">
                动态操作的第四个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arguments">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="returnType">
                动态表达式的结果类型。
              </param>
      <param name="arguments">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              在给定 <see cref="T:System.Linq.Expressions.ElementInit" /> 作为第二个参数的情况下，创建一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </summary>
      <param name="addMethod">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。
              </param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />（包含 <see cref="T:System.Linq.Expressions.Expression" /> 对象）要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> 表示的方法的名称不是“Add”（不区分大小写）。
                
                  - 或 -
                
                  <paramref name="addMethod" /> 表示的方法不是实例方法。
                
                  - 或 -
                
                  <paramref name="arguments" /> 不包含与 <paramref name="addMethod" /> 表示的方法的参数数目相同的元素数目。
                
                  - 或 -
                
                  <paramref name="arguments" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="addMethod" /> 表示的方法的相应参数类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              在给定值数组作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。
            </summary>
      <param name="addMethod">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。
              </param>
      <param name="arguments">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  AddMethod 表示不是方法名为"Add"（不区分大小写）。
                
                  - 或 -
                
                  该方法 addMethod 表示不是实例方法。
                
                  - 或 -
                
                  参数不包含相同数量的方法参数的数量相同的元素表示该 addMethod。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="arguments" /> 不能赋给该方法的相应参数的类型， <paramref name="addMethod" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>
              创建具有 <see cref="T:System.Void" /> 类型的空表达式。
            </summary>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <see cref="T:System.Void" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有为定义的相等运算符 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和相等运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 <see langword="XOR" /> 运算的 op_ExclusiveOr。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义 <see langword="XOR" /> 运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 <see langword="XOR" /> 运算的 op_ExclusiveOr。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see langword="XOR" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>
              创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。
                 对于 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />），<paramref name="expression" /> 必须是 <see langword="null" />。
              </param>
      <param name="field">
                要将 <see cref="T:System.Reflection.FieldInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  所表示的字段 <paramref name="field" /> 不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中) 和 <paramref name="expression" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不能分配给所表示的字段的声明类型 <paramref name="field" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>
              在给定字段名称的情况下，创建一个表示访问此字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="fieldName" /> 的字段。
                 对于静态字段，这可以为 null。
              </param>
      <param name="fieldName">
                要访问的字段的名称。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，<see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为 <see cref="T:System.Reflection.FieldInfo" />（表示由 <paramref name="fieldName" /> 表示的字段）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有名为字段 <paramref name="fieldName" /> 中定义 <paramref name="expression" />。类型或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>
              创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                字段的包含对象。
                 对于静态字段，这可以为 null。
              </param>
      <param name="type">
                包含字段的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <param name="fieldName">
                要访问的字段。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>
              创建一个 <see cref="T:System.Type" /> 对象，它表示具有特定类型参数的泛型 System.Action 委托类型。
            </summary>
      <param name="typeArgs">
                包含多达十六个 <see cref="T:System.Type" /> 对象的数组，它指定 <see langword="System.Action" /> 委托类型的类型参数。
              </param>
      <returns>
              具有指定类型参数的 System.Action 委托的类型。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含超过 16 个元素。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>
              获取一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 或 System.Action 委托类型。
            </summary>
      <param name="typeArgs">
                该委托的类型参数。
              </param>
      <returns>
              委托类型。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>
              创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。
               最后一个类型参数指定已创建委托的返回类型。
            </summary>
      <param name="typeArgs">
                包含一到十七个 <see cref="T:System.Type" /> 对象的数组，它指定 <see langword="System.Func" /> 委托类型的类型参数。
              </param>
      <returns>
              具有指定类型参数的 System.Func 委托的类型。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含少于一个或多个十七元素。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               可以指定在跳转时传递给标签的值。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>
              创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               可以指定在跳转时传递给标签的值。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  "大于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和"大于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  "大于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义“大于或等于”运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 <see langword="if" /> 语句的条件块。
            </summary>
      <param name="test">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。
              </param>
      <param name="ifTrue">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为指定值。
              <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为默认表达式，并且此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 <see langword="if" /> 和 <see langword="else" /> 语句的条件块。
            </summary>
      <param name="test">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。
              </param>
      <param name="ifTrue">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。
              </param>
      <param name="ifFalse">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。
               此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。
            </summary>
      <param name="expression">
                要递增的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。
            </summary>
      <param name="expression">
                要递增的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。
              </param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，这些对象表示要对其应用委托或 lambda 表达式的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不表示一个委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给委托所表示的相应参数的类型 <paramref name="expression" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 不通过所表示的委托中包含的元素数目的参数列表作为 <paramref name="expression" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。
              </param>
      <param name="arguments">
                一个包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的 <see cref="T:System.Linq.Expressions.Expression" />，这些对象表示要对其应用委托或 lambda 表达式的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不表示一个委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给委托所表示的相应参数的类型 <paramref name="expression" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 不通过所表示的委托中包含的元素数目的参数列表作为 <paramref name="expression" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>
              返回表达式的计算结果是否为 false。
            </summary>
      <param name="expression">
                要计算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              返回表达式的计算结果是否为 false。
            </summary>
      <param name="expression">
                要计算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>
              返回表达式的计算结果是否为 true。
            </summary>
      <param name="expression">
                要计算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              返回表达式的计算结果是否为 true。
            </summary>
      <param name="expression">
                要计算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型但没有名称的标签。
            </summary>
      <returns>
              新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>
              创建一个<see cref="T:System.Linq.Expressions.LabelExpression" />，它表示不带默认值的标签。
            </summary>
      <param name="target">
                此 <see cref="T:System.Linq.Expressions.LabelTarget" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />。
              </param>
      <returns>
              不带默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定名称的标签。
            </summary>
      <param name="name">
                标签的名称。
              </param>
      <returns>
              新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型的标签。
            </summary>
      <param name="type">
                跳转到标签时传递的值的类型。
              </param>
      <returns>
              新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示具有给定默认值的标签。
            </summary>
      <param name="target">
                此 <see cref="T:System.Linq.Expressions.LabelTarget" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />。
              </param>
      <param name="defaultValue">
                当通过常规控制流到达标签时，此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。
              </param>
      <returns>
              具有给定默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型和名称的标签。
            </summary>
      <param name="type">
                跳转到标签时传递的值的类型。
              </param>
      <param name="name">
                标签的名称。
              </param>
      <returns>
              新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="delegateType">
                一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。
              </param>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="name">
                lambda 的名称。
                 用于发出调试信息。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="delegateType">
                一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。
              </param>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="name">
                lambda 的名称。
                 用于发出调试信息。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="delegateType">
                一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。
              </param>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="name">
                lambda 的名称。
                 用于发出调试信息。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。
               如果委托类型在编译时未知，则可以使用它。
            </summary>
      <param name="delegateType">
                一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。
              </param>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="parameters">
                用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。
              </param>
      <returns>
              一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 中的一个或多个元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" />不表示一个委托类型。
                
                  - 或 -
                
                  <paramref name="body" />.类型表示不能分配给表示的委托类型的返回类型的类型<paramref name="delegateType" />。
                
                  - 或 -
                
                  <paramref name="parameters" />不包含相同数量的元素所表示的委托类型的参数的列表作为<paramref name="delegateType" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" />属性的元素的<paramref name="parameters" />不是可表示的委托类型的相应参数类型的类型从<paramref name="delegateType" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="delegateType">
                一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。
              </param>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="name">
                lambda 的名称。
                 用于发出调试信息。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。
               如果委托类型在编译时未知，则可以使用它。
            </summary>
      <param name="delegateType">
                一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。
              </param>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 中的一个或多个元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示一个委托类型。
                
                  - 或 -
                
                  <paramref name="body" />.类型表示不能分配给所表示的委托类型的返回类型的类型 <paramref name="delegateType" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 不包含的元素数目的参数所表示的委托类型列表作为 <paramref name="delegateType" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="parameters" /> 不是从表示的委托类型的相应参数类型的类型赋值 <paramref name="delegateType" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="parameters">
                用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="parameters" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含超过 16 个元素。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              通过先构造一个委托类型来创建一个 LambdaExpression。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="name">
                lambda 的名称。
                 用于生成调试信息。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <typeparam name="TDelegate">
                委托类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。
              </param>
      <typeparam name="TDelegate">
                委托类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="name">
                lambda 的名称。
                 用于生成调试信息。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <typeparam name="TDelegate">
                委托类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="parameters">
                用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。
              </param>
      <typeparam name="TDelegate">
                一种委托类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 中的一个或多个元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" />不是委托类型。
                
                  - 或 -
                
                  <paramref name="body" />.类型表示不能分配给的返回类型的类型<paramref name="TDelegate" />。
                
                  - 或 -
                
                  <paramref name="parameters" />不包含相同数量的元素的参数列表作为<paramref name="TDelegate" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" />属性的元素的<paramref name="parameters" />不能从相应的参数类型的类型分配<paramref name="TDelegate" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <typeparam name="TDelegate">
                一种委托类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 中的一个或多个元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。
                
                  - 或 -
                
                  <paramref name="body" />.类型表示不能分配给的返回类型的一种 <paramref name="TDelegate" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 不包含的元素数目的参数列表作为 <paramref name="TDelegate" />。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="parameters" /> 不能从相应的参数类型的类型分配 <paramref name="TDelegate" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="body">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。
              </param>
      <param name="tailCall">
                一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。
              </param>
      <typeparam name="TDelegate">
                委托类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  左移位运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和 left shift 运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  "小于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" /> 类型和 <paramref name="right" /> 类型定义“小于”运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  "小于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和"小于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>
              基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 对象。
            </summary>
      <param name="propertyAccessor">
                一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="initializers">
                用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。
                
                  - 或 -
                
                  <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 表示的方法的属性 <paramref name="propertyAccessor" /> 访问不实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />。
            </summary>
      <param name="propertyAccessor">
                一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="initializers">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。
                
                  - 或 -
                
                  <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 表示的方法的属性 <paramref name="propertyAccessor" /> 访问不实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。
            </summary>
      <param name="member">
                一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。
              </param>
      <param name="initializers">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。
                
                  - 或 -
                
                  <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 的字段或属性， <paramref name="member" /> 表示不实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>
              创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。
            </summary>
      <param name="member">
                一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。
              </param>
      <param name="initializers">
                用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。
                
                  - 或 -
                
                  <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 的字段或属性， <paramref name="member" /> 表示不实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。
              </param>
      <param name="initializers">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。
              </param>
      <param name="initializers">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="initializers" /> 的一个或多个元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 不实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有在 <paramref name="newExpression" />.Type 或其基类型中声明的名为“Add”（不区分大小写）的实例方法。
                
                  - 或 -
                
                  <paramref name="newExpression" />.Type 或其基类型上的 add 方法不采用确切的参数。
                
                  - 或 -
                
                  由 <paramref name="initializers" /> 的第一个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示的类型不可分配给 <paramref name="newExpression" />.Type 或其基类型上 add 方法的参数类型。
                
                  - 或 -
                
                  <paramref name="newExpression" />.Type 和/或其基类型上存在多个名为“Add”（不区分大小写）且与参数兼容的方法。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>
              创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。
              </param>
      <param name="initializers">
                用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="initializers" /> 的一个或多个元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 不实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。
              </param>
      <param name="initializers">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有名为"Add"（不区分大小写） 中声明的实例方法 <paramref name="newExpression" />。类型或其基类型。
                
                  - 或 -
                
                  上的 add 方法 <paramref name="newExpression" />。类型或其基类型不带一个参数。
                
                  - 或 -
                
                  表示的类型 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的第一个元素 <paramref name="initializers" /> 不能赋给上的 add 方法的参数类型 <paramref name="newExpression" />。类型或其基类型。
                
                  - 或 -
                
                  上是否存在名为"Add"（不区分大小写） 的多个参数兼容方法 <paramref name="newExpression" />。类型和/或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。
              </param>
      <param name="addMethod">
                一个 <see cref="T:System.Reflection.MethodInfo" />，表示名为“Add”（不区分大小写），用于将元素添加到集合的实例方法。
              </param>
      <param name="initializers">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。
                
                  - 或 -
                
                  <paramref name="addMethod" /> 不是 <see langword="null" /> 并不表示实例方法正好带一个参数的名为"Add"（不区分大小写）。
                
                  - 或 -
                
                  <paramref name="addMethod" /> 不是 <see langword="null" /> 所表示的类型和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="initializers" /> 不能赋给该方法的参数类型， <paramref name="addMethod" /> 表示。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 <see langword="null" /> 上是否存在名为"Add"使用一个兼容的类型参数没有实例方法和 <paramref name="newExpression" />。类型或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。
              </param>
      <param name="addMethod">
                一个 <see cref="T:System.Reflection.MethodInfo" />，表示带一个参数，用于将元素添加到集合中的实例方法。
              </param>
      <param name="initializers">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个或多个元素 <paramref name="initializers" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。
                
                  - 或 -
                
                  <paramref name="addMethod" /> 不是 <see langword="null" /> 并不表示实例方法正好带一个参数的名为"Add"（不区分大小写）。
                
                  - 或 -
                
                  <paramref name="addMethod" /> 不是 <see langword="null" /> 所表示的类型和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="initializers" /> 不能赋给该方法的参数类型， <paramref name="addMethod" /> 表示。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 <see langword="null" /> 上是否存在名为"Add"使用一个兼容的类型参数没有实例方法和 <paramref name="newExpression" />。类型或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>
              创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </summary>
      <param name="body">
                循环体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>
              创建具有给定主体和中断目标的 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </summary>
      <param name="body">
                循环体。
              </param>
      <param name="break">
                循环体使用的中断目标。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>
              创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </summary>
      <param name="body">
                循环体。
              </param>
      <param name="break">
                循环体使用的中断目标。
              </param>
      <param name="continue">
                循环体使用的继续目标。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              在给定左操作数和右操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="binaryType">
                指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
              </param>
      <param name="left">
                一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="right">
                一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二进制表达式节点不对应。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              在给定左操作数、右操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="binaryType">
                指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
              </param>
      <param name="left">
                一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="right">
                一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二进制表达式节点不对应。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              在给定左操作数、右操作数、实现方法和类型转换函数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="binaryType">
                指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
              </param>
      <param name="left">
                一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="right">
                一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="conversion">
                一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。
                 只有在 <paramref name="binaryType" /> 为 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或复合赋值时，才使用此参数。
              </param>
      <returns>
              通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二进制表达式节点不对应。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示具有指定元素的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </summary>
      <param name="type">
                此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
              </param>
      <param name="variable">
                一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。
              </param>
      <param name="body">
                catch 语句的主体。
              </param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个参数。
              </param>
      <param name="arg3">
                动态操作的第四个自变量。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个自变量。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的第一个参数。
              </param>
      <param name="arg1">
                动态操作的第二个参数。
              </param>
      <param name="arg2">
                动态操作的第三个自变量。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arg0">
                动态操作的参数。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arguments">
                动态操作的自变量。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。
            </summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。
              </param>
      <param name="binder">
                动态操作的运行时联编程序。
              </param>
      <param name="arguments">
                动态操作的自变量。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，它表示指定的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳转。
               也可以指定在跳转时传递给标签的值。
            </summary>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 <paramref name="kind" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示访问对象中的索引属性。
            </summary>
      <param name="instance">
                属性所属的对象。
                 如果属性为 <see langword="static" />（在 Visual Basic 中为 <see langword="shared" />），则它应为 null。
              </param>
      <param name="indexer">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要编制索引的属性。
              </param>
      <param name="arguments">
                一个 IEnumerable&lt;Expression&gt;（在 Visual Basic 中为 IEnumerable (Of Expression)），其中包含将用于为属性编制索引的参数。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>
              创建一个表示访问字段或属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                一个表示成员所属对象的 <see cref="T:System.Linq.Expressions.Expression" />。
                 对于静态成员，这可以为 null。
              </param>
      <param name="member">
                描述要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。
              </param>
      <returns>
              通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>
              创建一个表示具有指定元素的 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </summary>
      <param name="type">
                try 表达式的结果类型。
                 如果为 null，则 bodh 和所有处理程序必须具有相同的类型。
              </param>
      <param name="body">
                try 块的主体。
              </param>
      <param name="finally">
                finally 块的主体。
                 如果 try 块不具有关联的 finally 块，则传递 null。
              </param>
      <param name="fault">
                fault 块的主体。
                 如果 try 块不具有关联的 fault 块，则传递 null。
              </param>
      <param name="handlers">
                表示要与 try 块关联的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              在给定操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="unaryType">
                指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
              </param>
      <param name="operand">
                一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="type">
                指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 <see langword="null" />）。
              </param>
      <returns>
              通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 不对应于一元表达式节点。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
              在给定操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="unaryType">
                指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
              </param>
      <param name="operand">
                一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="type">
                指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 <see langword="null" />）。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 不对应于一元表达式节点。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>
              使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。
            </summary>
      <param name="propertyAccessor">
                表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="bindings">
                用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示的方法访问的属性类型的成员， <paramref name="propertyAccessor" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。
            </summary>
      <param name="propertyAccessor">
                表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <param name="bindings">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示的方法访问的属性类型的成员， <paramref name="propertyAccessor" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。
            </summary>
      <param name="member">
                要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。
              </param>
      <param name="bindings">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示字段或属性的类型的成员， <paramref name="member" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>
              创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。
            </summary>
      <param name="member">
                要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。
              </param>
      <param name="bindings">
                用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示字段或属性的类型的成员， <paramref name="member" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              表示一个表达式，该表达式创建新对象并初始化该对象的一个属性。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。
              </param>
      <param name="bindings">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示类型的成员， <paramref name="newExpression" />。表示类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。
            </summary>
      <param name="newExpression">
                要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。
              </param>
      <param name="bindings">
                用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示类型的成员， <paramref name="newExpression" />。表示类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  取模运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义取模运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，或者不带且只有一个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 并没有为定义一元减运算符 <paramref name="expression" />。类型。
                
                  - 或 -
                
                  <paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有为定义一元减运算符 <paramref name="expression" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有为定义一元减运算符 <paramref name="expression" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，或者不带且只有一个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 并没有为定义一元减运算符 <paramref name="expression" />。类型。
                
                  - 或 -
                
                  <paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>
              创建一个表示调用不带参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。
            </summary>
      <param name="constructor">
                要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  构造函数， <paramref name="constructor" /> 表示具有至少一个参数。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>
              创建一个表示调用指定类型的无参数构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。
            </summary>
      <param name="type">
                一个具有不带参数的构造函数的 <see cref="T:System.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为 <see cref="T:System.Reflection.ConstructorInfo" />，这表示不带指定类型的参数的构造函数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  该类型的 <paramref name="type" /> 表示没有无参数构造函数。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。
            </summary>
      <param name="constructor">
                要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。
              </param>
      <param name="arguments">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="arguments" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数不包含的元素数目的构造函数参数的数量相同， <paramref name="constructor" /> 表示。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。
            </summary>
      <param name="constructor">
                要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。
              </param>
      <param name="arguments">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="arguments" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的长度与 <paramref name="constructor" /> 表示的构造函数的参数数目不符。
                
                  - 或 -
                
                  <paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 表示的构造函数的相应参数类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
              创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。
               其中指定了访问构造函数初始化的字段的成员。
            </summary>
      <param name="constructor">
                要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。
              </param>
      <param name="arguments">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象。
              </param>
      <param name="members">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Reflection.MemberInfo" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个元素 <paramref name="arguments" /> 是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="members" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数不包含的元素数目的构造函数参数的数量相同， <paramref name="constructor" /> 表示。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。
                
                  - 或 -
                
                  <paramref name="members" /> 参数不具有相同数量的元素作为 <paramref name="arguments" />。
                
                  - 或 -
                
                  一个元素 <paramref name="arguments" /> 具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 表示不能分配给成员的对应元素表示的类型的类型的属性 <paramref name="members" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>
              创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。
               将访问构造函数初始化字段的成员指定为数组。
            </summary>
      <param name="constructor">
                要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。
              </param>
      <param name="arguments">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象。
              </param>
      <param name="members">
                用于填充 <see cref="T:System.Reflection.MemberInfo" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  一个元素 <paramref name="arguments" /> 是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="members" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数不包含的元素数目的构造函数参数的数量相同， <paramref name="constructor" /> 表示。
                
                  - 或 -
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。
                
                  - 或 -
                
                  <paramref name="members" /> 参数不具有相同数量的元素作为 <paramref name="arguments" />。
                
                  - 或 -
                
                  一个元素 <paramref name="arguments" /> 具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 表示不能分配给成员的对应元素表示的类型的类型的属性 <paramref name="members" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。
            </summary>
      <param name="type">
                一个表示数组的元素类型的 <see cref="T:System.Type" />。
              </param>
      <param name="bounds">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="bounds" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="bounds" /> 不表示整数类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。
            </summary>
      <param name="type">
                一个表示数组的元素类型的 <see cref="T:System.Type" />。
              </param>
      <param name="bounds">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="bounds" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="bounds" /> 不表示整数类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。
            </summary>
      <param name="type">
                一个表示数组的元素类型的 <see cref="T:System.Type" />。
              </param>
      <param name="initializers">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="initializers" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="initializers" /> 表示不能赋给该类型的类型， <paramref name="type" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。
            </summary>
      <param name="type">
                一个表示数组的元素类型的 <see cref="T:System.Type" />。
              </param>
      <param name="initializers">
                用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="initializers" /> 的元素为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="initializers" /> 表示不能赋给该类型的类型 <paramref name="type" />。
                </exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有为定义一元 not 运算符 <paramref name="expression" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
               可指定实现方法。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，或者不带且只有一个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 并没有为定义一元 not 运算符 <paramref name="expression" />。类型。
                
                  - 或 -
                
                  <paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有为定义不等运算符<paramref name="left" />。类型和<paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="liftToNull">
                若要将 <see langword="true" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="true" />；若要将 <see langword="false" /> 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 <see langword="false" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和不相等运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>
              返回表示一的补数的表达式。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              返回表示一的补数的表达式。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 <see langword="OR" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  按位 <see langword="OR" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 <see langword="OR" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和按位 <see langword="OR" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 <see langword="OR" /> 时才计算第二个操作数的条件 <see langword="false" /> 运算。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  按位 <see langword="OR" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                
                  - 或 -
                
                  <paramref name="left" />.类型和 <paramref name="right" />。类型不是同一个布尔值类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 <see langword="OR" /> 时才计算第二个操作数的条件 <see langword="false" /> 运算。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和按位 <see langword="OR" /> 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                
                  - 或 -
                
                  <paramref name="method" /> 是 <see langword="null" /> 和 <paramref name="left" />。类型和 <paramref name="right" />。类型不是同一个布尔值类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。
            </summary>
      <param name="type">
                参数或变量的类型。
              </param>
      <param name="name">
                仅用于调试或打印目的的参数或变量的名称。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。
            </summary>
      <param name="type">
                参数或变量的类型。
              </param>
      <returns>
              具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递减 1 之后再进行表达式赋值。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递减 1 之后再进行表达式赋值。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递增 1 之后再进行表达式赋值。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递增 1 之后再进行表达式赋值。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有为定义求幂运算符 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                
                  - 或 -
                
                  <paramref name="left" />.类型和/或 <paramref name="right" />。类型不是 <see cref="T:System.Double" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义幂运算符。
                
                  - 或 -
                
                  <paramref name="method" /> 是 <see langword="null" />，且 <paramref name="left" />.Type 和/或 <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。
            </summary>
      <param name="expression">
                要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="method">
                表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。
            </summary>
      <param name="instance">
                属性所属的对象。
                 如果该属性为 static/shared，则此对象必须为 null。
              </param>
      <param name="propertyName">
                索引器的名称。
              </param>
      <param name="arguments">
                用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。
            </summary>
      <param name="instance">
                属性所属的对象。
                 如果该属性为 static/shared，则此对象必须为 null。
              </param>
      <param name="indexer">
                表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。
              </param>
      <param name="arguments">
                用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。
            </summary>
      <param name="instance">
                属性所属的对象。
                 如果该属性为 static/shared，则此对象必须为 null。
              </param>
      <param name="indexer">
                表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。
              </param>
      <param name="arguments">
                用于为属性编制索引的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>
              创建一个访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                属性的包含对象。
                 对于静态属性，这可以为 null。
              </param>
      <param name="type">
                包含属性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <param name="propertyName">
                要访问的属性。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>
              创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。
                 对于静态属性，这可以为 null。
              </param>
      <param name="property">
                要将 <see cref="T:System.Reflection.PropertyInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  该属性， <paramref name="property" /> 表示不 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中) 和 <paramref name="expression" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不能赋给该属性的声明类型， <paramref name="property" /> 表示。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              使用属性访问器方法创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。
                 对于静态属性，这可以为 null。
              </param>
      <param name="propertyAccessor">
                表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  该方法的 <paramref name="propertyAccessor" /> 表示不 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中) 和 <paramref name="expression" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不能分配给所表示的方法的声明类型 <paramref name="propertyAccessor" />。
                
                  - 或 -
                
                  该方法的 <paramref name="propertyAccessor" /> 表示不是属性访问器方法。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>
              创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含一个名为 <paramref name="propertyName" /> 的属性。
                 对于静态属性，这可以为 <see langword="null" />。
              </param>
      <param name="propertyName">
                要访问的属性的名称。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为由 <see cref="T:System.Reflection.PropertyInfo" /> 表示的属性的 <paramref name="propertyName" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有名为属性 <paramref name="propertyName" /> 中定义 <paramref name="expression" />。类型或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>
              创建一个表示访问属性或字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="expression">
                一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含一个名为 <paramref name="propertyOrFieldName" /> 的属性或字段。
                 对于静态成员，这可以为 null。
              </param>
      <param name="propertyOrFieldName">
                要访问的属性或字段的名称。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示 <see cref="T:System.Reflection.PropertyInfo" /> 所表示的属性或字段的 <see cref="T:System.Reflection.FieldInfo" /> 或 <paramref name="propertyOrFieldName" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyOrFieldName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有属性或字段命名为 <paramref name="propertyOrFieldName" /> 中定义 <paramref name="expression" />。类型或其基类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示具有类型 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的常量值的表达式的 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>
              将此节点简化为更简单的表达式。
               如果 CanReduce 返回 true，则它应返回有效的表达式。
               此方法可以返回本身必须简化的另一个节点。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>
              将此节点简化为更简单的表达式。
               如果 CanReduce 返回 true，则它应返回有效的表达式。
               此方法可以返回本身必须简化的另一个节点。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>
              将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示引用相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示引用不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发具有给定类型的异常。
            </summary>
      <param name="type">
                表达式的新 <see cref="T:System.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。
            </summary>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>
              创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               可以指定在跳转时传递给标签的值。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               可以指定在跳转时传递给标签的值。
            </summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
              </param>
      <param name="value">
                将在跳转时传递给关联标签的值。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  右移位运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，否则不会正好两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 和右移位运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。
            </summary>
      <param name="variables">
                用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 对象的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。
            </summary>
      <param name="variables">
                用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 对象的集合。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  减法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <param name="conversion">
                要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，它所表示的方法返回 <see langword="void" />，而不是 <see langword="static" />（Visual Basic 中为 <see langword="Shared" />），或者并非采用两个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="left">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。
              </param>
      <param name="right">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  减法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.SwitchExpression" />，它表示具有默认分支的 <see langword="switch" /> 语句。
            </summary>
      <param name="type">
                switch 的结果类型。
              </param>
      <param name="switchValue">
                要针对每个分支测试的值。
              </param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。
              </param>
      <param name="comparison">
                要使用的相等比较方法。
              </param>
      <param name="cases">
                此 switch 表达式的分支集。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>
              创建一个表示不带默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 <see langword="switch" />。
            </summary>
      <param name="switchValue">
                要针对每个分支测试的值。
              </param>
      <param name="cases">
                此 switch 表达式的分支集。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>
              创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 <see langword="switch" />。
            </summary>
      <param name="switchValue">
                要针对每个分支测试的值。
              </param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。
              </param>
      <param name="cases">
                此 switch 表达式的分支集。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>
              创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 <see langword="switch" />。
            </summary>
      <param name="switchValue">
                要针对每个分支测试的值。
              </param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。
              </param>
      <param name="comparison">
                要使用的相等比较方法。
              </param>
      <param name="cases">
                此 switch 表达式的分支集。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>
              创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 <see langword="switch" />。
            </summary>
      <param name="switchValue">
                要针对每个分支测试的值。
              </param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。
              </param>
      <param name="comparison">
                要使用的相等比较方法。
              </param>
      <param name="cases">
                此 switch 表达式的分支集。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>
              创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 <see langword="switch" />。
            </summary>
      <param name="type">
                switch 的结果类型。
              </param>
      <param name="switchValue">
                要针对每个分支测试的值。
              </param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。
              </param>
      <param name="comparison">
                要使用的相等比较方法。
              </param>
      <param name="cases">
                此 switch 表达式的分支集。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              创建在 <see cref="T:System.Linq.Expressions.SwitchCase" /> 中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </summary>
      <param name="body">
                分支的主体。
              </param>
      <param name="testValues">
                分支的测试值。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建要在 <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 对象。
            </summary>
      <param name="body">
                分支的主体。
              </param>
      <param name="testValues">
                分支的测试值。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。
            </summary>
      <param name="fileName">
                要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。
              </param>
      <param name="language">
                要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。
              </param>
      <param name="languageVendor">
                要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。
              </param>
      <param name="documentType">
                要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。
            </summary>
      <param name="fileName">
                要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。
              </param>
      <param name="language">
                要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。
              </param>
      <param name="languageVendor">
                要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。
            </summary>
      <param name="fileName">
                要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>
              创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。
            </summary>
      <param name="fileName">
                要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。
              </param>
      <param name="language">
                要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发异常。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <returns>
              一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发具有给定类型的异常。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="type">
                表达式的新 <see cref="T:System.Type" />。
              </param>
      <returns>
              一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
              返回 <see cref="T:System.Linq.Expressions.Expression" /> 的的文本化表示形式。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的文本化表示形式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>
              创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句，但不包含 fault 和 finally 块。
            </summary>
      <param name="body">
                try 块的主体。
              </param>
      <param name="handlers">
                包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>
              创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句和一个 finally 块。
            </summary>
      <param name="body">
                try 块的主体。
              </param>
      <param name="finally">
                finally 块的主体。
              </param>
      <param name="handlers">
                包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 fault 块，但不包含 catch 语句。
            </summary>
      <param name="body">
                try 块的主体。
              </param>
      <param name="fault">
                fault 块的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 finally 块，但不包含 catch 语句。
            </summary>
      <param name="body">
                try 块的主体。
              </param>
      <param name="finally">
                finally 块的主体。
              </param>
      <returns>
              创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>
              创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Action 委托类型。
            </summary>
      <param name="typeArgs">
                Type 对象的数组，这些对象指定 System.Action 委托类型的类型参数。
              </param>
      <param name="actionType">
                在此方法返回时，包含具有特定类型参数的泛型 System.Action 委托类型。
                 如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Action 委托，则包含 null。此参数以未初始化状态传递。
              </param>
      <returns>
              如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Action 委托类型，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>
              创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。
               最后一个类型参数指定已创建委托的返回类型。
            </summary>
      <param name="typeArgs">
                Type 对象的数组，这些对象指定 System.Func 委托类型的类型参数。
              </param>
      <param name="funcType">
                在此方法返回时，包含具有特定类型参数的泛型 System.Func 委托类型。
                 如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Func 委托，则包含 null。此参数以未初始化状态传递。
              </param>
      <returns>
              如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Func 委托类型，则为 true；否则为 false。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示显式引用或装箱转换的 <see cref="T:System.Linq.Expressions.UnaryExpression" />（如果转换失败，则提供 <see langword="null" />）。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="type">
                要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个比较运行时类型标识的 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="type">
                要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 并且 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为指定值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。
              </param>
      <param name="type">
                要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 并且 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <param name="method">
                要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> 和它表示返回的方法 <see langword="void" />, ，不是 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中)，或者不带且只有一个参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> 为未定义的一元加运算符，则 <paramref name="expression" />。类型。
                
                  - 或 -
                
                  <paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>
              创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。
              </param>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  一元加运算符没有为 <paramref name="expression" />。类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              创建一个表示显式取消装箱的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="expression">
                要取消装箱的 <see cref="T:System.Linq.Expressions.Expression" />。
              </param>
      <param name="type">
                表达式的新 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。
            </summary>
      <param name="type">
                参数或变量的类型。
              </param>
      <param name="name">
                参数或变量的名称。
                 此名称仅用于调试或打印目的。
              </param>
      <returns>
              具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>
              创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。
            </summary>
      <param name="type">
                参数或变量的类型。
              </param>
      <returns>
              具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              简化节点，然后对简化的表达式调用访问者委托。
               该方法在节点不可简化时引发异常。
            </summary>
      <param name="visitor">
        <see cref="T:System.Func`2" /> 的一个实例。
              </param>
      <returns>
              要访问的表达式，或应在树中替换此表达式的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>
              介绍表达式树节点的节点类型。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>
              加法运算，如 a + b, ，不进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>
              加法复合赋值运算，如 (a += b), ，不进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>
              加法复合赋值运算，如 (a += b), ，进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>
              加法运算，如 (a + b), ，进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>
              按位或逻辑 <see langword="AND" /> 操作，如 (a &amp; b) 在 C# 和 (a And b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>
              在条件 <see langword="AND" /> 仅当第一个操作数的计算结果为才计算第二个操作数的操作 <see langword="true" />。
               它对应于 (a &amp;&amp; b) 在 C# 和 (a AndAlso b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>
              按位或逻辑 <see langword="AND" /> 复合赋值运算，如 (a &amp;= b) C# 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>
              索引操作在一维数组中，如 array[index] 在 C# 或 array(index) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>
              获取一维数组的长度，如操作 array.Length。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>
              赋值运算，如 (a = b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>
              表达式的块。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>
              某个方法调用，如在 obj.sampleMethod() 表达式。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>
              一个表示空合并操作，如节点 (a ?? b) 在 C# 或 If(a, b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>
              条件运算，如 a &gt; b ? a : b 在 C# 或 If(a &gt; b, a, b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>
              常量的值。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>
              强制转换或转换操作中，如 (SampleType)obj C# 中或 CType(obj, SampleType) 在 Visual Basic 中。
               对于数值的转换，如果转换后的值对于目标类型来说太大不引发异常。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>
              强制转换或转换操作中，如 (SampleType)obj C# 中或 CType(obj, SampleType) 在 Visual Basic 中。
               对于数值的转换，如果转换后的值不符合目标类型是引发异常。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>
              调试信息。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>
              一元递减操作，如 (a - 1) C# 和 Visual Basic 中。
               该对象 a 不应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>
              默认值。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>
              除法运算，如 (a / b), ，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>
              除的复合赋值运算，如 (a /= b), ，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>
              动态操作。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>
              一个表示相等比较，如节点 (a == b) 在 C# 或 (a = b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>
              按位或逻辑 <see langword="XOR" /> 操作，如 (a ^ b) 在 C# 或 (a Xor b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>
              按位或逻辑 <see langword="XOR" /> 复合赋值运算，如 (a ^= b) C# 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>
              扩展表达式。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>
              一个"转到"表达式，如 goto Label 在 C# 或 GoTo Label 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>
              "大于"比较，如 (a &gt; b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>
              "大于或等于"比较，如 (a &gt;= b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>
              一元递增操作，如 (a + 1) C# 和 Visual Basic 中。
               该对象 a 不应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>
              索引操作或访问不采用参数的属性的操作。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>
              操作调用的委托或 lambda 表达式，如 sampleDelegate.Invoke()。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>
              一个 <see langword="false" /> 条件值。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>
              一个 <see langword="true" /> 条件值。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>
              标签。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>
              Lambda 表达式，如 a =&gt; a + a 在 C# 或 Function(a) a + a 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>
              按位左移运算，如 (a &lt;&lt; b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>
              按位左移复合赋值运算，如 (a &lt;&lt;= b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>
              "小于"比较，如 (a &lt; b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>
              "小于或等于"比较，如 (a &lt;= b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>
              创建一个新的操作的 <see cref="T:System.Collections.IEnumerable" /> 对象，并对其进行初始化从列表中的元素，如 new List&lt;SampleType&gt;(){ a, b, c } 在 C# 或 Dim sampleList = { a, b, c } 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>
              一个循环，如 for 或 while。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>
              从一个字段或属性，如读取操作 obj.SampleProperty。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>
              运算，创建一个新的对象并初始化一个或多个成员，如 new Point { X = 1, Y = 2 } 在 C# 或 New Point With {.X = 1, .Y = 2} 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>
              算术余数运算，如 (a % b) 在 C# 或 (a Mod b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>
              算术余数复合赋值运算，如 (a %= b) C# 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>
              乘法运算，如 (a * b), ，不进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>
              乘法复合赋值运算，如 (a *= b), ，不进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>
              乘法复合赋值运算，如 (a *= b), ，，进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>
              乘法运算，如 (a * b), ，，进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>
              算术求反运算，如 (-a)。
               该对象 a 不应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>
              算术求反运算，如 (-a), ，，进行溢出检查。
               该对象 a 不应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>
              调用构造函数以创建新的对象，如操作 new SampleType()。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>
              创建一个新数组，其中每个维度的下限指定，如操作 new SampleType[dim1, dim2] 在 C# 或 New SampleType(dim1, dim2) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>
              操作，创建一个新的一维数组并对其进行初始化从列表中的元素，如 new SampleType[]{a, b, c} 在 C# 或 New SampleType(){a, b, c} 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>
              按位求补或逻辑求反运算。
               在 C# 中，则等同于 (~a) 整型和 (!a) 布尔值。
               在 Visual Basic 中，则等同于 (Not a)。
               该对象 a 不应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>
              不相等比较，如 (a != b) 在 C# 或 (a &lt;&gt; b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>
              一个二进制反码运算，如 (~a) C# 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>
              按位或逻辑 <see langword="OR" /> 操作，如 (a | b) 在 C# 或 (a Or b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>
              按位或逻辑 <see langword="OR" /> 复合赋值运算，如 (a |= b) C# 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>
              短路条件 <see langword="OR" /> 操作，如 (a || b) 在 C# 或 (a OrElse b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>
              对参数或变量的表达式的上下文中定义的引用。
               有关更多信息，请参见<see cref="T:System.Linq.Expressions.ParameterExpression" />。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>
              一元后缀递减，如 (a--)。
               该对象 a 应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>
              一元后缀递增，如 (a++)。
               该对象 a 应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>
              如引发数字进行幂运算的数学运算 (a ^ b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>
              如引发数字进行幂运算的复合赋值运算 (a ^= b) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>
              一元前缀递减，如 (--a)。
               该对象 a 应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>
              一元前缀递增，如 (++a)。
               该对象 a 应就地修改。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>
              具有类型的常量值的表达式 <see cref="T:System.Linq.Expressions.Expression" />。
               一个 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 节点可以包含对它所代表的表达式的上下文中定义的参数的引用。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>
              按位右移运算，如 (a &gt;&gt; b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>
              按位右移复合赋值运算，如 (a &gt;&gt;= b)。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>
              运行时变量的列表。
               有关详细信息，请参阅<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>
              减法运算，如 (a - b), ，不进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>
              减法复合赋值运算，如 (a -= b), ，不进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>
              减法复合赋值运算，如 (a -= b), ，，进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>
              算术减法运算，如 (a - b), ，，进行溢出检查，针对数值操作数。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>
              一个切换操作，如 <see langword="switch" /> 在 C# 或 <see langword="Select Case" /> 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>
              引发异常，如操作 throw new Exception()。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>
              一个 <see langword="try-catch" /> 表达式。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>
              显式引用或装箱转换在其中 <see langword="null" /> 如果转换失败，如提供 (obj as SampleType) 在 C# 或 TryCast(obj, SampleType) 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>
              确切类型测试。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>
              一种类型测试，如 obj is SampleType 在 C# 或 TypeOf obj is SampleType 在 Visual Basic 中。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>
              一元正运算，如 (+a)。
               预定义的一元正运算的结果是操作数的值，但用户定义的实现可能有不寻常的结果。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>
              取消装箱值类型的操作，如 <see langword="unbox" /> 和 <see langword="unbox.any" /> MSIL 中的说明。
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>
              表示表达式树的访问者或重写者。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>
              初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>
              将调度到此类中更专用的访问方法之一的表达式的列表。
            </summary>
      <param name="nodes">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式列表中，如果任何一个元素已修改，则否则，返回原始的表达式列表。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>
              将调度到此类中更专用的访问方法之一的表达式。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>
              使用指定的元素访问者的集合中的所有节点的都访问。
            </summary>
      <param name="nodes">
                要访问的节点。
              </param>
      <param name="elementVisitor">
                一个委托，访问单个元素，根据需要将其替换为新元素。
              </param>
      <typeparam name="T">
                节点的类型。
              </typeparam>
      <returns>
              修改后的节点列表中，已被修改的任何元素;否则，返回原始的节点列表。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>
              访问表达式，将结果返回到原始的表达式类型转换。
            </summary>
      <param name="nodes">
                要访问的表达式。
              </param>
      <param name="callerName">
                调用的方法; 的名称使用报表来更好的错误消息报告。
              </param>
      <typeparam name="T">
                表达式的类型。
              </typeparam>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点则 visit 方法返回不同的类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>
              访问表达式，将结果返回到原始的表达式类型转换。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <param name="callerName">
                调用的方法; 的名称使用报表来更好的错误消息报告。
              </param>
      <typeparam name="T">
                表达式的类型。
              </typeparam>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点则 visit 方法返回不同的类型。
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.BinaryExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.BlockExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.CatchBlock" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
              访问 <see cref="T:System.Linq.Expressions.ConstantExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
              访问 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
              访问 <see cref="T:System.Linq.Expressions.DefaultExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.DynamicExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.ElementInit" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>
              访问扩展的表达式的子级。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.IndexExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.InvocationExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.LabelExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>
              访问 <see cref="T:System.Linq.Expressions.LabelTarget" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.Expression`1" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <typeparam name="T">
                该委托的类型。
              </typeparam>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.ListInitExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.LoopExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MemberExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MemberAssignment" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MemberBinding" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MemberListBinding" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.NewExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
              访问 <see cref="T:System.Linq.Expressions.ParameterExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.SwitchCase" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.TryExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
              访问的子级 <see cref="T:System.Linq.Expressions.UnaryExpression" />。
            </summary>
      <param name="node">
                要访问的表达式。
              </param>
      <returns>
              修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>
              表示无条件跳转。
               这包括返回语句，break 和 continue 语句以及其他跳转。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>
              "Go to"的表达式的种类。
               提供信息为目的。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 对象，表示"go to"的表达式的种类。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>
              在此节点可以跳转至目标标签。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象，表示此节点的目标标签。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="target">
        <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 结果属性。
              </param>
      <param name="value">
        <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>
              如果目标的类型 System.Void，值将传递到目标，则为 null。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象表示的值传递给目标或 null。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>
              指定内容类型的跳转这 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示 break 语句。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示 continue 语句。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示跳转到某个位置。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>
              一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示 return 语句。
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>
              提供用于访问多个树节点（DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 InexExpression）的参数的内部接口。
                不应使用此 API。
                它只会由于 DLL 重构而公开并仅用于内部性能优化。
            
              这能够实现两次优化，从而减少了表达式树的大小。
                第一次优化可以使树节点保留在 IList &lt;T&gt; 上而不是 ReadOnlyCollection 上。
                IList&lt;T&gt; 将节约用在为每个节点分配 ReadOnlyCollection 方面的成本。
                第二次优化能够创建专用的子类，可保留特定数量的参数（例如，Block2、Block3、Block4）。
                因此，这些节点避免了分配用于存储其元素的 ReadOnlyCollection 和数组，从而为每个节点节省了 32 个字节。
            
              表达式树节点继续公开 ReadOnlyCollections 的原始 LINQ 属性。
                这些节点通过重复使用用于存储数组或元素（通常存储在数组中）的字段来执行此操作。
            
              对于数组用例，集合将类型化为 IList&lt;T&gt;，而不是 ReadOnlyCollection&lt;T&gt;。
                当节点在最初构造时它是一个数组。
                当编译器访问成员时它会使用此接口。
                访问数组元素可以将数组升级到 ReadOnlyCollection。
            
              对于对象用例，我们会存储类型化为对象的字段中的第一个参数。
                当最初构造该节点时，该字段将持有该表达式。
                编译器通过此接口访问参数，第一个参数的访问器使用 Expression.ReturnObject 返回用于处理表达式或 ReadOnlyCollection 用例的对象。
                当用户访问 ReadOnlyCollection 时，将更新对象字段以直接保留 ReadOnlyCollection。
            
              表达式始终返回相同的 ReadOnlyCollection，这一点很重要。
                否则，将中断重写树查看器。
                从 LINQ v1 返回不同的 ReadOnlyCollections 形成相同的表达式节点，这是一个重大突破。
                当前用户可以依赖对象标识来区分该节点是否已更改。
                在重载字段中存储 ReadOnlyCollection 既可减少内存使用量，又可保持公共 API 兼容性。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>
              返回表达式树节点的参数数目。
                不应使用此类型。
                仅在程序集重构时公开，并且仅用于内部性能优化。
            </summary>
      <returns>
              作为 <see cref="T:System.Int32" /> 的表达式树节点的参数数目。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>
              索引时返回参数，当索引超出界限时引发。
                不应使用此类型。
                仅在程序集重构时公开，并且仅用于内部性能优化。
            </summary>
      <param name="index">
                参数的索引。
              </param>
      <returns>
              索引时返回参数，当索引超出界限 <see cref="T:System.Linq.Expressions.Expression" /> 时引发。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>
              提供用于访问 DynamicExpression 树节点的参数及 CallSite 和重写功能的内部接口。
                不应使用此 API。
                由于 DLL 重构，它只能是公共的；并且仅用于内部性能优化。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>
              根据需要创建 CallSite 并返回 DynamicExpression 的多态内联缓存的 CallSite。
                不应使用此类型。
                仅在程序集重构时公开，并且仅用于内部性能优化。
            </summary>
      <returns>
              DynamicExpression 的多态内联缓存的 CallSite。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>
              获取 CallSite 使用的委托类型，该类型即为在动态表达式的多形态内联缓冲中使用的规则类型。
            </summary>
      <returns>
              CallSite 使用的委托类型。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>
              重写此节点，该节点可将动态表达式的参数替换为提供的值。
              args 的数目需要与当前表达式的数目匹配。
                不应使用此类型。
                仅在程序集重构时公开，并且仅用于内部性能优化。
                此辅助方法允许重新编写要独立于特定实现类的节点，该实现类是从调用站点正在使用的 DynamicExpression 派生的。
            </summary>
      <param name="args">
                用于替换此节点的参数。
              </param>
      <returns>
              重写的节点，但如果未进行任何更改，则返回相同的节点。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>
              表示对一个属性或数组进行索引。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>
              获取将用于为属性或数组编制索引的参数。
            </summary>
      <returns>
              包含将用于为属性或数组编制索引的参数的只读集合。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>
              如果表达式表示索引属性，则获取属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则返回 null。
            </summary>
      <returns>
              如果表达式表示索引属性，则为属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则为 null。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>
              要编制索引的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.Expression" />，表示要编制索引的对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="object">
                结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 属性。
              </param>
      <param name="arguments">
                结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              返回表达式树节点的参数数目。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              索引时返回参数，当索引超出界限时引发。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <param name="index">
                自变量的索引。
              </param>
      <returns>
              返回 <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>
              表示一个将委托或 lambda 表达式应用到一个自变量表达式列表的表达式。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>
              获取应用委托或 lambda 表达式的参数。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示应用委托的参数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>
              获取要应用的委托或 lambda 表达式。
            </summary>
      <returns>
              表示要应用的委托的 <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>
              返回此表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>
              获取此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="expression">
                结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 属性。
              </param>
      <param name="arguments">
                结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              返回表达式树节点的参数数目。
                不应使用此成员。
                仅在程序集重构时公开，并且仅用于内部性能优化。
            </summary>
      <returns>
              作为 <see cref="T:System.Int32" /> 的表达式树节点的参数数目。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              索引时返回参数，当索引超出界限时引发。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <param name="index">
                参数的索引。
              </param>
      <returns>
              索引处作为 <see cref="T:System.Linq.Expressions.Expression" /> 的参数，如果索引超出界限则引发。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>
              表示一个标签，可以放置在任何 <see cref="T:System.Linq.Expressions.Expression" /> 上下文。
               如果它跳转到，它会提供相应的值 <see cref="T:System.Linq.Expressions.GotoExpression" />。
               否则，它接收中的值 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />。
               如果 <see cref="T:System.Type" /> 等于 System.Void，则应提供任何值。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>
              值 <see cref="T:System.Linq.Expressions.LabelExpression" /> 当通过常规控制流到达标签时 （例如，不跳转到）。
            </summary>
      <returns>
              表示值的表达式对象 <see cref="T:System.Linq.Expressions.LabelExpression" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>
              返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 此标签相关联。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 此标签相关联。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="target">
        <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 结果属性。
              </param>
      <param name="defaultValue">
        <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 结果属性
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>
              用来表示目标的 <see cref="T:System.Linq.Expressions.GotoExpression" />。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>
              获取标签的名称。
            </summary>
      <returns>
              标签的名称。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>
              返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>
              跳转到标签时传递的值的类型 (或 <see cref="T:System.Void" /> 如果应该不传递任何值)。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示跳转到标签时传递的值类型或 <see cref="T:System.Void" /> 如果应该不传递任何值
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>
              介绍 lambda 表达式。
               它捕获一个类似于 .NET 方法主体的代码块。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>
              获取 lambda 表达式的主体。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 lambda 表达式的主体。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>
              将生成一个委托，表示 lambda 表达式。
            </summary>
      <returns>
              一个 <see cref="T:System.Delegate" /> ，其中包含 lambda 表达式的已编译的版本。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>
              生成表示 Lambda 表达式的已解释或已编译委托。
            </summary>
      <param name="preferInterpretation">
                如果可用，则为 <see langword="true" />，指示表达式应编译为已解释的形式；否则为 <see langword="false" />。
              </param>
      <returns>
              一个委托，表示 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 对象所描述的已编译 Lambda 表达式。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>
              将生成一个委托，表示 lambda 表达式。
            </summary>
      <param name="debugInfoGenerator">
                由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。
              </param>
      <returns>
              一个包含已编译的版本的 lambda 的委托。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>
              获取 lambda 表达式的名称。
            </summary>
      <returns>
              Lambda 表达式的名称。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>
              获取 lambda 表达式的参数。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示 lambda 表达式的参数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>
              获取 lambda 表达式的返回类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示 lambda 表达式的类型。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>
              获取一个值，指示是否将使用尾调用优化编译 lambda 表达式。
            </summary>
      <returns>
              如果 lambda 表达式将编译用尾调用优化，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>
              表示具有集合初始值设定项的构造函数调用。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>
              获取一个值，该值指示是否可以减少表达式目录树节点。
            </summary>
      <returns>
              如果可以简化节点，则为 True；否则为 false。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>
              获取用于初始化集合的元素初始值设定项。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.ElementInit" /> 表示将用来初始化集合的元素的对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>
              获取包含对集合类型的构造函数的调用的表达式。
            </summary>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" /> ，它表示集合类型的构造函数调用。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>
              返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>
              将二进制表达式节点简化为更简单的表达式。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 结果属性。
              </param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>
              表示无限循环。
               可通过“中断”退出该循环。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.Expression" /> ，它是循环的正文。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，它是循环的正文。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体中断语句目标。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体中断语句目标。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体继续语句目标。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体继续语句目标。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>
              返回此表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="breakLabel">
        <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 结果属性。
              </param>
      <param name="continueLabel">
        <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 结果属性。
              </param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>
              表示对象的字段或属性的赋值操作。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>
              获取要分配给字段或属性的表达式。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，表示要分配给该字段或属性的值。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>
              提供表示绑定的类派生自的基类，这些绑定用于对新创建对象的成员进行初始化。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>
              初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 类的新实例。
            </summary>
      <param name="type">
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 的区分类的绑定所表示的类型。
              </param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 表示字段或属性进行初始化。
              </param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>
              获取表示绑定的类型。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>
              获取字段或属性进行初始化。
            </summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 表示字段或属性进行初始化。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
              返回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的的文本化表示形式。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文本化表示形式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
              描述中使用的绑定类型 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 对象。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>
              一个绑定，它表示正在初始化表达式的值的成员。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>
              一个绑定，它表示正在初始化的类型成员 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 从元素的列表。
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>
              一个绑定，它表示递归初始化某个成员的成员。
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>
              表示访问字段或属性。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>
              获取包含对象的字段或属性。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示字段或属性的包含对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>
              获取字段或属性进行访问。
            </summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 表示字段或要访问属性。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>
              表示调用构造函数并初始化新对象的一个或多个成员。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>
              获取描述如何初始化新创建的对象的成员的绑定。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 介绍如何将成员初始化的对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>
              获取一个值，该值指示是否可以减少表达式目录树节点。
            </summary>
      <returns>
              如果可以简化节点，则为 True；否则为 false。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>
              获取表示构造函数调用的表达式。
            </summary>
      <returns>
              一个 <see cref="T:System.Linq.Expressions.NewExpression" /> ，它表示构造函数调用。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>
              返回表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
              减少了 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 为简单的表达式。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 结果属性。
              </param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>
              表示初始化新创建对象的一个集合成员的元素。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>
              获取元素初始值设定项初始化新创建的对象的集合成员。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象来初始化与集合成员。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>
              表示初始化新创建对象的一个成员的成员。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>
              获取描述如何初始化某个成员的成员的绑定。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 描述如何初始化成员的成员的对象。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>
              表示对静态方法或实例方法的调用。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>
              获取表示所调用方法的参数的表达式集合。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示所调用方法的参数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>
              获取要调用的方法的 <see cref="T:System.Reflection.MethodInfo" />。
            </summary>
      <returns>
              表示所调用的方法的 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>
              获取表示实例方法调用的实例或静态方法调用的 null 的 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              表示接收对象的方法的 <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="object">
                结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性。
              </param>
      <param name="arguments">
                结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              返回表达式树节点的参数数目。
                不应使用此成员。
                仅在程序集重构时公开，并且仅用于内部性能优化。
            </summary>
      <returns>
              表达式树节点作为参数的数目  <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              索引时返回参数，当索引超出界限时引发。
                不应使用此成员。
                由于程序集重构，只能为公共的；并且在内部用于性能优化。
            </summary>
      <param name="index">
                自变量的索引。
              </param>
      <returns>
              返回 <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>
              表示创建一个新数组，并可能初始化该新数组的元素。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
              如果已获取数组的界限的值 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, ，或要初始化新的数组的元素的值的值 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.Expression" /> 表示数组的界限，或者初始化值的对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="expressions">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>
              表示一个构造函数调用。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>
              获取构造函数的参数。
            </summary>
      <returns>
              一组 <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示构造函数的参数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>
              获取被调用的构造函数。
            </summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" />，表示被调用的构造函数。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>
              获取可检索用构造函数参数初始化的字段值的成员。
            </summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 对象的集合，它表示可检索用构造函数参数初始化的字段值的成员。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>
              返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="arguments">
                结果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              获取表达式树节点的参数数目。
            </summary>
      <returns>
              表达式树节点的参数数目。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              索引时返回自变量，当索引超出界限时引发。
            </summary>
      <param name="index">
                自变量的索引。
              </param>
      <returns>
              索引处的参数，当索引超出界限时引发。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>
              表示一个命名的参数表达式。
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              调度到此节点类型的特定 Visit 方法。
               例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。
            </summary>
      <param name="visitor">
                对此节点进行访问的访问者。
              </param>
      <returns>
              对此节点访问的结果。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>
              指示此 ParameterExpression 是作为要视作 <see langword="ByRef" /> 参数。
            </summary>
      <returns>
              如果此为 ParameterExpression 是 <see langword="ByRef" /> 参数，否则为 false。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>
              获取参数或变量的名称。
            </summary>
      <returns>
              包含参数名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>
              一个表达式，提供变量的运行时读/写权限。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>
              返回表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>
              变量或参数为其提供运行时访问权限。
            </summary>
      <returns>
              包含运行时访问权限，将提供的参数的只读集合。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>
              表示的一种情况 <see cref="T:System.Linq.Expressions.SwitchExpression" />。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>
              获取此用例的正文。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示区分大小的块的主体对象。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>
              获取这种情况下的值。
               为执行选择这种情况下当 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 与任何这些值匹配。
            </summary>
      <returns>
              此事例块的值的只读集合。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>
              返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="testValues">
        <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 结果属性。
              </param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>
              表示通过将控制权传递给处理多个选择的控件表达式 <see cref="T:System.Linq.Expressions.SwitchCase" />。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>
              获取的集合 <see cref="T:System.Linq.Expressions.SwitchCase" /> 为该交换机的对象。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象的集合。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>
              获取的相等比较方法，如果有的话。
            </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 对象，表示相等比较方法。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>
              获取为该交换机的测试。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示为该交换机测试。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>
              返回表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>
              获取为该交换机的测试。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示为该交换机测试。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="switchValue">
        <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 结果属性。
              </param>
      <param name="cases">
        <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 结果属性。
              </param>
      <param name="defaultBody">
        <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>
              存储用于发出源文件调试符号信息所必要的信息，尤其是文件名和唯一的语言标识符。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>
              如果有的话，则返回文档类型的唯一标识符。
               默认值为一个文本文件的 GUID。
            </summary>
      <returns>
              文档类型的唯一标识符。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>
              源文件名。
            </summary>
      <returns>
              表示源文件的名称的字符串。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>
              如果有的话，则返回该语言的唯一标识符。
            </summary>
      <returns>
              语言的唯一标识符
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>
              如果有的话，则返回的语言供应商的唯一标识符。
            </summary>
      <returns>
              语言供应商的唯一标识符。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>
              表示一个 try/catch/finally/fault 块。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.Expression" /> 表示 try 块的正文。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 try 块的正文。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.Expression" /> 表示 fault 块。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 fault 块。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>
              获取 <see cref="T:System.Linq.Expressions.Expression" /> 表示 finally 块。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 finally 块。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>
              获取的集合 <see cref="T:System.Linq.Expressions.CatchBlock" /> 与 try 块关联的表达式。
            </summary>
      <returns>
              集合 <see cref="T:System.Linq.Expressions.CatchBlock" /> 与 try 块关联的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>
              返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="body">
        <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 结果属性。
              </param>
      <param name="handlers">
        <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 结果属性。
              </param>
      <param name="finally">
        <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 结果属性。
              </param>
      <param name="fault">
        <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>
              表示表达式和类型之间的操作。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>
              获取类型测试操作的表达式操作数。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示表达式操作数的类型测试操作。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>
              返回表达式的节点类型。
               重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。
            </summary>
      <returns>
              该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>
              获取此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>
              获取类型测试操作的类型操作数。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，它表示的类型操作数的类型测试操作。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>
              表示具有一元运算符的表达式。
            </summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>
              获取一个值，该值指示是否可以减少表达式目录树节点。
            </summary>
      <returns>
              如果一个节点可以降低，否则为 false，则为 true。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>
              获取一个值，该值指示表达式目录树节点是否表示向操作员的提升的调用。
            </summary>
      <returns>
        <see langword="true" /> 如果该节点表示的提升的调用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>
              获取一个值，该值指示表达式目录树节点是否表示对其返回类型提升为可以为 null 的类型的运算符的提升的调用。
            </summary>
      <returns>
        <see langword="true" /> 如果该运算符的返回类型提升为可以为 null 的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>
              获取一元运算的实现方法。
            </summary>
      <returns>
              表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>
              返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。
            </summary>
      <returns>
              用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>
              获取一元运算的操作数。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示一元运算的操作数。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>
              将表达式节点简化为更简单的表达式。
            </summary>
      <returns>
              已简化的表达式。
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>
              获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。
            </summary>
      <returns>
              表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>
              创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
               如果所有子级均相同，它将返回此表达式。
            </summary>
      <param name="operand">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 结果属性。
              </param>
      <returns>
              如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
            </returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>
              表示排序操作的结果。
            </summary>
      <typeparam name="T">
                数据源的内容类型。
              </typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>
              表示排序操作的结果。
            </summary>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>
              提供针对特定数据源（其中数据类型未未知）评估查询的功能。
            </summary>
      <typeparam name="T">
                数据源中数据的类型。
              </typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>
              提供针对特定数据源（其中数据类型未指定）评估查询的功能。
            </summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
              获取与此实例关联的表达式树时返回的元素的类型 <see cref="T:System.Linq.IQueryable" /> 执行。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，表示执行与此对象关联的表达式树时返回的元素的类型。
            </returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
              获取与实例相关联的表达式目录树 <see cref="T:System.Linq.IQueryable" />。
            </summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的此实例与该键相关联 <see cref="T:System.Linq.IQueryable" />。
            </returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>
              获取与此数据源相关联的查询提供程序。
            </summary>
      <returns>
        <see cref="T:System.Linq.IQueryProvider" /> 此数据源与该键相关联。
            </returns>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
              定义用于创建和执行查询所描述的方法 <see cref="T:System.Linq.IQueryable" /> 对象。
            </summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
              构造 <see cref="T:System.Linq.IQueryable" /> 可以评估所表示的指定的表达式目录树查询的对象。
            </summary>
      <param name="expression">
                一个表示的表达式树 LINQ 查询。
              </param>
      <returns>
        <see cref="T:System.Linq.IQueryable" /> ，它可计算指定的表达式目录树所表示的查询。
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
              构造 <see cref="T:System.Linq.IQueryable`1" /> 可以评估所表示的指定的表达式目录树查询的对象。
            </summary>
      <param name="expression">
                一个表示的表达式树 LINQ 查询。
              </param>
      <typeparam name="TElement">
                中的元素的类型 <see cref="T:System.Linq.IQueryable`1" /> 返回。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，它可计算指定的表达式目录树所表示的查询。
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>
              执行指定的表达式树所表示的查询。
            </summary>
      <param name="expression">
                一个表示的表达式树 LINQ 查询。
              </param>
      <returns>
              执行指定的查询所得到的值。
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>
              执行指定的表达式树所表示的强类型查询。
            </summary>
      <param name="expression">
                一个表示的表达式树 LINQ 查询。
              </param>
      <typeparam name="TResult">
                执行查询所得到的值的类型。
              </typeparam>
      <returns>
              执行指定的查询所得到的值。
            </returns>
    </member>
  </members>
</doc>