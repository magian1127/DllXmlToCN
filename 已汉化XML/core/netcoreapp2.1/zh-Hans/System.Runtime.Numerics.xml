<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>
              表示任意大的带符号整数。
            </summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构使用的字节数组中的值。
            </summary>
      <param name="value">
                顺序为 little-endian 的字节值的数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构使用 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="value">
                十进制数。
              </param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构使用双精度浮点值。
            </summary>
      <param name="value">
                一个双精度浮点值。
              </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 的值为 <see cref="F:System.Double.NaN" />。
                
                  - 或 -
                
                  <paramref name="value" /> 的值为 <see cref="F:System.Double.NegativeInfinity" />。
                
                  - 或 -
                
                  <paramref name="value" /> 的值为 <see cref="F:System.Double.PositiveInfinity" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构，使用 32 位有符号的整数值。
            </summary>
      <param name="value">
                32 位带符号整数。
              </param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构，使用 64 位有符号的整数值。
            </summary>
      <param name="value">
                64 位带符号整数。
              </param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构使用单精度浮点值。
            </summary>
      <param name="value">
                单精度浮点值。
              </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 的值为 <see cref="F:System.Single.NaN" />。
                
                  - 或 -
                
                  <paramref name="value" /> 的值为 <see cref="F:System.Single.NegativeInfinity" />。
                
                  - 或 -
                
                  <paramref name="value" /> 的值为 <see cref="F:System.Single.PositiveInfinity" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 结构，使用 32 位无符号的整数值。
            </summary>
      <param name="value">
                32 位无符号整数值。
              </param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.BigInteger" /> 具有 64 位无符号的整数值的结构。
            </summary>
      <param name="value">
                64 位无符号整数。
              </param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>
              获取数值的绝对值 <see cref="T:System.Numerics.BigInteger" /> 对象。
            </summary>
      <param name="value">
                数字。
              </param>
      <returns>
              数值的绝对值 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              添加两个 <see cref="T:System.Numerics.BigInteger" /> 值，并返回结果。
            </summary>
      <param name="left">
                要相加的第一个值。
              </param>
      <param name="right">
                要相加的第二个值。
              </param>
      <returns>
        <paramref name="left" /> 与 <paramref name="right" /> 的和。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              比较两个 <see cref="T:System.Numerics.BigInteger" /> 值，并返回一个整数，指示第一个值是小于、 等于还是大于第二个值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="left" /> 和 <paramref name="right" /> 的相对值，如下表所示。
            
                      值
                    
                      条件
                    
                      小于零
                    
                      <paramref name="left" /> 小于 <paramref name="right" />。
                    
                      零
                    
                      <paramref name="left" /> 等于 <paramref name="right" />。
                    
                      大于零
                    
                      <paramref name="left" /> 大于 <paramref name="right" />。
                    </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>
              将此实例与 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位无符号整数的值。
            </summary>
      <param name="other">
                要比较的 64 位无符号整数。
              </param>
      <returns>
              指示此实例的相关值的有符号的整数和 <paramref name="other" />, 下, 表中所示。
            
                      返回值
                    
                      描述
                    
                      小于零
                    
                      当前实例是小于 <paramref name="other" />。
                    
                      零
                    
                      当前实例等于 <paramref name="other" />。
                    
                      大于零
                    
                      当前实例是否大于 <paramref name="other" />。
                    </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>
              将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
              有符号的整数，指示当前实例的关系 <paramref name="obj" /> 参数，如下面的表中所示。
            
                      返回值
                    
                      描述
                    
                      小于零
                    
                      当前实例是小于 <paramref name="obj" />。
                    
                      零
                    
                      当前实例等于 <paramref name="obj" />。
                    
                      大于零
                    
                      当前实例是否大于 <paramref name="obj" />, ，或 <paramref name="obj" /> 参数是 <see langword="null" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Numerics.BigInteger" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>
              将此实例与第二个 <see cref="T:System.Numerics.BigInteger" /> ，并返回一个整数，指示此实例的值是小于、 等于还是大于指定对象的值。
            </summary>
      <param name="other">
                要比较的对象。
              </param>
      <returns>
              有符号的整数值，该值指示此实例与关系 <paramref name="other" />, 下, 表中所示。
            
                      返回值
                    
                      描述
                    
                      小于零
                    
                      当前实例是小于 <paramref name="other" />。
                    
                      零
                    
                      当前实例等于 <paramref name="other" />。
                    
                      大于零
                    
                      当前实例是否大于 <paramref name="other" />。
                    </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>
              将此实例与 64 位带符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位带符号整数的值。
            </summary>
      <param name="other">
                要比较的 64 位带符号整数。
              </param>
      <returns>
              有符号的整数值，该值指示此实例与关系 <paramref name="other" />, 下, 表中所示。
            
                      返回值
                    
                      描述
                    
                      小于零
                    
                      当前实例是小于 <paramref name="other" />。
                    
                      零
                    
                      当前实例等于 <paramref name="other" />。
                    
                      大于零
                    
                      当前实例是否大于 <paramref name="other" />。
                    </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              除一个 <see cref="T:System.Numerics.BigInteger" /> 值除以另一个复数并返回结果。
            </summary>
      <param name="dividend">
                要作为被除数的值。
              </param>
      <param name="divisor">
                要作为除数的值。
              </param>
      <returns>
              相除后的商。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> 为 0 （零）。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>
              除一个 <see cref="T:System.Numerics.BigInteger" /> 值除以另一个，返回的结果，并在输出参数返回余数。
            </summary>
      <param name="dividend">
                要作为被除数的值。
              </param>
      <param name="divisor">
                要作为除数的值。
              </param>
      <param name="remainder">
                此方法返回时，包含 <see cref="T:System.Numerics.BigInteger" /> 值，该值表示从除法的余数。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              相除后的商。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> 为 0 （零）。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>
              返回一个值，该值指示当前实例与 64 位带符号整数是否具有相同的值。
            </summary>
      <param name="other">
                要比较的 64 位带符号整数值。
              </param>
      <returns>
        <see langword="true" /> 如果 64 位带符号的整数与当前实例具有相同的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否当前实例与另一个指定 <see cref="T:System.Numerics.BigInteger" /> 对象具有相同的值。
            </summary>
      <param name="other">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果此 <see cref="T:System.Numerics.BigInteger" /> 对象和 <paramref name="other" /> 具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>
              返回一个值，该值指示当前实例与指定的对象是否具有相同的值。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
              如果 <paramref name="obj" /> 参数是 <see cref="T:System.Numerics.BigInteger" /> 对象，并且其值等于当前 <see cref="T:System.Numerics.BigInteger" /> 实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>
              返回一个值，该值指示当前实例与 64 位无符号整数是否具有相同的值。
            </summary>
      <param name="other">
                要比较的 64 位无符号整数。
              </param>
      <returns>
        <see langword="true" /> 如果当前实例与 64 位无符号的整数具有相同的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>
              返回当前哈希代码 <see cref="T:System.Numerics.BigInteger" /> 对象。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              查找两个最大公约 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                第一个值。
              </param>
      <param name="right">
                第二个值。
              </param>
      <returns>
              最大公约数 <paramref name="left" /> 和 <paramref name="right" />。
            </returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>
              指示是否当前的值 <see cref="T:System.Numerics.BigInteger" /> 对象是偶数。
            </summary>
      <returns>
        <see langword="true" /> 如果值 <see cref="T:System.Numerics.BigInteger" /> 对象是一个偶数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>
              指示是否当前的值 <see cref="T:System.Numerics.BigInteger" /> 对象是 <see cref="P:System.Numerics.BigInteger.One" />。
            </summary>
      <returns>
        <see langword="true" /> 如果值 <see cref="T:System.Numerics.BigInteger" /> 对象是 <see cref="P:System.Numerics.BigInteger.One" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>
              指示是否当前的值 <see cref="T:System.Numerics.BigInteger" /> 对象是 2 的幂。
            </summary>
      <returns>
        <see langword="true" /> 如果值 <see cref="T:System.Numerics.BigInteger" /> 对象是 2 的幂; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>
              指示是否当前的值 <see cref="T:System.Numerics.BigInteger" /> 对象是 <see cref="P:System.Numerics.BigInteger.Zero" />。
            </summary>
      <returns>
        <see langword="true" /> 如果值 <see cref="T:System.Numerics.BigInteger" /> 对象是 <see cref="P:System.Numerics.BigInteger.Zero" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>
              返回指定数字的自然对数（底为 <see langword="e" />）。
            </summary>
      <param name="value">
                要查找其对数的数字。
              </param>
      <returns>
              自然 (基 <see langword="e" />) 的对数 <paramref name="value" />, ，如备注部分中的表中所示。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  自然对数 <paramref name="value" /> 超出范围 <see cref="T:System.Double" /> 数据类型。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>
              返回指定数字在使用指定底时的对数。
            </summary>
      <param name="value">
                要查找其对数的数字。
              </param>
      <param name="baseValue">
                对数的底。
              </param>
      <returns>
              基 <paramref name="baseValue" /> 对数 <paramref name="value" />, ，如备注部分中的表中所示。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  日志 <paramref name="value" /> 超出范围 <see cref="T:System.Double" /> 数据类型。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>
              返回指定数字以 10 为底的对数。
            </summary>
      <param name="value">
                要查找其对数的数字。
              </param>
      <returns>
              10 为底数的 <paramref name="value" />, ，如备注部分中的表中所示。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  基 10 日志 <paramref name="value" /> 超出范围 <see cref="T:System.Double" /> 数据类型。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回两个较大 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <paramref name="left" /> 或 <paramref name="right" /> 参数，以二者中较大者为准。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回两个较小 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <paramref name="left" /> 或 <paramref name="right" /> 参数，以二者中较小者为准。
            </returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>
              获取一个表示数字负一 (-1) 的值。
            </summary>
      <returns>
              其值为负一 (-1) 的整数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              对以某个数为底、以另一个数为指数的幂执行模数除法。
            </summary>
      <param name="value">
                编号，以将提升为 <paramref name="exponent" /> 电源。
              </param>
      <param name="exponent">
                幂运算的指数 <paramref name="value" /> 通过。
              </param>
      <param name="modulus">
                被除数的数值 <paramref name="value" /> 提升到 <paramref name="exponent" /> 电源。
              </param>
      <returns>
              除后的余数 <paramref name="value" />指数 通过 <paramref name="modulus" />。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> 为零。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> 为负数。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回两个产品 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要相乘的第一个数。
              </param>
      <param name="right">
                要相乘的第二个数。
              </param>
      <returns>
              产品 <paramref name="left" /> 和 <paramref name="right" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>
              求反指定 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                要求反的值。
              </param>
      <returns>
              结果 <paramref name="value" /> 参数乘以负一 (-1)。
            </returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>
              获取一个表示数字一 (1) 的值。
            </summary>
      <returns>
              其值为一 (1) 的对象。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              将两个指定的值相加 <see cref="T:System.Numerics.BigInteger" /> 对象。
            </summary>
      <param name="left">
                要相加的第一个值。
              </param>
      <param name="right">
                要相加的第二个值。
              </param>
      <returns>
        <paramref name="left" /> 与 <paramref name="right" /> 的和。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              执行按位 <see langword="And" /> 对两个操作 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                第一个值。
              </param>
      <param name="right">
                第二个值。
              </param>
      <returns>
              按位的结果 <see langword="And" /> 操作。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              执行按位 <see langword="Or" /> 对两个操作 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                第一个值。
              </param>
      <param name="right">
                第二个值。
              </param>
      <returns>
              按位的结果 <see langword="Or" /> 操作。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>
              递减 <see cref="T:System.Numerics.BigInteger" /> 值加 1。
            </summary>
      <param name="value">
                要递减的值。
              </param>
      <returns>
              值 <paramref name="value" /> 参数减 1。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              将指定 <see cref="T:System.Numerics.BigInteger" /> 值除以另一个指定 <see cref="T:System.Numerics.BigInteger" /> 值使用整数除法。
            </summary>
      <param name="dividend">
                要作为被除数的值。
              </param>
      <param name="divisor">
                要作为除数的值。
              </param>
      <returns>
              相除的整数结果。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> 为 0 （零）。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示带符号长整型值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 参数具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值和一个带符号长整型值是否相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 参数具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否两个值 <see cref="T:System.Numerics.BigInteger" /> 对象是否相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 参数具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值与无符号长整数值是否相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 参数具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示无符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 参数具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              执行按位异 <see langword="Or" /> (<see langword="XOr" />) 对两个操作 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                第一个值。
              </param>
      <param name="right">
                第二个值。
              </param>
      <returns>
              按位的结果 <see langword="Or" /> 操作。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>
              定义的显式转换 <see cref="T:System.Single" /> 对象传递给 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 为 <see cref="F:System.Single.NaN" />。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see cref="F:System.Single.PositiveInfinity" />。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see cref="F:System.Single.NegativeInfinity" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位无符号的整数值。
            </summary>
      <param name="value">
                要转换为 32 位无符号整数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.UInt32.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位无符号的整数值。
            </summary>
      <param name="value">
                要转换为 16 位无符号整数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.UInt16.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到单精度浮点值。
            </summary>
      <param name="value">
                要转换为单精度浮点值的值。
              </param>
      <returns>
              一个对象，包含的最接近的可能表示形式 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 为带符号的 8 位值的对象。
            </summary>
      <param name="value">
                要转换为 8 位带符号值的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位有符号的整数值。
            </summary>
      <param name="value">
                要转换为 64 位带符号整数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int64.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位无符号的整数值。
            </summary>
      <param name="value">
                要转换为 64 位无符号整数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.UInt64.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.UInt64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位有符号的整数值。
            </summary>
      <param name="value">
                要转换为 16 位带符号整数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.Int16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象传递给 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Double" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象传递给 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Decimal" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Decimal.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到无符号的字节值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Byte" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.Byte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>
              定义的显式转换 <see cref="T:System.Double" /> 值赋给 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 为 <see cref="F:System.Double.NaN" />。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位有符号的整数值。
            </summary>
      <param name="value">
                要转换为 32 位带符号整数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int32.MinValue" />。
                
                  - 或 -
                
                  <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>
              定义的显式转换 <see cref="T:System.Decimal" /> 对象传递给 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位有符号的整数是否大于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 大于 64 位有符号的整数值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否大于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否大于或等于 64 位无符号的整数值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否大于或等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位无符号的整数是否大于或等于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位有符号的整数是否大于或等于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否大于或等于 64 位有符号的整数值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>
              定义从 32 位无符号整数到式隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>
              定义从 16 位无符号整数到式隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>
              定义隐式转换的 8 位有符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>
              定义从 64 位无符号整数到式隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>
              定义将有符号 32 位整数的隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>
              定义将有符号 16 位整数的隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>
              定义从无符号字节到式隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>
              定义将有符号 64 位整数的隐式转换 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                值将转换为 <see cref="T:System.Numerics.BigInteger" />。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>
              增量 <see cref="T:System.Numerics.BigInteger" /> 值加 1。
            </summary>
      <param name="value">
                要递增的值。
              </param>
      <returns>
              值 <paramref name="value" /> 参数加 1。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位有符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位有符号的整数是否不相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有不同的值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位无符号的整数是否不相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位无符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>
              班次 <see cref="T:System.Numerics.BigInteger" /> 值指定的数目的位向左。
            </summary>
      <param name="value">
                要移动其位的值。
              </param>
      <param name="shift">
                要位移的位数数字 <paramref name="value" /> 的左侧。
              </param>
      <returns>
              一个已向左移动指定位数的值。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位无符号的整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位无符号整数。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位有符号的整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位有符号整数。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否小于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位有符号的整数是否小于或等于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否小于或等于 64 位有符号整数。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否小于或等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>
              返回一个值，该值指示是否 <see cref="T:System.Numerics.BigInteger" /> 值是否小于或等于 64 位无符号整数。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>
              返回一个值，该值指示 64 位无符号的整数是否小于或等于 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              返回与两个指定相除所得的余数 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="dividend">
                要作为被除数的值。
              </param>
      <param name="divisor">
                要作为除数的值。
              </param>
      <returns>
              相除所得的余数。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> 为 0 （零）。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              两个指定的 <see cref="T:System.Numerics.BigInteger" /> 值相乘。
            </summary>
      <param name="left">
                要相乘的第一个值。
              </param>
      <param name="right">
                要相乘的第二个值。
              </param>
      <returns>
              产品 <paramref name="left" /> 和 <paramref name="right" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>
              返回的按位二进制反码 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="value">
                一个整数值。
              </param>
      <returns>
              按位一的补数的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>
              将 <see cref="T:System.Numerics.BigInteger" /> 值向右移动指定的位数。
            </summary>
      <param name="value">
                要移动其位的值。
              </param>
      <param name="shift">
                将 <paramref name="value" /> 向右移动的位数。
              </param>
      <returns>
              一个已向右移动指定位数的值。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              减去 <see cref="T:System.Numerics.BigInteger" /> 从另一个值 <see cref="T:System.Numerics.BigInteger" /> 值。
            </summary>
      <param name="left">
                要从中减去的值（被减数）。
              </param>
      <param name="right">
                要减去的值（减数）。
              </param>
      <returns>
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>
              对指定的 BigInteger 值求反。
            </summary>
      <param name="value">
                要求反的值。
              </param>
      <returns>
              结果 <paramref name="value" /> 参数乘以负一 (-1)。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>
              返回的值 <see cref="T:System.Numerics.BigInteger" /> 操作数。
               （操作数的符号不变。）
            </summary>
      <param name="value">
                一个整数值。
              </param>
      <returns>
              值 <paramref name="value" /> 操作数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
              将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="style">
                枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。
              </param>
      <param name="provider">
                一个对象，提供区域性特定格式设置信息有关 <paramref name="value" />。
              </param>
      <returns>
              一个值，它等效于中指定的数字 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。
                
                  - 或 -
                
                  <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不符合指定的输入模式 <paramref name="style" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>
              将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="provider">
                一个对象，提供区域性特定格式设置信息有关 <paramref name="value" />。
              </param>
      <returns>
              一个值，它等效于中指定的数字 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不在正确的格式。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
              将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <param name="style">
                枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。
              </param>
      <returns>
              一个值，它等效于中指定的数字 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。
                
                  - 或 -
                
                  <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不符合指定的输入模式 <see cref="T:System.Globalization.NumberStyles" />。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>
              将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" /> 表示形式。
            </summary>
      <param name="value">
                包含要转换的数字的字符串。
              </param>
      <returns>
              一个值，它等效于中指定的数字 <paramref name="value" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不在正确的格式。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>
              引发 <see cref="T:System.Numerics.BigInteger" /> 的指定值次幂的值。
            </summary>
      <param name="value">
                编号，以将提升为 <paramref name="exponent" /> 电源。
              </param>
      <param name="exponent">
                幂运算的指数 <paramref name="value" /> 通过。
              </param>
      <returns>
              产生的结果 <paramref name="value" /> 到 <paramref name="exponent" /> 电源。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值 <paramref name="exponent" /> 参数是负数。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              对两个执行整数除法 <see cref="T:System.Numerics.BigInteger" /> 值并返回余数。
            </summary>
      <param name="dividend">
                要作为被除数的值。
              </param>
      <param name="divisor">
                要作为除数的值。
              </param>
      <returns>
              将 <paramref name="dividend" /> 除以 <paramref name="divisor" /> 后的余数。
            </returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> 为 0 （零）。
                </exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>
              获取一个数字来表示符号 （负、 正或零） 的当前 <see cref="T:System.Numerics.BigInteger" /> 对象。
            </summary>
      <returns>
              一个数字，指示的符号 <see cref="T:System.Numerics.BigInteger" /> 对象，如下面的表中所示。
            
                      数字
                    
                      描述
                    
                      -1
                    
                      此对象的值为负。
                    
                      0
                    
                      此对象的值为 0（零）。
                    
                      1
                    
                      此对象的值为正。
                    </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>
              减去一个 <see cref="T:System.Numerics.BigInteger" /> 从另一个值，并返回结果。
            </summary>
      <param name="left">
                要从中减去的值（被减数）。
              </param>
      <param name="right">
                要减去的值（减数）。
              </param>
      <returns>
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>
              将转换 <see cref="T:System.Numerics.BigInteger" /> 到字节数组的值。
            </summary>
      <returns>
              当前值 <see cref="T:System.Numerics.BigInteger" /> 对象转换为一个字节数组。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>
              将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为其等效字符串表示形式。
            </summary>
      <returns>
              当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。
            </summary>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="provider" /> 参数指定的格式。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>
              使用指定的格式将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。
            </summary>
      <param name="format">
                标准或自定义的数值格式字符串。
              </param>
      <returns>
              当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的格式字符串。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>
              使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。
            </summary>
      <param name="format">
                标准或自定义的数值格式字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              由 <paramref name="format" /> 和 <paramref name="provider" /> 参数指定的当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的格式字符串。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>
              尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.Numerics.BigInteger" /> 等效项，并返回一个指示转换是否成功的值。
            </summary>
      <param name="value">
                数字的字符串表示形式。
                 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。
              </param>
      <param name="style">
                枚举值的按位组合，用于指示可出现在 <paramref name="value" /> 中的样式元素。
                 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。
              </param>
      <param name="provider">
                一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。
              </param>
      <param name="result">
                此方法返回时，包含 <see cref="T:System.Numerics.BigInteger" /> 中包含的数字等效 <paramref name="value" />, ，或 <see cref="P:System.Numerics.BigInteger.Zero" /> 如果转换失败。
                 如果转换失败。 <paramref name="value" /> 参数是 <see langword="null" /> 或不符合的格式在 <paramref name="style" />。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果 <see langword="true" /> 参数成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。
                
                  - 或 -
                
                  <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。
                </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>
              尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。
            </summary>
      <param name="value">
                数字的字符串表示形式。
              </param>
      <param name="result">
                此方法返回时，包含 <see cref="T:System.Numerics.BigInteger" /> 中包含的数字等效 <paramref name="value" />, ，或零 (0) 如果转换失败。
                 如果转换失败。 <paramref name="value" /> 参数是 <see langword="null" /> 或者不是正确的格式。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>
              获取一个表示数字 0（零）的值。
            </summary>
      <returns>
              其值为 0（零）的整数。
            </returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>
              表示一个复数。
            </summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Numerics.Complex" /> 结构，使用指定的实部和虚部值。
            </summary>
      <param name="real">
                复数的实部。
              </param>
      <param name="imaginary">
                复数的虚部。
              </param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>
              获取复数的绝对值（或量值）。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              数值的绝对值 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>
              返回表示指定复数的反余弦值的角度。
            </summary>
      <param name="value">
                表示余弦的复数。
              </param>
      <returns>
              角度，以弧度为单位，即反余弦值的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              将两个复数相加，并返回结果。
            </summary>
      <param name="left">
                要相加的第一个复数。
              </param>
      <param name="right">
                要相加的第二个复数。
              </param>
      <returns>
        <paramref name="left" /> 与 <paramref name="right" /> 的和。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>
              返回表示指定复数的反正弦值的角度。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              反正弦值的角度的 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>
              返回表示指定复数的反正切的角度。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              值的反正切的角度 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>
              计算复数的共轭，并返回结果。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              共轭 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>
              返回指定复数的余弦值。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
        <paramref name="value" /> 的余弦值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>
              返回指定复数的双曲余弦值。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
        <paramref name="value" /> 的双曲余弦值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              用一个复数除另一个复数并返回结果。
            </summary>
      <param name="dividend">
                要作为被除数的复数。
              </param>
      <param name="divisor">
                要作为除数的复数。
              </param>
      <returns>
              相除后的商。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>
              返回一个值，该值指示当前实例与指定的复数是否具有相同的值。
            </summary>
      <param name="value">
                要比较的复数。
              </param>
      <returns>
        <see langword="true" /> 如果此复数和 <paramref name="value" /> 具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>
              返回一个值，该值指示当前实例与指定的对象是否具有相同的值。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="obj" /> 参数是 <see cref="T:System.Numerics.Complex" /> 对象或一个类型，能够隐式转换为 <see cref="T:System.Numerics.Complex" /> 对象，并且其值是否等于当前 <see cref="T:System.Numerics.Complex" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>
              返回 <see langword="e" /> 由复数指定次幂。
            </summary>
      <param name="value">
                指定幂的复数。
              </param>
      <returns>
              数字 <see langword="e" /> 的 <paramref name="value" /> 次幂。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>
              从点的极坐标创建复数。
            </summary>
      <param name="magnitude">
                量值，它是从原点（x 轴与 y 轴的交点）到数字的距离。
              </param>
      <param name="phase">
                相位，它是直线相对于水平轴的角度，以弧度为单位。
              </param>
      <returns>
              一个复数。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>
              返回当前哈希代码 <see cref="T:System.Numerics.Complex" /> 对象。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>
              获取当前的虚部 <see cref="T:System.Numerics.Complex" /> 对象。
            </summary>
      <returns>
              复数的虚部。
            </returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>
              返回一个新 <see cref="T:System.Numerics.Complex" /> ，其实数等于零，虚数等于 1 的实例。
            </summary>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>
              返回自然 (基 <see langword="e" />) 指定复数的对数。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              自然 (基 <see langword="e" />) 的对数 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>
              返回指定复数在使用指定底时的对数。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <param name="baseValue">
                对数的底。
              </param>
      <returns>
              对数 <paramref name="value" /> 基数 <paramref name="baseValue" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>
              返回指定复数以 10 为底的对数。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              以 10 为基数的对数 <paramref name="value" />。
            </returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>
              获取复数的量值（或绝对值）。
            </summary>
      <returns>
              当前实例的量值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              返回两个复数的乘积。
            </summary>
      <param name="left">
                要相乘的第一个复数。
              </param>
      <param name="right">
                要相乘的第二个复数。
              </param>
      <returns>
              产品 <paramref name="left" /> 和 <paramref name="right" /> 参数。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>
              返回指定复数的加法逆元。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              结果 <see cref="P:System.Numerics.Complex.Real" /> 和 <see cref="P:System.Numerics.Complex.Imaginary" /> 组成部分 <paramref name="value" /> 参数乘以-1。
            </returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>
              返回一个新 <see cref="T:System.Numerics.Complex" /> 实例，其实数等于一，虚数等于零。
            </summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              将两个复数相加。
            </summary>
      <param name="left">
                要相加的第一个值。
              </param>
      <param name="right">
                要相加的第二个值。
              </param>
      <returns>
        <paramref name="left" /> 与 <paramref name="right" /> 的和。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              用一个指定复数除另一个指定复数。
            </summary>
      <param name="left">
                要作为被除数的值。
              </param>
      <param name="right">
                要作为除数的值。
              </param>
      <returns>
        <paramref name="left" /> 除以 <paramref name="right" /> 的结果。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              返回一个值，该值指示两个复数是否相等。
            </summary>
      <param name="left">
                要比较的第一个复数。
              </param>
      <param name="right">
                要比较的第二个复数。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 参数具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>
              定义的显式转换 <see cref="T:System.Decimal" /> 到复数的值。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              复数，其实部等于 <paramref name="value" /> ，虚部等于零。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>
              定义的显式转换 <see cref="T:System.Numerics.BigInteger" /> 到复数的值。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              复数，其实部等于 <paramref name="value" /> ，虚部等于零。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>
              定义从 64 位无符号整数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>
              定义从 32 位无符号整数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>
              定义从 16 位无符号整数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>
              定义从单精度浮点数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>
              定义从带符号字节到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>
              定义从无符号字节到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>
              定义从 32 位带符号整数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>
              定义从 16 位带符号整数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>
              定义从双精度浮点数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>
              定义从 64 位带符号整数到复数的隐式转换。
            </summary>
      <param name="value">
                要转换为复数的值。
              </param>
      <returns>
              一个对象，包含的值 <paramref name="value" /> 参数作为其实数部分并使用零作为其虚部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              返回一个值，该值指示两个复数是否不相等。
            </summary>
      <param name="left">
                要比较的第一个值。
              </param>
      <param name="right">
                要比较的第二个值。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              将两个指定复数相乘。
            </summary>
      <param name="left">
                要相乘的第一个值。
              </param>
      <param name="right">
                要相乘的第二个值。
              </param>
      <returns>
              产品 <paramref name="left" /> 和 <paramref name="right" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              从一个复数中减去另一个复数。
            </summary>
      <param name="left">
                要从中减去的值（被减数）。
              </param>
      <param name="right">
                要减去的值（减数）。
              </param>
      <returns>
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>
              返回指定复数的加法逆元。
            </summary>
      <param name="value">
                要求反的值。
              </param>
      <returns>
              结果 <see cref="P:System.Numerics.Complex.Real" /> 和 <see cref="P:System.Numerics.Complex.Imaginary" /> 组成部分 <paramref name="value" /> 参数乘以-1。
            </returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>
              获取复数的相位。
            </summary>
      <returns>
              复数的相位（以弧度为单位）。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>
              返回指定复数的由双精度浮点数指定的次幂。
            </summary>
      <param name="value">
                要对其求幂的复数。
              </param>
      <param name="power">
                指定幂的双精度浮点数。
              </param>
      <returns>
              复数 <paramref name="value" /> 幂 <paramref name="power" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              返回指定复数的由复数指定的次幂。
            </summary>
      <param name="value">
                要对其求幂的复数。
              </param>
      <param name="power">
                指定幂的复数。
              </param>
      <returns>
              复数 <paramref name="value" /> 幂 <paramref name="power" />。
            </returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>
              获取当前的实部 <see cref="T:System.Numerics.Complex" /> 对象。
            </summary>
      <returns>
              复数的实部。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>
              返回复数的乘法倒数。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              倒数 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>
              返回指定复数的正弦值。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
        <paramref name="value" /> 的正弦值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>
              返回指定复数的双曲正弦值。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
        <paramref name="value" /> 的双曲正弦值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>
              返回指定复数的平方根。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
              平方根 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>
              从一个复数中减去另一个复数并返回结果。
            </summary>
      <param name="left">
                要从中减去的值（被减数）。
              </param>
      <param name="right">
                要减去的值（减数）。
              </param>
      <returns>
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>
              返回指定复数的正切值。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
        <paramref name="value" /> 的正切值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>
              返回指定复数的双曲正切值。
            </summary>
      <param name="value">
                一个复数。
              </param>
      <returns>
        <paramref name="value" /> 的双曲正切值。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>
              将当前复数的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
      <returns>
              当前实例的采用笛卡尔形式的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>
              使用指定的区域性特定格式设置信息，将当前复数的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              当前实例的采用笛卡尔形式，由指定的字符串表示 <paramref name="provider" />。
            </returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>
              通过对当前复数的实部和虚部使用指定格式，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
      <param name="format">
                标准或自定义的数值格式字符串。
              </param>
      <returns>
              当前实例的采用笛卡尔形式的字符串表示形式。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的格式字符串。
                </exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>
              通过对当前复数的实部和虚部使用指定格式和区域性特定格式信息，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
      <param name="format">
                标准或自定义的数值格式字符串。
              </param>
      <param name="provider">
                一个提供区域性特定的格式设置信息的对象。
              </param>
      <returns>
              当前实例的采用笛卡尔形式，由指定的字符串表示 <paramref name="format" /> 和 <paramref name="provider" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的格式字符串。
                </exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>
              返回一个新<see cref="T:System.Numerics.Complex" />其实数等于零且虚数等于零的实例。
            </summary>
    </member>
  </members>
</doc>