<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Concurrent</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary>
              为实现 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的线程安全集合提供阻塞和限制功能。
            </summary>
      <typeparam name="T">
                集合中的元素类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。
            </summary>
      <param name="collection">
                要用作基础数据存储区的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限。
            </summary>
      <param name="boundedCapacity">
                集合的限制大小。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundedCapacity" /> 不是正数值。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。
            </summary>
      <param name="collection">
                要用作基础数据存储区的集合。
              </param>
      <param name="boundedCapacity">
                集合的限制大小。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundedCapacity" /> 不是正数值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  提供 <paramref name="collection" /> 包含多个值不是允许的 <paramref name="boundedCapacity" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary>
              将项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。
            </summary>
      <param name="item">
                要添加到集合的项。
                 该值可以是 null 引用。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。
                
                  - 或 -
                
                  基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary>
              将项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。
            </summary>
      <param name="item">
                要添加到集合的项。
                 该值可以是 null 引用。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已释放或 <see cref="T:System.Threading.CancellationTokenSource" /> 拥有 <paramref name="cancellationToken" /> 已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。
                
                  - 或 -
                
                  基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>
              向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                要添加到其中一个集合的项。
              </param>
      <returns>
              向其添加项的集合在 <paramref name="collections" /> 数组中的索引。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary>
              向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                要添加到其中一个集合的项。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              向其添加项的集合在 <paramref name="collections" /> 数组中的索引。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基础集合不接受该项目。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放，则 <see cref="T:System.Threading.CancellationTokenSource" /> 创建 <paramref name="cancellationToken" /> 已被释放。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary>
              获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例的限定容量。
            </summary>
      <returns>
              此集合的限定容量；如果未提供限制，则为 int.MaxValue。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例标记为不任何更多的添加。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数是否等于或大于该长度的 <paramref name="array" />。
                
                  目标数组是太小而无法容纳所有 BlockingCcollection 元素。
                
                  数组秩不匹配。
                
                  数组类型是与 BlockingCollection 元素的类型不兼容。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项的数量。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项的数量。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary>
              释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例使用的资源。
            </summary>
      <param name="disposing">
                是显式释放 (true)，还是由于终结器释放 (false)。
              </param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary>
              为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </summary>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已释放或 <see cref="T:System.Threading.CancellationTokenSource" /> 创建 <paramref name="cancellationToken" /> 已被释放
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary>
              为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </summary>
      <returns>
              从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary>
              获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为完成添加。
            </summary>
      <returns>
              此集合是否已标记为完成添加。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary>
              获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为完成添加并且为空。
            </summary>
      <returns>
              此集合是否已标记为完成添加并且为空。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary>
              从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。
            </summary>
      <returns>
              从集合中移除的项。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  在这之外修改基础集合 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空，集合已标记为完成添加。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary>
              从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。
            </summary>
      <param name="cancellationToken">
                可用于取消获取操作的对象。
              </param>
      <returns>
              从集合中移除的项。
            </returns>
      <exception cref="T:System.OperationCanceledException">
        <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已释放或 <see cref="T:System.Threading.CancellationTokenSource" /> 创建该标记已取消。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  在这之外修改基础集合 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例或 BlockingCollection 被标记为完成添加，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>
              从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一个项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                从其中一个集合中移除的项。
              </param>
      <returns>
              从其中移除项的集合在 <paramref name="collections" /> 数组中的索引。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 集合上调用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary>
              在观察指定的取消标记时从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一个项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                从其中一个集合中移除的项。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              从其中移除项的集合在 <paramref name="collections" /> 数组中的索引。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 集合上调用。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary>
              将项从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制到新数组中。
            </summary>
      <returns>
              包含集合元素副本的数组。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary>
              尝试在指定的时间段内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
            </summary>
      <param name="item">
                要添加到集合的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <returns>
              如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。
               如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。
                
                  - 或 -
                
                  基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary>
              在观察取消标记时，尝试在指定的时间段内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
            </summary>
      <param name="item">
                要添加到集合的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。
               如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 或基础 <see cref="T:System.Threading.CancellationTokenSource" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。
                
                  - 或 -
                
                  基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary>
              尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
            </summary>
      <param name="item">
                要添加到集合的项。
              </param>
      <returns>
              如果可以添加 <paramref name="item" />，则为 true；否则为 false。
               如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。
                
                  - 或 -
                
                  基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary>
              尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
            </summary>
      <param name="item">
                要添加到集合的项。
              </param>
      <param name="timeout">
                表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              如果在指定的时间跨度内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是-1 毫秒，表示无限期超时大于非负数字 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。
                
                  - 或 -
                
                  基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary>
              尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                要添加到其中一个集合的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基础集合不接受该项目。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                
                  - 或 -
                
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary>
              在观察指定的取消标记时，尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                要添加到其中一个集合的项。
              </param>
      <param name="timeout">
                表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例或 <see cref="T:System.Threading.CancellationTokenSource" /> 创建 <paramref name="cancellationToken" /> 已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是-1 毫秒，表示无限期超时大于非负数字 <see cref="F:System.Int32.MaxValue" />。
                
                  - 或 -
                
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary>
              尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                要添加到其中一个集合的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <returns>
              向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                
                  - 或 -
                
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>
              尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                要添加到其中一个集合的项。
              </param>
      <returns>
              向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基础集合不接受该项目。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。
            </summary>
      <param name="item">
                要从集合中移除的项。
              </param>
      <returns>
              如果可以移除项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary>
              尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。
            </summary>
      <param name="item">
                要从集合中移除的项。
              </param>
      <param name="timeout">
                一个对象，表示等待的毫秒数，或为 -1 毫秒，表示无限期等待。
              </param>
      <returns>
              如果在指定的时间内可以从集合中移除一个项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。
                
                  - 或 - 
                
                  <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>
              在观察取消标记时，尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。
            </summary>
      <param name="item">
                要从集合中移除的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              如果在指定的时间内可以从集合中移除一个项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  已取消 <see cref="T:System.Threading.CancellationToken" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 或基础 <see cref="T:System.Threading.CancellationTokenSource" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary>
              尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。
            </summary>
      <param name="item">
                要从集合中移除的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <returns>
              如果在指定的时间内可以从集合中移除一个项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>
              尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                从其中一个集合中移除的项。
              </param>
      <returns>
              从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary>
              尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                从其中一个集合中移除的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <returns>
              从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                
                  - 或 -
                
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>
              尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                从其中一个集合中移除的项。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <param name="cancellationToken">
                要观察的取消标记。
              </param>
      <returns>
              从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。
                
                  - 或 -
                
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary>
              尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。
            </summary>
      <param name="collections">
                集合的数组。
              </param>
      <param name="item">
                从其中一个集合中移除的项。
              </param>
      <param name="timeout">
                表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是-1 毫秒，表示无限期超时大于非负数字 <see cref="F:System.Int32.MaxValue" />。
                
                  - 或 -
                
                  计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              为集合中的项提供 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </summary>
      <returns>
              集合中的项的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数是否等于或大于该长度的 <paramref name="array" />, 、 该数组是多维的或找不到的类型参数不能自动转换为目标数组的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步。
            </summary>
      <returns>
              始终返回 false。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
               不支持此属性。
            </summary>
      <returns>
              返回 null。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持 SyncRoot 属性。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              为集合中的项提供 <see cref="T:System.Collections.IEnumerator" />。
            </summary>
      <returns>
              集合中的项的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。
                </exception>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary>
              表示对象的线程安全的无序集合。
            </summary>
      <typeparam name="T">
                要存储在集合中的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例，该类包含从指定集合中复制的元素。
            </summary>
      <param name="collection">
                其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。
                 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。
              </param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Clear">
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 是否为空。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 为空，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到新数组。
            </summary>
      <returns>
              新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 复制的元素的快照。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 返回一个对象但不移除该对象。
            </summary>
      <param name="result">
                此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的对象；如果操作失败，则返回 <paramref name="T" /> 的默认值。
              </param>
      <returns>
              如果成功返回了对象，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除和返回一个对象。
            </summary>
      <param name="result">
                此方法返回时，<paramref name="result" /> 包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除的对象；如果包为空，则返回 <paramref name="T" /> 的默认值。
              </param>
      <returns>
              如果成功移除了对象，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>
              尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。
                 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。
              </param>
      <returns>
              始终返回 true
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                   - <paramref name="array" /> 不具有从零开始的索引。
                   - <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                   -源的类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。
            </summary>
      <returns>
              如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 同步，则为 true；否则为 false。
               对于 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />，此属性始终返回 false。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
               不支持此属性。
            </summary>
      <returns>
              返回 null（在 Visual Basic 中为 Nothing）。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持 SyncRoot 属性。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
      <summary>
              表示可由多个线程同时访问的键/值对的线程安全集合。
            </summary>
      <typeparam name="TKey">
                字典中的键的类型。
              </typeparam>
      <typeparam name="TValue">
                字典中的值的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有默认的并发级别和默认的初始容量，并为键类型使用默认比较器。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中复制的元素，具有默认的并发级别和默认的初始容量，并为键类型使用默认比较器。
            </summary>
      <param name="collection">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的元素被复制到新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或任何其密钥为  <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> 包含一个或多个重复的键。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有默认的并发级别和容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="comparer">
                在对键进行比较时使用的相等比较实现。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素，具有默认的并发级别和默认的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="collection">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的元素被复制到新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。
              </param>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="comparer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有指定的并发级别和容量，并为键类型使用默认比较器。
            </summary>
      <param name="concurrencyLevel">
                将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。
              </param>
      <param name="capacity">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> 小于 1。
                
                  - 或 -
                
                  <paramref name="capacity" /> 小于 0。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="concurrencyLevel">
                将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。
              </param>
      <param name="collection">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的元素被复制到新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。
              </param>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="comparer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> 小于 1。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有指定的并发级别和指定的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="concurrencyLevel">
                将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。
              </param>
      <param name="capacity">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 可包含的初始元素数。
              </param>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> 或 <paramref name="capacity" /> 小于 1。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
      <summary>
              如果该键不存在，则使用指定函数将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；如果该键已存在，则使用该函数更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。
            </summary>
      <param name="key">
                要添加的键或应更新其值的键
              </param>
      <param name="addValueFactory">
                用于为空缺键生成值的函数
              </param>
      <param name="updateValueFactory">
                用于基于键的现有值为现有键生成新值的函数
              </param>
      <returns>
              键的新值。
               这将是 addValueFactory 的结果（如果缺少键）或 updateValueFactory 的结果（如果存在键）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />、<paramref name="addValueFactory" /> 或 <paramref name="updateValueFactory" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
      <summary>
              如果该键不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中；如果该键已经存在，则通过使用指定的函数更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。
            </summary>
      <param name="key">
                要添加的键或应更新其值的键
              </param>
      <param name="addValue">
                要为空缺键添加的值
              </param>
      <param name="updateValueFactory">
                用于基于键的现有值为现有键生成新值的函数
              </param>
      <returns>
              键的新值。
               这将是 addValue（如果缺少键）或 updateValueFactory 的结果（如果存在键）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="updateValueFactory" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
      <summary>
              
			如果该键不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中；如果该键已经存在，则更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。
            </summary>
      <param name="key">
                要添加的键或应更新其值的键。
              </param>
      <param name="addValueFactory">
                用于为空缺键生成值的函数。
              </param>
      <param name="updateValueFactory">
                用以基于键的现有值为现有键生成新值的函数。
              </param>
      <param name="factoryArgument">
                要传入 <paramref name="addValueFactory" /> 和 <paramref name="updateValueFactory" /> 的参数。
              </param>
      <typeparam name="TArg">
                
			  此 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中键的类型
              </typeparam>
      <returns>
              
			键的新值。
               这将是 addValueFactory 的结果（如果缺少键）或 updateValueFactory 的结果（如果存在键）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />、<paramref name="addValueFactory" /> 或 <paramref name="updateValueFactory" /> 为空引用（在 Visual Basic 中为 Nothing）。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
      <summary>
              将所有键和值从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
      <summary>
              确定是否 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 包含指定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
      <summary>
              获取包含在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对的数目。
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对的数目。
            </returns>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary>
              如果该键不存在，则通过使用指定的函数将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="valueFactory">
                用于为键生成值的函数
              </param>
      <returns>
              键的值。
               如果字典中已存在该键，则为该键的现有值；如果字典中不存在该键，则为由 valueFactory 返回的键的新值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="valueFactory" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
      <summary>
              如果该键不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                当键不存在时要添加的值
              </param>
      <returns>
              键的值。
               如果字典中已存在该键，则为该键的现有值；如果字典中不存在该键，则为新值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)">
      <summary>
              如果该键不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="valueFactory">
                用于为键生成值的函数。
              </param>
      <param name="factoryArgument">
                要传入 <paramref name="name" /> 的参数值。
              </param>
      <typeparam name="TArg">
                此 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中键的类型
              </typeparam>
      <returns>
              
			键的值。
                如果字典中已存在该键，则为该键的现有值；如果字典中不存在该键，则为由 <paramref name="valueFactory" /> 返回的键的新值。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 是否为空。
            </summary>
      <returns>
              如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置的值的键。
              </param>
      <returns>
              位于指定索引处的键/值对的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                  已检索该属性且集合中不存在 <paramref name="key" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中存储的键和值对复制到新数组中。
            </summary>
      <returns>
              一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 复制的键和值对的快照。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
      <summary>
              尝试将指定的键和值添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
                 对于引用类型，该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果成功地将键/值对添加到 <see langword="true" />，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；如果该键已存在，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 获取与指定的键关联的值。
            </summary>
      <param name="key">
                要获取的值的键。
              </param>
      <param name="value">
                当此方法返回时，将包含 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中具有指定键的对象；如果操作失败，则包含类型的默认值。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到该键，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除并返回具有指定键的值。
            </summary>
      <param name="key">
                要移除并返回的元素的键。
              </param>
      <param name="value">
                当此方法返回时，将包含从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除的对象；如果 <see langword="TValue" /> 不存在，则包含 <paramref name="key" /> 类型的默认值。
              </param>
      <returns>
              如果成功地移除了对象，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
      <summary>
              将指定键的现有值与指定值进行比较，如果相等，则用第三个值更新该键。
            </summary>
      <param name="key">
                其值将与 <paramref name="comparisonValue" /> 进行比较并且可能被替换的键。
              </param>
      <param name="newValue">
                当比较结果相等时，该值将替换具有指定 <paramref name="key" /> 的元素的值。
              </param>
      <param name="comparisonValue">
                与具有指定 <paramref name="key" /> 的元素的值进行比较的值。
              </param>
      <returns>
              如果具有 <see langword="true" /> 的值与 <paramref name="key" /> 相等且被替换为 <paramref name="comparisonValue" />，则为 <paramref name="newValue" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
      <summary>
              获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              向集合中添加一项。
            </summary>
      <param name="keyValuePair">
                要添加到字典中的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。
              </param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含具有指定键的元素。
            </summary>
      <param name="keyValuePair">
                要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.ICollection" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.ICollection" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
              将指定的键/值对从集合中移除。
            </summary>
      <param name="keyValuePair">
                要移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。
              </param>
      <returns>
              如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="key" />，此方法也会返回 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>
              将指定的键和值添加到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中。
            </summary>
      <param name="key">
                用作要添加的元素的键的对象。
              </param>
      <param name="value">
                用作要添加的元素的值的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中已存在具有相同键的元素。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>
              从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <returns>
              如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
              获得一个包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
              获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的数组索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中。
            </summary>
      <param name="array">
                一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于该长度的 <paramref name="array" />。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
               对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，该属性总是返回 false。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
               不支持此属性。
            </summary>
      <returns>
              始终返回 null。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此属性。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              将指定的键和值添加到字典中。
            </summary>
      <param name="key">
                要用作键的对象。
              </param>
      <param name="value">
                要用作值的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不能分配给的键类型的类型 <see cref="T:System.Collections.Generic.Dictionary`2" />。
                
                  - 或 - 
                
                  <paramref name="value" /> 不能赋给中的值类型的类型 <see cref="T:System.Collections.Generic.Dictionary`2" />。
                
                   - 或 -
                
                  中已存在具有相同键的值 <see cref="T:System.Collections.Generic.Dictionary`2" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  字典中已包含元素的最大数量(<see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              获取 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定键的元素。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
              为 <see cref="T:System.Collections.IDictionaryEnumerator" /> 提供一个 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。
               对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，该属性总是返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否为只读。
            </summary>
      <returns>
              如果 <see langword="true" /> 为只读，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。
               对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，该属性总是返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置的值的键。
              </param>
      <returns>
              如果 <see langword="null" /> 不在字典中或 <paramref name="key" /> 的类型属于不可分配给 <paramref name="key" /> 的键类型，则为与指定的键关联的值或为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  正在分配一个值，且 <paramref name="key" /> 的类型不可分配为密钥类型或 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的值类型。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的接口。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 中的值的 <see cref="T:System.Collections.IDictionary" />。
            </summary>
      <returns>
              包含 <see cref="T:System.Collections.IDictionary" /> 中的值的接口。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
      <summary>
              表示线程安全的先进先出 (FIFO) 集合。
            </summary>
      <typeparam name="T">
                队列中包含的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 类的新实例，该类包含从指定集合中复制的元素
            </summary>
      <param name="collection">
                其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear">
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 所复制的元素的目标数组。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的结尾处。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 末尾的对象。
                 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。
              </param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的枚举数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的内容的枚举器。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 是否为空。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 为空，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中存储的元素复制到新数组中。
            </summary>
      <returns>
              新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 复制的元素的快照。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
      <summary>
              尝试移除并返回并发队列开头处的对象。
            </summary>
      <param name="result">
                如果操作成功，则此方法返回时，<paramref name="result" /> 包含所移除的对象。
                 如果没有可供移除的对象，则不指定该值。
              </param>
      <returns>
              如果成功在 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开头处移除并返回了元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
      <summary>
              尝试返回 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开头处的对象但不将其移除。
            </summary>
      <param name="result">
                此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开头处的对象；如果操作失败，则包含未指定的值。
              </param>
      <returns>
              如果成功返回了对象，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>
              尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。
                 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。
              </param>
      <returns>
              如果成功添加了对象，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除和返回一个对象。
            </summary>
      <param name="item">
                如果操作成功，则此方法返回时，<paramref name="item" /> 包含所移除的对象。
                 如果没有可供移除的对象，则不指定该值。
              </param>
      <returns>
              如果成功移除并返回了元素，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                   - <paramref name="array" /> 不具有从零开始的索引。
                   - <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                   -源的类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。
            </summary>
      <returns>
              如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 同步，则为 true；否则为 false。
               对于 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />，此属性始终返回 false。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
               不支持此属性。
            </summary>
      <returns>
              返回 null（在 Visual Basic 中为 Nothing）。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持 SyncRoot 属性。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
      <summary>
              表示线程安全的后进先出 (LIFO) 集合。
            </summary>
      <typeparam name="T">
                堆栈中包含的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              初始化 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 类的新实例，该类包含从指定集合中复制的元素
            </summary>
      <param name="collection">
                其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
      <summary>
              从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中移除所有对象。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 所复制的元素的目标数组。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
      <summary>
              获取 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的枚举数。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 是否为空。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 为空，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
      <summary>
              在 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部插入一个对象。
            </summary>
      <param name="item">
                要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。
                 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。
              </param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
      <summary>
              自动将多个对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。
            </summary>
      <param name="items">
                要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
      <summary>
              自动将多个对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。
            </summary>
      <param name="items">
                要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。
              </param>
      <param name="startIndex">
        <paramref name="items" /> 中从零开始的偏移量，在此开始将元素插入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。
              </param>
      <param name="count">
                要插入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的元素数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 为负。
                   或者 <paramref name="startIndex" /> 大于或等于的长度 <paramref name="items" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="items" /> 的长度。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中存储的项复制到一个新的数组。
            </summary>
      <returns>
              新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 复制的元素的快照。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部返回一个对象而无需移除它。
            </summary>
      <param name="result">
                当此方法返回时，<paramref name="result" /> 包含来自 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的一个对象，或如果操作失败，则包含未指定的值。
              </param>
      <returns>
              如果成功返回了对象，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
      <summary>
              尝试弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的对象。
            </summary>
      <param name="result">
                如果操作成功，则此方法返回时，<paramref name="result" /> 包含所移除的对象。
                 如果没有可供移除的对象，则不指定该值。
              </param>
      <returns>
              如果从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部成功移除并返回了元素，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
      <summary>
              尝试自动弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的多个对象。
            </summary>
      <param name="items">
                要将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出的对象添加到的 <see cref="T:System.Array" />。
              </param>
      <param name="startIndex">
        <paramref name="items" /> 中从零开始的偏移量，在此开始从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部插入元素。
              </param>
      <param name="count">
                从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出并插入 <paramref name="items" /> 中的元素数。
              </param>
      <returns>
              成功从堆栈顶部弹出并插入 <paramref name="items" /> 中的对象数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 为负。
                   或者 <paramref name="startIndex" /> 大于或等于的长度 <paramref name="items" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> + <paramref name="count" /> 个的长度大于 <paramref name="items" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
      <summary>
              尝试自动弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的多个对象。
            </summary>
      <param name="items">
                要将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出的对象添加到的 <see cref="T:System.Array" />。
              </param>
      <returns>
              成功从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出并插入 <paramref name="items" /> 中的对象数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 是一个空的参数 (在 Visual Basic 中为 Nothing)。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>
              尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。
                 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。
              </param>
      <returns>
              如果成功添加了对象，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除和返回一个对象。
            </summary>
      <param name="item">
                如果操作成功，则此方法返回时，<paramref name="item" /> 包含所移除的对象。
                 如果没有可供移除的对象，则不指定该值。
              </param>
      <returns>
              如果成功移除并返回了元素，则为 true；否则为 false。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 所复制的元素的目标数组。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                   - <paramref name="array" /> 不具有从零开始的索引。
                   - <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                   -源的类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。
            </summary>
      <returns>
              如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 同步，则为 true；否则为 false。
               对于 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />，此属性始终返回 false。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
               不支持此属性。
            </summary>
      <returns>
              返回 null（在 Visual Basic 中为 Nothing）。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持 SyncRoot 属性
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
      <summary>
              指定选项来控制分区程序缓冲行为
            </summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
      <summary>
              创建的分区程序一次的可枚举一个从源中取得项，并且不使用多个线程可以更高效地访问的中间存储。
               此选项为低滞后时间 （一旦在源中可用，将处理项） 提供支持并提供部分支持的项之间的依赖关系 （一个线程不会死锁等待线程本身负责处理项目）。
            </summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.None">
      <summary>
              使用默认行为，就是使用缓冲以获得最佳性能。
            </summary>
    </member>
    <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
      <summary>
              定义用于操作供生产者/使用者使用的线程安全集合的方法。
               此接口提供统一的表示形式的生产者/使用者集合使程序更高级别的抽象如 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 可以将此集合用作基础存储机制。
            </summary>
      <typeparam name="T">
                指定集合中的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 到 <see cref="T:System.Array" />, 、 指定索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 所复制的元素的目标数组。
              
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -或-集合中的元素数大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
      <summary>
              中包含的元素复制 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 到新数组。
            </summary>
      <returns>
              新数组包含从复制的元素 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
      <summary>
              尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。
            </summary>
      <param name="item">
                要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。
              </param>
      <returns>
              如果成功添加了对象，则为 true；否则为 false。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 已为此集合无效。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
      <summary>
              尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除和返回一个对象。
            </summary>
      <param name="item">
                此方法返回时，如果该对象已成功移除并返回， <paramref name="item" /> 包含所移除的对象。
                 如果没有可供移除的对象，则不指定该值。
              </param>
      <returns>
              如果对象成功移除并返回成功，则为 true否则为 false。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.OrderablePartitioner`1">
      <summary>
              表示将可排序数据源拆分为多个分区的特定方式。
            </summary>
      <typeparam name="TSource">
                集合中元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 类使用的索引键指定的约束。
            </summary>
      <param name="keysOrderedInEachPartition">
                指示是否增加键的顺序生成每个分区中的元素。
              </param>
      <param name="keysOrderedAcrossPartitions">
                指示是否更早的分区中的元素始终排在更高版本的分区中的元素之前。
                 如果为 true，分区 0 中的每个元素的较小的顺序键比任何元素都分区 1 中，分区 1 中的每个元素具有较小的顺序键比任何元素在分区 2，依此类推。
              </param>
      <param name="keysNormalized">
                指示是否规范化键。
                 如果为 true，则所有顺序键将都是范围 [0..内的不同整数
                 numberofelements-1]。
                 如果 false，顺序键仍必须互不相同，但只是它们的相对顺序被视为，没有其绝对值。
              </param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions">
      <summary>
              创建可以分区成可变数目的分区的基础集合的对象。
            </summary>
      <returns>
              一个对象，可以在基础数据源上创建分区。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  基类不支持动态分区。
                   必须在派生类中实现该协定。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions">
      <summary>
              创建可以分区成可变数目的分区的基础集合的对象。
            </summary>
      <returns>
              一个对象，可以在基础数据源上创建分区。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  此分区程序不支持动态分区。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)">
      <summary>
              基础集合分区成指定的可排序分区数。
            </summary>
      <param name="partitionCount">
                若要创建的分区数。
              </param>
      <returns>
              一个列表包含 <paramref name="partitionCount" /> 枚举器。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)">
      <summary>
              分区到给定数目的有序的分区的基础集合。
            </summary>
      <param name="partitionCount">
                若要创建的分区数。
              </param>
      <returns>
              一个列表包含 <paramref name="partitionCount" /> 枚举器。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized">
      <summary>
              获取指示规范化的键进行排序。
            </summary>
      <returns>
              规范化键; 如果为 true否则为 false。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions">
      <summary>
              获取是否早分区中的元素始终排在更高版本的分区中的元素之前。
            </summary>
      <returns>
              如果前一分区中的元素始终排在更高版本的分区; 中的元素之前为 true否则为 false。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition">
      <summary>
              获取是否增加键的顺序生成每个分区中的元素。
            </summary>
      <returns>
              如果增加密钥; 的顺序生成每个分区中的元素，则 true否则为 false。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner`1">
      <summary>
              表示将数据源拆分为多个分区的特定方式。
            </summary>
      <typeparam name="TSource">
                集合中元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.#ctor">
      <summary>
              创建新的分区程序实例。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions">
      <summary>
              创建可以分区成可变数目的分区的基础集合的对象。
            </summary>
      <returns>
              一个对象，可以在基础数据源上创建分区。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  基类不支持动态分区。
                   您必须在派生类中实现它。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)">
      <summary>
              分区到给定数目的分区的基础集合。
            </summary>
      <param name="partitionCount">
                若要创建的分区数。
              </param>
      <returns>
              一个列表包含 <paramref name="partitionCount" /> 枚举器。
            </returns>
    </member>
    <member name="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions">
      <summary>
              获取是否可以动态创建更多的分区。
            </summary>
      <returns>
              true <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 动态可创建分区，则根据请求; false <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 只能以静态方式分配分区。
            </returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner">
      <summary>
              为数组、列表和可枚举对象提供常见的分区策略。
            </summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)">
      <summary>
              创建的分区程序的用户指定的范围进行分块。
            </summary>
      <param name="fromInclusive">
                范围下限 （含） 之间绑定。
              </param>
      <param name="toExclusive">
                ，排他上限的范围。
              </param>
      <returns>
              分区程序。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数是否小于或等于 <paramref name="fromInclusive" /> 参数。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)">
      <summary>
              创建的分区程序的用户指定的范围进行分块。
            </summary>
      <param name="fromInclusive">
                范围下限 （含） 之间绑定。
              </param>
      <param name="toExclusive">
                ，排他上限的范围。
              </param>
      <returns>
              分区程序。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数是否小于或等于 <paramref name="fromInclusive" /> 参数。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)">
      <summary>
              创建的分区程序的用户指定的范围进行分块。
            </summary>
      <param name="fromInclusive">
                范围下限 （含） 之间绑定。
              </param>
      <param name="toExclusive">
                ，排他上限的范围。
              </param>
      <param name="rangeSize">
                每个子范围的大小。
              </param>
      <returns>
              分区程序。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数是否小于或等于 <paramref name="fromInclusive" /> 参数。
                
                  - 或 -
                
                  <paramref name="rangeSize" /> 参数是否小于或等于 0。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)">
      <summary>
              创建的分区程序的用户指定的范围进行分块。
            </summary>
      <param name="fromInclusive">
                范围下限 （含） 之间绑定。
              </param>
      <param name="toExclusive">
                ，排他上限的范围。
              </param>
      <param name="rangeSize">
                每个子范围的大小。
              </param>
      <returns>
              分区程序。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数是否小于或等于 <paramref name="fromInclusive" /> 参数。
                
                  - 或 -
                
                  <paramref name="rangeSize" /> 参数是否小于或等于 0。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              创建从一个可排序分区程序 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例。
            </summary>
      <param name="source">
                可枚举项要进行分区。
              </param>
      <typeparam name="TSource">
                可枚举的源中的元素的类型。
              </typeparam>
      <returns>
              基于输入数组的可排序分区程序。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)">
      <summary>
              创建从一个可排序分区程序 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例。
            </summary>
      <param name="source">
                可枚举项要进行分区。
              </param>
      <param name="partitionerOptions">
                若要控制缓冲的分区程序行为的选项。
              </param>
      <typeparam name="TSource">
                可枚举的源中的元素的类型。
              </typeparam>
      <returns>
              基于输入数组的可排序分区程序。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="partitionerOptions" /> 参数指定的值无效 <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" />。
                </exception>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary>
              创建从一个可排序分区程序 <see cref="T:System.Collections.Generic.IList`1" /> 实例。
            </summary>
      <param name="list">
                要进行分区的列表。
              </param>
      <param name="loadBalance">
                一个布尔值，该值指示是否创建的分区应动态加载分区而不是静态分区之间的平衡。
              </param>
      <typeparam name="TSource">
                源列表中元素的类型。
              </typeparam>
      <returns>
              基于输入列表的可排序分区程序。
            </returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)">
      <summary>
              创建从一个可排序分区程序 <see cref="T:System.Array" /> 实例。
            </summary>
      <param name="array">
                要进行分区的数组。
              </param>
      <param name="loadBalance">
                一个布尔值，该值指示是否创建的分区应动态加载分区而不是静态分区之间的平衡。
              </param>
      <typeparam name="TSource">
                源数组中元素的类型。
              </typeparam>
      <returns>
              基于输入数组的可排序分区程序。
            </returns>
    </member>
  </members>
</doc>