<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Net.ICredentials">
      <summary>
              提供用于检索 Web 客户端身份验证的凭据的基本身份验证接口。
            </summary>
    </member>
    <member name="M:System.Net.ICredentials.GetCredential(System.Uri,System.String)">
      <summary>
              返回 <see cref="T:System.Net.NetworkCredential" /> 与指定的 URI、 和身份验证类型相关联的对象。
            </summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 客户端提供了有关身份验证。
              </param>
      <param name="authType">
                身份验证，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性。
              </param>
      <returns>
        <see cref="T:System.Net.NetworkCredential" /> 与指定的 URI 和身份验证类型相关联; 如果没有凭据，则有 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.Net.ICredentialsByHost">
      <summary>
              提供用于检索主机、端口和身份验证类型的凭据的接口。
            </summary>
    </member>
    <member name="M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)">
      <summary>
              返回指定的主机、 端口和身份验证协议的凭据。
            </summary>
      <param name="host">
                对客户端进行身份验证的主机。
              </param>
      <param name="port">
                上的端口 <paramref name="host " />客户端与之通信。
              </param>
      <param name="authenticationType">
                身份验证协议中。
              </param>
      <returns>
              一个 <see cref="T:System.Net.NetworkCredential" /> 为指定的主机、 端口和身份验证协议或 <see langword="null" /> 是否有任何凭据可用于指定的主机、 端口和身份验证协议。
            </returns>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>
              提供 Internet 协议 (IP) 地址。
            </summary>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Net.IPAddress" /> 类地址指定为 <see cref="T:System.Byte" /> 数组。
            </summary>
      <param name="address">
                IP 地址的字节数组值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 包含错误的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.Net.IPAddress" /> 类地址指定为 <see cref="T:System.Int64" />。
            </summary>
      <param name="newAddress">
                IP 地址长整型值。
                 例如，值 0x2414188f big endian 格式应该是 IP 地址"143.24.20.36"。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newAddress" /> &lt; 0 或 
                
                  <paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF 
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
      <summary>
              新实例初始化 <see cref="T:System.Net.IPAddress" /> 类地址指定为 <see cref="T:System.Byte" /> 数组和指定的范围标识符。
            </summary>
      <param name="address">
                IP 地址的字节数组值。
              </param>
      <param name="scopeid">
                该范围标识符长整型值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 包含错误的 IP 地址。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scopeid" /> &lt; 0 或 
                
                  <paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF 
                </exception>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>
              Internet 协议 (IP) 地址。
            </summary>
      <returns>
              IP 地址长整型值。
            </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                  地址族是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。
                </exception>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>
              获取 IP 地址的地址族。
            </summary>
      <returns>
              返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ipv4 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ipv6。
            </returns>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>
              提供了一个指示服务器必须侦听的所有网络接口上的客户端活动的 IP 地址。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>
              提供 IP 广播的地址。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>
              比较两个 IP 地址。
            </summary>
      <param name="comparand">
        <see cref="T:System.Net.IPAddress" /> 实例要与当前实例进行比较。
              </param>
      <returns>
        <see langword="true" /> 如果两个地址相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.GetAddressBytes">
      <summary>
              提供了一份 <see cref="T:System.Net.IPAddress" /> 作为字节数组。
            </summary>
      <returns>
        <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>
              返回 IP 地址哈希的值。
            </summary>
      <returns>
              整数哈希值。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>
              将由主机字节顺序的较短的值转换为网络字节顺序。
            </summary>
      <param name="host">
                以主机字节顺序表示要转换的数字。
              </param>
      <returns>
              较短的值，以网络字节顺序表示。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>
              将由主机字节顺序的整数值转换为网络字节顺序。
            </summary>
      <param name="host">
                以主机字节顺序表示要转换的数字。
              </param>
      <returns>
              表示以网络字节顺序的整数值。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>
              将由主机字节顺序的长整型值转换为网络字节顺序。
            </summary>
      <param name="host">
                以主机字节顺序表示要转换的数字。
              </param>
      <returns>
              以网络字节顺序表示一个长值。
            </returns>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Any">
      <summary>
        <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 方法使用 <see cref="F:System.Net.IPAddress.IPv6Any" /> 字段指示 <see cref="T:System.Net.Sockets.Socket" /> 必须侦听的所有网络接口上的客户端活动。
            </summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Loopback">
      <summary>
              提供 IP 环回地址。
               此属性是只读的。
            </summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6None">
      <summary>
              提供了一个指示应使用任何网络接口的 IP 地址。
               此属性是只读的。
            </summary>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
      <summary>
              获取 IP 地址是否为 IPv4 映射 IPv6 地址。
            </summary>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            
              <see langword="true" /> 如果 IP 地址是 IPv4 映射 IPv6 地址;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6LinkLocal">
      <summary>
              获取该地址是否为 IPv6 链接本地地址。
            </summary>
      <returns>
        <see langword="true" /> 如果 IP 地址是 IPv6 链接本地地址;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Multicast">
      <summary>
              获取 IPv6 地址是否多播全局地址。
            </summary>
      <returns>
        <see langword="true" /> 如果 IP 地址是全局 IPv6 多播地址;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6SiteLocal">
      <summary>
              获取该地址是否为 IPv6 站点本地地址。
            </summary>
      <returns>
        <see langword="true" /> 如果 IP 地址是 IPv6 站点本地地址;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Teredo">
      <summary>
              获取指示该地址是 IPv6 Teredo 地址。
            </summary>
      <returns>
        <see langword="true" /> 如果 IP 地址是 IPv6 Teredo 地址;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>
              指示指定的 IP 地址是否对环回地址。
            </summary>
      <param name="address">
                IP 地址。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="address" /> 是环回地址; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>
              提供 IP 环回地址。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.Net.IPAddress.MapToIPv4">
      <summary>
              将 <see cref="T:System.Net.IPAddress" /> 对象映射到 IPv4 地址。
            </summary>
      <returns>
              返回 <see cref="T:System.Net.IPAddress" />。
            
              IPv4 地址。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.MapToIPv6">
      <summary>
              映射 <see cref="T:System.Net.IPAddress" /> 对象传递给 IPv6 地址。
            </summary>
      <returns>
              返回 <see cref="T:System.Net.IPAddress" />。
            
              IPv6 地址。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>
              将由网络字节顺序的较短的值转换为主机字节顺序。
            </summary>
      <param name="network">
                以网络字节顺序表示要转换的数字。
              </param>
      <returns>
              较短的值，以主机字节顺序表示。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>
              将由网络字节顺序的整数值转换为主机字节顺序。
            </summary>
      <param name="network">
                以网络字节顺序表示要转换的数字。
              </param>
      <returns>
              以主机字节顺序表示一个整数值。
            </returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>
              将由网络字节顺序的长整型值转换为主机字节顺序。
            </summary>
      <param name="network">
                以网络字节顺序表示要转换的数字。
              </param>
      <returns>
              表示主机字节顺序的长值。
            </returns>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>
              提供了一个指示应使用任何网络接口的 IP 地址。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>
              IP 地址将字符串转换为 <see cref="T:System.Net.IPAddress" /> 实例。
            </summary>
      <param name="ipString">
                一个字符串，包含点分隔的四表示法对 IPv4 和 IPv6 冒号十六进制表示法中的 IP 地址。
              </param>
      <returns>
              一个 <see cref="T:System.Net.IPAddress" /> 实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipString" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ipString" /> 不是有效的 IP 地址。
                </exception>
    </member>
    <member name="P:System.Net.IPAddress.ScopeId">
      <summary>
              获取或设置 IPv6 地址范围标识符。
            </summary>
      <returns>
              一个指定地址的作用域的长整型。
            </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
        <see langword="AddressFamily" /> = <see langword="InterNetwork" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scopeId" /> &lt; 0
                
                  - 或 -
                
                      <paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF  
                    </exception>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>
              将 Internet 地址转换为其标准表示法。
            </summary>
      <returns>
              一个字符串，包含 IP 地址或 IPv6 冒号十六进制表示法中任一 IPv4 以点分隔四。
            </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                  地址族是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ，地址是不正确。
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
      <summary>
              确定字符串是否为有效 IP 地址。
            </summary>
      <param name="ipString">
                要验证的字符串。
              </param>
      <param name="address">
                字符串的 <see cref="T:System.Net.IPAddress" /> 版本。
              </param>
      <returns>
        <see langword="true" />如果<paramref name="ipString" />能够解析为 IP 地址; 否则为<see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>
              将网络终结点表示为 IP 地址和端口号。
            </summary>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Net.IPEndPoint" /> 类具有指定的地址和端口号。
            </summary>
      <param name="address">
                Internet 主机的 IP 地址。
              </param>
      <param name="port">
                与关联的端口号 <paramref name="address" />, ，或为 0 以指定任何可用端口。
                <paramref name="port" /> 正在主机顺序。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。
                
                  - 或 - 
                
                  <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                
                  - 或 - 
                
                  <paramref name="address" /> 为小于 0 或大于 0x00000000FFFFFFFF。
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Net.IPEndPoint" /> 类具有指定的地址和端口号。
            </summary>
      <param name="address">
                一个 <see cref="T:System.Net.IPAddress" />。
              </param>
      <param name="port">
                与关联的端口号 <paramref name="address" />, ，或为 0 以指定任何可用端口。
                <paramref name="port" /> 正在主机顺序。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。
                
                  - 或 - 
                
                  <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                
                  - 或 - 
                
                  <paramref name="address" /> 为小于 0 或大于 0x00000000FFFFFFFF。
                </exception>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>
              获取或设置终结点的 IP 地址。
            </summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 实例，包含终结点的 IP 地址。
            </returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>
              获取 Internet 协议 (IP) 地址族。
            </summary>
      <returns>
              返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />。
            </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>
              从套接字地址创建一个终结点。
            </summary>
      <param name="socketAddress">
        <see cref="T:System.Net.SocketAddress" /> 要用于终结点。
              </param>
      <returns>
        <see cref="T:System.Net.EndPoint" /> 实例使用指定的套接字地址。
            </returns>
      <exception cref="T:System.ArgumentException">
                  AddressFamily <paramref name="socketAddress" /> 是否不等于当前实例的 AddressFamily。
                
                  - 或 - 
                
                  <paramref name="socketAddress" />.大小 &lt; 8。
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
      <summary>
              确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Object" />。
            </summary>
      <param name="comparand">
                要与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Object" />，则为 <see cref="T:System.Object" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.GetHashCode">
      <summary>
              返回 <see cref="T:System.Net.IPEndPoint" /> 实例的哈希值。
            </summary>
      <returns>
              整数哈希值。
            </returns>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>
              指定可以分配给最大值 <see cref="P:System.Net.IPEndPoint.Port" /> 属性。
               MaxPort 值设置为 0x0000FFFF。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>
              指定可以分配给最小值 <see cref="P:System.Net.IPEndPoint.Port" /> 属性。
               此字段为只读。
            </summary>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>
              获取或设置终结点的端口号。
            </summary>
      <returns>
              范围内的整数值 <see cref="F:System.Net.IPEndPoint.MinPort" /> 到 <see cref="F:System.Net.IPEndPoint.MaxPort" /> ，该值指示终结点的端口号。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  为设置操作是指定的值小于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 或大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>
              序列化到的终结点信息 <see cref="T:System.Net.SocketAddress" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Net.SocketAddress" /> 实例，包含终结点的套接字地址。
            </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>
              返回指定的终结点的 IP 地址和端口号。
            </summary>
      <returns>
              包含 IP 地址和指定的终结点 (例如，192.168.1.2: 80) 的端口号的字符串。
            </returns>
    </member>
    <member name="T:System.Net.IWebProxy">
      <summary>
              提供用于实现的代理访问基接口 <see cref="T:System.Net.WebRequest" /> 类。
            </summary>
    </member>
    <member name="P:System.Net.IWebProxy.Credentials">
      <summary>
              要提交到代理服务器进行身份验证的凭据。
            </summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 实例，其中包含所需的代理服务器对请求进行身份验证的凭据。
            </returns>
    </member>
    <member name="M:System.Net.IWebProxy.GetProxy(System.Uri)">
      <summary>
              返回的代理的 URI。
            </summary>
      <param name="destination">
                一个 <see cref="T:System.Uri" /> ，它指定所请求的 Internet 资源。
              </param>
      <returns>
              一个 <see cref="T:System.Uri" /> 实例，它包含用于联系代理服务器的 URI <paramref name="destination" />。
            </returns>
    </member>
    <member name="M:System.Net.IWebProxy.IsBypassed(System.Uri)">
      <summary>
              指示指定的主机不使用的代理后应。
            </summary>
      <param name="host">
        <see cref="T:System.Uri" /> 要检查代理的主机使用。
              </param>
      <returns>
        <see langword="true" /> 如果代理服务器不应该用于 <paramref name="host" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Net.NetworkCredential">
      <summary>
              为基于密码的身份验证方案（如基本、摘要式、NTLM 和 Kerberos 身份验证）提供凭据。
            </summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.NetworkCredential" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.Security.SecureString)">
      <summary>
              新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名和密码。
            </summary>
      <param name="userName">
                与凭据关联的用户名。
              </param>
      <param name="password">
                与凭据关联的用户名密码。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.SecureString" /> 此平台上不支持类。
                </exception>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名和密码。
            </summary>
      <param name="userName">
                与凭据关联的用户名。
              </param>
      <param name="password">
                与凭据关联的用户名密码。
              </param>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.Security.SecureString,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名、 密码和域。
            </summary>
      <param name="userName">
                与凭据关联的用户名。
              </param>
      <param name="password">
                与凭据关联的用户名密码。
              </param>
      <param name="domain">
                这些凭据与关联的域。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.SecureString" /> 此平台上不支持类。
                </exception>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名、 密码和域。
            </summary>
      <param name="userName">
                与凭据关联的用户名。
              </param>
      <param name="password">
                与凭据关联的用户名密码。
              </param>
      <param name="domain">
                这些凭据与关联的域。
              </param>
    </member>
    <member name="P:System.Net.NetworkCredential.Domain">
      <summary>
              获取或设置验证凭据的域或计算机名称。
            </summary>
      <returns>
              与凭据关联的域的名称。
            </returns>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)">
      <summary>
              返回的实例 <see cref="T:System.Net.NetworkCredential" /> 指定的统一资源标识符 (URI) 和身份验证类型的类。
            </summary>
      <param name="uri">
                客户端提供的身份验证的 URI。
              </param>
      <param name="authType">
                身份验证请求，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性。
              </param>
      <returns>
              一个 <see cref="T:System.Net.NetworkCredential" /> 对象。
            </returns>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)">
      <summary>
              返回的实例 <see cref="T:System.Net.NetworkCredential" /> 类指定的主机、 端口和身份验证类型。
            </summary>
      <param name="host">
                对客户端进行身份验证的主机。
              </param>
      <param name="port">
                上的端口 <paramref name="host" /> 客户端与之通信。
              </param>
      <param name="authenticationType">
                身份验证请求，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性。
              </param>
      <returns>
              一个 <see cref="T:System.Net.NetworkCredential" /> 为指定的主机、 端口和身份验证协议或 <see langword="null" /> 是否有任何凭据可用于指定的主机、 端口和身份验证协议。
            </returns>
    </member>
    <member name="P:System.Net.NetworkCredential.Password">
      <summary>
              获取或设置与凭据关联的用户名的密码。
            </summary>
      <returns>
              与凭据关联的密码。
               如果此 <see cref="T:System.Net.NetworkCredential" /> 与已初始化实例 <paramref name="password" /> 参数设置为 <see langword="null" />, ，则 <see cref="P:System.Net.NetworkCredential.Password" /> 属性将返回一个空字符串。
            </returns>
    </member>
    <member name="P:System.Net.NetworkCredential.SecurePassword">
      <summary>
              获取或设置该密码作为 <see cref="T:System.Security.SecureString" /> 实例。
            </summary>
      <returns>
              与凭据关联的用户名密码。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.SecureString" /> 此平台上不支持类。
                </exception>
    </member>
    <member name="P:System.Net.NetworkCredential.UserName">
      <summary>
              获取或设置与凭据关联的用户名。
            </summary>
      <returns>
              与凭据关联的用户名。
            </returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressCollection">
      <summary>
              将一组存储 <see cref="T:System.Net.IPAddress" /> 类型。
            </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)">
      <summary>
              引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。
            </summary>
      <param name="address">
                要添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Clear">
      <summary>
              引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。
            </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)">
      <summary>
              检查集合是否包含指定 <see cref="T:System.Net.IPAddress" /> 对象。
            </summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 要在集合中搜索对象。
              </param>
      <returns>
              true 如果 <see cref="T:System.Net.IPAddress" /> 对象存在于集合; 否则为 false。
            </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)">
      <summary>
              将元素复制到一维数组类型的此集合中 <see cref="T:System.Net.IPAddress" />。
            </summary>
      <param name="array">
                一维数组，用于接收集合的副本。
              </param>
      <param name="offset">
                中的从零开始索引 <paramref name="array" /> 处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                    
                  - 或 - 
                
                  在此元素的数目 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 大于从的可用空间 <paramref name="offset" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  在此元素 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Count">
      <summary>
              获取的数 <see cref="T:System.Net.IPAddress" /> 此集合中的类型。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含数 <see cref="T:System.Net.IPAddress" /> 此集合中的类型。
            </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.GetEnumerator">
      <summary>
              返回可用于循环访问此集合的对象。
            </summary>
      <returns>
              实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 此集合中的类型。
            </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.IsReadOnly">
      <summary>
              获取一个值，该值指示对此集合的访问是否为只读的。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Net.IPAddress" /> 集合的特定索引处。
            </summary>
      <param name="index">
                感兴趣的索引。
              </param>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 集合中的特定索引处。
            </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)">
      <summary>
              引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。
            </summary>
      <param name="address">
                要删除的对象。
              </param>
      <returns>
              总是引发 <see cref="T:System.NotSupportedException" />。
            </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回可用于循环访问此集合的对象。
            </summary>
      <returns>
              实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 此集合中的类型。
            </returns>
    </member>
    <member name="T:System.Net.Cookie">
      <summary>
              提供一组用于管理 Cookie 的属性和方法。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.Cookie" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Net.Cookie" /> 与指定类 <see cref="P:System.Net.Cookie.Name" /> 和 <see cref="P:System.Net.Cookie.Value" />。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Net.Cookie" />。
                 以下字符必须不在内部使用 <paramref name="name" />︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。
                 美元符号字符 （"$"） 不能为第一个字符。
              </param>
      <param name="value">
                值 <see cref="T:System.Net.Cookie" />。
                 以下字符必须不在内部使用 <paramref name="value" />︰ 分号、 逗号。
              </param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="name" /> 参数长度为零。
                
                  - 或 - 
                
                  <paramref name="name" /> 参数包含无效字符。
                
                  - 或 - 
                
                  <paramref name="value" /> 参数是 <see langword="null" /> 。
                
                  - 或 - 
                
                  <paramref name="value" /> 参数包含一个包含无效字符的字符串未用引号引起来。
                </exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Net.Cookie" /> 与指定类 <see cref="P:System.Net.Cookie.Name" />, ，<see cref="P:System.Net.Cookie.Value" />, ，和 <see cref="P:System.Net.Cookie.Path" />。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Net.Cookie" />。
                 以下字符必须不在内部使用 <paramref name="name" />︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。
                 美元符号字符 （"$"） 不能为第一个字符。
              </param>
      <param name="value">
                值 <see cref="T:System.Net.Cookie" />。
                 以下字符必须不在内部使用 <paramref name="value" />︰ 分号、 逗号。
              </param>
      <param name="path">
                与此源服务器上的 Uri 的子集 <see cref="T:System.Net.Cookie" /> 适用。
                 默认值是"/"。
              </param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="name" /> 参数长度为零。
                
                  - 或 - 
                
                  <paramref name="name" /> 参数包含无效字符。
                
                  - 或 - 
                
                  <paramref name="value" /> 参数是 <see langword="null" /> 。
                
                  - 或 - 
                
                  <paramref name="value" /> 参数包含一个包含无效字符的字符串未用引号引起来。
                </exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Net.Cookie" /> 与指定类 <see cref="P:System.Net.Cookie.Name" />, ，<see cref="P:System.Net.Cookie.Value" />, ，<see cref="P:System.Net.Cookie.Path" />, ，和 <see cref="P:System.Net.Cookie.Domain" />。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Net.Cookie" />。
                 以下字符必须不在内部使用 <paramref name="name" />︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。
                 美元符号字符 （"$"） 不能为第一个字符。
              </param>
      <param name="value">
                值 <see cref="T:System.Net.Cookie" /> 对象。
                 以下字符必须不在内部使用 <paramref name="value" />︰ 分号、 逗号。
              </param>
      <param name="path">
                与此源服务器上的 Uri 的子集 <see cref="T:System.Net.Cookie" /> 适用。
                 默认值是"/"。
              </param>
      <param name="domain">
                此可选的 internet 域 <see cref="T:System.Net.Cookie" /> 是否有效。
                 默认值这是主机 <see cref="T:System.Net.Cookie" /> 尚未收到来自。
              </param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="name" /> 参数长度为零。
                
                  - 或 - 
                
                  <paramref name="name" /> 参数包含无效字符。
                
                  - 或 - 
                
                  <paramref name="value" /> 参数是 <see langword="null" /> 。
                
                  - 或 - 
                
                  <paramref name="value" /> 参数包含一个包含无效字符的字符串未用引号引起来。
                </exception>
    </member>
    <member name="P:System.Net.Cookie.Comment">
      <summary>
              获取或设置可以将服务器添加到注释 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
              对文档的可选备注适用于此用法 <see cref="T:System.Net.Cookie" />。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.CommentUri">
      <summary>
              获取或设置服务器可以为提供的 URI 注释 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
              表示此 URI 引用的预期的用法的可选备注 <see cref="T:System.Net.Cookie" />。
               值必须符合 URI 格式。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Discard">
      <summary>
              获取或设置由服务器设置的丢弃标志。
            </summary>
      <returns>
        <see langword="true" /> 如果客户端就是必须放弃 <see cref="T:System.Net.Cookie" /> 末尾的当前会话; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Domain">
      <summary>
              获取或设置 URI，其中 <see cref="T:System.Net.Cookie" /> 是否有效。
            </summary>
      <returns>
              为其 URI <see cref="T:System.Net.Cookie" /> 是否有效。
            </returns>
    </member>
    <member name="M:System.Net.Cookie.Equals(System.Object)">
      <summary>
              重写 <see cref="M:System.Object.Equals(System.Object)" /> 方法。
            </summary>
      <param name="comparand">
                对引用 <see cref="T:System.Net.Cookie" />。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Net.Cookie" /> 是否等同于 <paramref name="comparand" />。
               两个 <see cref="T:System.Net.Cookie" /> 实例相等，如果其 <see cref="P:System.Net.Cookie.Name" />, ，<see cref="P:System.Net.Cookie.Value" />, ，<see cref="P:System.Net.Cookie.Path" />, ，<see cref="P:System.Net.Cookie.Domain" />, ，和 <see cref="P:System.Net.Cookie.Version" /> 属性是否相等。
              <see cref="P:System.Net.Cookie.Name" /> 和 <see cref="P:System.Net.Cookie.Domain" /> 字符串比较不区分大小写。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Expired">
      <summary>
              获取或设置的当前状态 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Net.Cookie" /> 已过期; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Expires">
      <summary>
              获取或设置的过期日期和时间 <see cref="T:System.Net.Cookie" /> 作为 <see cref="T:System.DateTime" />。
            </summary>
      <returns>
              到期日期和时间 <see cref="T:System.Net.Cookie" /> 作为 <see cref="T:System.DateTime" /> 实例。
            </returns>
    </member>
    <member name="M:System.Net.Cookie.GetHashCode">
      <summary>
              重写 <see cref="M:System.Object.GetHashCode" /> 方法。
            </summary>
      <returns>
              此实例的 32 位有符号的整数哈希代码。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.HttpOnly">
      <summary>
              确定页脚本或其他活动内容是否可访问此 cookie。
            </summary>
      <returns>
              布尔值，该值确定页面脚本或其他活动内容是否可以访问此 cookie。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Name">
      <summary>
              获取或设置的名称 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
        <see cref="T:System.Net.Cookie" /> 的名称。
            </returns>
      <exception cref="T:System.Net.CookieException">
                  为设置操作是指定的值 <see langword="null" /> 或空字符串
                
                  - 或 -
                
                  设置操作为指定的值包含非法字符。
                   以下字符必须不在内部使用 <see cref="P:System.Net.Cookie.Name" /> 属性︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。
                   美元符号字符 （"$"） 不能为第一个字符。
                </exception>
    </member>
    <member name="P:System.Net.Cookie.Path">
      <summary>
              获取或设置到的 Uri <see cref="T:System.Net.Cookie" /> 适用。
            </summary>
      <returns>
              向其 Uri <see cref="T:System.Net.Cookie" /> 适用。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Port">
      <summary>
              获取或设置 TCP 端口的列表， <see cref="T:System.Net.Cookie" /> 适用范围。
            </summary>
      <returns>
              列表中的 TCP 端口 <see cref="T:System.Net.Cookie" /> 适用于。
            </returns>
      <exception cref="T:System.Net.CookieException">
                  设置操作为指定的值无法分析或没有用双引号括起来。
                </exception>
    </member>
    <member name="P:System.Net.Cookie.Secure">
      <summary>
              获取或设置安全级别为 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
        <see langword="true" /> 如果客户端是仅返回该 cookie 在后续请求中，如果这些请求都使用安全超文本传输协议 (HTTPS);否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.TimeStamp">
      <summary>
              获取作为该 cookie 是的颁发时 <see cref="T:System.DateTime" />。
            </summary>
      <returns>
              当以颁发 cookie 的时间 <see cref="T:System.DateTime" />。
            </returns>
    </member>
    <member name="M:System.Net.Cookie.ToString">
      <summary>
              重写 <see cref="M:System.Object.ToString" /> 方法。
            </summary>
      <returns>
              返回的字符串表示形式 <see cref="T:System.Net.Cookie" /> 适用于 HTTP Cookie 中包括的对象︰ 请求标头。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Value">
      <summary>
              获取或设置 <see cref="P:System.Net.Cookie.Value" /> 的 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
        <see cref="P:System.Net.Cookie.Value" /> 的 <see cref="T:System.Net.Cookie" />。
            </returns>
    </member>
    <member name="P:System.Net.Cookie.Version">
      <summary>
              获取或设置 cookie 符合 HTTP 状态维护的版本。
            </summary>
      <returns>
              Cookie 一致的 HTTP 状态维护版本。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  不允许指定的版本的值。
                </exception>
    </member>
    <member name="T:System.Net.CookieCollection">
      <summary>
              提供集合容器的实例 <see cref="T:System.Net.Cookie" /> 类。
            </summary>
    </member>
    <member name="M:System.Net.CookieCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.CookieCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.Cookie)">
      <summary>
              添加 <see cref="T:System.Net.Cookie" /> 到 <see cref="T:System.Net.CookieCollection" />。
            </summary>
      <param name="cookie">
        <see cref="T:System.Net.Cookie" /> 要添加到 <see cref="T:System.Net.CookieCollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.CookieCollection)">
      <summary>
              将内容添加 <see cref="T:System.Net.CookieCollection" /> 与当前实例。
            </summary>
      <param name="cookies">
                要添加的 <see cref="T:System.Net.CookieCollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              中的元素复制 <see cref="T:System.Net.CookieCollection" /> 实例 <see cref="T:System.Array" /> 类，从特定索引处开始。
            </summary>
      <param name="array">
                目标 <see cref="T:System.Array" /> 到 <see cref="T:System.Net.CookieCollection" /> 将被复制。
              </param>
      <param name="index">
                在目标中从零开始的索引 <see cref="T:System.Array" /> 开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  在此元素的数目 <see cref="T:System.Net.CookieCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  在此元素 <see cref="T:System.Net.CookieCollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Net.Cookie[],System.Int32)">
      <summary>
              此元素复制 <see cref="T:System.Net.CookieCollection" /> 到 <see cref="T:System.Net.Cookie" /> 数组中从目标数组的指定索引处开始。
            </summary>
      <param name="array">
                目标 <see cref="T:System.Net.Cookie" /> 数组转换为其 <see cref="T:System.Net.CookieCollection" /> 将被复制。
              </param>
      <param name="index">
                在目标中从零开始的索引 <see cref="T:System.Array" /> 开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  在此元素的数目 <see cref="T:System.Net.CookieCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  在此元素 <see cref="T:System.Net.CookieCollection" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Net.CookieCollection.Count">
      <summary>
              获取 cookie 中包含的数 <see cref="T:System.Net.CookieCollection" />。
            </summary>
      <returns>
              中包含的 cookie 数 <see cref="T:System.Net.CookieCollection" />。
            </returns>
    </member>
    <member name="M:System.Net.CookieCollection.GetEnumerator">
      <summary>
              获取可循环访问的枚举器 <see cref="T:System.Net.CookieCollection" />。
            </summary>
      <returns>
              实现的实例 <see cref="T:System.Collections.IEnumerator" /> 可循环访问的接口 <see cref="T:System.Net.CookieCollection" />。
            </returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsReadOnly">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Net.CookieCollection" /> 是只读的。
            </summary>
      <returns>
        <see langword="true" /> 如果这是一个只读的 <see cref="T:System.Net.CookieCollection" />; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsSynchronized">
      <summary>
              获取一个值，该值指示是否访问 <see cref="T:System.Net.CookieCollection" /> 是线程安全的。
            </summary>
      <returns>
        <see langword="true" /> 如果访问 <see cref="T:System.Net.CookieCollection" /> 是线程安全的; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.Int32)">
      <summary>
              获取 <see cref="T:System.Net.Cookie" /> 具有从特定索引 <see cref="T:System.Net.CookieCollection" />。
            </summary>
      <param name="index">
                从零开始的索引 <see cref="T:System.Net.Cookie" /> 要查找。
              </param>
      <returns>
              一个 <see cref="T:System.Net.Cookie" /> 具有从特定索引 <see cref="T:System.Net.CookieCollection" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或 <paramref name="index" /> 是否大于或等于 <see cref="P:System.Net.CookieCollection.Count" />。
                </exception>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Net.Cookie" /> 具有特定名称从 <see cref="T:System.Net.CookieCollection" />。
            </summary>
      <param name="name">
                名称 <see cref="T:System.Net.Cookie" /> 要查找。
              </param>
      <returns>
        <see cref="T:System.Net.Cookie" /> 具有特定名称从 <see cref="T:System.Net.CookieCollection" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Net.CookieCollection.SyncRoot">
      <summary>
              获取一个对象对访问进行同步 <see cref="T:System.Net.CookieCollection" />。
            </summary>
      <returns>
              对访问进行同步的对象 <see cref="T:System.Net.CookieCollection" />。
            </returns>
    </member>
    <member name="M:System.Net.CookieCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <param name="array">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="P:System.Net.CookieCollection.System#Collections#ICollection#IsSynchronized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Net.CookieCollection.System#Collections#ICollection#SyncRoot">
      <returns>
      </returns>
    </member>
    <member name="T:System.Net.CookieContainer">
      <summary>
              为集合提供容器 <see cref="T:System.Net.CookieCollection" /> 对象。
            </summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.CookieContainer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32)">
      <summary>
              初始化的新实例 <see cref="T:System.Net.CookieContainer" /> 类具有指定值的数目 <see cref="T:System.Net.Cookie" /> 容器可以包含的实例。
            </summary>
      <param name="capacity">
                数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> 小于或等于零。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Net.CookieContainer" /> 具有特定属性的类。
            </summary>
      <param name="capacity">
                数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。
              </param>
      <param name="perDomainCapacity">
                数 <see cref="T:System.Net.Cookie" /> 每个域的实例。
              </param>
      <param name="maxCookieSize">
                最大大小 （字节） 对任何单一 <see cref="T:System.Net.Cookie" /> 中 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="perDomainCapacity" /> 不等于 <see cref="F:System.Int32.MaxValue" />。
                
                  和 
                
                  <paramref name="(perDomainCapacity" /> 小于或等于零或 <paramref name="perDomainCapacity" /> 大于 <paramref name="capacity)" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxCookieSize" /> 小于或等于零。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.Cookie)">
      <summary>
              添加 <see cref="T:System.Net.Cookie" /> 到 <see cref="T:System.Net.CookieContainer" />。
               此方法使用从域 <see cref="T:System.Net.Cookie" /> 来确定哪些域集合相关联 <see cref="T:System.Net.Cookie" /> 与。
            </summary>
      <param name="cookie">
                要添加到 <see cref="T:System.Net.Cookie" /> 的 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  对于域 <paramref name="cookie" /> 是 <see langword="null" /> 或空字符串 ("")。
                </exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> 大于 <paramref name="maxCookieSize" />。
                
                  - 或 - 
                
                  对于域 <paramref name="cookie" /> 不是有效的 URI。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.CookieCollection)">
      <summary>
              将内容添加 <see cref="T:System.Net.CookieCollection" /> 到 <see cref="T:System.Net.CookieContainer" />。
            </summary>
      <param name="cookies">
                要添加到 <see cref="T:System.Net.CookieCollection" /> 的 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.Cookie)">
      <summary>
              添加 <see cref="T:System.Net.Cookie" /> 到 <see cref="T:System.Net.CookieContainer" /> 特定 uri。
            </summary>
      <param name="uri">
                URI 的 <see cref="T:System.Net.Cookie" /> 要添加到 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <param name="cookie">
                要添加到 <see cref="T:System.Net.Cookie" /> 的 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" /> 或 <paramref name="cookie" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> 大于 <paramref name="maxCookieSize" />。
                
                  - 或 - 
                
                  对于域 <paramref name="cookie" /> 不是有效的 URI。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.CookieCollection)">
      <summary>
              将内容添加 <see cref="T:System.Net.CookieCollection" /> 到 <see cref="T:System.Net.CookieContainer" /> 特定 uri。
            </summary>
      <param name="uri">
                URI 的 <see cref="T:System.Net.CookieCollection" /> 要添加到 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <param name="cookies">
                要添加到 <see cref="T:System.Net.CookieCollection" /> 的 <see cref="T:System.Net.CookieContainer" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  一个 cookie 中的域 <paramref name="cookies" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Net.CookieException">
                  中的 cookie 之一 <paramref name="cookies" /> 包含了无效的域。
                </exception>
    </member>
    <member name="P:System.Net.CookieContainer.Capacity">
      <summary>
              获取和设置数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。
            </summary>
      <returns>
              数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。
               这是一种硬性限制，不能超过通过添加 <see cref="T:System.Net.Cookie" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="Capacity" /> 小于或等于零或 (值是小于 <see cref="P:System.Net.CookieContainer.PerDomainCapacity" /> 和 <see cref="P:System.Net.CookieContainer.PerDomainCapacity" /> 是否不等于 <see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="P:System.Net.CookieContainer.Count">
      <summary>
              获取的数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 当前持有。
            </summary>
      <returns>
              数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 当前持有。
               这是总数的 <see cref="T:System.Net.Cookie" /> 中的所有域的实例。
            </returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLengthLimit">
      <summary>
              表示的默认最大大小，以字节为单位， <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLimit">
      <summary>
              表示默认最大数量的 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultPerDomainCookieLimit">
      <summary>
              表示默认最大数量的 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以引用每个域。
               此字段为常数。
            </summary>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookieHeader(System.Uri)">
      <summary>
              获取包含表示的 HTTP cookie 的 HTTP cookie 标头 <see cref="T:System.Net.Cookie" /> 与特定 URI 相关联的实例。
            </summary>
      <param name="uri">
                URI 的 <see cref="T:System.Net.Cookie" /> 所需的实例。
              </param>
      <returns>
              HTTP cookie 标头，使用字符串表示 <see cref="T:System.Net.Cookie" /> 用分号分隔的实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookies(System.Uri)">
      <summary>
              获取 <see cref="T:System.Net.CookieCollection" /> ，其中包含 <see cref="T:System.Net.Cookie" /> 与特定 URI 相关联的实例。
            </summary>
      <param name="uri">
                URI 的 <see cref="T:System.Net.Cookie" /> 所需的实例。
              </param>
      <returns>
              一个 <see cref="T:System.Net.CookieCollection" /> ，其中包含 <see cref="T:System.Net.Cookie" /> 与特定 URI 相关联的实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Net.CookieContainer.MaxCookieSize">
      <summary>
              表示允许的长度最大 <see cref="T:System.Net.Cookie" />。
            </summary>
      <returns>
              长度 （字节），允许的最大 <see cref="T:System.Net.Cookie" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="MaxCookieSize" /> 小于或等于零。
                </exception>
    </member>
    <member name="P:System.Net.CookieContainer.PerDomainCapacity">
      <summary>
              获取和设置数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳每个域。
            </summary>
      <returns>
              数 <see cref="T:System.Net.Cookie" /> 允许每个域的实例。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="PerDomainCapacity" /> 小于或等于零。
                
                  - 或 - 
                
                  <paramref name="(PerDomainCapacity" /> 超出了允许的最大 cookie 数实例，300，并且不等于 <see cref="F:System.Int32.MaxValue" />)。
                </exception>
    </member>
    <member name="M:System.Net.CookieContainer.SetCookies(System.Uri,System.String)">
      <summary>
              添加 <see cref="T:System.Net.Cookie" /> 实例的 HTTP cookie 标头与一个或多个 cookie <see cref="T:System.Net.CookieContainer" /> 为特定的 URI。
            </summary>
      <param name="uri">
                URI 的 <see cref="T:System.Net.CookieCollection" />。
              </param>
      <param name="cookieHeader">
                HTTP 设置 cookie 的内容标头返回的 HTTP 服务器时，与 <see cref="T:System.Net.Cookie" /> 以逗号分隔的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookieHeader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Net.CookieException">
                  其中一个 cookie 无效。
                
                  - 或 - 
                
                  将一个 cookie 添加到容器时出错。
                </exception>
    </member>
    <member name="T:System.Net.CookieException">
      <summary>
              向 <see cref="T:System.Net.CookieContainer" /> 添加 <see cref="T:System.Net.Cookie" /> 出错时引发的异常。
            </summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.CookieException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Net.CookieException" /> 类具有特定值的 <paramref name="serializationInfo" /> 和 <paramref name="streamingContext" />。
            </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要使用。
              </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 要使用。
              </param>
    </member>
    <member name="M:System.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.CookieException" />。
            </summary>
      <param name="serializationInfo">
                承载序列化对象数据的对象。
                 要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
              </param>
      <param name="streamingContext">
                关于来源和目标的上下文信息
                 用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
              </param>
    </member>
    <member name="M:System.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.CookieException" />。
            </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要使用。
              </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 要使用。
              </param>
    </member>
    <member name="T:System.Net.CredentialCache">
      <summary>
              为多个凭据提供存储空间。
            </summary>
    </member>
    <member name="M:System.Net.CredentialCache.#ctor">
      <summary>
              创建 <see cref="T:System.Net.CredentialCache" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)">
      <summary>
              添加 <see cref="T:System.Net.NetworkCredential" /> 用于协议 SMTP 以外，以及将其与统一资源标识符 (URI) 前缀和身份验证协议关联到凭据缓存实例。
            </summary>
      <param name="uriPrefix">
                一个 <see cref="T:System.Uri" /> ，它指定凭据授予访问权的资源的 URI 前缀。
              </param>
      <param name="authType">
                在名为的资源使用的身份验证方案 <paramref name="uriPrefix" />。
              </param>
      <param name="cred">
        <see cref="T:System.Net.NetworkCredential" /> 将添加到凭据缓存。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="authType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  不止一次添加相同的凭据。
                </exception>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)">
      <summary>
              添加 <see cref="T:System.Net.NetworkCredential" /> 凭据缓存与 SMTP 一起使用的实例并将其与主机的计算机、 端口和身份验证协议。
               使用此方法添加的凭据才是有效的 SMTP。
               由于 HTTP 或 FTP 请求时，此方法不起作用。
            </summary>
      <param name="host">
                一个 <see cref="T:System.String" /> 标识主计算机。
              </param>
      <param name="port">
                一个 <see cref="T:System.Int32" /> ，它指定要连接到打开的端口 <paramref name="host" />。
              </param>
      <param name="authenticationType">
                一个 <see cref="T:System.String" /> ，它标识连接到时使用的身份验证方案 <paramref name="host" /> 使用 <paramref name="cred" />。
                 请参阅“备注”。
              </param>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 将添加到凭据缓存。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="authType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> 不接受的值。
                   请参阅“备注”。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于零。
                </exception>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultCredentials">
      <summary>
              获取应用程序的系统凭据。
            </summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 表示应用程序的系统凭据。
            </returns>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultNetworkCredentials">
      <summary>
              获取当前安全上下文的网络凭据。
            </summary>
      <returns>
        <see cref="T:System.Net.NetworkCredential" /> 表示的当前用户或应用程序的网络凭据。
            </returns>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)">
      <summary>
              返回 <see cref="T:System.Net.NetworkCredential" /> 实例与指定的统一资源标识符 (URI) 和身份验证类型相关联。
            </summary>
      <param name="uriPrefix">
                一个 <see cref="T:System.Uri" /> ，它指定凭据授予访问权的资源的 URI 前缀。
              </param>
      <param name="authType">
                在名为的资源使用的身份验证方案 <paramref name="uriPrefix" />。
              </param>
      <returns>
              一个 <see cref="T:System.Net.NetworkCredential" /> 或者，如果在缓存中，没有任何匹配的凭据 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 或 <paramref name="authType" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)">
      <summary>
              返回 <see cref="T:System.Net.NetworkCredential" /> 实例与指定的主机、 端口和身份验证协议相关联。
            </summary>
      <param name="host">
                一个 <see cref="T:System.String" /> 标识主计算机。
              </param>
      <param name="port">
                一个 <see cref="T:System.Int32" /> ，它指定要连接到打开的端口 <paramref name="host" />。
              </param>
      <param name="authenticationType">
                一个 <see cref="T:System.String" /> ，它标识连接到时使用的身份验证方案 <paramref name="host" />。
                 请参阅“备注”。
              </param>
      <returns>
              一个 <see cref="T:System.Net.NetworkCredential" /> 或者，如果在缓存中，没有任何匹配的凭据 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="authType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> 不接受的值。
                   请参阅“备注”。
                
                  - 或 -
                
                  <paramref name="host" /> 等于空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetEnumerator">
      <summary>
              返回可循环访问 <see cref="T:System.Net.CredentialCache" /> 实例的枚举器。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Net.CredentialCache" />。
            </returns>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.Uri,System.String)">
      <summary>
              删除 <see cref="T:System.Net.NetworkCredential" /> 实例从缓存中，如果与指定的统一资源标识符 (URI) 前缀和身份验证协议相关联。
            </summary>
      <param name="uriPrefix">
                一个 <see cref="T:System.Uri" /> ，它指定凭据所用于的资源的 URI 前缀。
              </param>
      <param name="authType">
                在名为主机所使用的身份验证方案 <paramref name="uriPrefix" />。
              </param>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)">
      <summary>
              删除 <see cref="T:System.Net.NetworkCredential" /> 实例从缓存中，如果与指定的主机、 端口和身份验证协议相关联。
            </summary>
      <param name="host">
                一个 <see cref="T:System.String" /> 标识主计算机。
              </param>
      <param name="port">
                一个 <see cref="T:System.Int32" /> ，它指定要连接到打开的端口 <paramref name="host" />。
              </param>
      <param name="authenticationType">
                一个 <see cref="T:System.String" /> ，它标识连接到时使用的身份验证方案 <paramref name="host" />。
                 请参阅“备注”。
              </param>
    </member>
    <member name="T:System.Net.DecompressionMethods">
      <summary>
              表示要用于压缩响应中收到的数据的文件压缩和解压缩编码格式 <see cref="T:System.Net.HttpWebRequest" />。
            </summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.Deflate">
      <summary>
              使用 deflate 压缩解压缩算法。
            </summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.GZip">
      <summary>
              使用 gZip 压缩解压缩算法。
            </summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.None">
      <summary>
              不使用压缩。
            </summary>
    </member>
    <member name="T:System.Net.DnsEndPoint">
      <summary>
              将网络终结点表示为主机名或 IP 地址和端口号的字符串表示方法。
            </summary>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Net.DnsEndPoint" /> 类的主机名或字符串表示形式的 IP 地址和端口号。
            </summary>
      <param name="host">
                主机名或 IP 地址的字符串表示。
              </param>
      <param name="port">
                关联的端口号与地址，则为 0 来指定任何可用端口。
                <paramref name="port" /> 正在主机顺序。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="host" /> 参数包含一个空字符串。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。
                
                  - 或 - 
                
                  <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                </exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>
              新实例初始化 <see cref="T:System.Net.DnsEndPoint" /> 类的主机名或字符串表示形式的 IP 地址、 端口号和地址族。
            </summary>
      <param name="host">
                主机名或 IP 地址的字符串表示。
              </param>
      <param name="port">
                关联的端口号与地址，则为 0 来指定任何可用端口。
                <paramref name="port" /> 正在主机顺序。
              </param>
      <param name="addressFamily">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="host" /> 参数包含一个空字符串。
                
                  - 或 - 
                
                  <paramref name="addressFamily" /> 为 <see cref="F:System.Net.Sockets.AddressFamily.Unknown" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。
                
                  - 或 - 
                
                  <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                </exception>
    </member>
    <member name="P:System.Net.DnsEndPoint.AddressFamily">
      <summary>
              获取 Internet 协议 (IP) 地址族。
            </summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.Equals(System.Object)">
      <summary>
              比较两个 <see cref="T:System.Net.DnsEndPoint" /> 对象。
            </summary>
      <param name="comparand">
                一个 <see cref="T:System.Net.DnsEndPoint" /> 实例要与当前实例进行比较。
              </param>
      <returns>
        <see langword="true" /> 如果两个 <see cref="T:System.Net.DnsEndPoint" /> 实例是否相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.GetHashCode">
      <summary>
              返回的哈希值 <see cref="T:System.Net.DnsEndPoint" />。
            </summary>
      <returns>
              整数哈希值 <see cref="T:System.Net.DnsEndPoint" />。
            </returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Host">
      <summary>
              获取宿主的 Internet 协议 (IP) 地址的主机名或字符串表示形式。
            </summary>
      <returns>
              IP 地址的主机名或字符串表示形式。
            </returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Port">
      <summary>
              获取端口号 <see cref="T:System.Net.DnsEndPoint" />。
            </summary>
      <returns>
              0 到 0xffff 之间的端口号，该值指示的范围内的整数值 <see cref="T:System.Net.DnsEndPoint" />。
            </returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.ToString">
      <summary>
              返回主机名或字符串表示形式的 IP 地址和端口号 <see cref="T:System.Net.DnsEndPoint" />。
            </summary>
      <returns>
              一个包含地址族、 主机名或 IP 地址字符串和指定的端口号的字符串 <see cref="T:System.Net.DnsEndPoint" />。
            </returns>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>
              标识网络地址。
               这是一个 <see langword="abstract" /> 类。
            </summary>
    </member>
    <member name="M:System.Net.EndPoint.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.EndPoint" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>
              获取终结点所属的地址族。
            </summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  任何尝试获取或设置该属性不在子代类中重写该属性时。
                </exception>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>
              创建 <see cref="T:System.Net.EndPoint" /> 实例从 <see cref="T:System.Net.SocketAddress" /> 实例。
            </summary>
      <param name="socketAddress">
                套接字地址作为连接的终结点。
              </param>
      <returns>
              一个新 <see cref="T:System.Net.EndPoint" /> ，它是实例的指定初始化 <see cref="T:System.Net.SocketAddress" /> 实例。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  任何尝试进行不在子代类中重写时，访问该方法。
                </exception>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>
              序列化到的终结点信息 <see cref="T:System.Net.SocketAddress" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Net.SocketAddress" /> 实例，它包含的终结点信息。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  任何尝试进行不在子代类中重写时，访问该方法。
                </exception>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>
              包含为 HTTP 定义的状态代码的值。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Accepted">
      <summary>
              等效于 HTTP 状态 202。
              <see cref="F:System.Net.HttpStatusCode.Accepted" /> 指示请求已被接受进行进一步处理。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Ambiguous">
      <summary>
              等效于 HTTP 状态 300。
              <see cref="F:System.Net.HttpStatusCode.Ambiguous" /> 指示所需的信息有多种表示形式。
               默认操作是将此状态视为一个重定向，并按照与此响应关联的位置标头的内容。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadGateway">
      <summary>
              等效于 HTTP 状态 502。
              <see cref="F:System.Net.HttpStatusCode.BadGateway" /> 指示中间代理服务器从另一个代理或原始服务器接收到错误响应。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadRequest">
      <summary>
              等效于 HTTP 状态 400。
              <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 指示无法由服务器理解此请求。
              <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 如果没有其他错误适用，或者如果具体的错误是未知的或不具有其自己的错误代码发送。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Conflict">
      <summary>
              等效于 HTTP 状态 409。
              <see cref="F:System.Net.HttpStatusCode.Conflict" /> 指示该请求可能不会执行由于在服务器上发生冲突。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Continue">
      <summary>
              等效于 HTTP 状态 100。
              <see cref="F:System.Net.HttpStatusCode.Continue" /> 指示客户端可以继续其请求。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Created">
      <summary>
              等效于 HTTP 状态 201。
              <see cref="F:System.Net.HttpStatusCode.Created" /> 指示请求导致已发送响应之前创建一个新的资源。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
      <summary>
              等效于 HTTP 状态 417。
              <see cref="F:System.Net.HttpStatusCode.ExpectationFailed" /> 指示无法由服务器满足 Expect 标头中给定。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Forbidden">
      <summary>
              等效于 HTTP 状态 403。
              <see cref="F:System.Net.HttpStatusCode.Forbidden" /> 指示服务器拒绝无法完成请求。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Found">
      <summary>
              等效于 HTTP 状态 302。
              <see cref="F:System.Net.HttpStatusCode.Found" /> 指示所需的信息位于的位置标头中指定的 URI。
               当收到此状态时的默认操作是遵循与响应关联的位置标头。
               当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
      <summary>
              等效于 HTTP 状态 504。
              <see cref="F:System.Net.HttpStatusCode.GatewayTimeout" /> 指示中间代理服务器在等待来自另一个代理或原始服务器的响应时已超时。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Gone">
      <summary>
              等效于 HTTP 状态 410。
              <see cref="F:System.Net.HttpStatusCode.Gone" /> 指示所请求的资源不再可用。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
      <summary>
              等效于 HTTP 状态 505。
              <see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported" /> 指示服务器不支持请求的 HTTP 版本。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.InternalServerError">
      <summary>
              等效于 HTTP 状态 500。
              <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 表示在服务器上发生一般性错误。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.LengthRequired">
      <summary>
              等效于 HTTP 状态 411。
              <see cref="F:System.Net.HttpStatusCode.LengthRequired" /> 指示缺少必需的内容长度标头。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
      <summary>
              等效于 HTTP 状态 405。
              <see cref="F:System.Net.HttpStatusCode.MethodNotAllowed" /> 指示请求方法 （POST 或 GET） 不允许对所请求的资源。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Moved">
      <summary>
              等效于 HTTP 状态 301。
              <see cref="F:System.Net.HttpStatusCode.Moved" /> 指示已将所需的信息移动到的位置标头中指定的 URI。
               当收到此状态时的默认操作是遵循与响应关联的位置标头。
               当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MovedPermanently">
      <summary>
              等效于 HTTP 状态 301。
              <see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> 指示已将所需的信息移动到的位置标头中指定的 URI。
               当收到此状态时的默认操作是遵循与响应关联的位置标头。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MultipleChoices">
      <summary>
              等效于 HTTP 状态 300。
              <see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> 指示所需的信息有多种表示形式。
               默认操作是将此状态视为一个重定向，并按照与此响应关联的位置标头的内容。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NoContent">
      <summary>
              等效于 HTTP 状态 204。
              <see cref="F:System.Net.HttpStatusCode.NoContent" /> 指示已成功处理请求和响应是有意留为空白。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
      <summary>
              等效于 HTTP 状态 203。
              <see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation" /> 指示返回的元信息来自而不是原始服务器的缓存副本，因此可能不正确。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotAcceptable">
      <summary>
              等效于 HTTP 状态 406。
              <see cref="F:System.Net.HttpStatusCode.NotAcceptable" /> 表示客户端已指定使用 Accept 标头，它将不接受任何可用的资源表示。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>
              等效于 HTTP 状态 404。
              <see cref="F:System.Net.HttpStatusCode.NotFound" /> 指示所请求的资源不存在的服务器上。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotImplemented">
      <summary>
              等效于 HTTP 状态 501。
              <see cref="F:System.Net.HttpStatusCode.NotImplemented" /> 指示服务器不支持所请求的功能。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotModified">
      <summary>
              等效于 HTTP 状态 304。
              <see cref="F:System.Net.HttpStatusCode.NotModified" /> 指示客户端的缓存的副本是最新。
               不会传输资源的内容。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>
              等效于 HTTP 状态 200。
              <see cref="F:System.Net.HttpStatusCode.OK" /> 指示请求成功，且请求的信息包含在响应中。
               这是要接收的最常见状态代码。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PartialContent">
      <summary>
              等效于 HTTP 206 状态。
              <see cref="F:System.Net.HttpStatusCode.PartialContent" /> 指示根据包括字节范围的 GET 请求的请求的响应是部分响应。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PaymentRequired">
      <summary>
              等效于 HTTP 状态 402。
              <see cref="F:System.Net.HttpStatusCode.PaymentRequired" /> 已保留供将来使用。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
      <summary>
              等效于 HTTP 状态 412。
              <see cref="F:System.Net.HttpStatusCode.PreconditionFailed" /> 表示失败，此请求的设置的条件，无法执行请求。
               使用条件请求标头，如果匹配项，如设置条件无-If-match，或如果-修改-自从。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
      <summary>
              等效于 HTTP 状态 407。
              <see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired" /> 指示请求的代理要求身份验证。
               代理服务器进行身份验证标头包含如何执行身份验证的详细信息。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Redirect">
      <summary>
              等效于 HTTP 状态 302。
              <see cref="F:System.Net.HttpStatusCode.Redirect" /> 指示所需的信息位于的位置标头中指定的 URI。
               当收到此状态时的默认操作是遵循与响应关联的位置标头。
               当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
      <summary>
              等效于 HTTP 状态 307。
              <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> 指示请求信息位于的位置标头中指定的 URI。
               当收到此状态时的默认操作是遵循与响应关联的位置标头。
               当原始请求方法是 POST 时，重定向的请求还将使用 POST 方法。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectMethod">
      <summary>
              等效于 HTTP 状态 303。
              <see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> 自动将客户端重定向到的位置标头中指定作为公告的结果的 URI。
               对指定的位置标头的资源的请求将会执行与 GET。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
      <summary>
              等效于 HTTP 416 状态。
              <see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable" /> 指示从资源请求的数据范围不能返回，或者因为范围的开始处，然后该资源的开头或范围的末尾后在资源的结尾。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
      <summary>
              等效于 HTTP 状态 413。
              <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> 指示请求来说太大的服务器能够处理。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestTimeout">
      <summary>
              等效于 HTTP 状态 408。
              <see cref="F:System.Net.HttpStatusCode.RequestTimeout" /> 指示客户端的服务器预期请求的时间内没有未发送请求。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
      <summary>
              等效于 HTTP 状态 414。
              <see cref="F:System.Net.HttpStatusCode.RequestUriTooLong" /> 指示 URI 太长。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ResetContent">
      <summary>
              等效于 HTTP 状态 205。
              <see cref="F:System.Net.HttpStatusCode.ResetContent" /> 指示客户端应重置 （而不是重新加载） 的当前资源。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SeeOther">
      <summary>
              等效于 HTTP 状态 303。
              <see cref="F:System.Net.HttpStatusCode.SeeOther" /> 自动将客户端重定向到的位置标头中指定作为公告的结果的 URI。
               对指定的位置标头的资源的请求将会执行与 GET。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
      <summary>
              等效于 HTTP 状态 503。
              <see cref="F:System.Net.HttpStatusCode.ServiceUnavailable" /> 指示将服务器暂时不可用，通常是由于高负载或维护。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
      <summary>
              等效于 HTTP 状态为 101。
              <see cref="F:System.Net.HttpStatusCode.SwitchingProtocols" /> 指示正在更改的协议版本或协议。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
      <summary>
              等效于 HTTP 状态 307。
              <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> 指示请求信息位于的位置标头中指定的 URI。
               当收到此状态时的默认操作是遵循与响应关联的位置标头。
               当原始请求方法是 POST 时，重定向的请求还将使用 POST 方法。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unauthorized">
      <summary>
              等效于 HTTP 状态 401。
              <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> 指示所请求的资源需要身份验证。
               Www-authenticate 标头包含如何执行身份验证的详细信息。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
      <summary>
              等效于 HTTP 状态 415。
              <see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> 指示该请求是不受支持的类型。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unused">
      <summary>
              等效于 HTTP 状态 306。
              <see cref="F:System.Net.HttpStatusCode.Unused" /> 是对未完全指定的 HTTP/1.1 规范建议的扩展。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UpgradeRequired">
      <summary>
              等效于 HTTP 状态 426。
              <see cref="F:System.Net.HttpStatusCode.UpgradeRequired" /> 指示客户端应切换到不同的协议，例如 TLS/1.0。
            </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UseProxy">
      <summary>
              等效于 HTTP 状态 305。
              <see cref="F:System.Net.HttpStatusCode.UseProxy" /> 指示该请求应使用的位置标头中指定的 uri 的代理服务器。
            </summary>
    </member>
    <member name="T:System.Net.HttpVersion">
      <summary>
              定义支持的 HTTP 版本号 <see cref="T:System.Net.HttpWebRequest" /> 和 <see cref="T:System.Net.HttpWebResponse" /> 类。
            </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Unknown">
      <returns>
      </returns>
    </member>
    <member name="F:System.Net.HttpVersion.Version10">
      <summary>
              定义 <see cref="T:System.Version" /> HTTP 1.0 的实例。
            </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version11">
      <summary>
              定义 <see cref="T:System.Version" /> HTTP 1.1 的实例。
            </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version20">
      <returns>
      </returns>
    </member>
    <member name="T:System.Net.AuthenticationSchemes">
      <summary>
              指定身份验证的协议。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Anonymous">
      <summary>
              指定匿名身份验证。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Basic">
      <summary>
              指定基本身份验证。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Digest">
      <summary>
              指定摘要式身份验证。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.IntegratedWindowsAuthentication">
      <summary>
              指定 Windows 身份验证。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Negotiate">
      <summary>
              客户端确定的身份验证方案和协商。
               如果客户端和服务器均支持 Kerberos，则使用 Kerberos；否则使用 NTLM。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.None">
      <summary>
              允许不带身份验证。
               客户端请求 <see cref="T:System.Net.HttpListener" /> 设置此标志的对象始终将收到 403 禁止访问状态。
               资源应永远不会提供给客户端时，请使用此标志。
            </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Ntlm">
      <summary>
              指定 NTLM 身份验证。
            </summary>
    </member>
    <member name="T:System.Net.Cache.RequestCacheLevel">
      <summary>
              指定获取使用的资源的缓存行为 <see cref="T:System.Net.WebRequest" /> 及其派生类。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.BypassCache">
      <summary>
              使用的服务器满足请求。
               无项是从缓存中取出、 添加到缓存，或从客户端和服务器之间的缓存中移除。
               这是随.NET Framework 一起提供的计算机配置文件中指定的默认缓存行为。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheIfAvailable">
      <summary>
              如果该资源将可用，则，满足对从缓存中，资源的请求否则，将对资源的请求发送到服务器。
               如果客户端和服务器之间的任何缓存中提供了请求的项，可能通过中间缓存来满足请求。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheOnly">
      <summary>
              满足使用本地缓存的资源; 的请求不发送对不在缓存中的项的请求。
               如果指定此缓存策略级别， <see cref="T:System.Net.WebException" /> 如果项不是客户端缓存中将引发异常。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Default">
      <summary>
              通过使用该资源的缓存的副本或将对资源的请求发送到服务器可满足对资源的请求。
               由当前的缓存策略和缓存中内容的生存期确定要执行的操作。
               这是大多数应用程序应使用的缓存级别。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.NoCacheNoStore">
      <summary>
              永远不会从缓存中使用的资源满足请求并不会缓存资源。
               如果在本地缓存中存在该资源，则会删除它。
               此策略级别指示中间缓存他们应删除该资源。
               在 HTTP 缓存协议中，这实现使用 <see langword="no-cache" /> 缓存控制指令。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Reload">
      <summary>
              使用的服务器满足请求。
               可以将响应保存在缓存中。
               在 HTTP 缓存协议中，这实现使用 <see langword="no-cache" /> 缓存控制指令和无缓存 <see langword="Pragma" /> 标头。
            </summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Revalidate">
      <summary>
              通过使用该资源的缓存的副本，如果时间戳服务器; 上的资源的时间戳相同来满足请求否则为该资源是从服务器下载、 提供给调用方，并存储在缓存中。
            </summary>
    </member>
    <member name="T:System.Net.Cache.RequestCachePolicy">
      <summary>
              定义通过使用获取的资源的应用程序的缓存要求 <see cref="T:System.Net.WebRequest" /> 对象。
            </summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor">
      <summary>
              初始化 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor(System.Net.Cache.RequestCacheLevel)">
      <summary>
              初始化 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 类的新实例。
               使用指定的缓存策略。
            </summary>
      <param name="level">
                一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> ，它指定使用获取的资源的缓存行为 <see cref="T:System.Net.WebRequest" /> 对象。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  级别不是有效 <see cref="T:System.Net.Cache.RequestCacheLevel" />.value。
                </exception>
    </member>
    <member name="P:System.Net.Cache.RequestCachePolicy.Level">
      <summary>
              获取 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 构造此实例时指定的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值，该值指定使用获取的资源的缓存行为 <see cref="T:System.Net.WebRequest" /> 对象。
            </returns>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.ToString">
      <summary>
              返回此实例的字符串表示。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含 <see cref="P:System.Net.Cache.RequestCachePolicy.Level" /> 此实例。
            </returns>
    </member>
    <member name="T:System.Security.Authentication.CipherAlgorithmType">
      <summary>
              定义为可能的密码算法 <see cref="T:System.Net.Security.SslStream" /> 类。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes">
      <summary>
              高级加密标准 (AES) 算法中。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes128">
      <summary>
              具有 128 位密钥的高级加密标准 (AES) 算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes192">
      <summary>
              具有 192 位密钥的高级加密标准 (AES) 算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes256">
      <summary>
              使用 256 位密钥的高级加密标准 (AES) 算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Des">
      <summary>
              数据加密标准 (DES) 算法中。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.None">
      <summary>
              使用未加密算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Null">
      <summary>
              无加密用于 Null 密码算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc2">
      <summary>
              Rivest 的代码 2 (RC2) 算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc4">
      <summary>
              Rivest 的代码 4 (RC4) 算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.TripleDes">
      <summary>
              三重数据加密标准 (3DES) 算法。
            </summary>
    </member>
    <member name="T:System.Security.Authentication.ExchangeAlgorithmType">
      <summary>
              指定用于创建客户端和服务器共享密钥的算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.DiffieHellman">
      <summary>
              Diffie Hellman 临时密钥交换算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.None">
      <summary>
              使用没有密钥交换算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaKeyX">
      <summary>
              RSA 公钥交换算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaSign">
      <summary>
              RSA 公钥签名算法。
            </summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ChannelBinding">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 类封装了指向用于将身份验证的事务绑定到一个安全通道的不透明数据的指针。
            </summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ChannelBinding.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ChannelBinding.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 类的新实例。
            </summary>
      <param name="ownsHandle">
                一个布尔值，该值指示应用程序是否拥有包含将要传递给本机调用中提供的集成的 windows 身份验证扩展的保护的字节数据的本机内存区域的安全句柄。
              </param>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ChannelBinding.Size">
      <summary>
        <see cref="P:System.Security.Authentication.ExtendedProtection.ChannelBinding.Size" /> 属性获取的大小，以字节为单位，与关联的通道绑定令牌 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 实例。
            </summary>
      <returns>
              大小 （字节） 中的通道绑定令牌 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 实例。
            </returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ChannelBindingKind">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBindingKind" /> 枚举表示可以查询从安全通道的通道绑定的类型。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint">
      <summary>
              唯一通道绑定到给定的终结点 （如 TLS 服务器证书）。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unique">
      <summary>
              完全唯一通道绑定到给定通道 （如 TLS 会话密钥）。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unknown">
      <summary>
              未知的通道绑定类型。
            </summary>
    </member>
    <member name="T:System.Security.Authentication.HashAlgorithmType">
      <summary>
              指定用于生成消息身份验证代码 (MAC) 的算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Md5">
      <summary>
              Message Digest 5 (MD5) 哈希算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.None">
      <summary>
              没有使用哈希算法。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha1">
      <summary>
              安全哈希算法 (SHA1)。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha256">
      <summary>
              安全哈希算法 2 (SHA-2)，使用 256 位摘要。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha384">
      <summary>
              安全哈希算法 2 (SHA-2)，使用 384 位摘要。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha512">
      <summary>
              安全哈希算法 2 (SHA-2)，使用 512 位摘要。
            </summary>
    </member>
    <member name="T:System.Security.Authentication.SslProtocols">
      <summary>
              定义的可能版本 <see cref="T:System.Security.Authentication.SslProtocols" />。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Default">
      <summary>
              指定安全套接字层 (SSL) 3.0 或传输层安全 (TLS) 1.0 可接受的安全通信
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.None">
      <summary>
              未不指定任何 SSL 协议。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl2">
      <summary>
              指定 SSL 2.0 协议。
               SSL 2.0 已取代 TLS 协议，用于向后兼容性。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl3">
      <summary>
              指定 SSL 3.0 协议。
               SSL 3.0 已由 TLS 协议取代，提供有关向后兼容性。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls">
      <summary>
              指定 TLS 1.0 安全协议。
               TLS 协议是在 IETF RFC 2246 中定义的。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls11">
      <summary>
              指定 TLS 1.1 安全协议。
               TLS 协议是在 IETF RFC 4346 中定义的。
            </summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls12">
      <summary>
              指定 TLS 1.2 安全协议。
               TLS 协议是在 IETF RFC 5246 中定义的。
            </summary>
    </member>
    <member name="T:System.Net.Security.AuthenticationLevel">
      <summary>
              指定的身份验证和模拟客户端要求使用时 <see cref="T:System.Net.WebRequest" /> 类和派生的类，以请求资源。
            </summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested">
      <summary>
              客户端和服务器应进行身份验证。
               如果服务器未经过身份验证，该请求不会失败。
               若要确定是否发生了相互身份验证，请检查的值 <see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> 属性。
            </summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired">
      <summary>
              客户端和服务器应进行身份验证。
               如果服务器未经过身份验证，则应用程序将收到 <see cref="T:System.IO.IOException" /> 与 <see cref="T:System.Net.ProtocolViolationException" /> 内部异常，指示相互身份验证失败
            </summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.None">
      <summary>
              不进行身份验证是必需的客户端和服务器。
            </summary>
    </member>
    <member name="T:System.Net.Security.SslPolicyErrors">
      <summary>
              枚举安全套接字层 (SSL) 策略错误。
            </summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.None">
      <summary>
              没有 SSL 策略错误。
            </summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors">
      <summary>
        <see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus" /> 返回一个非空数组。
            </summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch">
      <summary>
              证书名称不匹配。
            </summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable">
      <summary>
              证书不可用。
            </summary>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>
              存储序列化信息从 <see cref="T:System.Net.EndPoint" /> 派生的类。
            </summary>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
              创建的新实例 <see cref="T:System.Net.SocketAddress" /> 类为给定的地址族。
            </summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。
              </param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>
              创建的新实例 <see cref="T:System.Net.SocketAddress" /> 类使用指定的地址族和缓冲区大小。
            </summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。
              </param>
      <param name="size">
                要为基础的缓冲区分配的字节数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 为小于 2。
                   需要这 2 个字节来存储 <paramref name="family" />。
                </exception>
    </member>
    <member name="M:System.Net.SocketAddress.Equals(System.Object)">
      <summary>
              确定指定的 <see langword="Object" /> 是否等同于当前的 <see langword="Object" />。
            </summary>
      <param name="comparand">
                要与当前的 <see cref="T:System.Object" /> 进行比较的 <see langword="Object" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see langword="Object" />，则为 <see langword="Object" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>
              获取 <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值的当前 <see cref="T:System.Net.SocketAddress" />。
            </summary>
      <returns>
              其中一个 <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。
            </returns>
    </member>
    <member name="M:System.Net.SocketAddress.GetHashCode">
      <summary>
              用作特定类型的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。
            </summary>
      <returns>
              当前 <see cref="T:System.Object" /> 的哈希代码。
            </returns>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>
              获取或设置基础缓冲区中的指定的索引元素。
            </summary>
      <param name="offset">
                数组索引的元素的所需的信息。
              </param>
      <returns>
              基础缓冲区中的指定的索引元素值。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  缓冲区中不存在指定的索引。
                </exception>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>
              获取基础缓冲区大小 <see cref="T:System.Net.SocketAddress" />。
            </summary>
      <returns>
              基础的缓冲区大小 <see cref="T:System.Net.SocketAddress" />。
            </returns>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>
              返回有关套接字地址信息。
            </summary>
      <returns>
              一个字符串，包含以下信息 <see cref="T:System.Net.SocketAddress" />。
            </returns>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>
              指定的寻址方案的一个实例 <see cref="T:System.Net.Sockets.Socket" /> 类可以使用。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.AppleTalk">
      <summary>
              AppleTalk 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Atm">
      <summary>
              本机 ATM 服务地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Banyan">
      <summary>
              Banyan 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ccitt">
      <summary>
              对于 CCITT 协议，如 X.25 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Chaos">
      <summary>
              MIT 混乱不堪的局面协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Cluster">
      <summary>
              针对 Microsoft 群集产品的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataKit">
      <summary>
              Datakit 协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataLink">
      <summary>
              直接链接数据接口地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DecNet">
      <summary>
              DECnet 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ecma">
      <summary>
              欧洲计算机制造商协会 (ECMA) 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.FireFox">
      <summary>
              FireFox 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.HyperChannel">
      <summary>
              NSC Hyperchannel 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ieee12844">
      <summary>
              IEEE 1284.4 工作组地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.ImpLink">
      <summary>
              当初 ARPANET 导入地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>
              IP 版本 4 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>
              IP 版本 6 的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ipx">
      <summary>
              IPX 或 SPX 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Irda">
      <summary>
              IrDA 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Iso">
      <summary>
              对 ISO 协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Lat">
      <summary>
              LAT 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Max">
      <summary>
              最大地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetBios">
      <summary>
              NetBios 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetworkDesigners">
      <summary>
              网络设计器 OSI 网关启用的协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NS">
      <summary>
              Xerox NS 协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Osi">
      <summary>
              OSI 协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Pup">
      <summary>
              PUP 协议的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Sna">
      <summary>
              IBM SNA 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unix">
      <summary>
              Unix 本地主机地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>
              未知的地址族。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>
              未指定的地址族。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.VoiceView">
      <summary>
              VoiceView 地址。
            </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketError">
      <summary>
              定义的错误代码 <see cref="T:System.Net.Sockets.Socket" /> 类。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AccessDenied">
      <summary>
              尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 禁止使用其访问权限的方式。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
      <summary>
              通常情况下允许只能有一个使用的地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
      <summary>
              不支持指定的地址族。
               如果指定 IPv6 地址族，并且在本地计算机上未安装 IPv6 堆栈，将返回此错误。
               如果指定了 IPv4 地址族并且 IPv4 堆栈未安装在本地计算机上，将返回此错误。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
      <summary>
              所选的 IP 地址在此上下文中无效。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
      <summary>
              非阻塞 <see cref="T:System.Net.Sockets.Socket" /> 已有一个操作正在进行中。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
      <summary>
              连接已中止.NET Framework 或基础套接字提供程序。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
      <summary>
              远程主机正在主动拒绝连接。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
      <summary>
              连接被远程对等方重置。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
      <summary>
              在上一个操作中被省略了必需的地址 <see cref="T:System.Net.Sockets.Socket" />。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Disconnecting">
      <summary>
              正常关闭正在进行中。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Fault">
      <summary>
              检测到无效的指针地址的基础套接字提供程序。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostDown">
      <summary>
              操作失败，因为远程主机已关闭。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostNotFound">
      <summary>
              此主机不是已知的。
               名称不是正式的主机名或别名。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
      <summary>
              没有到指定的主机的网络路由。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InProgress">
      <summary>
              阻止操作正在进行。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Interrupted">
      <summary>
              阻塞 <see cref="T:System.Net.Sockets.Socket" /> 调用已被取消。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
      <summary>
              无效的参数提供给 <see cref="T:System.Net.Sockets.Socket" /> 成员。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IOPending">
      <summary>
              应用程序已开始将重叠的操作不能立即完成的。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IsConnected">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 已连接。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.MessageSize">
      <summary>
              数据报是太长。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkDown">
      <summary>
              网络不可用。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkReset">
      <summary>
              应用程序试图设置 <see cref="F:System.Net.Sockets.SocketOptionName.KeepAlive" /> 已超时的连接。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
      <summary>
              不存在的路由与远程主机。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
      <summary>
              没有可用缓冲区的空间可供 <see cref="T:System.Net.Sockets.Socket" /> 操作。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoData">
      <summary>
              名称服务器上未找到请求的名称或 IP 地址。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoRecovery">
      <summary>
              是不可恢复的错误或找不到所请求的数据库。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotConnected">
      <summary>
              应用程序尝试发送或接收数据，与 <see cref="T:System.Net.Sockets.Socket" /> 未连接。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotInitialized">
      <summary>
              尚未初始化基础套接字提供程序。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotSocket">
      <summary>
              一个 <see cref="T:System.Net.Sockets.Socket" /> 试图在非套接字上操作。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationAborted">
      <summary>
              将重叠的操作已中止的闭包由于 <see cref="T:System.Net.Sockets.Socket" />。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
      <summary>
              协议系列不支持地址系列。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
      <summary>
              太多的进程正在使用基础套接字提供程序。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
      <summary>
              协议系列未实施或未配置。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
      <summary>
              采用协议未实施或未配置。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
      <summary>
              与使用了未知、 无效或不受支持的选项或级别 <see cref="T:System.Net.Sockets.Socket" />。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolType">
      <summary>
              协议类型不正确此 <see cref="T:System.Net.Sockets.Socket" />。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Shutdown">
      <summary>
              若要发送或接收数据的请求被禁止，因为 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketError">
      <summary>
              未指定 <see cref="T:System.Net.Sockets.Socket" /> 发生错误。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
      <summary>
              此地址族中不存在指定的套接字类型的支持。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Success">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 操作成功。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
      <summary>
              网络子系统不可用。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TimedOut">
      <summary>
              连接尝试超时或被连接的主机未能响应。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
      <summary>
              在基础套接字提供程序中有太多打开套接字。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TryAgain">
      <summary>
              无法解析主机的名称。
               请稍后再试。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
      <summary>
              找不到指定的类。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
      <summary>
              版本的基础套接字提供超出了范围。
            </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.WouldBlock">
      <summary>
              不能立即完成对非阻止套接字的操作。
            </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>
              发生套接字错误时引发的异常。
            </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>
              用最后一个操作系统错误代码初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>
              用指定的错误代码初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。
            </summary>
      <param name="errorCode">
                指示发生的错误的错误代码。
              </param>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              从 <see cref="T:System.Net.Sockets.SocketException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。
            </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新的 <see cref="T:System.Net.Sockets.SocketException" /> 实例所需的信息。
              </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.Sockets.SocketException" /> 实例关联的序列化流的源。
              </param>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>
              获取与此异常关联的错误代码。
            </summary>
      <returns>
              与此异常关联的整数错误代码。
            </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.Message">
      <summary>
              获取与此异常相关联的错误消息。
            </summary>
      <returns>
              包含错误消息的字符串。
            </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
      <summary>
              获取与此异常关联的错误代码。
            </summary>
      <returns>
              与此异常关联的整数错误代码。
            </returns>
    </member>
    <member name="T:System.Net.TransportContext">
      <summary>
        <see cref="T:System.Net.TransportContext" /> 类提供了有关基础传输层的附加上下文。
            </summary>
    </member>
    <member name="M:System.Net.TransportContext.#ctor">
      <summary>
              创建 <see cref="T:System.Net.TransportContext" /> 类的新实例
            </summary>
    </member>
    <member name="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)">
      <summary>
              检索请求的通道绑定。
            </summary>
      <param name="kind">
                要检索的通道绑定的类型。
              </param>
      <returns>
              请求 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, ，或 <see langword="null" /> 当前传输或由操作系统，如果不支持通道绑定。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="kind" /> 必须将 <see cref="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint" /> 用于 <see cref="T:System.Net.TransportContext" /> 从检索 <see cref="P:System.Net.HttpListenerRequest.TransportContext" /> 属性。
                </exception>
    </member>
  </members>
</doc>