<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.NonGeneric</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Hashtable">
      <summary>
              表示根据键的哈希代码进行组织的键/值对的集合。
            
              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
            </summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用默认的初始容量、 加载因子、 哈希代码提供程序和比较器。
            </summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用指定的初始容量、 加载因子和 <see cref="T:System.Collections.IEqualityComparer" /> 对象。
            </summary>
      <param name="capacity">
                元素的近似数目的 <see cref="T:System.Collections.Hashtable" /> 对象最初可包含。
              </param>
      <param name="loadFactor">
                0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。
                 结果是元素与存储桶的最大比率。
              </param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义哈希代码提供程序和比较器用于 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序和默认比较器。
                 默认哈希代码提供程序是每个键实现 <see cref="M:System.Object.GetHashCode" /> 和默认比较器是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 小于 0.1。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 大于 1.0。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Hashtable" /> 类将从指定字典的元素复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
               新 <see cref="T:System.Collections.Hashtable" /> 对象拥有与复制的元素数相等的初始容量并使用指定的加载因子和 <see cref="T:System.Collections.IEqualityComparer" /> 对象。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 对象复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
              </param>
      <param name="loadFactor">
                0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。
                 结果是元素与存储桶的最大比率。
              </param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义哈希代码提供程序和比较器用于 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序和默认比较器。
                 默认哈希代码提供程序是每个键实现 <see cref="M:System.Object.GetHashCode" /> 和默认比较器是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小于 0.1。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 大于 1.0。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用指定的初始容量和加载因子，默认哈希代码提供程序和比较器。
            </summary>
      <param name="capacity">
                元素的近似数目的 <see cref="T:System.Collections.Hashtable" /> 对象最初可包含。
              </param>
      <param name="loadFactor">
                0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。
                 结果是元素与存储桶的最大比率。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 小于 0.1。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 大于 1.0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> 导致溢出。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Hashtable" /> 类将从指定字典的元素复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
               新 <see cref="T:System.Collections.Hashtable" /> 对象拥有与复制的元素数相等的初始容量并使用指定的加载因子，默认哈希代码提供程序和比较器。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 对象复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
              </param>
      <param name="loadFactor">
                0.1 到 1.0 范围内的数字，再乘以提供最佳性能的默认值。
                 结果是元素与存储桶的最大比率。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> 小于 0.1。
                
                  - 或 - 
                
                  <paramref name="loadFactor" /> 大于 1.0。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Hashtable" /> 类将从指定字典的元素复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
               新 <see cref="T:System.Collections.Hashtable" /> 对象拥有与复制的元素数相等的初始容量并使用默认加载因子和指定 <see cref="T:System.Collections.IEqualityComparer" /> 对象。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 对象复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
              </param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义哈希代码提供程序和比较器用于 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序和默认比较器。
                 默认哈希代码提供程序是每个键实现 <see cref="M:System.Object.GetHashCode" /> 和默认比较器是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用指定的初始容量和默认加载因子、 哈希代码提供程序和比较器。
            </summary>
      <param name="capacity">
                元素的近似数目的 <see cref="T:System.Collections.Hashtable" /> 对象最初可包含。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用默认的初始容量和加载因子，和指定 <see cref="T:System.Collections.IEqualityComparer" /> 对象。
            </summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义哈希代码提供程序和比较器用于 <see cref="T:System.Collections.Hashtable" /> 对象。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序和默认比较器。
                 默认哈希代码提供程序是每个键实现 <see cref="M:System.Object.GetHashCode" /> 和默认比较器是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Hashtable" /> 类将从指定字典的元素复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
               新 <see cref="T:System.Collections.Hashtable" /> 对象拥有与复制的元素数相等的初始容量并使用默认加载因子、 哈希代码提供程序和比较器。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 对象复制到新 <see cref="T:System.Collections.Hashtable" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>
              初始化新的空实例 <see cref="T:System.Collections.Hashtable" /> 类使用指定的初始容量和 <see cref="T:System.Collections.IEqualityComparer" />, ，和默认加载因子。
            </summary>
      <param name="capacity">
                元素的近似数目的 <see cref="T:System.Collections.Hashtable" /> 对象最初可包含。
              </param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于定义哈希代码提供程序和比较器用于 <see cref="T:System.Collections.Hashtable" />。
              
                - 或 - 
              
                <see langword="null" /> 若要使用默认哈希代码提供程序和默认比较器。
                 默认哈希代码提供程序是每个键实现 <see cref="M:System.Object.GetHashCode" /> 和默认比较器是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>
              将带有指定键和值的元素添加到 <see cref="T:System.Collections.Hashtable" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
                 该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Hashtable" /> 中已存在具有相同键的元素。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.Hashtable" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>
              从 <see cref="T:System.Collections.Hashtable" /> 中移除所有元素。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>
              创建 <see cref="T:System.Collections.Hashtable" /> 的浅表副本。
            </summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 的浅表副本。
            </returns>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.Hashtable" /> 是否包含特定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Hashtable" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.Hashtable" /> 是否包含特定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.Hashtable" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.Hashtable" /> 是否包含特定值。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Collections.Hashtable" /> 中定位的值。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定 <see cref="T:System.Collections.Hashtable" /> 的元素，则为 <paramref name="value" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.Hashtable" /> 元素到一维 <see cref="T:System.Array" /> 实例的指定索引位置。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 的目标 <see cref="T:System.Collections.DictionaryEntry" /> 从复制对象 <see cref="T:System.Collections.Hashtable" />。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.Hashtable" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.Hashtable" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>
              获取包含在 <see cref="T:System.Collections.Hashtable" /> 中的键/值对的数目。
            </summary>
      <returns>
              包含在 <see cref="T:System.Collections.Hashtable" /> 中的键/值对的数目。
            </returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>
              获取 <see cref="T:System.Collections.IEqualityComparer" /> 用于 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> 用于 <see cref="T:System.Collections.Hashtable" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性设置为一个值，但哈希表使用创建 <see cref="T:System.Collections.IHashCodeProvider" /> 和 <see cref="T:System.Collections.IComparer" />。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Hashtable" />。
            </returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>
              返回指定键的哈希代码。
            </summary>
      <param name="key">
        <see cref="T:System.Object" /> 要为其哈希代码会返回。
              </param>
      <returns>
              哈希代码 <paramref name="key" />。
            </returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Hashtable" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Hashtable" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.Hashtable" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Hashtable" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.Hashtable" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置其值的键。
              </param>
      <returns>
              与指定的键相关联的值。
               如果未找到指定的键，尝试让其返回 <see langword="null" />, ，并尝试设置它创建一个使用指定的键的新元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  设置了该属性，但 <see cref="T:System.Collections.Hashtable" /> 为只读。
                
                  - 或 - 
                
                  设置该属性， <paramref name="key" /> 不存在于集合中，与 <see cref="T:System.Collections.Hashtable" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>
              比较特定 <see cref="T:System.Object" /> 与中的特定键 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <param name="item">
        <see cref="T:System.Object" /> 要与 <paramref name="key" />。
              </param>
      <param name="key">
                中的键 <see cref="T:System.Collections.Hashtable" /> 要与 <paramref name="item" />。
              </param>
      <returns>
              如果 <paramref name="item" /> 和 <paramref name="key" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 包含中的键 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 包含中的键 <see cref="T:System.Collections.Hashtable" />。
            </returns>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.Hashtable" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.Hashtable" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>
              返回的同步 （线程安全） 包装 <see cref="T:System.Collections.Hashtable" />。
            </summary>
      <param name="table">
                要同步的 <see cref="T:System.Collections.Hashtable" />。
              </param>
      <returns>
              一个同步 （线程安全） 包装 <see cref="T:System.Collections.Hashtable" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.Hashtable" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.Hashtable" /> 的访问的对象。
            </returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>
              获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Hashtable" /> 中的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Hashtable" /> 中的值。
            </returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>
              使用大小会根据需要动态增加的数组来实现 <see cref="T:System.Collections.IList" /> 接口。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.ArrayList" /> 类的新实例，该实例为空并且具有默认初始容量。
            </summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>
              初始化 <see cref="T:System.Collections.ArrayList" /> 类的新实例，该类包含从指定集合复制的元素，并具有与复制的元素数相同的初始容量。
            </summary>
      <param name="c">
                其元素已复制到新列表的 <see cref="T:System.Collections.ICollection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.Collections.ArrayList" /> 类的新实例，该实例为空并且具有指定的初始容量。
            </summary>
      <param name="capacity">
                新列表最初可以存储的元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>
              为特定 <see cref="T:System.Collections.IList" /> 创建 <see cref="T:System.Collections.ArrayList" /> 包装。
            </summary>
      <param name="list">
                要包装的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
        <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Collections.ArrayList" /> 包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.ArrayList" /> 的结尾处。
            </summary>
      <param name="value">
                要添加到 <see cref="T:System.Object" /> 的结尾处的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              已添加 <paramref name="value" /> 的 <see cref="T:System.Collections.ArrayList" /> 索引。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>
              将 <see cref="T:System.Collections.ICollection" /> 的元素添加到 <see cref="T:System.Collections.ArrayList" /> 的末尾。
            </summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，其元素应添加到 <see cref="T:System.Collections.ArrayList" /> 的末尾。
                 集合本身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>
              使用默认的比较器在整个已排序的 <see cref="T:System.Collections.ArrayList" /> 中搜索元素，并返回该元素从零开始的索引。
            </summary>
      <param name="value">
                要查找的 <see cref="T:System.Object" />。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果找到 <paramref name="value" />，则为排序的 <see cref="T:System.Collections.ArrayList" /> 中从零开始的 <paramref name="value" /> 索引；否则为一个负数，它是大于 <paramref name="value" /> 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 <see cref="P:System.Collections.ArrayList.Count" /> 的按位求补。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素均未实现 <see cref="T:System.IComparable" /> 接口。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素不是同一类型。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>
              使用指定的比较器在整个已排序的 <see cref="T:System.Collections.ArrayList" /> 中搜索元素，并返回该元素从零开始的索引。
            </summary>
      <param name="value">
                要查找的 <see cref="T:System.Object" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                如果为 <see langword="null" />，则使用默认比较器，即每个元素的 <see cref="T:System.IComparable" /> 实现。
              </param>
      <returns>
              如果找到 <paramref name="value" />，则为排序的 <see cref="T:System.Collections.ArrayList" /> 中从零开始的 <paramref name="value" /> 索引；否则为一个负数，它是大于 <paramref name="value" /> 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 <see cref="P:System.Collections.ArrayList.Count" /> 的按位求补。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素均不实现 <see cref="T:System.IComparable" /> 接口。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素不属于同一类型。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>
              使用指定的比较器在已排序 <see cref="T:System.Collections.ArrayList" /> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
      <param name="index">
                要搜索范围的从零开始的起始索引。
              </param>
      <param name="count">
                要搜索的范围的长度。
              </param>
      <param name="value">
                要查找的 <see cref="T:System.Object" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                如果为 <see langword="null" />，则使用默认比较器，即每个元素的 <see cref="T:System.IComparable" /> 实现。
              </param>
      <returns>
              如果找到 <paramref name="value" />，则为排序的 <see cref="T:System.Collections.ArrayList" /> 中从零开始的 <paramref name="value" /> 索引；否则为一个负数，它是大于 <paramref name="value" /> 的下一个元素索引的按位求补，或者，如果没有更大的元素，则为 <see cref="P:System.Collections.ArrayList.Count" /> 的按位求补。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中的有效范围。
                
                  - 或 - 
                
                  <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素均不实现 <see cref="T:System.IComparable" /> 接口。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 和 <see cref="T:System.Collections.ArrayList" /> 的元素不属于同一类型。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>
              获取或设置 <see cref="T:System.Collections.ArrayList" /> 可包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 可包含的元素数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.ArrayList.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.ArrayList.Count" /> 的值。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  系统上没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>
              从 <see cref="T:System.Collections.ArrayList" /> 中移除所有元素。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>
              创建 <see cref="T:System.Collections.ArrayList" /> 的浅表副本。
            </summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 的浅表副本。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>
              确定某元素是否在 <see cref="T:System.Collections.ArrayList" /> 中。
            </summary>
      <param name="item">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>
              从目标数组的开头开始，将整个 <see cref="T:System.Collections.ArrayList" /> 复制到兼容的一维 <see cref="T:System.Array" />。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ArrayList" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源 <see cref="T:System.Collections.ArrayList" /> 中的元素个数大于目标 <paramref name="array" /> 可以包含的元素个数。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  无法自动将源 <see cref="T:System.Collections.ArrayList" /> 的类型转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>
              从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ArrayList" /> 复制到兼容的一维 <see cref="T:System.Array" />。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ArrayList" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源 <see cref="T:System.Collections.ArrayList" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  无法自动将源 <see cref="T:System.Collections.ArrayList" /> 的类型转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
              从目标数组的指定索引处开始，将 <see cref="T:System.Collections.ArrayList" /> 中某个范围的元素复制到兼容的一维数组  <see cref="T:System.Array" />。
            </summary>
      <param name="index">
                复制即从源 <see cref="T:System.Collections.ArrayList" /> 中从零开始的索引开始。
              </param>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ArrayList" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <param name="count">
                要复制的元素数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="arrayIndex" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  <paramref name="index" /> 等于或大于源 <see cref="T:System.Collections.ArrayList" /> 的 <see cref="P:System.Collections.ArrayList.Count" />。
                
                  - 或 - 
                
                  从 <paramref name="index" /> 到源 <see cref="T:System.Collections.ArrayList" /> 的末尾的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.ArrayList" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>
              获取 <see cref="T:System.Collections.ArrayList" /> 中实际包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 中实际包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>
              返回具有固定大小的 <see cref="T:System.Collections.ArrayList" /> 包装。
            </summary>
      <param name="list">
                要包装的 <see cref="T:System.Collections.ArrayList" />。
              </param>
      <returns>
              具有固定大小的 <see cref="T:System.Collections.ArrayList" /> 包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>
              返回具有固定大小的 <see cref="T:System.Collections.IList" /> 包装。
            </summary>
      <param name="list">
                要包装的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              具有固定大小的 <see cref="T:System.Collections.IList" /> 包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>
              返回用于整个 <see cref="T:System.Collections.ArrayList" /> 的枚举数。
            </summary>
      <returns>
              用于整个 <see cref="T:System.Collections.ArrayList" /> 的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>
              返回 <see cref="T:System.Collections.ArrayList" /> 中元素范围的枚举器。
            </summary>
      <param name="index">
                枚举器应引用的 <see cref="T:System.Collections.ArrayList" /> 部分从零开始的起始索引。
              </param>
      <param name="count">
                枚举器应引用的 <see cref="T:System.Collections.ArrayList" /> 部分中的元素数。
              </param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 中指定的元素范围的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效范围。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>
              返回一个 <see cref="T:System.Collections.ArrayList" />，它表示源 <see cref="T:System.Collections.ArrayList" /> 中的元素子集。
            </summary>
      <param name="index">
                范围开始处的从零开始的 <see cref="T:System.Collections.ArrayList" /> 索引。
              </param>
      <param name="count">
                范围中的元素数。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ArrayList" />，它表示源 <see cref="T:System.Collections.ArrayList" /> 中的元素子集。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中元素的有效范围。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>
              搜索指定 <see cref="T:System.Object" /> 并返回整个内的第一个匹配项的从零开始索引 <see cref="T:System.Collections.ArrayList" />。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.ArrayList" /> 第一个匹配项的从零开始的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>
              搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中从指定索引到最后一个元素的元素范围中第一个匹配项的从零开始索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="startIndex">
                从零开始的搜索的起始索引。
                 空列表中 0（零）为有效值。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.ArrayList" /> 中从 <paramref name="startIndex" /> 到最后一个元素的元素范围内找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
              搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中从指定索引开始，并包含指定元素数的元素范围中第一个匹配项的从零开始的索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="startIndex">
                从零开始的搜索的起始索引。
                 空列表中 0（零）为有效值。
              </param>
      <param name="count">
                要搜索的部分中的元素数。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.ArrayList" /> 中从 <paramref name="startIndex" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效部分。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>
              将元素插入 <see cref="T:System.Collections.ArrayList" /> 的指定索引处。
            </summary>
      <param name="index">
                应插入 <paramref name="value" /> 的从零开始的索引。
              </param>
      <param name="value">
                要插入的 <see cref="T:System.Object" />。
                 该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 大于 <see cref="P:System.Collections.ArrayList.Count" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>
              将集合中的元素插入 <see cref="T:System.Collections.ArrayList" /> 的指定索引处。
            </summary>
      <param name="index">
                应在此处插入新元素的从零开始的索引。
              </param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，应将其元素插入到 <see cref="T:System.Collections.ArrayList" /> 中。
                 集合本身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 大于 <see cref="P:System.Collections.ArrayList.Count" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.ArrayList" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.ArrayList" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.ArrayList" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ArrayList" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ArrayList" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ArrayList.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>
              在整个 <see cref="T:System.Collections.ArrayList" /> 中搜索指定的 <see cref="T:System.Object" />，并返回最后一个匹配项的从零开始的索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在整个 <see cref="T:System.Collections.ArrayList" /> 中找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>
              搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="startIndex">
                向后搜索的从零开始的起始索引。
              </param>
      <returns>
              如果找到，则返回在 <see cref="T:System.Collections.ArrayList" /> 中从第一个元素到 <paramref name="startIndex" /> 的元素范围内找到 <paramref name="value" /> 的最后一个匹配项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
              搜索指定的 <see cref="T:System.Object" />，并返回 <see cref="T:System.Collections.ArrayList" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="startIndex">
                向后搜索的从零开始的起始索引。
              </param>
      <param name="count">
                要搜索的部分中的元素数。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.ArrayList" /> 中到 <paramref name="startIndex" /> 为止包含 <paramref name="count" /> 个元素的这部分元素中找到 <paramref name="value" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.ArrayList" /> 的有效索引范围。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效部分。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>
              返回只读的 <see cref="T:System.Collections.ArrayList" /> 包装。
            </summary>
      <param name="list">
                要包装的 <see cref="T:System.Collections.ArrayList" />。
              </param>
      <returns>
        <paramref name="list" /> 周围的只读 <see cref="T:System.Collections.ArrayList" /> 包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>
              返回只读的 <see cref="T:System.Collections.IList" /> 包装。
            </summary>
      <param name="list">
                要包装的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
        <paramref name="list" /> 周围的只读 <see cref="T:System.Collections.IList" /> 包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.ArrayList" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="obj">
                要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.ArrayList" />。
                 该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>
              移除 <see cref="T:System.Collections.ArrayList" /> 的指定索引处的元素。
            </summary>
      <param name="index">
                要移除的元素的从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ArrayList.Count" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>
              从 <see cref="T:System.Collections.ArrayList" /> 中移除一定范围的元素。
            </summary>
      <param name="index">
                要移除的元素范围的从零开始的起始索引。
              </param>
      <param name="count">
                要移除的元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中元素的有效范围。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>
              返回 <see cref="T:System.Collections.ArrayList" />，其元素是指定值的副本。
            </summary>
      <param name="value">
                要在新的 <see cref="T:System.Collections.ArrayList" /> 中对其进行多次复制的 <see cref="T:System.Object" />。
                 该值可以为 <see langword="null" />。
              </param>
      <param name="count">
        <paramref name="value" /> 应复制的次数。
              </param>
      <returns>
              具有 <paramref name="count" /> 个元素数的 <see cref="T:System.Collections.ArrayList" />，所有元素都是 <paramref name="value" /> 的副本。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>
              将整个 <see cref="T:System.Collections.ArrayList" /> 中元素的顺序反转。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>
              将指定范围中元素的顺序反转。
            </summary>
      <param name="index">
                要反转的范围的从零开始的起始索引。
              </param>
      <param name="count">
                要反转的范围内的元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.ArrayList" /> 中元素的有效范围。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>
              复制 <see cref="T:System.Collections.ArrayList" /> 中一个子集合的元素。
            </summary>
      <param name="index">
                从零开始的 <see cref="T:System.Collections.ArrayList" /> 索引，从此索引处开始复制 <paramref name="c" /> 的元素。
              </param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" />，它的元素要复制到 <see cref="T:System.Collections.ArrayList" />。
                 集合本身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 加上 <paramref name="c" /> 中的元素数大于 <see cref="P:System.Collections.ArrayList.Count" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>
              对整个 <see cref="T:System.Collections.ArrayList" /> 中的元素进行排序。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>
              使用指定的比较器对整个 <see cref="T:System.Collections.ArrayList" /> 中的元素进行排序。
            </summary>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                一个空引用（在 Visual Basic 中为 <see langword="Nothing" />），将使用每个元素的 <see cref="T:System.IComparable" /> 实现。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  比较两个元素时出错。
                </exception>
      <exception cref="T:System.ArgumentException">
                  将为 <see langword="null" /> 传递 <paramref name="comparer" />，并且列表中的元素不实现 <see cref="T:System.IComparable" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
              使用指定的比较器对 <see cref="T:System.Collections.ArrayList" /> 中某个范围内的元素进行排序。
            </summary>
      <param name="index">
                要排序范围的从零开始的起始索引。
              </param>
      <param name="count">
                要排序的范围的长度。
              </param>
      <param name="comparer">
                比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                一个空引用（在 Visual Basic 中为 <see langword="Nothing" />），将使用每个元素的 <see cref="T:System.IComparable" /> 实现。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.ArrayList" /> 中指定有效范围。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  比较两个元素时出错。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>
              返回同步的（线程安全）<see cref="T:System.Collections.ArrayList" /> 包装器。
            </summary>
      <param name="list">
                要同步的 <see cref="T:System.Collections.ArrayList" />。
              </param>
      <returns>
              同步的（线程安全）<see cref="T:System.Collections.ArrayList" /> 包装器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>
              返回同步的（线程安全）<see cref="T:System.Collections.IList" /> 包装器。
            </summary>
      <param name="list">
                要同步的 <see cref="T:System.Collections.IList" />。
              </param>
      <returns>
              同步的（线程安全）<see cref="T:System.Collections.IList" /> 包装器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.ArrayList" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.ArrayList" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>
              将 <see cref="T:System.Collections.ArrayList" /> 的元素复制到新 <see cref="T:System.Object" /> 数组中。
            </summary>
      <returns>
              一个包含 <see cref="T:System.Collections.ArrayList" /> 的元素副本的 <see cref="T:System.Object" /> 数组。
            </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>
              将 <see cref="T:System.Collections.ArrayList" /> 的元素复制到新的指定元素类型数组中。
            </summary>
      <param name="type">
                要创建和复制元素的目标数组的元素 <see cref="T:System.Type" />。
              </param>
      <returns>
              包含 <see cref="T:System.Collections.ArrayList" /> 的元素副本的指定元素类型数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源 <see cref="T:System.Collections.ArrayList" /> 的类型无法自动转换为指定类型。
                </exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>
              将容量设置为 <see cref="T:System.Collections.ArrayList" /> 中元素的实际数目。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.ArrayList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="T:System.Collections.CaseInsensitiveComparer">
      <summary>
              比较两个对象相等，忽略大小写的字符串。
            </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Collections.CaseInsensitiveComparer" /> 类使用 <see cref="P:System.Threading.Thread.CurrentCulture" /> 当前线程。
            </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)">
      <summary>
              使用指定的 <see cref="T:System.Collections.CaseInsensitiveComparer" /> 初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。
            </summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用于新 <see cref="T:System.Collections.CaseInsensitiveComparer" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)">
      <summary>
              执行不区分大小写的比较，相同类型的两个对象并返回指示一个是否小于、 等于还是大于另一个值。
            </summary>
      <param name="a">
                要比较的第一个对象。
              </param>
      <param name="b">
                要比较的第二个对象。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="a" /> 和 <paramref name="b" /> 的相对值，如下表所示。
            
                      值 
                    
                      含义 
                    
                      小于零 
                    
                      <paramref name="a" /> 是小于 <paramref name="b" />, ，带有忽略大小写。
                    
                      零 
                    
                      <paramref name="a" /> 等于 <paramref name="b" />, ，带有忽略大小写。
                    
                      大于零 
                    
                      <paramref name="a" /> 大于 <paramref name="b" />, ，带有忽略大小写。
                    </returns>
      <exception cref="T:System.ArgumentException">
                  既不 <paramref name="a" /> ，也不 <paramref name="b" /> 实现 <see cref="T:System.IComparable" /> 接口。
                
                  - 或 - 
                
                  <paramref name="a" /> 和 <paramref name="b" /> 类型不同。
                </exception>
    </member>
    <member name="P:System.Collections.CaseInsensitiveComparer.Default">
      <summary>
              获取实例 <see cref="T:System.Collections.CaseInsensitiveComparer" /> 关联 <see cref="P:System.Threading.Thread.CurrentCulture" /> 的当前线程，并始终是可用的。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Collections.CaseInsensitiveComparer" /> 关联 <see cref="P:System.Threading.Thread.CurrentCulture" /> 当前线程。
            </returns>
    </member>
    <member name="P:System.Collections.CaseInsensitiveComparer.DefaultInvariant">
      <summary>
              获取实例 <see cref="T:System.Collections.CaseInsensitiveComparer" /> 关联 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 以及是否始终可用。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Collections.CaseInsensitiveComparer" /> 关联 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。
            </returns>
    </member>
    <member name="T:System.Collections.Queue">
      <summary>
              表示对象的先进先出集合。
            </summary>
    </member>
    <member name="M:System.Collections.Queue.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Queue" /> 类为空，具有默认初始容量，并使用默认的增长因子。
            </summary>
    </member>
    <member name="M:System.Collections.Queue.#ctor(System.Collections.ICollection)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Queue" /> 类，该类包含从指定集合中复制的元素具有与所复制的元素数相同的初始容量并使用默认的增长因子。
            </summary>
      <param name="col">
        <see cref="T:System.Collections.ICollection" /> 从中复制元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Queue.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Queue" /> 类为空，具有指定的初始容量并使用默认的增长因子。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Queue" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Queue.#ctor(System.Int32,System.Single)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Queue" /> 类为空，具有指定的初始容量并使用指定的增长因子。
            </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Queue" /> 可包含的初始元素数。
              </param>
      <param name="growFactor">
                因子的容量 <see cref="T:System.Collections.Queue" /> 已展开。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="growFactor" /> 是小于 1.0 或超过 10.0。
                </exception>
    </member>
    <member name="M:System.Collections.Queue.Clear">
      <summary>
              从 <see cref="T:System.Collections.Queue" /> 中移除所有对象。
            </summary>
    </member>
    <member name="M:System.Collections.Queue.Clone">
      <summary>
              创建 <see cref="T:System.Collections.Queue" /> 的浅表副本。
            </summary>
      <returns>
        <see cref="T:System.Collections.Queue" /> 的浅表副本。
            </returns>
    </member>
    <member name="M:System.Collections.Queue.Contains(System.Object)">
      <summary>
              确定某元素是否在 <see cref="T:System.Collections.Queue" /> 中。
            </summary>
      <param name="obj">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.Queue" />。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="obj" />，则为 <see cref="T:System.Collections.Queue" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)">
      <summary>
              从指定数组索引开始将 <see cref="T:System.Collections.Queue" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Queue" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.Queue" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.ArrayTypeMismatchException">
                  源类型 <see cref="T:System.Collections.Queue" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Queue.Count">
      <summary>
              获取 <see cref="T:System.Collections.Queue" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Queue" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Queue.Dequeue">
      <summary>
              移除并返回位于 <see cref="T:System.Collections.Queue" /> 开始处的对象。
            </summary>
      <returns>
              从 <see cref="T:System.Collections.Queue" /> 的开始处移除的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Queue" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Queue.Enqueue(System.Object)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.Queue" /> 的结尾处。
            </summary>
      <param name="obj">
                要添加到 <see cref="T:System.Collections.Queue" /> 的对象。
                 该值可以为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Collections.Queue.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Collections.Queue" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Queue" />。
            </returns>
    </member>
    <member name="P:System.Collections.Queue.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Queue" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.Queue" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Queue.Peek">
      <summary>
              返回位于 <see cref="T:System.Collections.Queue" /> 开始处的对象但不将其移除。
            </summary>
      <returns>
              位于 <see cref="T:System.Collections.Queue" /> 的开头的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Queue" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Queue.Synchronized(System.Collections.Queue)">
      <summary>
              返回将包装原始队列并且是线程安全的新的 <see cref="T:System.Collections.Queue" />。
            </summary>
      <param name="queue">
                要同步的 <see cref="T:System.Collections.Queue" />。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.Queue" /> 同步 （线程安全） 包装。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queue" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Queue.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.Queue" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.Queue" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Collections.Queue.ToArray">
      <summary>
              将 <see cref="T:System.Collections.Queue" /> 元素复制到新数组。
            </summary>
      <returns>
              新数组包含从复制的元素 <see cref="T:System.Collections.Queue" />。
            </returns>
    </member>
    <member name="M:System.Collections.Queue.TrimToSize">
      <summary>
              将容量设置为 <see cref="T:System.Collections.Queue" /> 中元素的实际数目。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Queue" /> 为只读。
                </exception>
    </member>
    <member name="T:System.Collections.ReadOnlyCollectionBase">
      <summary>
              提供强类型化非泛型只读集合的 <see langword="abstract" /> 基类。
            </summary>
    </member>
    <member name="M:System.Collections.ReadOnlyCollectionBase.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.Count">
      <summary>
              获取包含中的元素数 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 实例。
            </summary>
      <returns>
              中包含的元素数 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 实例。
            
              检索此属性的值的运算复杂度为 O(1)。
            </returns>
    </member>
    <member name="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
      <summary>
              返回一个枚举数循环访问 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 实例。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 实例的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.InnerList">
      <summary>
              获取列表中包含的元素 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 实例。
            </summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 表示 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 实例本身。
            </returns>
    </member>
    <member name="M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 复制到兼容的一维 <see cref="T:System.Array" />。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否访问 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 对象已同步 （线程安全）。
            </summary>
      <returns>
              如果对 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 对象的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>
              获取一个对象，可用于同步对访问 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 对象。
            </summary>
      <returns>
              一个对象，该对象可用于同步对 <see cref="T:System.Collections.ReadOnlyCollectionBase" /> 对象的访问。
            </returns>
    </member>
    <member name="T:System.Collections.SortedList">
      <summary>
              表示键/值对的集合，这些键值对按键排序并可按照键和索引访问。
            </summary>
    </member>
    <member name="M:System.Collections.SortedList.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Collections.SortedList" /> 类为空，具有默认初始容量，并且根据排序 <see cref="T:System.IComparable" /> 接口由添加到每个键实现 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.SortedList" /> 类为空，具有默认初始容量，并且排序按照指定 <see cref="T:System.Collections.IComparer" /> 接口。
            </summary>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                <see langword="null" /> 若要使用 <see cref="T:System.IComparable" /> 实现的每个键。
              </param>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.SortedList" /> 类，该类包含从指定字典复制的元素已复制的元素数相同的初始容量并根据排序 <see cref="T:System.IComparable" /> 由每个键实现的接口。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 实现，以将复制到一个新 <see cref="T:System.Collections.SortedList" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  中的一个或多个元素 <paramref name="d" /> 不实现 <see cref="T:System.IComparable" /> 接口。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.SortedList" /> 类为空，具有指定的初始容量，并且根据排序 <see cref="T:System.IComparable" /> 接口由添加到每个键实现 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="initialCapacity">
                初始元素数的 <see cref="T:System.Collections.SortedList" /> 对象可以包含。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCapacity" /> 小于零。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  不存在内存不足，无法创建 <see cref="T:System.Collections.SortedList" /> 对象具有指定 <paramref name="initialCapacity" />。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.SortedList" /> 类为空，具有指定的初始容量，并且排序按照指定 <see cref="T:System.Collections.IComparer" /> 接口。
            </summary>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                <see langword="null" /> 若要使用 <see cref="T:System.IComparable" /> 实现的每个键。
              </param>
      <param name="capacity">
                初始元素数的 <see cref="T:System.Collections.SortedList" /> 对象可以包含。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  不存在内存不足，无法创建 <see cref="T:System.Collections.SortedList" /> 对象具有指定 <paramref name="capacity" />。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.SortedList" /> 类，该类包含从指定字典复制的元素已复制的元素数相同的初始容量，并且排序按照指定 <see cref="T:System.Collections.IComparer" /> 接口。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 实现，以将复制到一个新 <see cref="T:System.Collections.SortedList" /> 对象。
              </param>
      <param name="comparer">
                在对键进行比较时使用的 <see cref="T:System.Collections.IComparer" /> 实现。
              
                - 或 - 
              
                <see langword="null" /> 若要使用 <see cref="T:System.IComparable" /> 实现的每个键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="comparer" /> 是 <see langword="null" />, ，和一个或多个元素中的 <paramref name="d" /> 不实现 <see cref="T:System.IComparable" /> 接口。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.Add(System.Object,System.Object)">
      <summary>
              添加一个带有指定的键和值的元素 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
                 该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  具有指定的元素 <paramref name="key" /> 中已存在 <see cref="T:System.Collections.SortedList" /> 对象。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.SortedList" /> 设置为使用 <see cref="T:System.IComparable" /> 接口，并 <paramref name="key" /> 不实现 <see cref="T:System.IComparable" /> 接口。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.SortedList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.SortedList" /> 具有固定的大小。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  不存在内存不足，无法将元素添加到 <see cref="T:System.Collections.SortedList" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  使用比较器对引发异常。
                </exception>
    </member>
    <member name="P:System.Collections.SortedList.Capacity">
      <summary>
              获取或设置的容量 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
              元素的数目， <see cref="T:System.Collections.SortedList" /> 对象可以包含。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  分配的值是当前的中的元素数小于 <see cref="T:System.Collections.SortedList" /> 对象。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  系统上没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.Clear">
      <summary>
              从 <see cref="T:System.Collections.SortedList" /> 对象中移除所有元素。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.SortedList" /> 对象是只读的。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.SortedList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.Clone">
      <summary>
              创建的浅表副本 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
              浅表副本 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.Contains(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.SortedList" /> 对象包含特定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.SortedList" /> 对象中查找的键。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.SortedList" /> 对象包含具有指定的元素 <paramref name="key" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  使用比较器对引发异常。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.ContainsKey(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.SortedList" /> 对象包含特定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.SortedList" /> 对象中查找的键。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.SortedList" /> 对象包含具有指定的元素 <paramref name="key" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  使用比较器对引发异常。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.ContainsValue(System.Object)">
      <summary>
              确定是否 <see cref="T:System.Collections.SortedList" /> 对象包含特定值。
            </summary>
      <param name="value">
                要在中找到的值 <see cref="T:System.Collections.SortedList" /> 对象。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.SortedList" /> 对象包含具有指定的元素 <paramref name="value" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.SortedList" /> 元素到一维 <see cref="T:System.Array" /> 对象，该数组中的指定索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 对象，该目标的对象 <see cref="T:System.Collections.DictionaryEntry" /> 从复制对象 <see cref="T:System.Collections.SortedList" />。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.SortedList" /> 对象是否大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.SortedList" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.SortedList.Count">
      <summary>
              获取包含中的元素数 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
              中包含的元素数 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetByIndex(System.Int32)">
      <summary>
              获取的指定索引处的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="index">
                要获取的值的从零开始索引。
              </param>
      <returns>
              指定索引处的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出的有效索引范围 <see cref="T:System.Collections.SortedList" /> 对象。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 循环访问的对象 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetKey(System.Int32)">
      <summary>
              获取指定索引处的键 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="index">
                要获取的键的从零开始的索引。
              </param>
      <returns>
              指定索引处的键 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出的有效索引范围 <see cref="T:System.Collections.SortedList" /> 对象。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.GetKeyList">
      <summary>
              获取中的键 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 对象，其中包含中的键 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetValueList">
      <summary>
              获取中的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 对象，其中包含中的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.IndexOfKey(System.Object)">
      <summary>
              返回中的指定键的从零开始索引 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.SortedList" /> 对象中查找的键。
              </param>
      <returns>
              从零开始的索引 <paramref name="key" /> 参数，如果 <paramref name="key" /> 中找到 <see cref="T:System.Collections.SortedList" /> 对象; 否则为-1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  使用比较器对引发异常。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.IndexOfValue(System.Object)">
      <summary>
              返回在指定的值的第一个匹配项的从零开始索引 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="value">
                要在中找到的值 <see cref="T:System.Collections.SortedList" /> 对象。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              第一个匹配项的从零开始索引 <paramref name="value" /> 参数，如果 <paramref name="value" /> 中找到 <see cref="T:System.Collections.SortedList" /> 对象; 否则为-1。
            </returns>
    </member>
    <member name="P:System.Collections.SortedList.IsFixedSize">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Collections.SortedList" /> 对象具有固定的大小。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.SortedList" /> 对象具有固定大小; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.SortedList.IsReadOnly">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Collections.SortedList" /> 对象是只读的。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.SortedList" /> 对象是只读的; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.SortedList.IsSynchronized">
      <summary>
              获取一个值，该值指示是否访问 <see cref="T:System.Collections.SortedList" /> 对象已同步 （线程安全）。
            </summary>
      <returns>
              如果对 <see cref="T:System.Collections.SortedList" /> 对象的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.SortedList.Item(System.Object)">
      <summary>
              获取和设置与中的特定键关联的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="key">
                要获取或设置的值与关联的键。
              </param>
      <returns>
              与关联的值 <paramref name="key" /> 中的参数 <see cref="T:System.Collections.SortedList" /> 对象时，如果 <paramref name="key" /> 找到; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  此属性设置与 <see cref="T:System.Collections.SortedList" /> 对象是只读的。
                
                  - 或 - 
                
                  设置了该属性，但 <paramref name="key" /> 不存在于集合中，且 <see cref="T:System.Collections.SortedList" /> 具有固定的大小。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  不存在内存不足，无法将元素添加到 <see cref="T:System.Collections.SortedList" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  使用比较器对引发异常。
                </exception>
    </member>
    <member name="P:System.Collections.SortedList.Keys">
      <summary>
              获取中的键 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的键 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.Remove(System.Object)">
      <summary>
              移除带有指定键的元素 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.SortedList" /> 对象是只读的。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.SortedList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.RemoveAt(System.Int32)">
      <summary>
              移除的指定索引处的元素 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="index">
                要移除的元素的从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出的有效索引范围 <see cref="T:System.Collections.SortedList" /> 对象。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.SortedList" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.SortedList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)">
      <summary>
              替换中的特定索引处的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="index">
                在该位置保存从零开始的索引 <paramref name="value" />。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> 要保存到 <see cref="T:System.Collections.SortedList" /> 对象。
                 该值可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出的有效索引范围 <see cref="T:System.Collections.SortedList" /> 对象。
                </exception>
    </member>
    <member name="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)">
      <summary>
              返回的同步 （线程安全） 包装 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <param name="list">
                要同步的 <see cref="T:System.Collections.SortedList" /> 对象。
              </param>
      <returns>
              一个同步 （线程安全） 包装 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.SortedList.SyncRoot">
      <summary>
              获取一个对象，可用于同步对访问 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
              一个对象，该对象可用于同步对 <see cref="T:System.Collections.SortedList" /> 对象的访问。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.TrimToSize">
      <summary>
              将容量设置中的元素的实际数目 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.SortedList" /> 对象是只读的。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.SortedList" /> 具有固定的大小。
                </exception>
    </member>
    <member name="P:System.Collections.SortedList.Values">
      <summary>
              获取中的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的值 <see cref="T:System.Collections.SortedList" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> ，它循环访问 <see cref="T:System.Collections.SortedList" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.SortedList" />。
            </returns>
    </member>
    <member name="T:System.Collections.Specialized.CollectionsUtil">
      <summary>
              创建忽略字符串大小写的集合。
            </summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Specialized.CollectionsUtil" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable">
      <summary>
              创建一个新的不区分大小写实例的 <see cref="T:System.Collections.Hashtable" /> 类具有默认初始容量。
            </summary>
      <returns>
              不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有默认初始容量。
            </returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)">
      <summary>
              将项从指定字典复制到不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有相同的初始容量与复制的项数。
            </summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 将复制到一个新不区分大小写 <see cref="T:System.Collections.Hashtable" />。
              </param>
      <returns>
              不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类，其中包含从指定的项 <see cref="T:System.Collections.IDictionary" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)">
      <summary>
              创建不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有指定的初始容量。
            </summary>
      <param name="capacity">
                大概项数， <see cref="T:System.Collections.Hashtable" /> 最初可包含。
              </param>
      <returns>
              不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有指定的初始容量。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList">
      <summary>
              创建的新实例 <see cref="T:System.Collections.SortedList" /> 忽略大小写的字符串的类。
            </summary>
      <returns>
              新实例 <see cref="T:System.Collections.SortedList" /> 忽略大小写的字符串的类。
            </returns>
    </member>
    <member name="T:System.Collections.Stack">
      <summary>
              表示对象的简单后进先出 (LIFO) 非泛型集合。
            </summary>
    </member>
    <member name="M:System.Collections.Stack.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.Stack" /> 类的新实例，该实例为空并且具有默认初始容量。
            </summary>
    </member>
    <member name="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Stack" /> 类，该类包含从指定集合复制的元素并具有相同的初始容量与复制的元素数。
            </summary>
      <param name="col">
        <see cref="T:System.Collections.ICollection" /> 从中复制元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Stack.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.Stack" /> ，该类为空并具有指定的初始容量或默认的初始容量，则两者中较大。
            </summary>
      <param name="initialCapacity">
        <see cref="T:System.Collections.Stack" /> 可包含的初始元素数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCapacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Stack.Clear">
      <summary>
              从 <see cref="T:System.Collections.Stack" /> 中移除所有对象。
            </summary>
    </member>
    <member name="M:System.Collections.Stack.Clone">
      <summary>
              创建 <see cref="T:System.Collections.Stack" /> 的浅表副本。
            </summary>
      <returns>
        <see cref="T:System.Collections.Stack" /> 的浅表副本。
            </returns>
    </member>
    <member name="M:System.Collections.Stack.Contains(System.Object)">
      <summary>
              确定某元素是否在 <see cref="T:System.Collections.Stack" /> 中。
            </summary>
      <param name="obj">
                要在 <see cref="T:System.Collections.Stack" /> 中定位的对象。
                 该值可以为 <see langword="null" />。
              </param>
      <returns>
              如果在 <see cref="T:System.Collections.Stack" /> 中找到 <paramref name="obj" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.Stack" /> 到现有一维 <see cref="T:System.Array" />, 指定的数组索引处开始。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Stack" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.Stack" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.Stack" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.Stack.Count">
      <summary>
              获取 <see cref="T:System.Collections.Stack" /> 中包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.Stack" /> 中包含的元素数。
            </returns>
    </member>
    <member name="M:System.Collections.Stack.GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Stack" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Stack" />。
            </returns>
    </member>
    <member name="P:System.Collections.Stack.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Stack" /> 的访问（线程安全）。
            </summary>
      <returns>
        <see langword="true" />, 如果访问 <see cref="T:System.Collections.Stack" /> 是同步 （线程安全）; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.Stack.Peek">
      <summary>
              返回的对象顶部的 <see cref="T:System.Collections.Stack" /> 而不删除它。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 顶部 <see cref="T:System.Collections.Stack" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Stack" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Stack.Pop">
      <summary>
              删除并返回 <see cref="T:System.Collections.Stack" /> 顶部的对象。
            </summary>
      <returns>
              从 <see cref="T:System.Collections.Stack" /> 顶部删除的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Stack" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Stack.Push(System.Object)">
      <summary>
              在 <see cref="T:System.Collections.Stack" /> 的顶部插入一个对象。
            </summary>
      <param name="obj">
                要推入到 <see cref="T:System.Collections.Stack" /> 中的 <see cref="T:System.Object" />。
                 该值可以为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
      <summary>
              返回已同步 （线程安全） 包装器 <see cref="T:System.Collections.Stack" />。
            </summary>
      <param name="stack">
                要同步的 <see cref="T:System.Collections.Stack" />。
              </param>
      <returns>
              同步的包装 <see cref="T:System.Collections.Stack" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stack" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.Stack.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.Stack" /> 的访问的对象。
            </summary>
      <returns>
              一个可用于同步对 <see cref="T:System.Object" /> 的访问的 <see cref="T:System.Collections.Stack" />。
            </returns>
    </member>
    <member name="M:System.Collections.Stack.ToArray">
      <summary>
              副本 <see cref="T:System.Collections.Stack" /> 到新数组。
            </summary>
      <returns>
              新数组包含元素的副本 <see cref="T:System.Collections.Stack" />。
            </returns>
    </member>
    <member name="T:System.Collections.CaseInsensitiveHashCodeProvider">
      <summary>
              提供使用忽略大小写的字符串的哈希算法的对象的哈希代码。
            </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 类使用 <see cref="P:System.Threading.Thread.CurrentCulture" /> 当前线程。
            </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor(System.Globalization.CultureInfo)">
      <summary>
              使用指定的 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。
            </summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用于新 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.CaseInsensitiveHashCodeProvider.Default">
      <summary>
              获取实例 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 关联 <see cref="P:System.Threading.Thread.CurrentCulture" /> 的当前线程，并始终是可用的。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 关联 <see cref="P:System.Threading.Thread.CurrentCulture" /> 当前线程。
            </returns>
    </member>
    <member name="P:System.Collections.CaseInsensitiveHashCodeProvider.DefaultInvariant">
      <summary>
              获取实例 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 关联 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 以及是否始终可用。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> 关联 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。
            </returns>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.GetHashCode(System.Object)">
      <summary>
              返回给定对象使用忽略大小写的字符串的哈希算法的哈希代码。
            </summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要为其哈希代码会返回。
              </param>
      <returns>
              给定的对象，使用忽略大小写的字符串的哈希算法的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Collections.CollectionBase">
      <summary>
              提供强类型集合的 <see langword="abstract" /> 基类。
            </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.#ctor">
      <summary>
              初始化的新实例 <see cref="T:System.Collections.CollectionBase" /> 类具有默认初始容量。
            </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Collections.CollectionBase" /> 类具有指定容量。
            </summary>
      <param name="capacity">
                新列表最初可以存储的元素数。
              </param>
    </member>
    <member name="P:System.Collections.CollectionBase.Capacity">
      <summary>
              获取或设置 <see cref="T:System.Collections.CollectionBase" /> 可包含的元素数。
            </summary>
      <returns>
        <see cref="T:System.Collections.CollectionBase" /> 可包含的元素数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.CollectionBase.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.CollectionBase.Count" /> 的值。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  系统上没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Collections.CollectionBase.Clear">
      <summary>
              删除所有对象从 <see cref="T:System.Collections.CollectionBase" /> 实例。
               不能重写此方法。
            </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.Count">
      <summary>
              获取包含中的元素数 <see cref="T:System.Collections.CollectionBase" /> 实例。
               不能重写此属性。
            </summary>
      <returns>
              中包含的元素数 <see cref="T:System.Collections.CollectionBase" /> 实例。
            
              检索此属性的值的运算复杂度为 O(1)。
            </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.GetEnumerator">
      <summary>
              返回的枚举数循环访问<see cref="T:System.Collections.CollectionBase" />实例。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.CollectionBase" /> 实例的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="P:System.Collections.CollectionBase.InnerList">
      <summary>
              获取 <see cref="T:System.Collections.ArrayList" /> 包含列表中的元素的 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 表示 <see cref="T:System.Collections.CollectionBase" /> 实例本身。
            
              检索此属性的值的运算复杂度为 O(1)。
            </returns>
    </member>
    <member name="P:System.Collections.CollectionBase.List">
      <summary>
              获取 <see cref="T:System.Collections.IList" /> 包含列表中的元素的 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 表示 <see cref="T:System.Collections.CollectionBase" /> 实例本身。
            </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.OnClear">
      <summary>
              清除的内容时执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.OnClearComplete">
      <summary>
              清除的内容后执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)">
      <summary>
              插入新元素插入之前执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <param name="index">
                从零开始的索引，在其中插入 <paramref name="value" />。
              </param>
      <param name="value">
                处的元素的新值 <paramref name="index" />。
              </param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>
              在插入新元素插入后执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <param name="index">
                从零开始的索引，在其中插入 <paramref name="value" />。
              </param>
      <param name="value">
                处的元素的新值 <paramref name="index" />。
              </param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)">
      <summary>
              当移除的元素时执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <param name="index">
                从零开始的索引，到 <paramref name="value" /> 找不到。
              </param>
      <param name="value">
                要移除的元素的值 <paramref name="index" />。
              </param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
              删除中的元素后执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <param name="index">
                从零开始的索引，到 <paramref name="value" /> 找不到。
              </param>
      <param name="value">
                要移除的元素的值 <paramref name="index" />。
              </param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
              在设置值之前执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <param name="index">
                从零开始的索引，到 <paramref name="oldValue" /> 找不到。
              </param>
      <param name="oldValue">
                要替换的值 <paramref name="newValue" />。
              </param>
      <param name="newValue">
                处的元素的新值 <paramref name="index" />。
              </param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
              在设置的值后执行其他自定义进程 <see cref="T:System.Collections.CollectionBase" /> 实例。
            </summary>
      <param name="index">
                从零开始的索引，到 <paramref name="oldValue" /> 找不到。
              </param>
      <param name="oldValue">
                要替换的值 <paramref name="newValue" />。
              </param>
      <param name="newValue">
                处的元素的新值 <paramref name="index" />。
              </param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnValidate(System.Object)">
      <summary>
              在验证一个值时，请执行其他自定义进程。
            </summary>
      <param name="value">
                要验证的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.CollectionBase.RemoveAt(System.Int32)">
      <summary>
              移除的指定索引处的元素 <see cref="T:System.Collections.CollectionBase" /> 实例。
               此方法不是可重写的。
            </summary>
      <param name="index">
                要移除的元素的从零开始的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.CollectionBase.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.CollectionBase" /> 复制到兼容的一维 <see cref="T:System.Array" />。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.CollectionBase" /> 复制的元素的目标。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 -
                
                  源中的元素数目 <see cref="T:System.Collections.CollectionBase" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.CollectionBase" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.CollectionBase" /> 的访问（线程安全）。
            </summary>
      <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.CollectionBase" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Collections.CollectionBase" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Collections.CollectionBase" /> 的访问的对象。
            </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)">
      <summary>
              将对象添加到 <see cref="T:System.Collections.CollectionBase" /> 的结尾处。
            </summary>
      <param name="value">
                要添加到 <see cref="T:System.Object" /> 的结尾处的 <see cref="T:System.Collections.CollectionBase" />。
              </param>
      <returns>
        <see cref="T:System.Collections.CollectionBase" /> 开始的索引， <paramref name="value" /> 增添了。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.CollectionBase" /> 为只读。
                
                  - 或 -
                
                  <see cref="T:System.Collections.CollectionBase" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.CollectionBase" /> 是否包含特定元素。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.CollectionBase" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.CollectionBase" /> 包含指定 <paramref name="value" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              搜索指定 <see cref="T:System.Object" /> 并返回整个内的第一个匹配项的从零开始索引 <see cref="T:System.Collections.CollectionBase" />。
            </summary>
      <param name="value">
                要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.CollectionBase" />。
              </param>
      <returns>
              如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.CollectionBase" /> 第一个匹配项的从零开始的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              将元素插入 <see cref="T:System.Collections.CollectionBase" /> 的指定索引处。
            </summary>
      <param name="index">
                应插入 <paramref name="value" /> 的从零开始的索引。
              </param>
      <param name="value">
                要插入的 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.CollectionBase" /> 为只读。
                
                  - 或 -
                
                  <see cref="T:System.Collections.CollectionBase" /> 具有固定的大小。
                </exception>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.CollectionBase" /> 是否具有固定大小。
            </summary>
      <returns>
              如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.CollectionBase" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.CollectionBase" /> 是否为只读。
            </summary>
      <returns>
              如果 <see cref="T:System.Collections.CollectionBase" /> 是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                要获取或设置的元素的从零开始的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.CollectionBase.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.CollectionBase" /> 中移除特定对象的第一个匹配项。
            </summary>
      <param name="value">
                要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.CollectionBase" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 中找不到参数 <see cref="T:System.Collections.CollectionBase" /> 对象。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.CollectionBase" /> 为只读。
                
                  - 或 -
                
                  <see cref="T:System.Collections.CollectionBase" /> 具有固定的大小。
                </exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>
              比较两个对象相等，字符串比较是区分大小写。
            </summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>
              使用指定的 <see cref="T:System.Collections.Comparer" /> 初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。
            </summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用于新 <see cref="T:System.Collections.Comparer" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>
              执行区分大小写的比较，相同类型的两个对象并返回指示一个是否小于、 等于还是大于另一个值。
            </summary>
      <param name="a">
                要比较的第一个对象。
              </param>
      <param name="b">
                要比较的第二个对象。
              </param>
      <returns>
              一个有符号整数，指示 <paramref name="a" /> 和 <paramref name="b" /> 的相对值，如下表所示。
            
                      值 
                    
                      含义 
                    
                      小于零 
                    
                      <paramref name="a" /> 小于 <paramref name="b" />。
                    
                      零 
                    
                      <paramref name="a" /> 等于 <paramref name="b" />。
                    
                      大于零 
                    
                      <paramref name="a" /> 大于 <paramref name="b" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
                  既不 <paramref name="a" /> ，也不 <paramref name="b" /> 实现 <see cref="T:System.IComparable" /> 接口。
                
                  - 或 - 
                
                  <paramref name="a" /> 和 <paramref name="b" /> 的类型不同，既没有一个可以处理与其他的比较。
                </exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>
              表示实例 <see cref="T:System.Collections.Comparer" /> 关联 <see cref="P:System.Threading.Thread.CurrentCulture" /> 当前线程。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>
              表示实例 <see cref="T:System.Collections.Comparer" /> 关联 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。
               此字段为只读。
            </summary>
    </member>
    <member name="T:System.Collections.DictionaryBase">
      <summary>
              为键/值对的强类型集合提供 <see langword="abstract" /> 基类。
            </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.#ctor">
      <summary>
              初始化 <see cref="T:System.Collections.DictionaryBase" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.Clear">
      <summary>
              清除 <see cref="T:System.Collections.DictionaryBase" /> 实例的内容。
            </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
      <summary>
              副本 <see cref="T:System.Collections.DictionaryBase" /> 元素到一维 <see cref="T:System.Array" /> 中指定索引处。
            </summary>
      <param name="array">
                一维 <see cref="T:System.Array" /> 的目标 <see cref="T:System.Collections.DictionaryEntry" /> 对象从复制 <see cref="T:System.Collections.DictionaryBase" /> 实例。
                <see cref="T:System.Array" /> 必须具有从零开始的索引。
              </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  源中的元素数目 <see cref="T:System.Collections.DictionaryBase" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Collections.DictionaryBase" /> 无法自动转换为目标类型 <paramref name="array" />。
                </exception>
    </member>
    <member name="P:System.Collections.DictionaryBase.Count">
      <summary>
              获取包含中的元素数 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <returns>
              中包含的元素数 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </returns>
    </member>
    <member name="P:System.Collections.DictionaryBase.Dictionary">
      <summary>
              获取列表中包含的元素 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 表示 <see cref="T:System.Collections.DictionaryBase" /> 实例本身。
            </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> ，它循环访问 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.DictionaryBase" /> 实例的 <see cref="T:System.Collections.IDictionaryEnumerator" />。
            </returns>
    </member>
    <member name="P:System.Collections.DictionaryBase.InnerHashtable">
      <summary>
              获取列表中包含的元素 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Hashtable" /> 表示 <see cref="T:System.Collections.DictionaryBase" /> 实例本身。
            </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnClear">
      <summary>
              在清除内容之前执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnClearComplete">
      <summary>
              清除的内容后执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
      <summary>
              获取具有指定的键和值的元素 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要获取的元素的键。
              </param>
      <param name="currentValue">
                相关联的元素的当前值 <paramref name="key" />。
              </param>
      <returns>
        <see cref="T:System.Object" /> 包含带有指定的键和值的元素。
            </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
      <summary>
              插入新元素插入之前执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要插入的元素的键。
              </param>
      <param name="value">
                要插入的元素的值。
              </param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
      <summary>
              在插入新元素插入后执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要插入的元素的键。
              </param>
      <param name="value">
                要插入的元素的值。
              </param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
      <summary>
              在删除中的元素之前执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <param name="value">
                要移除的元素的值。
              </param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
      <summary>
              删除中的元素后执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <param name="value">
                要移除的元素的值。
              </param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
      <summary>
              在设置值之前执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要查找的元素的键。
              </param>
      <param name="oldValue">
                相关联的元素的旧值 <paramref name="key" />。
              </param>
      <param name="newValue">
                相关联的元素的新值 <paramref name="key" />。
              </param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
      <summary>
              在设置的值后执行其他自定义进程 <see cref="T:System.Collections.DictionaryBase" /> 实例。
            </summary>
      <param name="key">
                要查找的元素的键。
              </param>
      <param name="oldValue">
                相关联的元素的旧值 <paramref name="key" />。
              </param>
      <param name="newValue">
                相关联的元素的新值 <paramref name="key" />。
              </param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
      <summary>
              在验证具有指定键和值的元素时执行其他自定义进程。
            </summary>
      <param name="key">
                要验证的元素的键。
              </param>
      <param name="value">
                要验证的元素的值。
              </param>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
      <summary>
              获取一个值，该值指示是否访问 <see cref="T:System.Collections.DictionaryBase" /> 对象已同步 （线程安全）。
            </summary>
      <returns>
              如果对 <see cref="T:System.Collections.DictionaryBase" /> 对象的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
      <summary>
              获取一个对象，可用于同步对访问 <see cref="T:System.Collections.DictionaryBase" /> 对象。
            </summary>
      <returns>
              一个对象，该对象可用于同步对 <see cref="T:System.Collections.DictionaryBase" /> 对象的访问。
            </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
              将带有指定键和值的元素添加到 <see cref="T:System.Collections.DictionaryBase" /> 中。
            </summary>
      <param name="key">
                要添加的元素的键。
              </param>
      <param name="value">
                要添加的元素的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.DictionaryBase" /> 中已存在具有相同键的元素。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.DictionaryBase" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.DictionaryBase" /> 具有固定的大小。
                </exception>
    </member>
    <member name="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
              确定 <see cref="T:System.Collections.DictionaryBase" /> 是否包含特定键。
            </summary>
      <param name="key">
                要在 <see cref="T:System.Collections.DictionaryBase" /> 中定位的键。
              </param>
      <returns>
              如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.DictionaryBase" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Collections.DictionaryBase" /> 对象具有固定的大小。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.DictionaryBase" /> 对象具有固定大小; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Collections.DictionaryBase" /> 对象是只读的。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.DictionaryBase" /> 对象是只读的; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
      <summary>
              获取或设置与指定的键关联的值。
            </summary>
      <param name="key">
                要获取或设置其值的键。
              </param>
      <returns>
              与指定的键相关联的值。
               如果未找到指定的键，尝试让其返回 <see langword="null" />, ，并尝试设置它创建一个使用指定的键的新元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  设置了该属性，但 <see cref="T:System.Collections.DictionaryBase" /> 为只读。
                
                  - 或 - 
                
                  设置该属性， <paramref name="key" /> 不存在于集合中，与 <see cref="T:System.Collections.DictionaryBase" /> 具有固定的大小。
                </exception>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
      <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的键 <see cref="T:System.Collections.DictionaryBase" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的键 <see cref="T:System.Collections.DictionaryBase" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
              从 <see cref="T:System.Collections.DictionaryBase" /> 中移除带有指定键的元素。
            </summary>
      <param name="key">
                要移除的元素的键。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.DictionaryBase" /> 为只读。
                
                  - 或 - 
                
                  <see cref="T:System.Collections.DictionaryBase" /> 具有固定的大小。
                </exception>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
      <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的值 <see cref="T:System.Collections.DictionaryBase" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的值 <see cref="T:System.Collections.DictionaryBase" /> 对象。
            </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> ，它循环访问 <see cref="T:System.Collections.DictionaryBase" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.DictionaryBase" />。
            </returns>
    </member>
  </members>
</doc>