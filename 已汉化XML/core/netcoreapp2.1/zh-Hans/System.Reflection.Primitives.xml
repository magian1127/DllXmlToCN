<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>
              描述如何将值推送到堆栈上或从堆栈中弹出的方式。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>
              没有值是从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>
              从弹出堆栈的一个值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>
              对于第一个操作数，从堆栈 1 个值和 1 个值的第二个操作数的堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>
              弹出堆栈的 32 位整数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>
              对于第一个操作数，从堆栈的 32 位整数和一个的值对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>
              对于第一个操作数，从堆栈的 32 位整数和一个 32 位整数，对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>
              将 32 位整数，对于第一个操作数，对于第二个操作数，从堆栈的 32 位整数和关闭的堆栈中的第三个操作数的 32 位整数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>
              对于第一个操作数，从堆栈的 32 位整数和一个 64 位整数，对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>
              对于第一个操作数，从堆栈的 32 位整数和 32 位浮点数字对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>
              对于第一个操作数，从堆栈的 32 位整数和 64 位浮点数对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>
              将引用从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>
              对于第一个操作数，从堆栈的引用和值对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>
              对于第一个操作数，从堆栈的引用和一个 32 位整数，对于第二个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>
              对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值与 32 位整数对于第三个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>
              弹出对于第一个操作数、 关闭的堆栈中的第二个操作数的值和关闭的堆栈中的第三个操作数的值，从堆栈的引用。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>
              对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值与 64 位整数对于第三个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>
              对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值与 32 位整数对于第三个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>
              对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值的 64 位浮点数对于第三个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>
              对于第一个操作数，从堆栈的引用、 关闭的堆栈中的第二个操作数的值和引用对于第三个操作数，从堆栈中弹出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>
              没有值推送到堆栈中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>
              将推送到堆栈上的一个值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>
              将推送到堆栈上的第一个操作数，1 个值和 1 到堆栈上的第二个操作数的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>
              将 32 位整数推送到堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>
              将 64 位整数推送到堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>
              将 32 位浮点数字推送到堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>
              将 64 位浮点数推送到堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>
              推送到堆栈上的引用。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>
              弹出堆栈的变量。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>
              将推送到堆栈上的变量。
            </summary>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>
              指定事件的属性。
            </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>
              指定该事件没有任何属性。
            </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>
              指定公共语言运行时应检查名称编码。
            </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>
              指定的事件是特殊名称所描述的方式。
            </summary>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>
              指定描述字段属性的标志。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>
              指定该字段是可在整个程序集。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>
              指定该字段只能在此程序集中的子类型访问。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>
              指定字段仅可访问类型和子类型。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>
              指定该字段是可由子类型任意位置，以及整个程序集的访问。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>
              指定给定字段的访问级别。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>
              指定字段具有默认值。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>
              指定字段具有封送处理信息。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>
              指定字段具有相对虚拟地址 (RVA)。
               RVA 是相对于它所在的图像文件开头的地址的方法体中当前映像中的位置。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>
              指定该字段只能初始化，并可以仅在构造函数的主体中设置。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>
              指定字段的值是一个编译时 （静态或早期绑定） 常量。
               任何尝试都将其设置，则会引发 <see cref="T:System.FieldAccessException" />。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>
              指定该字段不需要扩展该类型时序列化。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>
              留待将来使用。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>
              指定字段为只能由父类型访问。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>
              指定不能引用字段。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>
              指定该字段将为其此作用域是可见的任何成员可访问。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>
              指定公共语言运行库 (元数据内部 Api) 应检查名称编码。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>
              指定一个特殊的方法，并用描述该方法的特殊名称。
            </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>
              指定的字段所代表已定义的类型，否则为每个实例。
            </summary>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>
              描述对泛型类型或方法的泛型类型参数的约束。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>
              该泛型类型参数是逆变。
               逆变类型参数可作为方法签名中的参数类型出现。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>
              该泛型类型参数是协变。
               协变类型参数可作为方法的结果类型、只读字段的类型、声明的基类型或实现的接口出现。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>
              仅当一个类型具有无参数的构造函数时，才能替代泛型类型参数。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>
              无特殊标志。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>
              仅当一个类型是值类型且不可为 null 时，才能替代泛型类型参数。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>
              仅当一个类型是引用类型时，才能替代泛型类型参数。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>
              选择所有特殊约束标志的组合。
               此值是使用逻辑“OR”合并后列标志得出的结果：<see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />、<see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />。
            </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>
              选择所有方差标志的组合。
               此值是使用逻辑“OR”合并后列标志得出的结果：<see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />。
            </summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>
              定义方法的有效调用约定。
            </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>
              可以指定 <see langword="Standard" /> 或 <see langword="VarArgs" /> 可能使用调用约定。
            </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>
              指定的签名是一个函数指针签名，表示对实例或虚拟方法 （而不是静态方法） 的调用。
               如果 <see langword="ExplicitThis" /> 设置， <see langword="HasThis" /> 还必须设置。
               第一个参数传递给所调用的方法仍是 <see langword="this" /> 现在是指针，但第一个参数的类型未知。
               因此，描述的类型 （或类） 的令牌 <see langword="this" /> 指针显式存储到其元数据签名。
            </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>
              指定一个实例或虚方法 （而不是静态方法）。
               在运行时调用的方法传递一个指向目标对象作为其第一个参数 ( <see langword="this" /> 指针)。
               在元数据中存储的签名不包括此第一个参数的类型，因为该方法已知的并可从元数据发现其所有者类。
            </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>
              指定的默认调用约定由公共语言运行时确定。
               对静态方法使用此调用约定。
               对于实例或虚方法使用 <see langword="HasThis" />。
            </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>
              使用变量参数指定方法的调用的约定。
            </summary>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>
              描述指令如何改变控制流。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>
              分支指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>
              中断指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>
              调用指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>
              条件分支指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>
              提供有关后面的指令的信息。
               例如， <see langword="Unaligned" /> 指令 <see langword="Reflection.Emit.Opcodes" /> 具有 <see langword="FlowControl.Meta" /> ，并指定后面的指针指令可能是未对齐。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>
              常规控制流。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary>
              此枚举器值被保留，并且不应使用。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>
              返回指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>
              异常引发指令。
            </summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>
              描述中间语言 (IL) 指令。
            </summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>
              测试给定的对象是否等于此 <see langword="Opcode" />。
            </summary>
      <param name="obj">
                要与此对象进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="obj" /> 的一个实例 <see langword="Opcode" /> 和与此对象相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>
              该值指示当前实例是否等于指定 <see cref="T:System.Reflection.Emit.OpCode" />。
            </summary>
      <param name="obj">
        <see cref="T:System.Reflection.Emit.OpCode" /> 要与当前实例进行比较。
              </param>
      <returns>
        <see langword="true" /> 如果值 <paramref name="obj" /> 等于当前实例的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>
              中间语言 (IL) 指令的流控制特性。
            </summary>
      <returns>
              只读。
               流控制的类型。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>
              返回此生成的哈希代码 <see langword="Opcode" />。
            </summary>
      <returns>
              返回此实例的哈希代码。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>
              中间语言 (IL) 指令的名称。
            </summary>
      <returns>
              只读。
               IL 指令的名称。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>
              指示两个 <see cref="T:System.Reflection.Emit.OpCode" /> 结构是否相等。
            </summary>
      <param name="a">
        <see cref="T:System.Reflection.Emit.OpCode" /> 要与 <paramref name="b" />。
              </param>
      <param name="b">
        <see cref="T:System.Reflection.Emit.OpCode" /> 要与 <paramref name="a" />。
              </param>
      <returns>
              如果 <see langword="true" /> 等于 <paramref name="a" />，则为 <paramref name="b" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>
              指示两个 <see cref="T:System.Reflection.Emit.OpCode" /> 结构是否不相等。
            </summary>
      <param name="a">
        <see cref="T:System.Reflection.Emit.OpCode" /> 要与 <paramref name="b" />。
              </param>
      <param name="b">
        <see cref="T:System.Reflection.Emit.OpCode" /> 要与 <paramref name="a" />。
              </param>
      <returns>
              如果 <see langword="true" /> 不等于 <paramref name="a" />，则为 <paramref name="b" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>
              中间语言 (IL) 指令的类型。
            </summary>
      <returns>
              只读。
               中间语言 (IL) 指令的类型。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>
              中间语言 (IL) 指令的操作数类型。
            </summary>
      <returns>
              只读。
               IL 指令的操作数类型。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>
              中间语言 (IL) 指令的大小。
            </summary>
      <returns>
              只读。
               IL 指令的大小。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>
              中间语言 (IL) 指令弹出堆栈的方式。
            </summary>
      <returns>
              只读。
               IL 指令弹出堆栈的方式。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>
              中间语言 (IL) 指令将操作数推到堆栈上的方式。
            </summary>
      <returns>
              只读。
               IL 指令将操作数推到堆栈上的方式。
            </returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>
              返回此 <see langword="Opcode" /> 作为 <see cref="T:System.String" />。
            </summary>
      <returns>
              返回 <see cref="T:System.String" /> 包含此名称 <see langword="Opcode" />。
            </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>
              获取中间语言 (IL) 指令的数值。
            </summary>
      <returns>
              只读。
               IL 指令的数值。
            </returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>
              提供通过发出的 Microsoft 中间语言 (MSIL) 指令的字段表示 <see cref="T:System.Reflection.Emit.ILGenerator" /> 类成员 (如 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>
              将两个值相加并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>
              将两个整数相加，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>
              将两个无符号整数值相加，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>
              计算两个值的按位“与”并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>
              返回指向当前方法的参数列表的非托管指针。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>
              如果两个值相等，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>
              如果两个值相等，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>
              如果第一个值大于或等于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>
              如果第一个值大于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>
              如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>
              如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>
              如果第一个值小于或等于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>
              如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>
              如果第一个值小于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>
              如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值小于第二个值，则将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>
              当比较无符号整数值或未经排序的浮点值时，如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>
              当两个无符号整数值或未经排序的浮点值不相等时，将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>
              当两个无符号整数值或未经排序的浮点值不相等时，将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>
              将值类型转换为对象引用 (类型 <see langword="O" />)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>
              无条件地将控制转移到目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>
              无条件地将控制转移到目标指令（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>
              向公共语言结构 (CLI) 发出信号以通知调试器已撞上了一个断点。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>
              如果将控制转移到目标指令 <paramref name="value" /> 是 <see langword="false" />, ，为 null 引用 (<see langword="Nothing" /> 在 Visual Basic 中)，或为零。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>
              如果将控制转移到目标指令 <paramref name="value" /> 是 <see langword="false" />, ，空引用，则为零。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>
              如果将控制转移到目标指令 <paramref name="value" /> 是 <see langword="true" />, 、 不为 null，或非零值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>
              将控制转移到目标指令 （短格式），如果 <paramref name="value" /> 是 <see langword="true" />, 、 不为 null，或非零值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>
              调用由传递的方法说明符指示的方法。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>
              通过调用约定描述的参数调用在计算堆栈上指示的方法（作为指向入口点的指针）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>
              对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>
              尝试将引用传递的对象转换为指定的类。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>
              比较两个值。
               如果它们相等，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上;否则为 0 (<see langword="int32" />) 推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>
              比较两个值。
               如果第一个值大于第二个，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上;否则为 0 (<see langword="int32" />) 推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>
              比较两个无符号的或未经排序的值。
               如果第一个值大于第二个，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上;否则为 0 (<see langword="int32" />) 推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>
              引发 <see cref="T:System.ArithmeticException" /> 如果值不是有限数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>
              比较两个值。
               如果第一个值小于第二个，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上;否则为 0 (<see langword="int32" />) 推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>
              比较无符号或无序值 <paramref name="value1" /> 和 <paramref name="value2" />。
               如果 <paramref name="value1" /> 是小于 <paramref name="value2" />, ，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上; 否则为 0 (<see langword="int32" />) 推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>
              约束要对其进行虚方法调用的类型。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="native int" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="int8" />, ，然后扩展 （填充） 到 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="int16" />, ，然后扩展 （填充） 到 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="int64" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>
              将转换为有符号的计算堆栈顶部的有符号的值 <see langword="native int" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>
              将转换为有符号的计算堆栈顶部的无符号的值 <see langword="native int" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>
              将位于计算堆栈顶部的有符号值转换为有符号的 <see langword="int8" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>
              将转换为有符号的计算堆栈顶部的无符号的值 <see langword="int8" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>
              将转换为有符号的计算堆栈顶部的有符号的值 <see langword="int16" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>
              将转换为有符号的计算堆栈顶部的无符号的值 <see langword="int16" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>
              将转换为有符号的计算堆栈顶部的有符号的值 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>
              将转换为有符号的计算堆栈顶部的无符号的值 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>
              将转换为有符号的计算堆栈顶部的有符号的值 <see langword="int64" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>
              将转换为有符号的计算堆栈顶部的无符号的值 <see langword="int64" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>
              将转换到计算堆栈顶部的有符号的值 <see langword="unsigned native int" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>
              将位于计算堆栈顶部的无符号的值转换 <see langword="unsigned native int" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>
              将转换到计算堆栈顶部的有符号的值 <see langword="unsigned int8" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>
              将位于计算堆栈顶部的无符号的值转换 <see langword="unsigned int8" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>
              将转换到计算堆栈顶部的有符号的值 <see langword="unsigned int16" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>
              将位于计算堆栈顶部的无符号的值转换 <see langword="unsigned int16" /> 并将其扩展为 <see langword="int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>
              将转换到计算堆栈顶部的有符号的值 <see langword="unsigned int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>
              将位于计算堆栈顶部的无符号的值转换 <see langword="unsigned int32" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>
              将转换到计算堆栈顶部的有符号的值 <see langword="unsigned int64" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>
              将位于计算堆栈顶部的无符号的值转换 <see langword="unsigned int64" />, 、 引发 <see cref="T:System.OverflowException" /> 在溢出。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>
              将位于计算堆栈顶部的无符号的整数值转换 <see langword="float32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="float32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="float64" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="unsigned native int" />, ，并将其扩展为 <see langword="native int" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="unsigned int8" />, ，并将其扩展为 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="unsigned int16" />, ，并将其扩展为 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="unsigned int32" />, ，并将其扩展为 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>
              将位于计算堆栈顶部的值转换 <see langword="unsigned int64" />, ，并将其扩展为 <see langword="int64" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>
              将指定数目的字节从源地址复制到目标地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>
              值类型位于对象地址的副本 (类型 <see langword="&amp;" />, ，<see langword="*" /> 或 <see langword="native int" />) 到目标对象的地址 (类型 <see langword="&amp;" />, ，<see langword="*" /> 或 <see langword="native int" />)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>
              两个值相除并将结果作为浮点 (类型 <see langword="F" />) 或商 (类型 <see langword="int32" />) 到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>
              将两个无符号的整数值相除并将结果推送 (<see langword="int32" />) 到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>
              复制计算堆栈上当前最顶端的值，然后将副本推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>
              将控制权从 <see langword="filter" /> 回公共语言基础结构 (CLI) 异常处理程序的异常子句。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>
              将控制权从 <see langword="fault" /> 或 <see langword="finally" /> 回公共语言基础结构 (CLI) 异常处理程序的异常块的子句。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>
              将位于特定地址的内存的指定块初始化为给定大小和初始值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>
              将位于指定地址的值类型的每个字段初始化为空引用或适当的基元类型的 0。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>
              测试是否对象引用 (类型 <see langword="O" />) 是为特定类的实例。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>
              退出当前方法并跳至指定方法。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>
              将自变量（由指定索引值引用）加载到堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>
              将索引为 0 的自变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>
              将索引为 1 的自变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>
              将索引为 2 的自变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>
              将索引为 3 的自变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>
              将自变量（由指定的短格式索引引用）加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>
              将自变量地址加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>
              以短格式将自变量地址加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>
              推送提供的值的类型<see langword="int32" />到计算堆栈作为<see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>
              将推送到计算堆栈上为 0 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>
              将推送到计算堆栈上为 1 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>
              将推送到计算堆栈上为 2 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>
              将推送到计算堆栈上为 3 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>
              将推送到计算堆栈上为 4 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>
              将推送到计算堆栈上为 5 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>
              将推送到计算堆栈上为 6 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>
              将推送到计算堆栈上为 7 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>
              将推送到计算堆栈上为 8 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>
              将推送到计算堆栈上为-1 的整数值 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>
              推送提供 <see langword="int8" /> 值到计算堆栈上为 <see langword="int32" />, ，缩写形式。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>
              将提供类型的 <see langword="int64" /> 到计算堆栈上为 <see langword="int64" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>
              将提供类型的 <see langword="float32" /> 到计算堆栈上作为类型 <see langword="F" /> (float)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>
              将提供类型的 <see langword="float64" /> 到计算堆栈上作为类型 <see langword="F" /> (float)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>
              按照指令中指定的类型，将指定数组索引中的元素加载到计算堆栈的顶部。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>
              中的元素加载类型 <see langword="native int" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="native int" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>
              中的元素加载类型 <see langword="int8" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>
              中的元素加载类型 <see langword="int16" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>
              中的元素加载类型 <see langword="int32" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>
              中的元素加载类型 <see langword="int64" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int64" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>
              中的元素加载类型 <see langword="float32" /> 作为类型的计算堆栈的顶部指定的数组索引处 <see langword="F" /> (float)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>
              中的元素加载类型 <see langword="float64" /> 作为类型的计算堆栈的顶部指定的数组索引处 <see langword="F" /> (float)。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>
              包含对象引用作为类型的计算堆栈的顶部指定的数组索引处的元素加载 <see langword="O" /> （对象引用）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>
              中的元素加载类型 <see langword="unsigned int8" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>
              中的元素加载类型 <see langword="unsigned int16" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>
              中的元素加载类型 <see langword="unsigned int32" /> 作为计算堆栈的顶部指定的数组索引处 <see langword="int32" />。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>
              作为类型的计算堆栈的顶部指定的数组索引处的数组元素的地址加载 <see langword="&amp;" /> （托管的指针）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>
              查找对象中其引用当前位于计算堆栈的字段的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>
              查找对象中其引用当前位于计算堆栈的字段的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>
              将非托管的指针 (类型<see langword="native int" />) 实现到计算堆栈的特定方法的本机代码的。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>
              加载类型的值 <see langword="native int" /> 作为 <see langword="native int" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>
              加载类型的值 <see langword="int8" /> 作为 <see langword="int32" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>
              加载类型的值 <see langword="int16" /> 作为 <see langword="int32" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>
              加载类型的值 <see langword="int32" /> 作为 <see langword="int32" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>
              加载类型的值 <see langword="int64" /> 作为 <see langword="int64" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>
              加载类型的值 <see langword="float32" /> 作为类型 <see langword="F" /> (float) 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>
              加载类型的值 <see langword="float64" /> 作为类型 <see langword="F" /> (float) 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>
              加载对象引用作为一种类型 <see langword="O" /> （对象引用） 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>
              加载类型的值 <see langword="unsigned int8" /> 作为 <see langword="int32" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>
              加载类型的值 <see langword="unsigned int16" /> 作为 <see langword="int32" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>
              加载类型的值 <see langword="unsigned int32" /> 作为 <see langword="int32" /> 到计算堆栈上间接。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>
              将从零开始的、一维数组的元素的数目推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>
              将指定索引处的局部变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>
              将索引 0 处的局部变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>
              将索引 1 处的局部变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>
              将索引 2 处的局部变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>
              将索引 3 处的局部变量加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>
              将特定索引处的局部变量加载到计算堆栈上（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>
              将位于特定索引处的局部变量的地址加载到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>
              将位于特定索引处的局部变量的地址加载到计算堆栈上（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>
              推送空引用 (类型 <see langword="O" />) 到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>
              将地址指向的值类型对象复制到计算堆栈的顶部。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>
              将静态字段的值推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>
              将静态字段的地址推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>
              推送对元数据中存储的字符串的新对象引用。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>
              将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>
              将非托管的指针 (类型 <see langword="native int" />) 实现与到计算堆栈上指定的对象相关联的特定虚方法的本机代码。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>
              退出受保护的代码区域，无条件将控制转移到特定目标指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>
              退出受保护的代码区域，无条件将控制转移到目标指令（缩写形式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>
              从本地动态内存池分配一定数量的字节并将的地址 (瞬态指针，类型 <see langword="*" />) 的第一个到计算堆栈上分配的字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>
              将对特定类型实例的类型化引用推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>
              将两个值相乘并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>
              将两个整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>
              将两个无符号整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>
              对一个值执行求反并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>
              将对新的从零开始的一维数组（其元素属于特定类型）的对象引用推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>
              创建一个新的对象或值类型，并将对象引用的新实例 (类型 <see langword="O" />) 到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>
              如果修补操作码，则填充空间。
               尽管可能消耗处理周期，但未执行任何有意义的操作。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>
              计算堆栈顶部整数值的按位求补并将结果作为相同的类型推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>
              计算位于堆栈顶部的两个整数值的按位求补并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>
              移除当前位于计算堆栈顶部的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>
              此指令为保留指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>
              指定后面的数组地址操作在运行时不执行类型检查，并且返回可变性受限的托管指针。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>
              检索嵌入在类型化引用内的类型标记。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>
              检索的地址 (类型 <see langword="&amp;" />) 嵌入在类型化引用内。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>
              将两个值相除并将余数推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>
              将两个无符号值相除并将余数推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>
              从当前方法返回，并将返回值（如果存在）从被调用方的计算堆栈推送到调用方的计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>
              再次引发当前异常。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>
              将整数值左移（用零填充）指定的位数，并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>
              将整数值右移（保留符号）指定的位数，并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>
              将无符号整数值右移（用零填充）指定的位数，并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>
              将提供的值类型的大小（以字节为单位）推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>
              将位于计算堆栈顶部的值存储到位于指定索引的自变量槽中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>
              将位于计算堆栈顶部的值存储在自变量槽中的指定索引处（短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>
              用计算堆栈中的值替换给定索引处的数组元素，其类型在指令中指定。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>
              替换给定索引处的数组元素 <see langword="native int" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>
              替换给定索引处的数组元素 <see langword="int8" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>
              替换给定索引处的数组元素 <see langword="int16" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>
              替换给定索引处的数组元素 <see langword="int32" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>
              替换给定索引处的数组元素 <see langword="int64" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>
              替换给定索引处的数组元素 <see langword="float32" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>
              替换给定索引处的数组元素 <see langword="float64" /> 计算堆栈上的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>
              给定索引处的数组元素替换的对象 ref 值 (类型 <see langword="O" />) 到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>
              用新值替换在对象引用或指针的字段中存储的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>
              存储类型的值 <see langword="native int" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>
              存储类型的值 <see langword="int8" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>
              存储类型的值 <see langword="int16" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>
              存储类型的值 <see langword="int32" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>
              存储类型的值 <see langword="int64" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>
              存储类型的值 <see langword="float32" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>
              存储类型的值 <see langword="float64" /> 在提供的地址。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>
              存储所提供地址处的对象引用值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>
              从计算堆栈的顶部弹出当前值并将其存储到指定索引处的局部变量列表中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>
              从计算堆栈的顶部弹出当前值并将其存储到索引 0 处的局部变量列表中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>
              从计算堆栈的顶部弹出当前值并将其存储到索引 1 处的局部变量列表中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>
              从计算堆栈的顶部弹出当前值并将其存储到索引 2 处的局部变量列表中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>
              从计算堆栈的顶部弹出当前值并将其存储到索引 3 处的局部变量列表中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>
              弹出当前值从计算堆栈的顶部，并将其存储在处的局部变量列表 <paramref name="index" /> （短格式）。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>
              将指定类型的值从计算堆栈复制到所提供的内存地址中。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>
              用来自计算堆栈的值替换静态字段的值。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>
              从其他值中减去一个值并将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>
              从另一值中减去一个整数值，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>
              从另一值中减去一个无符号整数值，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>
              实现跳转表。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>
              执行后缀的方法调用指令，以便在执行实际调用指令前移除当前方法的堆栈帧。
            </summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>
              如果提供的操作码采用单字节参数则返回真或假。
            </summary>
      <param name="inst">
                操作码对象的实例。
              </param>
      <returns>
        <see langword="True" /> 或 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>
              引发当前位于计算堆栈上的异常对象。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>
              指示当前位于计算堆栈顶部的地址可能不在的紧随的自然大小对齐 <see langword="ldind" />, ，<see langword="stind" />, ，<see langword="ldfld" />, ，<see langword="stfld" />, ，<see langword="ldobj" />, ，<see langword="stobj" />, ，<see langword="initblk" />, ，或 <see langword="cpblk" /> 指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>
              将值类型的已装箱的表示形式转换为其未装箱的形式。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>
              将指令中指定类型的已装箱的表示形式转换成未装箱形式。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>
              指定当前位于计算堆栈顶部的地址可以是易失的，并且读取该位置的结果不能被缓存，或者对该地址的多个存储区不能被取消。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>
              计算位于计算堆栈顶部的两个值的按位异或，并且将结果推送到计算堆栈上。
            </summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>
              描述 Microsoft 中间语言 (MSIL) 指令的类型。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary>
              此枚举器值被保留，并且不应使用。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>
              这些是用作同义词的其他 MSIL 指令的 Microsoft 中间语言 (MSIL) 指令。
               例如， <see langword="ldarg.0" /> 表示 <see langword="ldarg" /> 用参数为 0 的指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>
              描述保留的 Microsoft 中间语言 (MSIL) 指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>
              描述适用于对象的 Microsoft 中间语言 (MSIL) 指令。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>
              描述前缀指令修改下面的指令的行为。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>
              描述内置指令。
            </summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>
              描述 Microsoft 中间语言 (MSIL) 指令的操作数类型。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>
              该操作数为 32 位整数分支目标。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>
              该操作数为 32 位元数据标记。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>
              操作数是一个 32 位整数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>
              该操作数为 64 位整数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>
              该操作数为 32 位元数据标记。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>
              没有操作数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary>
              操作数是保留且不应使用。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>
              操作数为 64 位 IEEE 浮点数字。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>
              该操作数为 32 位元数据签名令牌。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>
              操作数是 32 位元数据字符串标记。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>
              该操作数为 switch 指令的 32 位整数参数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>
              操作数是 <see langword="FieldRef" />, ，<see langword="MethodRef" />, ，或 <see langword="TypeRef" /> 令牌。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>
              该操作数为 32 位元数据标记。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>
              该操作数为 16 位整数，包含本地变量或参数的序号。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>
              该操作数为 8 位整数分支目标。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>
              操作数是一个 8 位整数。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>
              操作数为 32 位 IEEE 浮点数字。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>
              操作数是一个 8 位整数，包含一个本地变量或参数的序号。
            </summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>
              指定用于在封送类型时确定字段的内存对齐方式的两个因素之一。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>
              包装大小为 1 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>
              封装大小为 128 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>
              包装大小为 16 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>
              封装大小为 2 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>
              包装大小为 32 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>
              封装大小为 4 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>
              包装大小为 64 字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>
              封装大小为 8 个字节。
            </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>
              未指定的包装大小。
            </summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>
              指定方法属性的标志。
               这些标志在 Corhdr.h 文件中进行定义。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>
              表示此类不提供此方法的实现。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>
              指示该方法可以访问的此程序集的任何类。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>
              指示该方法时也是访问中只能被重写。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>
              指示该方法可以访问的这种类型和其派生的类型包含在此程序集的成员。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>
              指示该方法是仅供此类和它的派生的类的成员访问。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>
              指示该方法是对派生类的任意位置，以及在程序集中的任何类可访问。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>
              指示不能重写该方法。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>
              指示该方法具有与之相关联的安全性。
               只能使用供运行时保留的标志。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>
              指示该方法隐藏由名称和签名。否则为只按名称。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>
              检索可访问性的信息。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>
              指示该方法将始终获取 vtable 中的新槽。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>
              指示该方法的实现通过 PInvoke （平台调用服务） 转发。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>
              指示该方法是仅供当前类访问。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>
              指示该成员不能被引用。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>
              指示该方法是可以访问此对象是在作用域中的任何对象。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>
              指示该方法调用包含安全代码的另一种方法。
               只能使用供运行时保留的标志。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>
              指示该方法将重用现有 vtable 中的槽。
               这是默认行为。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>
              指示公共语言运行时检查名称编码。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>
              指示该方法是特殊。
               名称描述此方法的特殊。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>
              指示该方法定义的类型;否则，它定义每个实例。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>
              指示对非托管代码转换 （thunk） 导出的托管的方法。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>
              指示该方法为虚拟。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>
              检索 vtable 属性。
            </summary>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>
              指定方法实现的属性的标志。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveInlining">
      <summary>
              指定方法应尽可能内联。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>
              指定有关代码类型的标志。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>
              指定方法是未定义的。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>
              指定方法实现位于 Microsoft 中间语言 (MSIL) 中。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>
              指定内部调用。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>
              指定方法在托管代码中实现。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>
              指定方法是在托管代码还是非托管代码中实现。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>
              指定方法实现为本机。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>
              指定方法不能内联。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>
              指定在调试可能的代码生成问题时，方法不由实时 (JIT) 编译器或本机代码生成优化（请参阅 Ngen.exe）。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>
              指定方法实现位于优化中间语言 (OPTIL) 中。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>
              指定方法签名是完全按照声明导出的。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>
              指定方法实现由运行时提供。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>
              指定方法是通过正文的单线程方法。
               静态方法（在 Visual Basic 中为 <see langword="Shared" />）在类型上锁定，而实例方法在实例上锁定。
               为此，也可以使用 C# lock 语句或 Visual Basic SyncLock 语句。
            </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>
              指定方法在非托管代码中实现。
            </summary>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>
              定义可以与参数相关联的属性。
               这些属性在 CorHdr.h 中进行定义。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>
              指定的参数具有默认值。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>
              指定该参数具有字段封送处理信息。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>
              指定该参数是输入的参数。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>
              指定该参数是区域设置标识符 (lcid)。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>
              指定没有参数的属性。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>
              指定该参数是可选的。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>
              指定该参数是输出参数。
            </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>
              指定该参数是返回值。
            </summary>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>
              定义可以与属性相关联的属性。
               这些属性值在 Corhdr.h 中进行定义。
            </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>
              指定该属性具有默认值。
            </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>
              不指定任何属性与属性关联。
            </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>
              指定元数据内部 Api 检查名称编码。
            </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>
              指定该属性是并用名称说明如何属性特殊的特殊字符。
            </summary>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>
              指定类型属性。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>
              指定该类型为抽象类型。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>
              LPTSTR 被解释为 ANSI。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>
              LPTSTR 自动被解释。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>
              指定类字段由公共语言运行时自动布局。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>
              指定调用此类型的静态方法并不强制系统初始化此类型。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>
              指定该类型为一个类。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>
              指定类语义信息；当前类与上下文相关（否则是灵活的）。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>
              LPSTR 由一些特定于实现的方法，其中包括有可能引发进行解释 <see cref="T:System.NotSupportedException" />。
               不使用的 Microsoft 实现中 .NET Framework。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>
              用于检索本机互操作的非标准编码信息。
               未指定这些 2 位值的含义。
               不使用的 Microsoft 实现中 .NET Framework。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>
              指定类字段按指定的偏移量布局。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>
              类型具有与之关联的安全性。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>
              指定此类或接口从另一个模块导入。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>
              指定该类型为一个接口。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>
              指定类布局信息。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>
              指定此类是用程序集可见性嵌套的，因此只能由其程序集内的方法访问。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>
              指定此类是用程序集和族可见性嵌套的，因此只能由其族和程序集的交集中的方法访问。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>
              指定此类是用族可见性嵌套的，因此只能由它自己的类型和任何派生类型中的方法访问。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>
              指定此类是用族或程序集可见性嵌套的，因此只能由其族和程序集的并集中的方法访问。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>
              指定此类是用私有可见性嵌套的。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>
              指定此类是用公共可见性嵌套的。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>
              指定此类不是公共的。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>
              指定此类是公共的。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>
              运行时应检查名称编码。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>
              指定此类是具体的，无法扩展。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>
              指定类字段按字段发出到元数据的顺序依次布局。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>
              指定此类可以序列化。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>
              指定此类特殊，具体由名称表示。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>
              用于检索本机互操作性的字符串信息。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>
              LPTSTR 被解释为 UNICODE。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>
              指定类型可见性信息。
            </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.WindowsRuntime">
      <summary>
              指定 Windows 运行时 类型。
            </summary>
    </member>
  </members>
</doc>