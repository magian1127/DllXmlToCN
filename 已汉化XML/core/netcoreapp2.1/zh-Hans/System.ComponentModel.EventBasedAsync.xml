<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.EventBasedAsync</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> 类的新实例。
            </summary>
      <param name="progressPercentage">
                已完成的异步任务的百分比。
              </param>
      <param name="userState">
                唯一的用户状态。
              </param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>
              获取异步任务进度百分比。
            </summary>
      <returns>
              指示异步任务进度的百分比值。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>
              获取唯一的用户状态。
            </summary>
      <returns>
              一个唯一 <see cref="T:System.Object" /> ，该值指示用户状态。
            </returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>
              表示将处理 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件的方法。
               此类不能被继承。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />   包含事件数据。
              </param>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>
              将提供数据供 MethodName<see langword="Completed" /> 事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> 类的新实例。
            </summary>
      <param name="result">
                异步操作的结果。
              </param>
      <param name="error">
                异步操作过程中发生任何错误。
              </param>
      <param name="cancelled">
                一个值，该值指示是否已取消异步操作。
              </param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>
              获取一个值，表示异步操作的结果。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 表示异步操作的结果。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 不是 <see langword="null" />。
                  <see cref="P:System.Exception.InnerException" /> 属性保存对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 为 <see langword="true" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary>
              获取一个值，该值表示用户状态。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 表示的用户状态。
            </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />   包含事件数据。
              </param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>
              将提供数据供 MethodName<see langword="Completed" /> 事件。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。
            </summary>
      <param name="error">
                异步操作过程中发生任何错误。
              </param>
      <param name="cancelled">
                一个值，该值指示是否已取消异步操作。
              </param>
      <param name="userState">
                可选的用户提供的状态对象传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 方法。
              </param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>
              获取一个值，该值指示是否已取消一个异步操作。
            </summary>
      <returns>
        <see langword="true" /> 如果在后台操作已取消;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>
              获取一个值，该值指示异步操作期间发生的错误。
            </summary>
      <returns>
        <see cref="T:System.Exception" /> 实例，如果异步操作; 期间发生了错误否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>
              如果异步操作失败，则引发用户提供的异常。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 属性为 <see langword="true" />。
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 属性已设置由异步操作。
                  <see cref="P:System.Exception.InnerException" /> 属性保存对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>
              获取异步任务的唯一标识符。
            </summary>
      <returns>
              唯一标识异步任务; 对象引用否则为 <see langword="null" /> 如果不设置任何值。
            </returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>
              表示将处理的方法 MethodName<see langword="Completed" /> 事件的异步操作。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。
              </param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>
              跟踪异步操作的生存期。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Finalize">
      <summary>
              完成异步操作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>
              结束异步操作的生存期。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 已被调用过此任务。
                </exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
              在适合于应用程序模型的线程或上下文中调用委托。
            </summary>
      <param name="d">
                一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。
              </param>
      <param name="arg">
        <paramref name="d" /> 参数中包含的委托的一个参数。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 方法已被调用过此任务。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
              结束异步操作的生存期。
            </summary>
      <param name="d">
                一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。
              </param>
      <param name="arg">
        <paramref name="d" /> 参数中包含的委托的一个参数。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 已被调用过此任务。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>
              获取传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。
            </summary>
      <returns>
              传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>
              获取或设置用于唯一标识异步操作的对象。
            </summary>
      <returns>
              传递给异步方法调用的状态对象。
            </returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>
              提供支持异步方法调用的类的并发管理。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>
              返回 <see cref="T:System.ComponentModel.AsyncOperation" /> 用于跟踪特定的异步操作的持续时间。
            </summary>
      <param name="userSuppliedState">
                用于将客户端状态，如任务 ID，一种关联与特定的异步操作的对象。
              </param>
      <returns>
        <see cref="T:System.ComponentModel.AsyncOperation" /> 可用来跟踪对异步方法调用的持续时间。
            </returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>
              获取或设置用于异步操作的同步上下文。
            </summary>
      <returns>
              异步操作的同步上下文。
            </returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>
              在单独的线程上执行操作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>
              请求取消的挂起的后台操作。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> 为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>
              获取一个值，该值指示应用程序是否已请求取消后台操作。
            </summary>
      <returns>
        <see langword="true" /> 如果应用程序已请求取消的后台操作;，否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.Dispose">
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>
              发生时 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> 调用。
            </summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.ComponentModel.BackgroundWorker" /> 正在运行的异步操作。
            </summary>
      <returns>
        <see langword="true" />, 如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 正在运行的异步操作; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.EventArgs" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.EventArgs" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.EventArgs" />。
              </param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>
              发生时 <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> 调用。
            </summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。
            </summary>
      <param name="percentProgress">
                从 0 到 100 的后台操作已完成百分比。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 属性设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>
              引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。
            </summary>
      <param name="percentProgress">
                从 0 到 100 的后台操作已完成百分比。
              </param>
      <param name="userState">
                状态对象传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 属性设置为 <see langword="false" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>
              开始执行后台操作。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 为 <see langword="true" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>
              开始执行后台操作。
            </summary>
      <param name="argument">
                使用后台操作以在中执行的参数 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件处理程序。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 为 <see langword="true" />。
                </exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>
              后台操作已完成、 已取消或引发异常时发生。
            </summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.ComponentModel.BackgroundWorker" /> 可以报告进度更新。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持进度更新; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持异步取消操作。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持取消操作; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>
              将提供数据供 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件处理程序。
            </summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.DoWorkEventArgs" /> 类的新实例。
            </summary>
      <param name="argument">
                指定异步操作的参数。
              </param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>
              获取一个值，表示异步操作的参数。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 表示异步操作的参数。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <returns>
      </returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>
              获取或设置一个值，表示异步操作的结果。
            </summary>
      <returns>
        <see cref="T:System.Object" /> 表示异步操作的结果。
            </returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件的方法。
               此类不能被继承。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                一个 <see cref="T:System.ComponentModel.DoWorkEventArgs" />    包含事件数据。
              </param>
    </member>
  </members>
</doc>