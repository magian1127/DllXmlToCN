<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary>
              描述可提交的事务。
            </summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.CommittableTransaction" /> 类的新实例。
            </summary>
      <exception cref="T:System.PlatformNotSupportedException">
                  尝试创建一个在 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition 的事务。
                </exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary>
              使用指定的 <paramref name="timeout" /> 值初始化 <see cref="T:System.Transactions.CommittableTransaction" /> 类的新实例。
            </summary>
      <param name="timeout">
                最大事务可以存在之前被中止, 的时间量。
              </param>
      <exception cref="T:System.PlatformNotSupportedException">
                  尝试创建一个在 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition 的事务。
                </exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.CommittableTransaction" /> 类，具有指定的事务选项。
            </summary>
      <param name="options">
                一个 <see cref="T:System.Transactions.TransactionOptions" /> 结构，它描述了要用于新事务的事务选项。
              </param>
      <exception cref="T:System.PlatformNotSupportedException">
                  尝试创建一个在 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition 的事务。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 无效。
                </exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary>
              开始以异步方式提交事务的尝试。
            </summary>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 事务完成时调用的委托。
                 此参数可以为 <see langword="null" />, ，在这种情况下应用程序不会得到通知的事务的完成。
                 相反，应用程序必须使用 <see cref="T:System.IAsyncResult" /> 接口将检查完成，并相应地，等到或致电 <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> 等待完成。
              </param>
      <param name="asyncState">
                一个对象，它可能包含与异步提交相关联的任意状态信息。
                 此对象传递给回调，并由不解释 <see cref="N:System.Transactions" />。
                 允许为 null 引用。
              </param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 检查异步操作的状态或等待要完成的操作可由调用方的接口。
            </returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary>
              尝试提交该事务。
            </summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> 事务和事务上调用变得 <see cref="F:System.Transactions.TransactionStatus.InDoubt" />。
                </exception>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> 调用，并在事务回滚第一次。
                </exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary>
              结束异步提交事务的尝试。
            </summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 的异步提交相关联的对象。
              </param>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 调用，并在事务回滚第一次。
                </exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary>
              获取作为的最后一个参数提供的对象 <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 方法调用。
            </summary>
      <returns>
              作为最后一个参数提供的对象 <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 方法调用。
            </returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary>
              获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。
            </summary>
      <returns>
              用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。
            </returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary>
              获取一个指示是否已同步完成异步提交操作。
            </summary>
      <returns>
        <see langword="true" /> 如果异步提交操作完成同步进行;否则为 <see langword="false" />。
               此属性始终返回 <see langword="false" /> 即使操作同步完成。
            </returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary>
              获取指示异步提交操作是否已完成。
            </summary>
      <returns>
              如果操作已完成，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary>
              控制要创建依赖事务的种类。
            </summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary>
              该依赖事务被阻止的事务的提交过程，直至父事务超时或 <see cref="M:System.Transactions.DependentTransaction.Complete" /> 调用。
               在这种情况下，可以对事务进行额外的工作，并可以创建新的登记。
            </summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary>
              如果在之前对父事务上调用提交后，该依赖事务将自动中止该事务 <see cref="M:System.Transactions.DependentTransaction.Complete" /> 调用。
            </summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary>
              描述提供之前在应用程序停止工作有关停留在该事务无法提交事务的保证事务的副本。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary>
              尝试完成从属事务。
            </summary>
      <exception cref="T:System.Transactions.TransactionException">
                  调用此方法后任何针对此事务进行额外工作的尝试。
                   这包括调用 <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />、<see cref="Overload:System.Transactions.Transaction.EnlistDurable" />、<see cref="M:System.Transactions.Transaction.Clone" />、<see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> 等方法，或针对事务的任何序列化操作。
                </exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary>
              促进事务的最后阶段登记的事务参与者和事务管理器之间的通信。
            </summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary>
              指示事务参与者都已完成其工作。
            </summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary>
              确定是否应在准备阶段登记该对象。
            </summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary>
              该对象必须在提交过程的初始阶段中登记。
            </summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary>
              该对象不需要做出的承诺过程的初始阶段中登记。
            </summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary>
              指定如何分布式的事务与 COM + 事务交互。
            </summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary>
              搜索现有 COM + 上下文，并与之同步，如果存在。
            </summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary>
        <see cref="N:System.EnterpriseServices" /> 上下文 (可以通过调用静态方法来检索其 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> 的 <see cref="T:System.EnterpriseServices.ContextUtil" /> 类) 和 <see cref="N:System.Transactions" /> 环境事务 (可以通过调用静态方法来检索其 <see cref="P:System.Transactions.Transaction.Current" /> 的 <see cref="T:System.Transactions.Transaction" /> 类) 始终保持同步。
               这带来了对性能产生负面影响，因为新 <see cref="N:System.EnterpriseServices" /> 上下文可能需要创建。
            </summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary>
              不能同步之间 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> 和 <see cref="P:System.Transactions.Transaction.Current" />。
            </summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary>
              提供宿主环境可以提供其自己的默认概念的一种机制 <see cref="P:System.Transactions.Transaction.Current" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.Transaction" /> 对象。
            </returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary>
              描述 DTC 事务。
            </summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary>
              中止事务。
            </summary>
      <param name="reason">
                一个可选 <see cref="T:System.EnterpriseServices.BOID" /> ，该值指示在事务中止原因。
                 此参数可以为 <see langword="null" />, ，指示不提供任何原因有关中止。
              </param>
      <param name="retaining">
                此值必须是 <see langword="false" />。
              </param>
      <param name="async">
                当 <paramref name="async" /> 是 <see langword="true" />, ，执行异步中止，并且调用方必须使用 <see langword="ITransactionOutcomeEvents" /> 若要了解有关该事务的结果。
              </param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>
              提交事务。
            </summary>
      <param name="retaining">
                此值必须是 <see langword="false" />。
              </param>
      <param name="commitType">
                从 OLE DB 枚举的值 <see langword="XACTTC" />。
              </param>
      <param name="reserved">
                此值必须为零。
              </param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary>
              检索有关事务的信息。
            </summary>
      <param name="transactionInformation">
                指向调用方分配 <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> 结构，它将接收有关事务的信息。
                 此值不能 <see langword="null" />。
              </param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary>
              描述一个接口，资源管理器应实现该接口以在登记参与时为事务管理器提供两阶段提交通知回调。
            </summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary>
              通知登记对象正在提交事务。
            </summary>
      <param name="enlistment">
        <see cref="T:System.Transactions.Enlistment" /> 对象，用于向事务管理器发送响应。
              </param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary>
              通知已登记参与的事务的状态不确定的对象。
            </summary>
      <param name="enlistment">
        <see cref="T:System.Transactions.Enlistment" /> 对象，用于向事务管理器发送响应。
              </param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>
              通知登记的事务正准备承诺的对象。
            </summary>
      <param name="preparingEnlistment">
                一个 <see cref="T:System.Transactions.PreparingEnlistment" /> 对象，用于向事务管理器发送响应。
              </param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary>
              通知正在回滚事务的登记的对象 （已中止）。
            </summary>
      <param name="enlistment">
                一个 <see cref="T:System.Transactions.Enlistment" /> 对象，用于向事务管理器发送响应。
              </param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary>
              描述可作为资源管理器的内部非分布式事务的提交委托的对象。
            </summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary>
              通知事务参与者列入已成功完成。
            </summary>
      <exception cref="T:System.Transactions.TransactionException">
                  尝试登记或序列化事务。
                </exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>
              通知正在回滚事务的登记的对象。
            </summary>
      <param name="singlePhaseEnlistment">
                一个 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 对象，用于向事务管理器发送响应。
              </param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>
              通知登记对象提交事务。
            </summary>
      <param name="singlePhaseEnlistment">
                一个 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 接口，用于向事务管理器发送响应。
              </param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary>
              表示不是根事务，但可升级为由 MSDTC 管理的事务。
            </summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary>
              通知正在回滚事务的登记的对象。
            </summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary>
              描述支持单阶段提交优化以参与事务的资源对象。
            </summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>
              表示资源管理器的实现的单阶段提交优化的回调。
            </summary>
      <param name="singlePhaseEnlistment">
                一个 <see cref="T:System.Transactions.SinglePhaseEnlistment" />  用来向事务管理器发送响应。
              </param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary>
              指定事务的隔离级别。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary>
              无法覆盖从更高隔离级别的事务挂起的更改。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary>
              易失数据不能在事务期间读取，但可以修改。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary>
              可以读取和修改在事务处理期间易失性数据。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary>
              可以读取但不是会修改在事务处理期间易失数据。
               在事务处理期间，可以添加新数据。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary>
              易失数据可以读取但不是会修改，并在事务处理期间，可以添加任何新数据。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary>
              可以读取易失数据。
               在事务修改数据之前，它验证后最初读取其他事务是否已更改数据。
               如果已更新的数据，则引发错误。
               这允许一个事务来获取对此数据的以前提交的值。
            </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary>
              正在使用比指定不同的隔离级别，但不能确定其级别。
               如果设置此值，将引发异常。
            </summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary>
              描述可升级为由 MSDTC 在需要时管理的现有事务的委派的事务。
            </summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary>
              通知登记对象已经请求委托事务升级。
            </summary>
      <returns>
              将分布式的事务的封送传输器/接收器传播标记。
               有关详细信息，请参阅<see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />。
            </returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary>
              促进事务在准备阶段登记的事务参与者和事务管理器之间的通信。
            </summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary>
              指示应回滚事务。
            </summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary>
              指示应回滚事务。
            </summary>
      <param name="e">
                触发回滚原因的说明。
              </param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary>
              指示可以提交该事务。
            </summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary>
              获取登记的恢复信息。
            </summary>
      <returns>
              登记将恢复信息。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试获取中不会生成任何恢复信息的可变参与者的恢复信息。
                </exception>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary>
              提供了一套帮助为 Single Phase Commit and 事务管理器登记的参与者之间进行通信的回调时 <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> 收到通知。
            </summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary>
              表示用于向事务管理器指示应回滚事务的回调。
            </summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary>
              表示用于向事务管理器指示事务应被回滚，并提供说明的回调。
            </summary>
      <param name="e">
                说明为什么启动回滚。
              </param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary>
              表示用于向事务管理器指示 SinglePhaseCommit 成功回调。
            </summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary>
              表示用于向事务管理器指示事务的状态不确定的回调。
            </summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary>
              表示用于向事务管理器指示事务的状态不确定，并提供说明的回调。
            </summary>
      <param name="e">
                为什么说事务是不确定的说明。
              </param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary>
              表示可以委派非根事务。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary>
              初始化 <see cref="T:System.Transactions.SubordinateTransaction" /> 类的新实例。
            </summary>
      <param name="isoLevel">
                事务的隔离级别
              </param>
      <param name="superior">
                一个 <see cref="T:System.Transactions.ISimpleTransactionSuperior" /></param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary>
              表示的事务。
            </summary>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary>
              创建事务的克隆。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.Transaction" /> ，它是当前的事务对象的副本。
            </returns>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary>
              获取或设置环境事务。
            </summary>
      <returns>
              描述当前事务的 <see cref="T:System.Transactions.Transaction" />。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary>
              创建依赖的克隆的事务。
            </summary>
      <param name="cloneOption">
                一个 <see cref="T:System.Transactions.DependentCloneOption" /> 控制哪种依赖事务来创建。
              </param>
      <returns>
              一个 <see cref="T:System.Transactions.DependentTransaction" /> ，它表示依赖的克隆。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary>
              释放由该对象占用的资源。
            </summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>
              登记在事务中支持两阶段提交参与的持久资源管理器。
            </summary>
      <param name="resourceManagerIdentifier">
                资源管理器，它应保留在资源管理器发生故障或重新启动一个唯一标识符。
              </param>
      <param name="enlistmentNotification">
                实现的对象 <see cref="T:System.Transactions.IEnlistmentNotification" /> 接口来接收两阶段提交通知。
              </param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> 如果资源管理器想要执行的准备阶段的额外工作。
              </param>
      <returns>
        <see cref="T:System.Transactions.Enlistment" /> 描述登记的对象。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>
              登记在事务中支持单阶段提交优化，以参与持久资源管理器。
            </summary>
      <param name="resourceManagerIdentifier">
                资源管理器，它应保留在资源管理器发生故障或重新启动一个唯一标识符。
              </param>
      <param name="singlePhaseNotification">
                实现的对象 <see cref="T:System.Transactions.ISinglePhaseNotification" /> 必须能够接收单阶段提交和两阶段提交通知的接口。
              </param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> 如果资源管理器想要执行的准备阶段的额外工作。
              </param>
      <returns>
        <see cref="T:System.Transactions.Enlistment" /> 描述登记的对象。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary>
              对资源管理器进行登记，该资源管理器具有使用可提升的单阶段登记 (PSPE) 的内部事务。
            </summary>
      <param name="promotableSinglePhaseNotification">
                由参与者实现的 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 接口。
              </param>
      <returns>
              描述登记的 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 接口实现。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>
              对资源管理器进行登记，该资源管理器具有使用可提升的单阶段登记 (PSPE) 的内部事务。
            </summary>
      <param name="promotableSinglePhaseNotification">
                由参与者实现的 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 接口。
              </param>
      <param name="promoterType">
                分布式事务处理器的类型。
              </param>
      <returns>
              描述登记的 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 接口实现。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>
              登记在事务中支持两阶段提交参与的易失性资源管理器。
            </summary>
      <param name="enlistmentNotification">
                实现 <see cref="T:System.Transactions.IEnlistmentNotification" /> 接口，以接收两阶段提交通知的对象。
              </param>
      <param name="enlistmentOptions">
                如果资源管理器在准备阶段想要执行额外工作，则为 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。
              </param>
      <returns>
              描述登记的 <see cref="T:System.Transactions.Enlistment" /> 对象。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>
              登记在事务中支持单阶段提交优化，以参与可变资源管理器。
            </summary>
      <param name="singlePhaseNotification">
                实现的对象 <see cref="T:System.Transactions.ISinglePhaseNotification" /> 必须能够接收单阶段提交和两阶段提交通知的接口。
              </param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> 如果资源管理器想要执行的准备阶段的额外工作。
              </param>
      <returns>
        <see cref="T:System.Transactions.Enlistment" /> 描述登记的对象。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary>
              确定此事务和指定的对象是否相等。
            </summary>
      <param name="obj">
                与该实例进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="obj" /> 与此事务完全相同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary>
              获取提升事务时由 Promote 方法返回的 byte[]。
            </summary>
      <returns>
              提升事务时由 Promote 方法返回的 byte[]。
            </returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary>
              获取事务的隔离级别。
            </summary>
      <returns>
              其中一个 <see cref="T:System.Transactions.IsolationLevel" /> 值，该值指示该事务的隔离级别。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>
              测试两个指定 <see cref="T:System.Transactions.Transaction" /> 实例是否相等。
            </summary>
      <param name="x">
        <see cref="T:System.Transactions.Transaction" /> 相等运算符左侧的实例。
              </param>
      <param name="y">
        <see cref="T:System.Transactions.Transaction" /> 相等运算符右侧的实例。
              </param>
      <returns>
              如果 <paramref name="x" /> 和 <paramref name="y" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Transactions.Transaction" /> 实例是否不相等。
            </summary>
      <param name="x">
        <see cref="T:System.Transactions.Transaction" /> 不等运算符左侧的实例。
              </param>
      <param name="y">
        <see cref="T:System.Transactions.Transaction" /> 不等运算符右侧的实例。
              </param>
      <returns>
              如果 <paramref name="x" /> 和 <paramref name="y" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>
              [仅在 .NET Framework 4.5.2 及更高版本中受支持]
            
              升级并登记在事务中支持两阶段提交参与的持久资源管理器。
            </summary>
      <param name="resourceManagerIdentifier">
                资源管理器，它应保留在资源管理器发生故障或重新启动一个唯一标识符。
              </param>
      <param name="promotableNotification">
                一个充当资源管理器的内部非分布式事务的提交委托的对象。
              </param>
      <param name="enlistmentNotification">
                实现的对象 <see cref="T:System.Transactions.IEnlistmentNotification" /> 接口来接收两阶段提交通知。
              </param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> 如果资源管理器想要执行的准备阶段的额外工作。
              </param>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary>
              对提升事务时由 Promote 方法返回的 byte[] 的格式进行唯一标识。
            </summary>
      <returns>
              对提升事务时由 Promote 方法返回的 byte[] 的格式进行唯一标识的 GUID。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary>
              回滚 （中止） 事务。
            </summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary>
              回滚 （中止） 事务。
            </summary>
      <param name="e">
                回滚发生原因的说明。
              </param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>
              设置由非 MSDTC 提升程序生成的分布式事务标识符。
            </summary>
      <param name="promotableNotification">
                由参与者实现的 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 接口。
              </param>
      <param name="distributedTransactionIdentifier">
                分布式事务管理器使用的事务的标识符。
              </param>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary>
              指示该事务已完成。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  尝试订阅此事件已被释放的事务上。
                </exception>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary>
              检索有关一个事务的其他信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.TransactionInformation" /> 包含有关该事务的其他信息。
            </returns>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              获取 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 与序列化此交易记录所需的数据。
            </summary>
      <param name="serializationInfo">
                要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
              </param>
      <param name="context">
                目标 (请参阅 <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) 此序列化。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary>
              当某个操作尝试对已返回，回滚的事务或尝试提交事务和事务时引发的异常中止。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 类与指定的序列化和流上下文信息。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化上下文的对象。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的消息和内部异常初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
      <param name="innerException">
                获取导致当前异常的异常实例。
                 有关更多信息，请参见 <see cref="P:System.Exception.InnerException" /> 属性。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> 事件 <see cref="T:System.Transactions.Transaction" /> 类。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Transactions.TransactionEventArgs" />。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary>
              以下事务事件提供数据︰ <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />, ，<see cref="E:System.Transactions.Transaction.TransactionCompleted" />。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionEventArgs" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary>
              获取事件提供状态的事务。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.Transaction" /> 事件提供状态。
            </returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary>
              当您尝试执行不能接受新的工作的事务上工作时引发的异常。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Transactions.TransactionException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionException" /> 类与指定的序列化和流上下文信息。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化上下文的对象。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的消息和内部异常初始化 <see cref="T:System.Transactions.TransactionException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
      <param name="innerException">
                获取导致当前异常的异常实例。
                 有关更多信息，请参见 <see cref="P:System.Exception.InnerException" /> 属性。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary>
              上的事务才有疑问，请尝试执行操作或尝试提交事务而事务时引发的异常将成为 InDoubt。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 类与指定的序列化和流上下文信息。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化上下文的对象。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的消息和内部异常初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
      <param name="innerException">
                获取导致当前异常的异常实例。
                 有关更多信息，请参见 <see cref="P:System.Exception.InnerException" /> 属性。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary>
              提供有关事务的其他信息。
            </summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary>
              获取事务的创建时间。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，其中包含事务的创建时间。
            </returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary>
              获取已升级的事务的唯一标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.Guid" /> ，其中包含已升级的事务的唯一标识符。
            </returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary>
              获取事务的唯一标识符。
            </summary>
      <returns>
              事务的唯一标识符。
            </returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary>
              获取事务的状态。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.TransactionStatus" /> 包含事务的状态。
            </returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary>
              促进 <see cref="N:System.Transactions" /> 和以前编写的用于与 MSDTC、COM+ 或 <see cref="N:System.EnterpriseServices" /> 进行交互的组件之间的交互。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary>
              获取表示 <see cref="T:System.Transactions.Transaction" /> 的 <see cref="T:System.Transactions.IDtcTransaction" /> 实例。  </summary>
      <param name="transaction">
                要封送处理的 <see cref="T:System.Transactions.Transaction" /> 实例。
              </param>
      <returns>
              表示 <see cref="T:System.Transactions.Transaction" /> 的 <see cref="T:System.Transactions.IDtcTransaction" /> 实例。
                 <see cref="T:System.Transactions.IDtcTransaction" /> 实例是否与非托管形式兼容 ITransaction msdtc 版本以及托管形式使用 <see cref="T:System.EnterpriseServices.ITransaction" /> 使用 <see cref="N:System.EnterpriseServices" />。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary>
              将事务对象转换为导出事务 Cookie。
            </summary>
      <param name="transaction">
                要封送处理的 <see cref="T:System.Transactions.Transaction" /> 对象。
              </param>
      <param name="whereabouts">
                描述目标事务管理器位置的地址。
                 这允许两个事务管理器相互通信，从而将事务从一个系统传播到另一个系统。
              </param>
      <returns>
              表示指定的 <see cref="T:System.Transactions.Transaction" /> 对象的导出事务 Cookie。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary>
              从指定的 <see cref="T:System.Transactions.IDtcTransaction" /> 生成 <see cref="T:System.Transactions.Transaction" />。
            </summary>
      <param name="transactionNative">
                要封送处理的 <see cref="T:System.Transactions.IDtcTransaction" /> 对象。
              </param>
      <returns>
              表示给定的 <see cref="T:System.Transactions.IDtcTransaction" /> 的 <see cref="T:System.Transactions.Transaction" /> 实例。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary>
              从指定的导出 Cookie 生成 <see cref="T:System.Transactions.Transaction" />。  </summary>
      <param name="cookie">
                事务对象的封送处理形式。
              </param>
      <returns>
              指定的导出 Cookie 中的 <see cref="T:System.Transactions.Transaction" />。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary>
              从指定的传输器传播标记生成 <see cref="T:System.Transactions.Transaction" /> 实例。 </summary>
      <param name="propagationToken">
                表示事务的传播标记。
              </param>
      <returns>
              指定的传输程序传播标记中的 <see cref="T:System.Transactions.Transaction" />。
            </returns>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException">
                  反序列化的事务失败，因为当无法联系事务管理器。
                   原因可能是网络防火墙或安全设置。
                </exception>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary>
              为指定的 <see cref="T:System.Transactions.Transaction" /> 生成传播标记。
            </summary>
      <param name="transaction">
                要封送处理到传播标记中的事务。
              </param>
      <returns>
              此方法与 <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" /> 方法一起提供了用于“传输器/接收器”传播的功能，在该传播中，如果后者取消对事务的封送，则会从远程计算机“拉取”事务。
            
              有关不同传播模型的更多信息，请参阅 <see cref="T:System.Transactions.TransactionInterop" /> 类的“备注”部分。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary>
              获取 <see cref="N:System.Transactions" /> 使用的分布式事务管理器的“行踪”。  </summary>
      <returns>
        <see cref="N:System.Transactions" /> 使用的分布式事务管理器的“行踪”。  </returns>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary>
              分布式事务处理器的类型。
            </summary>
      <returns>
              分布式事务处理器的类型。
            </returns>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary>
              包含用于事务管理的方法。
               此类不能被继承。
            </summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary>
              获取默认的超时间隔的新事务。
            </summary>
      <returns>
              一个 <see cref="T:System.TimeSpan" /> 值，该值指定新事务的超时间隔。
            </returns>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary>
              表示已启动分布式的事务。
            </summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary>
              获取或设置自定义事务工厂。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.HostCurrentTransactionCallback" /> ，其中包含自定义事务工厂。
            </returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary>
              获取新的事务的默认最大超时间隔。
            </summary>
      <returns>
              一个 <see cref="T:System.TimeSpan" /> 值，该值指定创建新事务时允许的最大超时间隔。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary>
              通知事务管理器资源管理器从故障中恢复已完成所有未解决的事务中重新登记。
            </summary>
      <param name="resourceManagerIdentifier">
                一个 <see cref="T:System.Guid" /> ，用于唯一标识要从恢复的资源。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceManagerIdentifier" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary>
              重新登记在事务中的持久参与者。
            </summary>
      <param name="resourceManagerIdentifier">
                一个 <see cref="T:System.Guid" /> ，用于唯一标识资源管理器。
              </param>
      <param name="recoveryInformation">
                包含恢复信息的其他信息。
              </param>
      <param name="enlistmentNotification">
                实现的资源对象 <see cref="T:System.Transactions.IEnlistmentNotification" /> 以接收通知。
              </param>
      <returns>
        <see cref="T:System.Transactions.Enlistment" /> 描述登记。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="recoveryInformation" /> 无效。
                
                  - 或 -
                
                  事务管理器中的信息 <paramref name="recoveryInformation" /> 与已配置的事务管理器不匹配。
                
                  - 或 -
                
                  <paramref name="RecoveryInformation" /> 不能识别 <see cref="N:System.Transactions" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" /> 已调用指定 <paramref name="resourceManagerIdentifier" />。
                   重新登记将被拒绝。
                </exception>
      <exception cref="T:System.Transactions.TransactionException">
        <paramref name="resourceManagerIdentifier" /> 中指定的恢复信息的内容不匹配 <paramref name="recoveryInformation" />。
                </exception>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary>
              当资源管理器无法与事务管理器进行通信时引发的异常。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 类与指定的序列化和流上下文信息。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化上下文的对象。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的消息和内部异常初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
      <param name="innerException">
                获取导致当前异常的异常实例。
                 有关更多信息，请参见 <see cref="P:System.Exception.InnerException" /> 属性。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary>
              包含指定事务行为的其他信息。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary>
              确定是否这 <see cref="T:System.Transactions.TransactionOptions" /> 实例与指定的对象是否相等。
            </summary>
      <param name="obj">
                与该实例进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="obj" /> 并且此 <see cref="T:System.Transactions.TransactionOptions" /> 实例都相同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary>
              获取或设置事务的隔离级别。
            </summary>
      <returns>
              一个 <see cref="T:System.Transactions.IsolationLevel" /> 指定事务的隔离级别的枚举。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>
              测试两个指定 <see cref="T:System.Transactions.TransactionOptions" /> 实例是否相等。
            </summary>
      <param name="x">
        <see cref="T:System.Transactions.TransactionOptions" /> 相等运算符左侧的实例。
              </param>
      <param name="y">
        <see cref="T:System.Transactions.TransactionOptions" /> 相等运算符右侧的实例。
              </param>
      <returns>
              如果 <paramref name="x" /> 和 <paramref name="y" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Transactions.TransactionOptions" /> 实例是否不相等。
            </summary>
      <param name="x">
        <see cref="T:System.Transactions.TransactionOptions" /> 相等运算符左侧的实例。
              </param>
      <param name="y">
        <see cref="T:System.Transactions.TransactionOptions" /> 相等运算符右侧的实例。
              </param>
      <returns>
              如果 <paramref name="x" /> 和 <paramref name="y" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary>
              获取或设置事务的超时期限。
            </summary>
      <returns>
              一个 <see cref="T:System.TimeSpan" /> 值，该值指定事务的超时期限。
            </returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary>
              在提升失败时引发的异常。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 类与指定的序列化和流上下文信息。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 描述失败的序列化上下文的对象。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的消息和内部异常初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> ，其中包含一条消息，说明该异常发生的原因。
              </param>
      <param name="innerException">
                获取导致当前异常的异常实例。
                 有关更多信息，请参见 <see cref="P:System.Exception.InnerException" /> 属性。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary>
              使代码块事务。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary>
              初始化 <see cref="T:System.Transactions.TransactionScope" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类并将指定的事务设置为环境事务，以便进行作用域内的事务性工作使用此事务。
            </summary>
      <param name="transactionToUse">
                要设置为环境事务，以便进行作用域内的事务性工作使用此事务的事务。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类的指定异步流选项。
            </summary>
      <param name="asyncFlowOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 描述是否在使用任务或 async/await.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类以指定的要求。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类，具有指定的超时值，并将指定的事务设置为环境事务，以便进行作用域内的事务性工作使用此事务。
            </summary>
      <param name="transactionToUse">
                要设置为环境事务，以便进行作用域内的事务性工作使用此事务的事务。
              </param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> 其后的事务范围将超时并中止该事务。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类并将指定的事务设置为环境事务，以便进行作用域内的事务性工作使用此事务。
            </summary>
      <param name="transactionToUse">
                要设置为环境事务，以便进行作用域内的事务性工作使用此事务的事务。
              </param>
      <param name="asyncFlowOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 描述是否在使用任务或 async/await.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类具有指定的超时值和要求。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> 其后的事务范围将超时并中止该事务。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类以指定的要求。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
      <param name="transactionOptions">
                一个 <see cref="T:System.Transactions.TransactionOptions" /> 结构描述要使用如果创建一个新事务的事务选项。
                 如果使用现有事务，则此参数中的超时值适用于该事务范围。
                 如果在范围被释放之前，该时间到期，则中止事务。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 用指定的要求和异步流选项。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
      <param name="asyncFlowOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 描述是否在使用任务或 async/await.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类具有指定的超时值和 COM + 互操作性要求，并将指定的事务设置为环境事务，以便进行作用域内的事务性工作使用此事务。
            </summary>
      <param name="transactionToUse">
                要设置为环境事务，以便进行作用域内的事务性工作使用此事务的事务。
              </param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> 其后的事务范围将超时并中止该事务。
              </param>
      <param name="interopOption">
                一个实例 <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 描述关联的事务与 COM + 事务交互的方式的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类，具有指定的超时值，并将指定的事务设置为环境事务，以便进行作用域内的事务性工作使用此事务。
            </summary>
      <param name="transactionToUse">
                要设置为环境事务，以便进行作用域内的事务性工作使用此事务的事务。
              </param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> 其后的事务范围将超时并中止该事务。
              </param>
      <param name="asyncFlowOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 描述是否在使用任务或 async/await.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类，具有指定的超时值、 要求和异步流选项。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> 其后的事务范围将超时并中止该事务。
              </param>
      <param name="asyncFlowOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 描述是否在使用任务或 async/await.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 类，具有指定的作用域和 COM + 互操作性要求以及事务选项。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
      <param name="transactionOptions">
                一个 <see cref="T:System.Transactions.TransactionOptions" /> 结构描述要使用如果创建一个新事务的事务选项。
                 如果使用现有事务，则此参数中的超时值适用于该事务范围。
                 如果在范围被释放之前，该时间到期，则中止事务。
              </param>
      <param name="interopOption">
                一个实例 <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 描述关联的事务与 COM + 事务交互的方式的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              新实例初始化 <see cref="T:System.Transactions.TransactionScope" /> 用指定的要求和异步流选项。
            </summary>
      <param name="scopeOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeOption" /> 枚举，它说明了与此事务作用域关联的事务要求。
              </param>
      <param name="transactionOptions">
                一个 <see cref="T:System.Transactions.TransactionOptions" /> 结构描述要使用如果创建一个新事务的事务选项。
                 如果使用现有事务，则此参数中的超时值适用于该事务范围。
                 如果在范围被释放之前，该时间到期，则中止事务。
              </param>
      <param name="asyncFlowOption">
                一个实例 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 描述是否在使用任务或 async/await.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。
              </param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary>
              指示范围内的所有操作都已成功都完成。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  具有已调用一次此方法。
                </exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary>
              结束事务范围。
            </summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              指定是否为启用事务流跨线程延续 <see cref="T:System.Transactions.TransactionScope" />。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary>
              指定启用了事务流跨线程继续符。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary>
              指定隐藏跨线程继续符的事务流。
            </summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary>
              提供用于创建事务的作用域的其他选项。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary>
              由范围，则需要使用事务。
               如果已存在，它使用环境事务。
               否则，它创建新的事务，然后才能进入该范围。
               这是默认值。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary>
              为作用域始终创建一个新事务。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary>
              创建作用域时取消环境事务上下文。
               所有作用域内操作没有环境事务上下文。
            </summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> 事件 <see cref="T:System.Transactions.TransactionManager" /> 类。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
        <see cref="T:System.Transactions.TransactionEventArgs" /> 包含可以从哪些事务检索信息的事务。
              </param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary>
              介绍分布式事务的当前状态。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary>
              该事务已回滚。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary>
              事务的状态是未知的，因为仍必须轮询一些参与者。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary>
              该事务已提交。
            </summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary>
              事务的状态是未知的。
            </summary>
    </member>
  </members>
</doc>