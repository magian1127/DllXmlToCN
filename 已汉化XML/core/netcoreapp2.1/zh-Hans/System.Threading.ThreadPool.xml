<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.ThreadPool">
      <summary>
              提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。
            </summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>
              将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。
            </summary>
      <param name="osHandle">
                持有句柄的 <see cref="T:System.IntPtr" />。
                 在非托管端必须为重叠 I/O 打开该句柄。
              </param>
      <returns>
              如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>
              将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。
            </summary>
      <param name="osHandle">
                保存操作系统句柄的 <see cref="T:System.Runtime.InteropServices.SafeHandle" />。
                 在非托管端必须为重叠 I/O 打开该句柄。
              </param>
      <returns>
              如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>
              检索由 <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 方法返回的最大线程池线程数和当前活动线程数之间的差值。
            </summary>
      <param name="workerThreads">
                可用辅助线程的数目。
              </param>
      <param name="completionPortThreads">
                可用异步 I/O 线程的数目。
              </param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>
              检索可以同时处于活动状态的线程池请求的数目。
               所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。
            </summary>
      <param name="workerThreads">
                线程池中辅助线程的最大数目。
              </param>
      <param name="completionPortThreads">
                线程池中异步 I/O 线程的最大数目。
              </param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>
              发出新的请求时，在切换到管理线程创建和销毁的算法之前检索线程池按需创建的线程的最小数量。
            </summary>
      <param name="workerThreads">
                当此方法返回时，将包含线程池根据需要创建的最少数量的辅助线程。
              </param>
      <param name="completionPortThreads">
                当此方法返回时，将包含线程池根据需要创建的最少数量的异步 I/O 线程。
              </param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>
              将方法排入队列以便执行。
               此方法在有线程池线程变得可用时执行。
            </summary>
      <param name="callBack">
                一个 <see cref="T:System.Threading.WaitCallback" />，表示要执行的方法。
              </param>
      <returns>
              如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  承载公共语言运行时 (CLR)，并且主机不支持此操作。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>
              将方法排入队列以便执行，并指定包含该方法所用数据的对象。
               此方法在有线程池线程变得可用时执行。
            </summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" />，它表示要执行的方法。
              </param>
      <param name="state">
                包含方法所用数据的对象。
              </param>
      <returns>
              如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  承载公共语言运行时 (CLR)，并且主机不支持此操作。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>
              指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="millisecondsTimeOutInterval">
                以毫秒为单位的超时。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" />，可用于取消已注册的等待操作。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 参数是小于-1。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>
              注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> 表示的超时时间。
                 如果 <paramref name="timeout" /> 为 0（零），则函数将测试对象的状态并立即返回。
                 如果 <paramref name="timeout" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
              封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 参数是小于-1。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 参数是否大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>
              注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 32 位有符号整数来表示超时值（以毫秒为单位）。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="millisecondsTimeOutInterval">
                以毫秒为单位的超时。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
              封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 参数是小于-1。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>
              注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="millisecondsTimeOutInterval">
                以毫秒为单位的超时。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
              封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 参数是小于-1。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>
              设置可以同时处于活动状态的线程池的请求数目。
               所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。
            </summary>
      <param name="workerThreads">
                线程池中辅助线程的最大数目。
              </param>
      <param name="completionPortThreads">
                线程池中异步 I/O 线程的最大数目。
              </param>
      <returns>
              如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>
              发出新的请求时，在切换到管理线程创建和销毁的算法之前设置线程池按需创建的线程的最小数量。
            </summary>
      <param name="workerThreads">
                要由线程池根据需要创建的新的最小工作程序线程数。
              </param>
      <param name="completionPortThreads">
                要由线程池根据需要创建的新的最小空闲异步 I/O 线程数。
              </param>
      <returns>
              如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>
              将重叠的 I/O 操作排队以便执行。
            </summary>
      <param name="overlapped">
                要排队的 <see cref="T:System.Threading.NativeOverlapped" /> 结构。
              </param>
      <returns>
              如果成功地将此操作排队到 I/O 完成端口，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>
              将指定的委托排队到线程池，但不会将调用堆栈传播到辅助线程。
            </summary>
      <param name="callBack">
                一个 <see cref="T:System.Threading.WaitCallback" />，表示当线程池中的线程选择工作项时调用的委托。
              </param>
      <param name="state">
                在接受线程池服务时传递给委托的对象。
              </param>
      <returns>
              如果方法成功，则为 <see langword="true" />；如果未能将该工作项排队，则引发 <see cref="T:System.OutOfMemoryException" />。
            </returns>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ApplicationException">
                  遇到内存不足情况。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  无法将工作项排队。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>
              注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。
               此方法不将调用堆栈传播到辅助线程。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> 表示的超时时间。
                 如果 <paramref name="timeout" /> 为 0（零），则函数将测试对象的状态并立即返回。
                 如果 <paramref name="timeout" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 参数是小于-1。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 参数是否大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>
              注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并使用一个 32 位带符号整数来表示超时时间（以毫秒为单位）。
               此方法不将调用堆栈传播到辅助线程。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="millisecondsTimeOutInterval">
                以毫秒为单位的超时。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 参数是小于-1。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>
              注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。
               此方法不将调用堆栈传播到辅助线程。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="millisecondsTimeOutInterval">
                以毫秒为单位的超时。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 参数是小于-1。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>
              指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。
               此方法不将调用堆栈传播到辅助线程。
            </summary>
      <param name="waitObject">
                要注册的 <see cref="T:System.Threading.WaitHandle" />。
                 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。
              </param>
      <param name="callBack">
                向 <paramref name="waitObject" /> 参数发出信号时调用的委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <param name="millisecondsTimeOutInterval">
                以毫秒为单位的超时。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。
                 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。
              </param>
      <param name="executeOnlyOnce">
                如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。
              </param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。
            </returns>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>
              表示要由线程池线程执行的回调方法。
            </summary>
      <param name="state">
                包含回调方法要使用的信息的对象。
              </param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>
              表示一个方法时要调用 <see cref="T:System.Threading.WaitHandle" /> 发出信号或超时。
            </summary>
      <param name="state">
                包含要使用的回调方法每次执行时其信息的对象。
              </param>
      <param name="timedOut">
        <see langword="true" /> 如果 <see cref="T:System.Threading.WaitHandle" /> 超时; <see langword="false" /> 如果从收到信号通知。
              </param>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>
              表示在调用时已注册的句柄 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>
              取消由颁发一个已注册的等待操作 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 方法。
            </summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> 要发出信号。
              </param>
      <returns>
        <see langword="true" /> 如果该函数成功，则否则为 <see langword="false" />。
            </returns>
    </member>
  </members>
</doc>