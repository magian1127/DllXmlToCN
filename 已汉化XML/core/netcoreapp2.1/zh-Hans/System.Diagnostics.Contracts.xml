<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary>
              指示分析工具假定程序集、类型或成员的正确性，而不执行静态验证。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> 类的新实例。
            </summary>
      <param name="value">
        <see langword="true" /> 为需要验证; 程序集否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary>
              获取的值，该值指示是否要验证的目标协定。
            </summary>
      <returns>
        <see langword="true" /> 如果验证是必需的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary>
              指示类型或方法是纯函数，即它不会执行任何可见状态更改。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary>
              提供二进制重写程序用以处理协定失败的方法。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>
              按二进制重写程序用来激活默认失败行为。
            </summary>
      <param name="failureKind">
                指定的失败类型的枚举值之一。
              </param>
      <param name="userMessage">
                其他用户信息。
              </param>
      <param name="conditionText">
                导致此失败条件的说明。
              </param>
      <param name="innerException">
                导致当前异常的内部异常。
              </param>
      <returns>
              空引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果事件已得到处理，而不会触发失败; 否则，返回本地化的失败消息。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="failureKind" /> 不是有效的 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 值。
                </exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary>
              触发默认失败行为。
            </summary>
      <param name="kind">
                指定的失败类型的枚举值之一。
              </param>
      <param name="displayMessage">
                要显示的消息。
              </param>
      <param name="userMessage">
                其他用户信息。
              </param>
      <param name="conditionText">
                导致此失败条件的说明。
              </param>
      <param name="innerException">
                导致当前异常的内部异常。
              </param>
    </member>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary>
              包含用于表示程序协定（如前置条件、后置条件和对象固定）的静态方法。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary>
              检查条件;如果条件为 <see langword="false" />, ，遵循为分析器设置的升级策略。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary>
              检查条件;如果条件为 <see langword="false" />, ，遵循分析器设置的升级策略，并显示指定的消息。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <param name="userMessage">
                在不满足条件时要显示的消息。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary>
              指示代码分析工具假设指定的条件为 <see langword="true" />, ，即使无法静态地证明将始终是 <see langword="true" />。
            </summary>
      <param name="condition">
                要采用的条件表达式 <see langword="true" />。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary>
              指示代码分析工具假设条件是 <see langword="true" />, ，即使无法静态地证明将始终是 <see langword="true" />, ，并在假设失败时显示一条消息。
            </summary>
      <param name="condition">
                要采用的条件表达式 <see langword="true" />。
              </param>
      <param name="userMessage">
                假设失败时要发布的消息。
              </param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary>
              协定失败时发生。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary>
              方法的协定包含仅在前置条件时，标记协定部分的结尾 <see langword="if" />-<see langword="then" />-<see langword="throw" /> 窗体。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary>
              为封闭方法或属性指定一个后置条件协定。
            </summary>
      <param name="condition">
                要测试的条件表达式。
                 该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, ，<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" />, ，和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary>
              为指定一个后置条件协定提供的退出条件以及要显示如果条件为消息 <see langword="false" />。
            </summary>
      <param name="condition">
                要测试的条件表达式。
                 该表达式可以包括 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> 和 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。
              </param>
      <param name="userMessage">
                如果表达式不是显示的消息 <see langword="true" />。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary>
              基于提供的异常和条件为封闭方法或属性指定一个后置条件协定。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <typeparam name="TException">
                引发后置条件检查的异常的类型。
              </typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary>
              指定后置条件协定和消息，以显示如果条件为 <see langword="false" /> 为封闭方法或属性，根据提供的异常和条件。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <param name="userMessage">
                如果表达式为显示的消息 <see langword="false" />。
              </param>
      <typeparam name="TException">
                引发后置条件检查的异常的类型。
              </typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>
              确定指定的测试对某个整数范围中的任何整数是否都为 true。
            </summary>
      <param name="fromInclusive">
                要传递到的第一个整数 <paramref name="predicate" />。
              </param>
      <param name="toExclusive">
                一个以上的最后一个整数，要传递给 <paramref name="predicate" />。
              </param>
      <param name="predicate">
                用于计算指定范围内整数的任何值的函数。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="predicate" /> 返回 <see langword="true" /> 对于从开始的任意整数 <paramref name="fromInclusive" /> 到 <paramref name="toExclusive" /> -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " />是小于 <paramref name="fromInclusive" />。
                </exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
              确定函数中是否存在某个元素集合中的元素。
            </summary>
      <param name="collection">
                将集合类型的元素从 <paramref name="T" /> 将绘制要传递给 <paramref name="predicate" />。
              </param>
      <param name="predicate">
                要计算中的某个元素的函数 <paramref name="collection" />。
              </param>
      <typeparam name="T">
                中包含的类型 <paramref name="collection" />。
              </typeparam>
      <returns>
        <see langword="true" /> 当且仅当 <paramref name="predicate" /> 返回 <see langword="true" /> 类型的任何元素 <paramref name="T" /> 中 <paramref name="collection" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>
              确定某个特定条件是否对指定范围内的所有整数都有效。
            </summary>
      <param name="fromInclusive">
                要传递到的第一个整数 <paramref name="predicate" />。
              </param>
      <param name="toExclusive">
                一个以上的最后一个整数，要传递给 <paramref name="predicate" />。
              </param>
      <param name="predicate">
                要计算其中是否存在指定范围内的整数的函数。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="predicate" /> 返回 <see langword="true" /> 的所有整数从开始 <paramref name="fromInclusive" /> 到 <paramref name="toExclusive" /> -1。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " />是小于 <paramref name="fromInclusive" />。
                </exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
              确定函数中是否存在某个集合中的所有元素。
            </summary>
      <param name="collection">
                将集合类型的元素从 <paramref name="T" /> 将绘制要传递给 <paramref name="predicate" />。
              </param>
      <param name="predicate">
                要计算中的所有元素是否存在的函数 <paramref name="collection" />。
              </param>
      <typeparam name="T">
                中包含的类型 <paramref name="collection" />。
              </typeparam>
      <returns>
        <see langword="true" /> 当且仅当 <paramref name="predicate" /> 返回 <see langword="true" /> 的所有元素类型 <paramref name="T" /> 中 <paramref name="collection" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary>
              为封闭方法或属性指定一个固定的协定。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary>
              为封闭方法或属性指定一个固定协定，并在该协定的条件失败时显示一条消息。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <param name="userMessage">
                如果条件为显示的消息 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary>
              表示方法或属性开始时的值。
            </summary>
      <param name="value">
                要表示的值（字段或参数）。
              </param>
      <typeparam name="T">
                值的类型。
              </typeparam>
      <returns>
              一个方法或属性开始处的参数或字段的值。
            </returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary>
              为封闭方法或属性指定一个前置条件协定。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary>
              为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时显示一条消息。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <param name="userMessage">
                如果条件为显示的消息 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary>
              为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发异常。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <typeparam name="TException">
                如果该条件，则引发的异常 <see langword="false" />。
              </typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary>
              为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时引发包含提供的消息的异常。
            </summary>
      <param name="condition">
                要测试的条件表达式。
              </param>
      <param name="userMessage">
                如果条件为显示的消息 <see langword="false" />。
              </param>
      <typeparam name="TException">
                如果该条件，则引发的异常 <see langword="false" />。
              </typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary>
              表示一个方法或属性的返回值。
            </summary>
      <typeparam name="T">
                封闭方法或属性的返回值的类型。
              </typeparam>
      <returns>
              封闭方法或属性的返回值。
            </returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary>
              表示最终 （输出） 值的 <see langword="out" /> 参数从方法返回时。
            </summary>
      <param name="value">
        <see langword="out" /> 参数。
              </param>
      <typeparam name="T">
        <see langword="out" /> 参数的类型。
              </typeparam>
      <returns>
              输出值 <see langword="out" /> 参数。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary>
              定义可用于代替完整的约定语法的缩写。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary>
              使旧的分解 <see langword="if-then-throw" /> 代码转变为单独的方法，以供重复使用，并提供对引发的异常和参数的完全控制。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary>
              指示单独的类型包含此类型的代码协定。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> 类的新实例。
            </summary>
      <param name="typeContainingContracts">
                包含此类型的代码协定的类型。
              </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary>
              获取包含此类型的代码协定的类型。
            </summary>
      <returns>
              包含此类型的代码协定的类型。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary>
              指定类是类型的协定。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> 类，同时指定当前类是协定的类型。
            </summary>
      <param name="typeContractsAreFor">
                当前类的类型是为协定。
              </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary>
              获取适用于此代码协定的类型。
            </summary>
      <returns>
              此协定应用于类型。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary>
              提供方法和数据 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>
              为 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件提供数据。
            </summary>
      <param name="failureKind">
                指定失败的约定的枚举值之一。
              </param>
      <param name="message">
                事件的消息。
              </param>
      <param name="condition">
                用于事件的条件。
              </param>
      <param name="originalException">
                引发事件的原因的异常。
              </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary>
              获取失败的协定的条件。
            </summary>
      <returns>
              用于在发生故障的条件。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary>
              获取失败的协定的类型。
            </summary>
      <returns>
              指定的失败的协定类型的枚举值之一。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary>
              指示是否 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 处理事件。
            </summary>
      <returns>
        <see langword="true" /> 如果已处理该事件;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary>
              获取描述的消息 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。
            </summary>
      <returns>
              用于描述该事件的消息。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary>
              获取导致原始异常 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。
            </summary>
      <returns>
              引发事件的原因的异常。
            </returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary>
              将 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> 属性设置为 <see langword="true" />。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary>
              将 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> 属性设置为 <see langword="true" />。
            </summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary>
              指示是否应该应用代码协定升级策略。
            </summary>
      <returns>
        <see langword="true" /> 要应用的升级策略;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary>
              指定失败的协定的类型。
            </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> 协定失败。
            </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> 协定失败。
            </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> 协定失败。
            </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> 协定失败。
            </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> 协定失败。
            </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary>
              一个 <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> 协定失败。
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary>
              将方法标记为类的固定条件方法。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary>
              可以在程序集、 类型或方法的粒度设置协定和工具选项。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 类通过使用提供的类别、 设置和启用/禁用值。
            </summary>
      <param name="category">
                要设置的选项类别。
              </param>
      <param name="setting">
                该选项的设置。
              </param>
      <param name="enabled">
        <see langword="true" /> 若要启用选项; <see langword="false" /> 以禁用该选项。
              </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 类通过设置，所提供的类别和值。
            </summary>
      <param name="category">
                要设置的选项的类别。
              </param>
      <param name="setting">
                该选项的设置。
              </param>
      <param name="value">
                设置的值。
              </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary>
              获取选项的类别。
            </summary>
      <returns>
              选项的类别。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary>
              确定是否启用了一个选项。
            </summary>
      <returns>
        <see langword="true" /> 如果启用的选项;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary>
              获取选项的设置。
            </summary>
      <returns>
              选项的设置。
            </returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary>
              获取选项的值。
            </summary>
      <returns>
              选项的值。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary>
              指定在某个字段的可见性低于方法时可在方法协定中使用该字段。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> 类的新实例。
            </summary>
      <param name="name">
                要应用于字段的属性名称。
              </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary>
              获取要应用于字段的属性名称。
            </summary>
      <returns>
              要应用于字段的属性名称。
            </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary>
              指定程序集是包含协定的引用程序集。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary>
              标识没有运行时行为的成员。
            </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> 类的新实例。
            </summary>
    </member>
  </members>
</doc>