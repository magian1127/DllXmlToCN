<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.XDocument</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Linq.Extensions">
      <summary>
              包含 LINQ to XML 扩展方法。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回包含与源集合中的每个节点的上级元素的集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XNode" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含对源集合中每个节点的上级。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的元素集合，其中包含对源集合中的每个节点的上级。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含源集合。
              </param>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XNode" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含对源集合中每个节点的上级。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
              返回的元素集合，其中包含源集合中的每个元素及其上级源集合中的每个元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合和源集合中每个元素的上级的中的每个元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的元素集合，其中包含源集合中的每个元素及其上级的源集合中的每个元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合和源集合中每个元素的上级的中的每个元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
              返回源集合中的每个元素的特性集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> 它包含与源集合中的每个元素的特性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>
              源集合中返回经过筛选的每个元素的属性集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> ，其中包含经过筛选的源集合中的每个元素的属性集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回源集合中的每个文档和元素的子代节点的集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XContainer" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XContainer" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 子代节点的每个文档和源集合中的元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
              返回包含源集合中的每个元素的节点和子代节点的源集合中的每个元素的集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含源集合和源集合中的每个元素的子代节点中的每个元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的元素集合，其中包含每个元素和文档与源集合中的子代元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XContainer" /> ，其中包含源集合。
              </param>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XContainer" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含每个元素和文档与源集合中的子代元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回元素的集合，其中包含每个元素和文档与源集合中的子代元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XContainer" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XContainer" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含每个元素和文档与源集合中的子代元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
              返回包含源集合中的每个元素的元素和源集合中的每个元素的子代元素的集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合中的每个元素及其子代元素的源集合中的每个元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的元素集合，其中包含源集合中的每个元素及其对源集合中的每个元素的子代元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合和源集合中的每个元素的后代中的每个元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回源集合中的每个元素和文档的元素的子集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XContainer" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 的子元素的每个元素或源集合中的文档。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>
              源集合中返回经过筛选的子集合元素的每个元素和文档。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含源集合。
              </param>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XContainer" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 的子元素的每个元素和源集合中的文档。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回包含按文档顺序排序的源集合中的所有节点的节点集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XNode" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含按文档顺序排序的源集合中的所有节点。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回源集合中的每个文档和元素节点的子集合。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XContainer" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 的每个文档和源集合中的元素的子节点。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
      <summary>
              每个属性集合中移除源从其父元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> ，其中包含源集合。
              </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              从其父节点与源集合中删除每个节点。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> ，其中包含源集合。
              </param>
      <typeparam name="T">
                中的对象的类型 <paramref name="source" />, ，被约束为 <see cref="T:System.Xml.Linq.XNode" />。
              </typeparam>
    </member>
    <member name="T:System.Xml.Linq.LoadOptions">
      <summary>
              指定分析 XML 时的加载选项。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.None">
      <summary>
              不保留无关紧要的空白区域，也不加载基 URI 和行信息。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
      <summary>
              在分析时将保留无关紧要的空白区域。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
      <summary>
              请求中的基 URI 信息 <see cref="T:System.Xml.XmlReader" />, ，并使其可通过 <see cref="P:System.Xml.Linq.XObject.BaseUri" /> 属性。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
      <summary>
              请求中的行信息 <see cref="T:System.Xml.XmlReader" /> 并使其可通过属性 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
    </member>
    <member name="T:System.Xml.Linq.ReaderOptions">
      <summary>
              指定是否忽略重复的命名空间，在加载时 <see cref="T:System.Xml.Linq.XDocument" /> 与 <see cref="T:System.Xml.XmlReader" />。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.None">
      <summary>
              没有指定的读取器选项。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.OmitDuplicateNamespaces">
      <summary>
              在加载时忽略重复的命名空间 <see cref="T:System.Xml.Linq.XDocument" />。
            </summary>
    </member>
    <member name="T:System.Xml.Linq.SaveOptions">
      <summary>
              指定序列化选项。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
      <summary>
              在序列化时保留所有无关紧要的空白区域。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.None">
      <summary>
              格式 （缩进） 的 XML 序列化时。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
      <summary>
              在序列化时删除重复的命名空间声明。
            </summary>
    </member>
    <member name="T:System.Xml.Linq.XAttribute">
      <summary>
              表示 XML 特性。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 从另一个类 <see cref="T:System.Xml.Linq.XAttribute" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XAttribute" /> 从其中复制对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 类从指定的名称和值。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> 的属性。
              </param>
      <param name="value">
        <see cref="T:System.Object" /> 包含该属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="value" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
      <summary>
              获取空的特性集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> 包含空集合。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
      <summary>
              确定此属性是否为命名空间声明。
            </summary>
      <returns>
        <see langword="true" /> 如果此属性为命名空间声明;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Name">
      <summary>
              获取此属性的扩展的名称。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> 包含此属性的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
      <summary>
              获取父元素的下一个属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XAttribute" /> 包含父元素的下一个属性。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XAttribute" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.Attribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Int64" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Single" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.TimeSpan" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.UInt32" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.UInt64" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.TimeSpan" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              一个 <see cref="T:System.TimeSpan" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.TimeSpan" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.String" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.UInt32" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.UInt32" />。
              </param>
      <returns>
              一个 <see cref="T:System.UInt32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.UInt32" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.UInt64" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.UInt64" />。
              </param>
      <returns>
              一个 <see cref="T:System.UInt64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.UInt64" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Single" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Single" />。
              </param>
      <returns>
              一个 <see cref="T:System.Single" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Single" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Guid" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Decimal" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Decimal" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Decimal" />。
              </param>
      <returns>
              一个 <see cref="T:System.Decimal" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Decimal" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.DateTimeOffset" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.DateTime" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Boolean" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Int64" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Int64" />。
              </param>
      <returns>
              一个 <see cref="T:System.Int64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Int64" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Int32" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Int32" />。
              </param>
      <returns>
              一个 <see cref="T:System.Int32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Int32" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Guid" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Guid" />。
              </param>
      <returns>
              一个 <see cref="T:System.Guid" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Guid" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Double" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Double" />。
              </param>
      <returns>
              一个 <see cref="T:System.Double" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Double" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Double" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.DateTimeOffset" />。
              </param>
      <returns>
              一个 <see cref="T:System.DateTimeOffset" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.DateTimeOffset" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.DateTime" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.DateTime" />。
              </param>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.DateTime" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.Boolean" />。
            </summary>
      <param name="attribute">
        <see cref="T:System.Xml.Linq.XAttribute" /> 要强制转换为 <see cref="T:System.Boolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Boolean" /> ，包含此内容 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
      <exception cref="T:System.FormatException">
                  该属性不包含有效 <see cref="T:System.Boolean" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
      <summary>
              获取父元素的上一个特性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XAttribute" /> 包含父元素的上一个特性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.Remove">
      <summary>
              从其父元素中删除此属性。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
      <summary>
              设置此属性的值。
            </summary>
      <param name="value">
                要指派给此属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.ToString">
      <summary>
              将当前 <see cref="T:System.Xml.Linq.XAttribute" /> 为字符串表示形式的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含 XML 文本表示形式属性和它的值。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Value">
      <summary>
              获取或设置此属性的值。
            </summary>
      <returns>
              包含此属性的值的 <see cref="T:System.String" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  设置时，<paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Xml.Linq.XCData">
      <summary>
              表示包含 CDATA 的文本节点。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XCData" /> 类的新实例。
            </summary>
      <param name="value">
                一个字符串，包含的值 <see cref="T:System.Xml.Linq.XCData" /> 节点。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XCData" /> 类的新实例。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XCData" /> 从中进行复制的节点。
              </param>
    </member>
    <member name="P:System.Xml.Linq.XCData.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XCData" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.CDATA" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
      <summary>
              写入此 CDATA 对象传递给 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Linq.XComment">
      <summary>
              表示 XML 注释。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XComment" /> 类，具有指定的字符串内容。
            </summary>
      <param name="value">
                一个字符串，包含新的内容 <see cref="T:System.Xml.Linq.XComment" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XComment" /> 类从某一现有注释节点。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XComment" /> 从中进行复制的节点。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XComment.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XComment" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.Comment" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XComment.Value">
      <summary>
              获取或设置此注释的字符串值。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此注释的字符串值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
      <summary>
              写入到此注释 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Linq.XContainer">
      <summary>
              表示可包含其他节点的节点。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
      <summary>
              将指定的内容作为此的子级添加 <see cref="T:System.Xml.Linq.XContainer" />。
            </summary>
      <param name="content">
                一个包含简单内容或要添加的内容对象集合的内容对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
      <summary>
              将指定的内容作为此的子级添加 <see cref="T:System.Xml.Linq.XContainer" />。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
      <summary>
              将指定的内容添加为此文档或元素的第一个子级。
            </summary>
      <param name="content">
                一个包含简单内容或要添加的内容对象集合的内容对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
      <summary>
              将指定的内容添加为此文档或元素的第一个子级。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XContainer.CreateWriter">
      <summary>
              创建 <see cref="T:System.Xml.XmlWriter" /> 可用来将节点添加到 <see cref="T:System.Xml.Linq.XContainer" />。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 即准备好向其中写入内容。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
      <summary>
              按文档顺序返回此文档或元素的子代节点的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 包含的子代节点 <see cref="T:System.Xml.Linq.XContainer" />, ，请在文档顺序。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants">
      <summary>
              按文档顺序返回此文档或元素的子代元素的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 其中包含的子代元素 <see cref="T:System.Xml.Linq.XContainer" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
      <summary>
              按文档顺序返回经过筛选的此文档或元素的子代元素的集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 其中包含的子代元素 <see cref="T:System.Xml.Linq.XContainer" /> 的匹配指定 <see cref="T:System.Xml.Linq.XName" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
      <summary>
              获取具有指定的第一个 （按文档顺序） 的子元素 <see cref="T:System.Xml.Linq.XName" />。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.Linq.XElement" /> 的匹配指定 <see cref="T:System.Xml.Linq.XName" />, ，或 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements">
      <summary>
              按文档顺序返回集合的子元素的此元素或文档。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 包含的子元素 <see cref="T:System.Xml.Linq.XContainer" />, ，请在文档顺序。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
      <summary>
              按文档顺序返回经过筛选的子集合元素的此元素或文档。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 包含的子级 <see cref="T:System.Xml.Linq.XContainer" /> ，具有匹配 <see cref="T:System.Xml.Linq.XName" />, ，请在文档顺序。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XContainer.FirstNode">
      <summary>
              获取此节点的第一个子节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNode" /> 包含的第一个子节点 <see cref="T:System.Xml.Linq.XContainer" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XContainer.LastNode">
      <summary>
              获取此节点的最后一个子节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNode" /> 包含的最后一个子节点 <see cref="T:System.Xml.Linq.XContainer" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Nodes">
      <summary>
              返回此元素或文档中，节点的子集合，按文档顺序排列。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 包含此内容 <see cref="T:System.Xml.Linq.XContainer" />, ，请在文档顺序。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
      <summary>
              删除此文档或元素的子节点。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
      <summary>
              此文档或元素的子节点替换为指定的内容。
            </summary>
      <param name="content">
                一个包含简单内容或内容替换子节点的对象的集合的内容对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
      <summary>
              此文档或元素的子节点替换为指定的内容。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
    </member>
    <member name="T:System.Xml.Linq.XDeclaration">
      <summary>
              表示 XML 声明。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XDeclaration" /> 从另一个类 <see cref="T:System.Xml.Linq.XDeclaration" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XDeclaration" /> 用于初始化此 <see cref="T:System.Xml.Linq.XDeclaration" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XDeclaration" /> 类，具有指定的版本、 编码和独立状态。
            </summary>
      <param name="version">
                XML 中，通常为"1.0"的版本。
              </param>
      <param name="encoding">
                XML 文档的编码。
              </param>
      <param name="standalone">
                一个包含"yes"no"的字符串指定 XML 是独立的还是要求要解析的外部实体。
              </param>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Encoding">
      <summary>
              获取或设置此文档的编码。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含本文档的代码页名称。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Standalone">
      <summary>
              获取或设置此文档的独立属性。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含本文档的独立属性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.ToString">
      <summary>
              提供在格式化字符串的声明。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含带格式的 XML 字符串。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Version">
      <summary>
              获取或设置此文档的版本属性。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含本文档的版本属性。
            </returns>
    </member>
    <member name="T:System.Xml.Linq.XDocument">
      <summary>
              表示 XML 文档。
               为组件和用法 <see cref="T:System.Xml.Linq.XDocument" /> 对象，请参阅 XDocument 类概述。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XDocument" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XDocument" /> 使用指定的内容的类。
            </summary>
      <param name="content">
                要添加到此文档的内容对象的参数列表。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XDocument" /> 从现有类 <see cref="T:System.Xml.Linq.XDocument" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XDocument" /> 将复制的对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XDocument" /> 类与指定 <see cref="T:System.Xml.Linq.XDeclaration" /> 和内容。
            </summary>
      <param name="declaration">
        <see cref="T:System.Xml.Linq.XDeclaration" /> 文档。
              </param>
      <param name="content">
                文档的内容。
              </param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Declaration">
      <summary>
              获取或设置此文档的 XML 声明。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XDeclaration" /> ，其中包含此文档的 XML 声明。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.DocumentType">
      <summary>
              获取此文档的文档类型定义 (DTD)。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Linq.XDocumentType" /> ，其中包含此文档的 DTD。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 通过使用指定的流的实例。
            </summary>
      <param name="stream">
                包含 XML 数据的流。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> 对象，它读取流中包含的数据。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
      <summary>
              从 <see cref="T:System.Xml.Linq.XDocument" /> 创建新的 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="textReader">
                一个 <see cref="T:System.IO.TextReader" /> 包含的内容 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> ，其中包含指定的内容 <see cref="T:System.IO.TextReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 文件中。
            </summary>
      <param name="uri">
                引用要加载到新的文件的 URI 字符串 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> ，其中包含指定文件的内容。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 从 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> 包含的内容 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> ，其中包含指定的内容 <see cref="T:System.Xml.XmlReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 实例通过使用指定的流、 可以选择保留空白，设置基 URI 和保留行信息。
            </summary>
      <param name="stream">
                包含 XML 数据的流。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，指定是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> 对象，它读取流中包含的数据。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 从 <see cref="T:System.IO.TextReader" />, ，可以选择保留空白，设置基 URI 和保留行信息。
            </summary>
      <param name="textReader">
                一个 <see cref="T:System.IO.TextReader" /> 包含的内容 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，它指定空白行为以及是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> 包含读取的 XML 从指定 <see cref="T:System.IO.TextReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 从一个文件，可以选择保留空白，设置基 URI 和保留行信息。
            </summary>
      <param name="uri">
                引用要加载到新的文件的 URI 字符串 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，它指定空白行为以及是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> ，其中包含指定文件的内容。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>
              加载 <see cref="T:System.Xml.Linq.XDocument" /> 从 <see cref="T:System.Xml.XmlReader" />, 、 根据需要设置基 URI 和保留行信息。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> ，它将读取的内容 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，指定是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> 包含读取的 XML 从指定 <see cref="T:System.Xml.XmlReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="textReader">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="reader">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="stream">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XDocument" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.Document" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 从字符串。
            </summary>
      <param name="text">
                包含 XML 的字符串。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> 包含 XML 的字符串填充的。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XDocument" /> 从一个字符串，可以选择保留空白，设置基 URI 和保留行信息。
            </summary>
      <param name="text">
                包含 XML 的字符串。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，它指定空白行为以及是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XDocument" /> 包含 XML 的字符串填充的。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Root">
      <summary>
              获取此文档的 XML 树的根元素。
            </summary>
      <returns>
              根 <see cref="T:System.Xml.Linq.XElement" /> 的 XML 树。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
      <summary>
              序列化此 <see cref="T:System.Xml.Linq.XDocument" /> 到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlWriter" /> ， <see cref="T:System.Xml.Linq.XDocument" /> 将被写入。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
      <summary>
              这将输出 <see cref="T:System.Xml.Linq.XDocument" /> 到指定 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                流输出这 <see cref="T:System.Xml.Linq.XDocument" /> 到。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
      <summary>
              序列化此 <see cref="T:System.Xml.Linq.XDocument" /> 到 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="textWriter">
                一个 <see cref="T:System.IO.TextWriter" /> ， <see cref="T:System.Xml.Linq.XDocument" /> 将被写入。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String)">
      <summary>
              序列化此 <see cref="T:System.Xml.Linq.XDocument" /> 到文件中，覆盖现有文件，如果它存在。
            </summary>
      <param name="fileName">
                一个包含文件名称的字符串。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>
              这将输出 <see cref="T:System.Xml.Linq.XDocument" /> 到指定 <see cref="T:System.IO.Stream" />, ，并 （可选） 指定格式设置行为。
            </summary>
      <param name="stream">
                流输出这 <see cref="T:System.Xml.Linq.XDocument" /> 到。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>
              序列化此 <see cref="T:System.Xml.Linq.XDocument" /> 到 <see cref="T:System.IO.TextWriter" />, ，可以选择禁用格式设置。
            </summary>
      <param name="textWriter">
        <see cref="T:System.IO.TextWriter" /> 输出到 XML。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>
              序列化此 <see cref="T:System.Xml.Linq.XDocument" /> 到文件中，还可以选择禁用格式设置。
            </summary>
      <param name="fileName">
                一个包含文件名称的字符串。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="stream">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="textWriter">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将对此文档写入 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Linq.XDocumentType">
      <summary>
              表示 XML 文档类型定义 (DTD)。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
      <summary>
              初始化的实例 <see cref="T:System.Xml.Linq.XDocumentType" /> 从另一个类 <see cref="T:System.Xml.Linq.XDocumentType" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XDocumentType" /> 从其中复制对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XDocumentType" /> 类的实例。
            </summary>
      <param name="name">
                一个 <see cref="T:System.String" /> 包含 DTD 中的限定的名即与 XML 文档的根元素的限定名相同。
              </param>
      <param name="publicId">
                一个 <see cref="T:System.String" /> ，其中包含外部公共 DTD 的公共标识符。
              </param>
      <param name="systemId">
                一个 <see cref="T:System.String" /> ，其中包含外部专用 DTD 系统标识符。
              </param>
      <param name="internalSubset">
                一个 <see cref="T:System.String" /> ，其中包含内部 DTD 内部子集。
              </param>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
      <summary>
              获取或设置此文档类型定义 (DTD) 的内部子集。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此文档类型定义 (DTD) 内部子集。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.Name">
      <summary>
              获取或设置此文档类型定义 (DTD) 的名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此文档类型定义 (DTD) 的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XDocumentType" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.DocumentType" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.PublicId">
      <summary>
              获取或设置此文档类型定义 (DTD) 的公共标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此文档类型定义 (DTD) 公共标识符。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.SystemId">
      <summary>
              获取或设置此文档类型定义 (DTD) 的系统标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此文档类型定义 (DTD) 系统标识符。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>
              撰写本文时 <see cref="T:System.Xml.Linq.XDocumentType" /> 到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Linq.XElement">
      <summary>
              表示一个 XML 元素。
                请参阅 XElement 类概述 和有关使用情况信息和示例的此页上的备注部分。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XElement" /> 从另一个类 <see cref="T:System.Xml.Linq.XElement" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XElement" /> 从其中复制对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
      <summary>
              用指定的名称初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含的元素名称。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XElement" /> 类 <see cref="T:System.Xml.Linq.XStreamingElement" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XStreamingElement" /> ，其中包含未求值的查询，将对此内容循环访问该 <see cref="T:System.Xml.Linq.XElement" />。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XElement" /> 类具有指定的名称和内容。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含的元素名称。
              </param>
      <param name="content">
                元素的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XElement" /> 类具有指定的名称和内容。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含的元素名称。
              </param>
      <param name="content">
                元素的初始内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
      <summary>
              返回元素集合，其中包含此元素及其上级。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 包含此元素及其上级的此元素的元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的元素集合，其中包含此元素及其上级。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 包含此元素以及此元素的上级。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
      <summary>
              返回 <see cref="T:System.Xml.Linq.XAttribute" /> 此 <see cref="T:System.Xml.Linq.XElement" /> 具有指定的 <see cref="T:System.Xml.Linq.XName" />。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> 来获取。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XAttribute" /> 具有指定的 <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> 如果没有具有指定名称的属性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes">
      <summary>
              返回此元素的属性集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> 此元素的属性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的此元素的属性集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" /> ，其中包含此元素的属性。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
      <summary>
              返回节点的集合，而这些节点包含此元素以及此元素的所有子代节点，并将它们按文档顺序排列。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 包含此元素以及此元素，按文档顺序排列的所有子代节点。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
      <summary>
              返回经过筛选的元素集合，这些元素包含此元素以及此元素的所有子代元素，并按文档顺序排列它们。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 包含此元素以及此元素，按文档顺序排列的所有子代元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
      <summary>
              返回元素的集合，而这些元素包含此元素以及此元素的所有子代元素，并按文档顺序排列它们。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 包含此元素的元素以及此元素，按文档顺序排列的所有子代元素。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.EmptySequence">
      <summary>
              获取空的元素集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> ，其中包含一个空集合。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.FirstAttribute">
      <summary>
              获取此元素的第一个属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XAttribute" /> ，其中包含此元素的第一个属性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
      <summary>
              获取默认 <see cref="T:System.Xml.Linq.XNamespace" /> 此 <see cref="T:System.Xml.Linq.XElement" />。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> ，其中包含此默认命名空间 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
      <summary>
              获取此关联与特定前缀的命名空间 <see cref="T:System.Xml.Linq.XElement" />。
            </summary>
      <param name="prefix">
                包含要查找的命名空间前缀的字符串。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> 此关联具有前缀的命名空间 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
      <summary>
              获取此关联与命名空间的前缀 <see cref="T:System.Xml.Linq.XElement" />。
            </summary>
      <param name="ns">
        <see cref="T:System.Xml.Linq.XNamespace" /> 来查找。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含命名空间前缀。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasAttributes">
      <summary>
              获取一个值，该值指示此元素是否至少具有一个属性。
            </summary>
      <returns>
              如果此元素至少具有一个属性，则为 <see langword="true" />；否则为<see langword="false" /> 。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasElements">
      <summary>
              获取一个值，该值指示此元素是否至少具有一个子元素。
            </summary>
      <returns>
        <see langword="true" /> 如果此元素具有至少一个子元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.IsEmpty">
      <summary>
              获取一个值，该值指示此元素是否不包含内容。
            </summary>
      <returns>
        <see langword="true" /> 如果此元素不包含任何内容;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.LastAttribute">
      <summary>
              获取此元素的最后一个属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XAttribute" /> ，其中包含此元素的最后一个属性。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>
              加载 <see cref="T:System.Xml.Linq.XElement" /> 从 <see cref="T:System.IO.TextReader" />, ，可以选择保留空白和保留行信息。
            </summary>
      <param name="textReader">
                一个 <see cref="T:System.IO.TextReader" /> ，它将为读取 <see cref="T:System.Xml.Linq.XElement" /> 内容。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，它指定空白行为以及是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 包含读取的 XML 从指定 <see cref="T:System.IO.TextReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>
              加载 <see cref="T:System.Xml.Linq.XElement" /> 从 <see cref="T:System.Xml.XmlReader" />, ，可以选择保留空白，设置基 URI 和保留行信息。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> ，它将读取的内容 <see cref="T:System.Xml.Linq.XElement" />。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，它指定空白行为以及是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 包含读取的 XML 从指定 <see cref="T:System.Xml.XmlReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
              加载<see cref="T:System.Xml.Linq.XElement" />从文件，可以选择保留空白、 设置的基 URI，以及保留行信息。
            </summary>
      <param name="uri">
                引用要加载到的文件的 URI 字符串<see cref="T:System.Xml.Linq.XElement" />。
              </param>
      <param name="options">
                A <see cref="T:System.Xml.Linq.LoadOptions" /> ，指定空白行为，以及是否以加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> ，其中包含指定的文件的内容。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XElement" /> 实例通过使用指定的流、 可以选择保留空白，设置基 URI 和保留行信息。
            </summary>
      <param name="stream">
                包含 XML 数据的流。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> 对象，它指定是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 用于读取流中所包含的数据对象。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
      <summary>
              加载 <see cref="T:System.Xml.Linq.XElement" /> 从 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="textReader">
                一个 <see cref="T:System.IO.TextReader" /> ，它将为读取 <see cref="T:System.Xml.Linq.XElement" /> 内容。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 包含读取的 XML 从指定 <see cref="T:System.IO.TextReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String)">
      <summary>
              加载 <see cref="T:System.Xml.Linq.XElement" /> 文件中。
            </summary>
      <param name="uri">
                引用要加载到新的文件的 URI 字符串 <see cref="T:System.Xml.Linq.XElement" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> ，其中包含指定文件的内容。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
      <summary>
              创建一个新 <see cref="T:System.Xml.Linq.XElement" /> 通过使用指定的流的实例。
            </summary>
      <param name="stream">
                包含 XML 数据的流。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 用于读取流中包含的数据对象。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
      <summary>
              加载 <see cref="T:System.Xml.Linq.XElement" /> 从 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> ，它将读取的内容 <see cref="T:System.Xml.Linq.XElement" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 包含读取的 XML 从指定 <see cref="T:System.Xml.XmlReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="stream">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="textReader">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
      <param name="reader">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.Name">
      <summary>
              获取或设置此元素的名称。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含此元素的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XElement" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.Element" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Int64" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Single" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.TimeSpan" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.UInt32" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.UInt64" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.UInt32" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.UInt32" />。
              </param>
      <returns>
              一个 <see cref="T:System.UInt32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.UInt32" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.String" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.TimeSpan" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.TimeSpan" />。
              </param>
      <returns>
              一个 <see cref="T:System.TimeSpan" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.TimeSpan" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.UInt64" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.UInt64" />。
              </param>
      <returns>
              一个 <see cref="T:System.UInt64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.UInt64" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Int32" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Single" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Single" />。
              </param>
      <returns>
              一个 <see cref="T:System.Single" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Single" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Guid" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Boolean" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Decimal" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Boolean" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Boolean" />。
              </param>
      <returns>
              一个 <see cref="T:System.Boolean" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Boolean" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.DateTime" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.DateTime" />。
              </param>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.DateTime" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XAttribute" /> 到 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.DateTimeOffset" />。
              </param>
      <returns>
              一个 <see cref="T:System.DateTimeOffset" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.DateTimeOffset" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Double" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Double" />。
              </param>
      <returns>
              一个 <see cref="T:System.Double" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Double" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Guid" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Guid" />。
              </param>
      <returns>
              一个 <see cref="T:System.Guid" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Guid" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Decimal" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Decimal" />。
              </param>
      <returns>
              一个 <see cref="T:System.Decimal" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Decimal" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Int64" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Int64" />。
              </param>
      <returns>
              一个 <see cref="T:System.Int64" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Int64" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Double" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.DateTime" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.DateTimeOffset" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
      <summary>
              此值强制转换 <see cref="T:System.Xml.Linq.XElement" /> 到 <see cref="T:System.Int32" />。
            </summary>
      <param name="element">
        <see cref="T:System.Xml.Linq.XElement" /> 要强制转换为 <see cref="T:System.Int32" />。
              </param>
      <returns>
              一个 <see cref="T:System.Int32" /> ，包含此内容 <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
      <exception cref="T:System.FormatException">
                  元素不包含有效 <see cref="T:System.Int32" /> 值。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
      <summary>
              负载 <see cref="T:System.Xml.Linq.XElement" /> 从包含 XML 的字符串。
            </summary>
      <param name="text">
                一个 <see cref="T:System.String" /> 包含 XML。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 包含 XML 的字符串填充的。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
              负载 <see cref="T:System.Xml.Linq.XElement" /> 从包含 XML 字符串，可以选择保留空白和保留行信息。
            </summary>
      <param name="text">
                一个 <see cref="T:System.String" /> 包含 XML。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.LoadOptions" /> ，它指定空白行为以及是否加载基 URI 和行信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" /> 包含 XML 的字符串填充的。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAll">
      <summary>
              移除节点和特性，从此 <see cref="T:System.Xml.Linq.XElement" />。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
      <summary>
              删除此属性 <see cref="T:System.Xml.Linq.XElement" />。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
      <summary>
              将此元素的子节点和属性替换为指定的内容。
            </summary>
      <param name="content">
                替换此元素的子节点和属性时将使用的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
      <summary>
              将此元素的子节点和属性替换为指定的内容。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
      <summary>
              将此元素的属性替换为指定的内容。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
      <summary>
              将此元素的属性替换为指定的内容。
            </summary>
      <param name="content">
                替换此元素的属性时将使用的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
      <summary>
              这将输出 <see cref="T:System.Xml.Linq.XElement" /> 到指定 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                流输出这 <see cref="T:System.Xml.Linq.XElement" /> 到。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
      <summary>
              将此元素序列化为 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="textWriter">
                一个 <see cref="T:System.IO.TextWriter" /> ， <see cref="T:System.Xml.Linq.XElement" /> 将被写入。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String)">
      <summary>
              将此元素序列化为文件。
            </summary>
      <param name="fileName">
                一个 <see cref="T:System.String" /> ，其中包含文件的名称。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
      <summary>
              将此元素序列化为 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlWriter" /> ， <see cref="T:System.Xml.Linq.XElement" /> 将被写入。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>
              这将输出 <see cref="T:System.Xml.Linq.XElement" /> 到指定 <see cref="T:System.IO.Stream" />, ，并 （可选） 指定格式设置行为。
            </summary>
      <param name="stream">
                流输出这 <see cref="T:System.Xml.Linq.XElement" /> 到。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为的对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>
              将此元素序列化为 <see cref="T:System.IO.TextWriter" />, ，可以选择禁用格式设置。
            </summary>
      <param name="textWriter">
        <see cref="T:System.IO.TextWriter" /> 输出到 XML。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>
              将此元素序列化为文件，并可以选择禁用格式设置。
            </summary>
      <param name="fileName">
                一个 <see cref="T:System.String" /> ，其中包含文件的名称。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="stream">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
      <param name="textWriter">
      </param>
      <param name="options">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
      <summary>
              设置属性的值，将属性添加或删除属性。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含要更改的属性的名称。
              </param>
      <param name="value">
                分配给属性的值。
                 如果值为，则移除该特性 <see langword="null" />。
                 否则为值将转换为其字符串表示形式并分配给 <see cref="P:System.Xml.Linq.XAttribute.Value" /> 属性的属性。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的一个实例 <see cref="T:System.Xml.Linq.XObject" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
      <summary>
              设置子元素的值、添加子元素或移除子元素。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含要更改的子元素的名称。
              </param>
      <param name="value">
                要分配给子元素的值。
                 如果值为，则移除子元素 <see langword="null" />。
                 否则为值将转换为其字符串表示形式并分配给 <see cref="P:System.Xml.Linq.XElement.Value" /> 的子元素的属性。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的一个实例 <see cref="T:System.Xml.Linq.XObject" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
      <summary>
              设置此元素的值。
            </summary>
      <param name="value">
                要分配给此元素的值。
                 值转换为其字符串表示形式，并分配给 <see cref="P:System.Xml.Linq.XElement.Value" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" />。
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XElement.Value">
      <summary>
              获取或设置此元素的串连文本内容。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含所有此元素的文本内容。
               如果有多个文本节点，则将其串连起来。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
              写入到此元素 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
              获取说明此对象的 XML 表示形式的 XML 构架定义。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
              从对象的 XML 表示形式生成该对象。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中反序列化对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
              将对象转换为其 XML 表示形式。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 此对象序列化到。
              </param>
    </member>
    <member name="T:System.Xml.Linq.XName">
      <summary>
              表示 XML 元素或属性的名称。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Xml.Linq.XName" /> 是否等同于此 <see cref="T:System.Xml.Linq.XName" />。
            </summary>
      <param name="obj">
        <see cref="T:System.Xml.Linq.XName" /> 要与当前 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.Xml.Linq.XName" /> 是否等于当前 <see cref="T:System.Xml.Linq.XName" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String)">
      <summary>
              获取 <see cref="T:System.Xml.Linq.XName" /> 从扩展名称的对象。
            </summary>
      <param name="expandedName">
                一个 <see cref="T:System.String" /> ，其中包含展开的 XML 名称的格式 {namespace}localname。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> 的扩展名从构造对象。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
      <summary>
              获取 <see cref="T:System.Xml.Linq.XName" /> 本地名称和命名空间中的对象。
            </summary>
      <param name="localName">
                本地 （非限定） 名称。
              </param>
      <param name="namespaceName">
                XML 命名空间。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> 从指定的本地名称和命名空间中创建的对象。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.GetHashCode">
      <summary>
              获取此 <see cref="T:System.Xml.Linq.XName" /> 的哈希代码。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含的哈希代码 <see cref="T:System.Xml.Linq.XName" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XName.LocalName">
      <summary>
              获取名称的本地 （非限定） 部分。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含名称的本地 （非限定） 部分。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XName.Namespace">
      <summary>
              获取完全限定名称的命名空间部分。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" />包含名称的命名空间部分。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XName.NamespaceName">
      <summary>
              返回的 URI <see cref="T:System.Xml.Linq.XNamespace" /> 此 <see cref="T:System.Xml.Linq.XName" />。
            </summary>
      <returns>
              URI 的 <see cref="T:System.Xml.Linq.XNamespace" /> 此 <see cref="T:System.Xml.Linq.XName" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>
              返回一个值，该值指示 <see cref="T:System.Xml.Linq.XName" /> 的两个实例是否相等。
            </summary>
      <param name="left">
                要比较的第一个 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <param name="right">
                要比较的第二个 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
      <summary>
              将格式化为展开的 XML 名称的字符串转换 (即，{namespace}localname) 到 <see cref="T:System.Xml.Linq.XName" /> 对象。
            </summary>
      <param name="expandedName">
                一个字符串，包含扩展的 XML 名称的格式 {namespace}localname。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> 的扩展名从构造对象。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>
              返回一个值，该值指示两个实例是否的 <see cref="T:System.Xml.Linq.XName" /> 是否不相等。
            </summary>
      <param name="left">
                要比较的第一个 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <param name="right">
                要比较的第二个 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.ToString">
      <summary>
              返回扩展的 XML 名称的格式 {namespace}localname。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含展开的 XML 名称的格式 {namespace}localname。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)">
      <summary>
              表示当前的 <see cref="T:System.Xml.Linq.XName" /> 是否与指定的 <see cref="T:System.Xml.Linq.XName" /> 相等。
            </summary>
      <param name="other">
                要与此 <see cref="T:System.Xml.Linq.XName" /> 进行比较的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
              如果 <see cref="T:System.Xml.Linq.XName" /> 等于指定的 <see cref="T:System.Xml.Linq.XName" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用序列化目标对象时所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
      <param name="info">
                要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
              </param>
      <param name="context">
                此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。
              </param>
    </member>
    <member name="T:System.Xml.Linq.XNamespace">
      <summary>
              表示 XML 命名空间。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
      <summary>
              确定指定的 <see cref="T:System.Xml.Linq.XNamespace" /> 是否等同于当前的 <see cref="T:System.Xml.Linq.XNamespace" />。
            </summary>
      <param name="obj">
        <see cref="T:System.Xml.Linq.XNamespace" /> 要与当前 <see cref="T:System.Xml.Linq.XNamespace" />。
              </param>
      <returns>
              一个 <see cref="T:System.Boolean" /> ，该值指示是否指定 <see cref="T:System.Xml.Linq.XNamespace" /> 是否等于当前 <see cref="T:System.Xml.Linq.XNamespace" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
      <summary>
              获取 <see cref="T:System.Xml.Linq.XNamespace" /> 为指定的统一资源标识符 (URI)。
            </summary>
      <param name="namespaceName">
                一个 <see cref="T:System.String" /> ，其中包含命名空间 URI。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> 创建从指定的 URI。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
      <summary>
              获取此 <see cref="T:System.Xml.Linq.XNamespace" /> 的哈希代码。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含的哈希代码 <see cref="T:System.Xml.Linq.XNamespace" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
      <summary>
              返回 <see cref="T:System.Xml.Linq.XName" /> 创建从此对象 <see cref="T:System.Xml.Linq.XNamespace" /> 和指定的本地名称。
            </summary>
      <param name="localName">
                一个 <see cref="T:System.String" /> ，其中包含本地名称。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> 创建从此 <see cref="T:System.Xml.Linq.XNamespace" /> 和指定的本地名称。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
      <summary>
              获取此命名空间统一资源标识符 (URI)。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含的命名空间 URI。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.None">
      <summary>
              获取 <see cref="T:System.Xml.Linq.XNamespace" /> 对应于没有命名空间的对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> 对应于没有命名空间。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
      <summary>
              将组合 <see cref="T:System.Xml.Linq.XNamespace" /> 本地名称来创建与对象 <see cref="T:System.Xml.Linq.XName" />。
            </summary>
      <param name="ns">
        <see cref="T:System.Xml.Linq.XNamespace" /> 包含的命名空间。
              </param>
      <param name="localName">
                一个 <see cref="T:System.String" /> ，其中包含的本地名称。
              </param>
      <returns>
              新 <see cref="T:System.Xml.Linq.XName" /> 构造的命名空间和本地名称。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>
              返回一个值，该值指示 <see cref="T:System.Xml.Linq.XNamespace" /> 的两个实例是否相等。
            </summary>
      <param name="left">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNamespace" />。
              </param>
      <param name="right">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNamespace" />。
              </param>
      <returns>
              一个 <see cref="T:System.Boolean" /> ，该值指示是否 <paramref name="left" /> 和 <paramref name="right" /> 是否相等。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
      <summary>
              将包含到统一资源标识符 (URI) 的字符串 <see cref="T:System.Xml.Linq.XNamespace" />。
            </summary>
      <param name="namespaceName">
                一个 <see cref="T:System.String" /> ，其中包含的命名空间 URI。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> 从 URI 字符串构造。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>
              返回一个值，该值指示两个实例是否的 <see cref="T:System.Xml.Linq.XNamespace" /> 是否不相等。
            </summary>
      <param name="left">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNamespace" />。
              </param>
      <param name="right">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNamespace" />。
              </param>
      <returns>
              一个 <see cref="T:System.Boolean" /> ，该值指示是否 <paramref name="left" /> 和 <paramref name="right" /> 是否不相等。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.ToString">
      <summary>
              返回此 URI <see cref="T:System.Xml.Linq.XNamespace" />。
            </summary>
      <returns>
              此 URI <see cref="T:System.Xml.Linq.XNamespace" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xml">
      <summary>
              获取 <see cref="T:System.Xml.Linq.XNamespace" /> 与 XML URI 相对应的对象 (http://www.w3.org/XML/1998/namespace)。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> 对应于 XML URI (http://www.w3.org/XML/1998/namespace)。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xmlns">
      <summary>
              获取 <see cref="T:System.Xml.Linq.XNamespace" /> xmlns URI 相对应的对象 (http://www.w3.org/2000/xmlns/)。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNamespace" /> 对应于 xmlns URI (http://www.w3.org/2000/xmlns/)。
            </returns>
    </member>
    <member name="T:System.Xml.Linq.XNode">
      <summary>
              表示 XML 树中节点的抽象概念（元素、注释、文档类型、处理指令或文本节点）。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
      <summary>
              紧跟在此节点之后添加指定的内容。
            </summary>
      <param name="content">
                要添加到此节点之后的包含简单内容的内容对象或内容对象集合。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
      <summary>
              紧跟在此节点之后添加指定的内容。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
      <summary>
              紧邻此节点之前添加指定的内容。
            </summary>
      <param name="content">
                要添加到此节点之前的包含简单内容的内容对象或内容对象集合。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
      <summary>
              紧邻此节点之前添加指定的内容。
            </summary>
      <param name="content">
                内容对象的参数列表。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors">
      <summary>
              返回此节点的上级元素的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 此节点的上级元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
      <summary>
              返回此节点的经过筛选的上级元素的集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 此节点的上级元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            
              返回的集合中的节点顺序与文档顺序相反。
            
              此方法使用延迟执行。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
              比较两个节点以确定其相对的 XML 文档顺序。
            </summary>
      <param name="n1">
                第一个 <see cref="T:System.Xml.Linq.XNode" /> 进行比较。
              </param>
      <param name="n2">
                第二个 <see cref="T:System.Xml.Linq.XNode" /> 进行比较。
              </param>
      <returns>
        <see langword="int" /> 包含 0，如果节点相等，则为-1 <paramref name="n1" /> 早 <paramref name="n2" />; 1 如果 <paramref name="n1" /> 晚 <paramref name="n2" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  两个节点不共享公共上级。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader">
      <summary>
              创建 <see cref="T:System.Xml.XmlReader" /> 此节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> ，可用于读取此节点及其子代。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)">
      <summary>
              创建 <see cref="T:System.Xml.XmlReader" /> 与指定的选项 <paramref name="readerOptions" /> 参数。
            </summary>
      <param name="readerOptions">
                一个 <see cref="T:System.Xml.Linq.ReaderOptions" /> 对象，它指定是否忽略重复的命名空间。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
              比较两个节点的值，包括所有子代节点的值。
            </summary>
      <param name="n1">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <param name="n2">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <returns>
        <see langword="true" /> 如果节点相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
      <summary>
              获取可以比较两个节点相对位置的比较器。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> 可以比较两个节点的相对位置。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
      <summary>
              按文档顺序返回此节点后的同级元素集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 的文档顺序中此节点后同级元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
      <summary>
              按文档顺序返回此节点后经过筛选的同级元素的集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 的文档顺序中此节点后同级元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
      <summary>
              按文档顺序返回此节点前的同级元素集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 文档顺序中此节点前同级元素。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
      <summary>
              按文档顺序返回此节点前经过筛选的同级元素的集合。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </summary>
      <param name="name">
                要匹配的 <see cref="T:System.Xml.Linq.XName" />。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" /> 文档顺序中此节点前同级元素。
               仅具有匹配的元素 <see cref="T:System.Xml.Linq.XName" /> 包括在集合中。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.EqualityComparer">
      <summary>
              获取可以比较两个节点值是否相等的比较器。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> 可以比较两个节点值是否相等。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
      <summary>
              确定当前节点是否按文档顺序显示在指定节点之后。
            </summary>
      <param name="node">
        <see cref="T:System.Xml.Linq.XNode" /> 要比较文档顺序。
              </param>
      <returns>
        <see langword="true" /> 如果此节点显示指定节点; 之后否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
      <summary>
              确定当前节点是否按文档顺序显示在指定节点之前。
            </summary>
      <param name="node">
        <see cref="T:System.Xml.Linq.XNode" /> 要比较文档顺序。
              </param>
      <returns>
        <see langword="true" /> 如果此节点显示在指定的节点; 之前否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.NextNode">
      <summary>
              获取此节点的下一个同级节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNode" /> ，其中包含下一个同级节点。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
      <summary>
              按文档顺序返回此节点后的同级节点的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 的文档顺序中此节点后同级节点。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
      <summary>
              按文档顺序返回此节点前的同级节点的集合。
            </summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" /> 文档顺序中此节点前同级节点。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.PreviousNode">
      <summary>
              获取此节点的上一个同级节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XNode" /> ，它包含上一个同级节点。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
      <summary>
              创建 <see cref="T:System.Xml.Linq.XNode" /> 从 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 位于要读取到此节点 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Linq.XNode" /> ，其中包含节点和从读取器读取及其子代节点。
               按节点类型确定节点的运行时类型 (<see cref="P:System.Xml.Linq.XObject.NodeType" />) 读取器中出现的第一个节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 没有定位在已识别的节点类型上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  基础 <see cref="T:System.Xml.XmlReader" /> 将引发异常。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)">
      <param name="reader">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Remove">
      <summary>
              从节点父级中删除此节点。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  父元素是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
      <summary>
              将此节点替换为指定的内容。
            </summary>
      <param name="content">
                替换此节点时所用的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
      <summary>
              将此节点替换为指定的内容。
            </summary>
      <param name="content">
                新内容的参数列表。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString">
      <summary>
              返回此节点的缩进 XML。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含缩进的 XML。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
      <summary>
              返回此节点的 XML，还可以选择禁用格式设置。
            </summary>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 包含的 XML。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将此节点写入 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
      <summary>
              包含用于比较节点文档顺序的功能。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
              比较两个节点以确定其相对的文档顺序。
            </summary>
      <param name="x">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <param name="y">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <returns>
        <see cref="T:System.Int32" /> 如果节点相等，则，则包含 0-1 如果 <paramref name="x" /> 早 <paramref name="y" />; 1 如果 <paramref name="x" /> 晚 <paramref name="y" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  两个节点不共享公共上级。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>
              比较两个节点以确定其相对的文档顺序。
            </summary>
      <param name="x">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <param name="y">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <returns>
        <see cref="T:System.Int32" /> 如果节点相等，则，则包含 0-1 如果 <paramref name="x" /> 早 <paramref name="y" />; 1 如果 <paramref name="x" /> 晚 <paramref name="y" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  两个节点不共享公共上级。
                </exception>
      <exception cref="T:System.ArgumentException">
                  两个节点不从派生 <see cref="T:System.Xml.Linq.XNode" />。
                </exception>
    </member>
    <member name="T:System.Xml.Linq.XNodeEqualityComparer">
      <summary>
              比较节点以确定其是否相等。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
              比较两个节点的值。
            </summary>
      <param name="x">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <param name="y">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <returns>
              一个 <see cref="T:System.Boolean" /> ，该值指示节点是否相等。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
      <summary>
              返回的哈希代码基于 <see cref="T:System.Xml.Linq.XNode" />。
            </summary>
      <param name="obj">
        <see cref="T:System.Xml.Linq.XNode" /> 与哈希。
              </param>
      <returns>
              一个 <see cref="T:System.Int32" /> ，其中包含该节点的基于值的哈希代码。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>
              比较两个节点的值。
            </summary>
      <param name="x">
                要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <param name="y">
                要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。
              </param>
      <returns>
        <see langword="true" /> 如果节点相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>
              返回基于节点值的哈希代码。
            </summary>
      <param name="obj">
                要散列的节点。
              </param>
      <returns>
              一个 <see cref="T:System.Int32" /> ，其中包含该节点的基于值的哈希代码。
            </returns>
    </member>
    <member name="T:System.Xml.Linq.XObject">
      <summary>
              表示 XML 树中的节点或属性。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
      <summary>
              将对象添加到批注列表 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <param name="annotation">
        <see cref="T:System.Object" /> ，其中包含要添加的批注。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
      <summary>
              获取指定类型的第一个批注对象从此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 要检索的批注。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，其中包含指定的类型匹配的第一个批注对象或 <see langword="null" /> 如果没有任何批注属于指定类型。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation``1">
      <summary>
              获取指定类型的第一个批注对象从此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <typeparam name="T">
                要检索的批注的类型。
              </typeparam>
      <returns>
              指定的类型匹配的第一个批注对象或 <see langword="null" /> 如果没有任何批注属于指定类型。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
      <summary>
              获取此指定类型的批注的集合 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 要检索的批注。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Object" /> ，其中包含与指定的类型匹配此批注 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations``1">
      <summary>
              获取此指定类型的批注的集合 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <typeparam name="T">
                要检索的批注的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含此批注 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.BaseUri">
      <summary>
              获取此基 URI <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中会包含的基 URI 此 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changed">
      <summary>
              时引发此 <see cref="T:System.Xml.Linq.XObject" /> 或任何子代已经更改。
            </summary>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changing">
      <summary>
              时引发此 <see cref="T:System.Xml.Linq.XObject" /> 或其任何子代即将更改。
            </summary>
    </member>
    <member name="P:System.Xml.Linq.XObject.Document">
      <summary>
              获取此 <see cref="T:System.Xml.Linq.XDocument" /> 的 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <returns>
              用于此 <see cref="T:System.Xml.Linq.XDocument" /> 的 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.NodeType">
      <summary>
              获取此节点类型 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <returns>
              为此节点类型 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Parent">
      <summary>
              获取父 <see cref="T:System.Xml.Linq.XElement" /> 此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <returns>
              父 <see cref="T:System.Xml.Linq.XElement" /> 此 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
      <summary>
              移除指定类型的批注从此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 要移除的批注。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
      <summary>
              移除指定类型的批注从此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <typeparam name="T">
                要删除的批注的类型。
              </typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
      <summary>
              获取一个值，该值指示是否此 <see cref="T:System.Xml.Linq.XObject" /> 包含行信息。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.Linq.XObject" /> 包含行信息，否则 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
      <summary>
              获取的行号基础 <see cref="T:System.Xml.XmlReader" /> 报告此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含所报告的行号 <see cref="T:System.Xml.XmlReader" /> 此 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
      <summary>
              获取的行位置基础 <see cref="T:System.Xml.XmlReader" /> 报告此 <see cref="T:System.Xml.Linq.XObject" />。
            </summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含所报告的行位置 <see cref="T:System.Xml.XmlReader" /> 此 <see cref="T:System.Xml.Linq.XObject" />。
            </returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChange">
      <summary>
              当 <see cref="T:System.Xml.Linq.XObject" /> 发生事件时指定事件类型。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Add">
      <summary>
        <see cref="T:System.Xml.Linq.XObject" /> 已经或将被添加到 <see cref="T:System.Xml.Linq.XContainer" />。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Name">
      <summary>
        <see cref="T:System.Xml.Linq.XObject" /> 已经或将被重命名。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Remove">
      <summary>
        <see cref="T:System.Xml.Linq.XObject" /> 已经或将从 <see cref="T:System.Xml.Linq.XContainer" />。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Value">
      <summary>
              值 <see cref="T:System.Xml.Linq.XObject" /> 已经或将要更改。
               此外，在序列化中的空元素 （或者从空标记以开始/结束标记对，反之亦然） 的更改会引发此事件。
            </summary>
    </member>
    <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
      <summary>
              提供有关 <see cref="E:System.Xml.Linq.XObject.Changing" /> 和 <see cref="E:System.Xml.Linq.XObject.Changed" /> 事件的数据。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XObjectChangeEventArgs" /> 类的新实例。
            </summary>
      <param name="objectChange">
        <see cref="T:System.Xml.Linq.XObjectChange" /> ，其中包含的事件参数 LINQ to XML 事件。
              </param>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
      <summary>
              事件参数 <see cref="F:System.Xml.Linq.XObjectChange.Add" /> 更改事件。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
      <summary>
              事件参数 <see cref="F:System.Xml.Linq.XObjectChange.Name" /> 更改事件。
            </summary>
    </member>
    <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
      <summary>
              获取更改的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XObjectChange" /> ，其中包含的更改的类型。
            </returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
      <summary>
              事件参数 <see cref="F:System.Xml.Linq.XObjectChange.Remove" /> 更改事件。
            </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
      <summary>
              事件参数 <see cref="F:System.Xml.Linq.XObjectChange.Value" /> 更改事件。
            </summary>
    </member>
    <member name="T:System.Xml.Linq.XProcessingInstruction">
      <summary>
              表示 XML 处理指令。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XProcessingInstruction" /> 类的新实例。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XProcessingInstruction" /> 从中进行复制的节点。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XProcessingInstruction" /> 类的新实例。
            </summary>
      <param name="target">
                一个 <see cref="T:System.String" /> 包含此目标应用程序 <see cref="T:System.Xml.Linq.XProcessingInstruction" />。
              </param>
      <param name="data">
                此字符串数据 <see cref="T:System.Xml.Linq.XProcessingInstruction" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 或 <paramref name="data" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不遵循 XML 名称的约束。
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
      <summary>
              获取或设置此处理指令的字符串值。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此处理指令的字符串值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  该字符串 <paramref name="value" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XProcessingInstruction" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
      <summary>
              获取或设置一个包含此处理指令的目标应用程序的字符串。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含此处理指令的目标应用程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  该字符串 <paramref name="value" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不遵循 XML 名称的约束。
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>
              写入到此处理指令 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 要写入到此处理指令。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Linq.XStreamingElement">
      <summary>
              表示 XML 树中支持流输出延迟的的元素。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
      <summary>
              从指定的 <see cref="T:System.Xml.Linq.XName" /> 初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含的元素名称。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XStreamingElement" /> 类具有指定的名称和内容。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含的元素名称。
              </param>
      <param name="content">
                元素的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XStreamingElement" /> 类具有指定的名称和内容。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含的元素名称。
              </param>
      <param name="content">
                元素的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
      <summary>
              将指定的内容作为子级添加到此 <see cref="T:System.Xml.Linq.XStreamingElement" />。
            </summary>
      <param name="content">
                要添加到流元素的内容。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
      <summary>
              将指定的内容作为子级添加到此 <see cref="T:System.Xml.Linq.XStreamingElement" />。
            </summary>
      <param name="content">
                要添加到流元素的内容。
              </param>
    </member>
    <member name="P:System.Xml.Linq.XStreamingElement.Name">
      <summary>
              获取或设置此流元素的名称。
            </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XName" /> ，其中包含此流元素的名称。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
      <summary>
              这将输出 <see cref="T:System.Xml.Linq.XStreamingElement" /> 到指定 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="stream">
                流输出这 <see cref="T:System.Xml.Linq.XDocument" /> 到。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
      <summary>
              将此流元素序列化为 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="textWriter">
                一个 <see cref="T:System.IO.TextWriter" /> ， <see cref="T:System.Xml.Linq.XStreamingElement" /> 将被写入。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
      <summary>
              序列化到文件的此流元素。
            </summary>
      <param name="fileName">
                一个 <see cref="T:System.String" /> ，其中包含文件的名称。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
      <summary>
              将此流元素序列化为 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlWriter" /> ， <see cref="T:System.Xml.Linq.XElement" /> 将被写入。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>
              这将输出 <see cref="T:System.Xml.Linq.XStreamingElement" /> 到指定 <see cref="T:System.IO.Stream" />, ，并 （可选） 指定格式设置行为。
            </summary>
      <param name="stream">
                流输出这 <see cref="T:System.Xml.Linq.XDocument" /> 到。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为的对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>
              将此流元素序列化为 <see cref="T:System.IO.TextWriter" />, ，可以选择禁用格式设置。
            </summary>
      <param name="textWriter">
        <see cref="T:System.IO.TextWriter" /> 输出到 XML。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>
              序列化到文件中，还可以选择禁用格式设置此流元素。
            </summary>
      <param name="fileName">
                一个 <see cref="T:System.String" /> ，其中包含文件的名称。
              </param>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为的对象。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString">
      <summary>
              返回此流元素格式化 （缩进） 的 XML。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含缩进的 XML。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
      <summary>
              返回此流的元素，并可以选择禁用格式设置的 XML。
            </summary>
      <param name="options">
                一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 指定格式设置行为。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 包含的 XML。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将此流元素写入 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="T:System.Xml.Linq.XText">
      <summary>
              表示文本节点。
            </summary>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Xml.Linq.XText" /> 类的新实例。
            </summary>
      <param name="value">
        <see cref="T:System.String" /> 包含值的 <see cref="T:System.Xml.Linq.XText" /> 节点。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Linq.XText" /> 从另一个类 <see cref="T:System.Xml.Linq.XText" /> 对象。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.Linq.XText" /> 从中进行复制的节点。
              </param>
    </member>
    <member name="P:System.Xml.Linq.XText.NodeType">
      <summary>
              获取此节点的节点类型。
            </summary>
      <returns>
              节点类型。
               有关 <see cref="T:System.Xml.Linq.XText" /> 对象，此值是 <see cref="F:System.Xml.XmlNodeType.Text" />。
            </returns>
    </member>
    <member name="P:System.Xml.Linq.XText.Value">
      <summary>
              获取或设置此节点的值。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含此节点的值。
            </returns>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将此节点写入 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 到此方法将编写。
              </param>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
      <param name="writer">
      </param>
      <param name="cancellationToken">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Xml.Schema.Extensions">
      <summary>
              此类包含 LINQ to XML 对 XSD 验证的扩展方法。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)">
      <summary>
              获取验证的属性的架构验证信息集 (PSVI)。
            </summary>
      <param name="source">
        <see cref="T:System.Xml.Linq.XAttribute" /> ，进行过验证。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> ，其中包含有关的架构验证信息集 <see cref="T:System.Xml.Linq.XAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)">
      <summary>
              获取已验证元素的架构验证信息集 (PSVI)。
            </summary>
      <param name="source">
        <see cref="T:System.Xml.Linq.XElement" /> ，进行过验证。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> ，其中包含架构验证信息集 (PSVI) <see cref="T:System.Xml.Linq.XElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              此方法验证 <see cref="T:System.Xml.Linq.XDocument" /> 符合中的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="source">
                要验证的 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 进行验证。
              </param>
      <param name="validationEventHandler">
                一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 读取器遇到验证错误时发生的事件。
                 如果 <see langword="null" />, ，将引发异常时验证错误。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 架构定义语言 (XSD) 验证错误引发。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              此方法验证 <see cref="T:System.Xml.Linq.XAttribute" /> 符合指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="source">
                要验证的 <see cref="T:System.Xml.Linq.XAttribute" />。
              </param>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> ，它指定要验证的子树。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 进行验证。
              </param>
      <param name="validationEventHandler">
                一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 读取器遇到验证错误时发生的事件。
                 如果 <see langword="null" />, ，将引发异常时验证错误。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 架构定义语言 (XSD) 验证错误引发。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>
              验证 <see cref="T:System.Xml.Linq.XDocument" /> 符合中的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />, 、 有选择地填充 XML 树与架构验证信息集 (PSVI)。
            </summary>
      <param name="source">
                要验证的 <see cref="T:System.Xml.Linq.XDocument" />。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 进行验证。
              </param>
      <param name="validationEventHandler">
                一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 读取器遇到验证错误时发生的事件。
                 如果 <see langword="null" />, ，将引发异常时验证错误。
              </param>
      <param name="addSchemaInfo">
                一个 <see cref="T:System.Boolean" /> ，该值指示是否填充架构验证信息集 (PSVI)。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 架构定义语言 (XSD) 验证错误引发。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              此方法验证 <see cref="T:System.Xml.Linq.XElement" /> 子树是否符合指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="source">
                要验证的 <see cref="T:System.Xml.Linq.XElement" />。
              </param>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> ，它指定要验证的子树。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 进行验证。
              </param>
      <param name="validationEventHandler">
                一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 读取器遇到验证错误时发生的事件。
                 如果 <see langword="null" />, ，将引发异常时验证错误。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 架构定义语言 (XSD) 验证错误引发。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>
              验证 <see cref="T:System.Xml.Linq.XAttribute" /> 符合指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />, 、 有选择地填充 XML 树与架构验证信息集 (PSVI)。
            </summary>
      <param name="source">
                要验证的 <see cref="T:System.Xml.Linq.XAttribute" />。
              </param>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> ，它指定要验证的子树。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 进行验证。
              </param>
      <param name="validationEventHandler">
                一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 读取器遇到验证错误时发生的事件。
                 如果 <see langword="null" />, ，将引发异常时验证错误。
              </param>
      <param name="addSchemaInfo">
                一个 <see cref="T:System.Boolean" /> ，该值指示是否填充架构验证信息集 (PSVI)。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 架构定义语言 (XSD) 验证错误引发。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>
              验证 <see cref="T:System.Xml.Linq.XElement" /> 子树是否符合指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />, 、 有选择地填充 XML 树与架构验证信息集 (PSVI)。
            </summary>
      <param name="source">
                要验证的 <see cref="T:System.Xml.Linq.XElement" />。
              </param>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> ，它指定要验证的子树。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 进行验证。
              </param>
      <param name="validationEventHandler">
                一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 读取器遇到验证错误时发生的事件。
                 如果 <see langword="null" />, ，将引发异常时验证错误。
              </param>
      <param name="addSchemaInfo">
                一个 <see cref="T:System.Boolean" /> ，该值指示是否填充架构验证信息集 (PSVI)。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 架构定义语言 (XSD) 验证错误引发。
                </exception>
    </member>
  </members>
</doc>