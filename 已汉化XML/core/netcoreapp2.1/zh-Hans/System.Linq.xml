<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Linq.Enumerable">
      <summary>
              提供了一套 <see langword="static" /> (<see langword="Shared" /> 在 Visual Basic 中) 用于查询实现的对象方法 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>
              对一个序列应用累加器函数。
               将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对其进行聚合。
              </param>
      <param name="seed">
                累加器的初始值。
              </param>
      <param name="func">
                要对每个元素调用的累加器函数。
              </param>
      <param name="resultSelector">
                将累加器的最终值转换为结果值的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TAccumulate">
                累加器值的类型。
              </typeparam>
      <typeparam name="TResult">
                结果值的类型。
              </typeparam>
      <returns>
              已转换的累加器最终值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="func" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
              对一个序列应用累加器函数。
               将指定的种子值用作累加器初始值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对其进行聚合。
              </param>
      <param name="seed">
                累加器的初始值。
              </param>
      <param name="func">
                要对每个元素调用的累加器函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TAccumulate">
                累加器值的类型。
              </typeparam>
      <returns>
              累加器的最终值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
              对一个序列应用累加器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对其进行聚合。
              </param>
      <param name="func">
                要对每个元素调用的累加器函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              累加器的最终值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              确定是否对序列中的所有元素都满足条件。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含要应用谓词的元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="true" /> 如果源序列中的每个元素通过与指定谓词中的测试，或者如果序列为空，则为否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              确定序列是否包含任何元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以检查是否为空。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="true" /> 如果源序列中不包含任何元素，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              确定是否序列中的任何元素都满足条件。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其应用谓词的元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="true" /> 如果源序列中的任何元素中指定的谓词; 通过的测试否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              将一个值追加到序列末尾。
            </summary>
      <param name="source">
                值序列。
              </param>
      <param name="element">
                要追加到 <paramref name="source" /> 的值。
              </param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素类型。
              </typeparam>
      <returns>
              以 <paramref name="element" /> 结尾的新序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回输入类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </summary>
      <param name="source">
                序列以键入 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              在输入的序列类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              计算序列的平均值 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Single" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Single" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int64" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。
            </summary>
      <param name="source">
                要计算平均值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。
              </param>
      <returns>
              如果源序列为空或仅包含为 <see langword="null" /> 的值，则为<see langword="null" />；否则为值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Double" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              计算序列的平均值 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int64" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              计算序列的平均值 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int32" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              计算序列的平均值 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Double" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              计算序列的平均值 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Decimal" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Decimal" /> 要计算平均值的值。
              </param>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              计算序列的平均值 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              可以为 null 的序列的平均值，计算 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值或 <see langword="null" /> 如果源序列为空或仅包含值的 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              计算序列的平均值 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                源的元素的类型。
              </typeparam>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              计算序列的平均值 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              计算序列的平均值 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                要计算的平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              计算序列的平均值 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                用于计算平均值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              值序列的平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
      <exception cref="T:System.OverflowException">
                  在序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>
              将强制转换的元素 <see cref="T:System.Collections.IEnumerable" /> 为指定的类型。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.IEnumerable" /> ，其中包含要强制转换为键入的元素 <paramref name="TResult" />。
              </param>
      <typeparam name="TResult">
                要转换的元素的类型 <paramref name="source" /> 到。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含强制转换为指定类型的源序列的每个元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  序列中的元素不能转换为类型 <paramref name="TResult" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              连接两个序列。
            </summary>
      <param name="first">
                要连接的第一个序列。
              </param>
      <param name="second">
                要与第一个序列连接的序列。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含两个输入序列的串联的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              确定序列是否包含指定的元素使用的默认相等比较器。
            </summary>
      <param name="source">
                要在其中定位某个值的序列。
              </param>
      <param name="value">
                要在序列中定位的值。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="true" /> 如果源序列包含具有指定的值; 的元素否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              确定序列是否使用指定的包含指定的元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="source">
                要在其中定位某个值的序列。
              </param>
      <param name="value">
                要在序列中定位的值。
              </param>
      <param name="comparer">
                一个对值进行比较的相等比较器。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="true" /> 如果源序列包含具有指定的值; 的元素否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回序列中的元素数。
            </summary>
      <param name="source">
                包含要计数的元素的序列。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              输入序列中的元素数量。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  中的元素数 <paramref name="source" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回一个数字来表示多少个元素指定序列中的满足条件。
            </summary>
      <param name="source">
                包含要测试和计数的元素序列。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              一个数字，表示序列中满足谓词函数条件的元素数量。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  中的元素数 <paramref name="source" /> 大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              返回单一实例集合中指定的序列或指定的值的元素，如果序列为空。
            </summary>
      <param name="source">
                序列为空时返回指定值的序列。
              </param>
      <param name="defaultValue">
                序列为空时要返回的值。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含 <paramref name="defaultValue" /> 如果 <paramref name="source" /> 空; 否则为 <paramref name="source" />。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回单一实例集合中指定的序列或类型参数的默认值的元素，如果序列为空。
            </summary>
      <param name="source">
                序列为空时返回默认值的序列。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其中包含的默认值为 <paramref name="TSource" /> 如果键入 <paramref name="source" /> 空; 否则为 <paramref name="source" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              通过使用的默认相等比较器对值进行比较从序列返回非重复元素。
            </summary>
      <param name="source">
                要从中移除重复元素的序列。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含源序列中的非重复元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              返回序列中通过使用指定的非重复元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。
            </summary>
      <param name="source">
                要从中移除重复元素的序列。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含源序列中的非重复元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              返回序列中的指定索引处的元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。
              </param>
      <param name="index">
                要检索的从零开始的元素索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              源序列中指定位置处的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于或等于的中的元素数 <paramref name="source" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。
              </param>
      <param name="index">
                要检索的从零开始的元素索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) 如果索引超出界限的源序列中; 否则为源序列中的指定位置处的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>
              返回一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 具有指定的类型参数。
            </summary>
      <typeparam name="TResult">
                要分配给返回的泛型类型参数的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
              </typeparam>
      <returns>
              一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其类型参数是 <paramref name="TResult" />。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              通过使用默认的相等比较器对值进行比较，生成两个序列的差集。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也不是在其元素 <paramref name="second" /> 将返回。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 同时出现在第一个序列的元素将导致从返回的序列中移除这些元素。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
              包含这两个序列的元素的差集的序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              使用指定的生成两个序列的差集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也不是在其元素 <paramref name="second" /> 将返回。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 同时出现在第一个序列的元素将导致从返回的序列中移除这些元素。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
              包含这两个序列的元素的差集的序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回一个序列的第一个元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的第一个元素。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              返回指定序列中的第一个元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  源序列为空。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中满足指定条件的第一个元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中通过指定谓词函数中的测试的第一个元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有元素满足该条件在 <paramref name="predicate" />。
                
                  - 或 -
                
                  源序列为空。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) 如果 <paramref name="source" /> 为空，或者如果没有元素通过由指定的测试 <paramref name="predicate" />; 否则为中的第一个元素 <paramref name="source" /> 通过由指定的测试 <paramref name="predicate" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的第一个元素。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) 如果 <paramref name="source" /> 空; 否则为中的第一个元素 <paramref name="source" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>
              根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。
               通过使用指定的函数对每个组的元素进行投影。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="elementSelector">
                用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。
              </param>
      <param name="resultSelector">
                用于从每个组中创建结果值的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
                在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。
              </typeparam>
      <typeparam name="TResult">
                返回的结果值的类型 <paramref name="resultSelector" />。
              </typeparam>
      <returns>
              类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。
               通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="elementSelector">
                用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。
              </param>
      <param name="resultSelector">
                用于从每个组中创建结果值的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 来对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
                在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。
              </typeparam>
      <typeparam name="TResult">
                返回的结果值的类型 <paramref name="resultSelector" />。
              </typeparam>
      <returns>
              类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              根据指定的键选择器函数和项目的元素的每个组通过使用指定的函数对序列的元素进行分组。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="elementSelector">
                用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TElement)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含类型的对象的集合 <paramref name="TElement" /> 和密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              根据键选择器函数对序列的元素进行分组。
               通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="elementSelector">
                用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TElement)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含类型的对象的集合 <paramref name="TElement" /> 和密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>
              根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="resultSelector">
                用于从每个组中创建结果值的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TResult">
                返回的结果值的类型 <paramref name="resultSelector" />。
              </typeparam>
      <returns>
              类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。
               通过使用指定的比较器对键进行比较。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="resultSelector">
                用于从每个组中创建结果值的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 来对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TResult">
                返回的结果值的类型 <paramref name="resultSelector" />。
              </typeparam>
      <returns>
              类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              根据指定的键选择器函数对序列的元素进行分组。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TSource)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一系列对象和一个密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              根据指定的键选择器函数并将进行比较的键使用指定的比较器对序列的元素进行分组。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。
              </param>
      <param name="keySelector">
                用于提取每个元素的键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TSource)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含的对象和键的集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              基于键相等对两个序列的元素进行关联，并对结果进行分组。
               指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。
            </summary>
      <param name="outer">
                要联接的第一个序列。
              </param>
      <param name="inner">
                要与第一个序列联接的序列。
              </param>
      <param name="outerKeySelector">
                用于从第一个序列的每个元素提取联接键的函数。
              </param>
      <param name="innerKeySelector">
                用于从第二个序列的每个元素提取联接键的函数。
              </param>
      <param name="resultSelector">
                用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。
              </param>
      <typeparam name="TOuter">
                第一个序列中的元素的类型。
              </typeparam>
      <typeparam name="TInner">
                第二个序列中的元素的类型。
              </typeparam>
      <typeparam name="TKey">
                键选择器函数返回的键的类型。
              </typeparam>
      <typeparam name="TResult">
                结果元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含类型的元素 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
              基于键相等对两个序列的元素进行关联，并对结果进行分组。
               使用默认的相等比较器对键进行比较。
            </summary>
      <param name="outer">
                要联接的第一个序列。
              </param>
      <param name="inner">
                要与第一个序列联接的序列。
              </param>
      <param name="outerKeySelector">
                用于从第一个序列的每个元素提取联接键的函数。
              </param>
      <param name="innerKeySelector">
                用于从第二个序列的每个元素提取联接键的函数。
              </param>
      <param name="resultSelector">
                用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。
              </param>
      <typeparam name="TOuter">
                第一个序列中的元素的类型。
              </typeparam>
      <typeparam name="TInner">
                第二个序列中的元素的类型。
              </typeparam>
      <typeparam name="TKey">
                键选择器函数返回的键的类型。
              </typeparam>
      <typeparam name="TResult">
                结果元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含类型的元素 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              使用指定的生成两个序列的交集<see cref="T:System.Collections.Generic.IEqualityComparer`1" />值进行比较。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />也会显示在其非重复元素<paramref name="second" />将返回。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />将返回其还显示在第一个序列的非重复元素。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" />值进行比较。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
              包含组成两个序列交集的元素的序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              通过使用的默认相等比较器对值进行比较，生成两个序列的交集。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />也会显示在其非重复元素<paramref name="second" />将返回。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />将返回其还显示在第一个序列的非重复元素。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
              包含组成两个序列交集的元素的序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>
              基于匹配键对两个序列的元素关联。
               使用默认的相等比较器对键进行比较。
            </summary>
      <param name="outer">
                要联接的第一个序列。
              </param>
      <param name="inner">
                要与第一个序列联接的序列。
              </param>
      <param name="outerKeySelector">
                用于从第一个序列的每个元素提取联接键的函数。
              </param>
      <param name="innerKeySelector">
                用于从第二个序列的每个元素提取联接键的函数。
              </param>
      <param name="resultSelector">
                用于从两个匹配元素创建结果元素的函数。
              </param>
      <typeparam name="TOuter">
                第一个序列中的元素的类型。
              </typeparam>
      <typeparam name="TInner">
                第二个序列中的元素的类型。
              </typeparam>
      <typeparam name="TKey">
                键选择器函数返回的键的类型。
              </typeparam>
      <typeparam name="TResult">
                结果元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其类型的元素 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              基于匹配键对两个序列的元素关联。
               指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。
            </summary>
      <param name="outer">
                要联接的第一个序列。
              </param>
      <param name="inner">
                要与第一个序列联接的序列。
              </param>
      <param name="outerKeySelector">
                用于从第一个序列的每个元素提取联接键的函数。
              </param>
      <param name="innerKeySelector">
                用于从第二个序列的每个元素提取联接键的函数。
              </param>
      <param name="resultSelector">
                用于从两个匹配元素创建结果元素的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。
              </param>
      <typeparam name="TOuter">
                第一个序列中的元素的类型。
              </typeparam>
      <typeparam name="TInner">
                第二个序列中的元素的类型。
              </typeparam>
      <typeparam name="TKey">
                键选择器函数返回的键的类型。
              </typeparam>
      <typeparam name="TResult">
                结果元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其类型的元素 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回一个序列的最后一个元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的最后一个元素。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              源序列中最后位置处的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  源序列为空。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中满足指定条件的最后一个元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中通过指定谓词函数中的测试的最后一个元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有元素满足该条件在 <paramref name="predicate" />。
                
                  - 或 -
                
                  源序列为空。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的最后一个元素。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) 如果源序列为空; 否则为最后一个元素 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) 如果序列为空，或者如果没有元素通过的测试在谓词函数中; 否则，最后一个元素通过的测试将在谓词函数中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回 <see cref="T:System.Int64" /> 表示序列中的多少个元素满足条件。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含要计数的元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              一个数字，表示序列中满足谓词函数条件的元素数量。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  匹配的元素数超过 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回<see cref="T:System.Int64" />表示序列中的元素总数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />包含要计数的元素。
              </param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素类型。
              </typeparam>
      <returns>
              源序列中的元素数目。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  元素的数目超过<see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              可以为 null 的序列中返回的最大值 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Single" /> 值来确定的最大值。
              </param>
      <returns>
              类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              返回序列中的最大值 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int32" /> 值来确定的最大值。
              </param>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              可以为 null 的序列中返回的最大值 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int64" /> 值来确定的最大值。
              </param>
      <returns>
              类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最大值。 </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              返回序列中的最大值 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Single" /> 值来确定的最大值。
              </param>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              可以为 null 的序列中返回的最大值 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int32" /> 值来确定的最大值。
              </param>
      <returns>
              类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最大值。 </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              返回序列中的最大值 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Decimal" /> 值来确定的最大值。
              </param>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              可以为 null 的序列中返回的最大值 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Decimal" /> 值来确定的最大值。
              </param>
      <returns>
              类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最大值。 </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              返回序列中的最大值 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int64" /> 值来确定的最大值。
              </param>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              返回序列中的最大值 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Double" /> 值来确定的最大值。
              </param>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              可以为 null 的序列中返回的最大值 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Double" /> 值来确定的最大值。
              </param>
      <returns>
              类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              调用泛型序列的每个元素的转换函数并返回最大结果值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TResult">
                返回的值的类型 <paramref name="selector" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              泛型序列中返回的最大值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                要确定其最大值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              返回的最小值可以为 null 的序列中 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int64" /> 值来确定的最小值。
              </param>
      <returns>
              类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              返回的最小值可以为 null 的序列中 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int32" /> 值来确定的最小值。
              </param>
      <returns>
              类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              返回序列中的最小值 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Single" /> 值来确定的最小值。
              </param>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              返回的最小值可以为 null 的序列中 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Single" /> 值来确定的最小值。
              </param>
      <returns>
              类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              返回的最小值可以为 null 的序列中 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Double" /> 值来确定的最小值。
              </param>
      <returns>
              类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              返回序列中的最小值 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Double" /> 值来确定的最小值。
              </param>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              返回序列中的最小值 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int64" /> 值来确定的最小值。
              </param>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              返回序列中的最小值 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int32" /> 值来确定的最小值。
              </param>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              返回的最小值可以为 null 的序列中 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Decimal" /> 值来确定的最小值。
              </param>
      <returns>
              类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              返回序列中的最小值 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Decimal" /> 值来确定的最小值。
              </param>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              调用泛型序列的每个元素的转换函数，并返回最小的结果值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TResult">
                返回的值的类型 <paramref name="selector" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              泛型序列中返回的最小值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                要确定其最小值的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>
              筛选的元素 <see cref="T:System.Collections.IEnumerable" /> 根据指定的类型。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.IEnumerable" /> 要筛选其元素。
              </param>
      <typeparam name="TResult">
                筛选序列元素所根据的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中的元素类型 <paramref name="TResult" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              按根据某个键按升序对序列的元素进行排序。
            </summary>
      <param name="source">
                一个要排序的值序列。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              按使用指定的比较器按升序对序列的元素进行排序。
            </summary>
      <param name="source">
                一个要排序的值序列。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              使用指定的比较器按降序对序列的元素排序。
            </summary>
      <param name="source">
                一个要排序的值序列。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              按根据某个键按降序对序列的元素进行排序。
            </summary>
      <param name="source">
                一个要排序的值序列。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              向序列的开头添加值。
            </summary>
      <param name="source">
                值序列。
              </param>
      <param name="element">
                要放置在 <paramref name="source" /> 前面的值。
              </param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素类型。
              </typeparam>
      <returns>
              以 <paramref name="element" /> 开头的新序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>
              生成指定范围内的整数序列。
            </summary>
      <param name="start">
                序列中第一个整数的值。
              </param>
      <param name="count">
                要生成的顺序整数的数目。
              </param>
      <returns>
              IEnumerable&lt;Int32&gt; 在 C# 或 IEnumerable(Of Int32) 中 Visual Basic ，其中包含范围的顺序的整数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="start" /> + <paramref name="count" /> -1 是大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>
              将生成一个序列，其中包含一个重复的值。
            </summary>
      <param name="element">
                要重复的值。
              </param>
      <param name="count">
                在生成序列中重复该值的次数。
              </param>
      <typeparam name="TResult">
                要在结果序列中重复的值的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含重复的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              反转序列中元素的顺序。
            </summary>
      <param name="source">
                要反转的值序列。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              一个序列，其元素以相反顺序对应于输入序列的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>
              通过合并元素的索引投影到一个新窗体的序列的每个元素。
            </summary>
      <param name="source">
                一个值序列，要对该序列调用转换函数。
              </param>
      <param name="selector">
                一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TResult">
                返回的值的类型 <paramref name="selector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用转换函数的每个元素的结果 <paramref name="source" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              将序列中的每个元素投影到新表单。
            </summary>
      <param name="source">
                一个值序列，要对该序列调用转换函数。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TResult">
                返回的值的类型 <paramref name="selector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用转换函数的每个元素的结果 <paramref name="source" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
              一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, 将平展为一个序列，将结果序列，其中调用结果选择器函数对每个元素。
            </summary>
      <param name="source">
                一个要投影的值序列。
              </param>
      <param name="collectionSelector">
                要应用于输入序列中的每个元素转换函数。
              </param>
      <param name="resultSelector">
                要应用于中间序列的每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TCollection">
                中间元素的类型由收集 <paramref name="collectionSelector" />。
              </typeparam>
      <typeparam name="TResult">
                结果序列的元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用一种一对多转换函数的结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 然后将每个这些序列元素和其相应的源元素映射到一个结果元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
              一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, 将平展为一个序列，将结果序列，其中调用结果选择器函数对每个元素。
               每个源元素的索引用于该元素的中间投影表。
            </summary>
      <param name="source">
                一个要投影的值序列。
              </param>
      <param name="collectionSelector">
                一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。
              </param>
      <param name="resultSelector">
                要应用于中间序列的每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TCollection">
                中间元素的类型由收集 <paramref name="collectionSelector" />。
              </typeparam>
      <typeparam name="TResult">
                结果序列的元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用一种一对多转换函数的结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 然后将每个这些序列元素和其相应的源元素映射到一个结果元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
              一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将合并为一个序列将结果序列。
            </summary>
      <param name="source">
                一个要投影的值序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TResult">
                返回的序列的元素的类型 <paramref name="selector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是一种一对多转换函数对输入序列中的每个元素调用的结果。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
              一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, ，并将合并为一个序列将结果序列。
               每个源元素的索引用于该元素的投影表。
            </summary>
      <param name="source">
                一个要投影的值序列。
              </param>
      <param name="selector">
                一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TResult">
                返回的序列的元素的类型 <paramref name="selector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是一种一对多转换函数对输入序列中的每个元素调用的结果。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              确定两个序列是否相等的元素进行比较通过使用相应类型的默认相等比较器。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与 <paramref name="second" />。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与第一个序列进行比较。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
        <see langword="true" /> 如果两个源序列的长度相等，且其相应元素相等根据它们的类型; 的默认相等比较器否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              确定两个序列是否通过使用指定的比较它们的元素相等 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与 <paramref name="second" />。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与第一个序列进行比较。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 要用来比较元素。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
        <see langword="true" /> 如果两个源序列的长度相等，并且其相应元素的比较结果相等根据 <paramref name="comparer" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回从的单个元素。
              </param>
      <param name="predicate">
                用于测试元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              输入序列中满足条件的单个元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有元素满足该条件在 <paramref name="predicate" />。
                
                  - 或 -
                
                  多个元素满足该条件在 <paramref name="predicate" />。
                
                  - 或 -
                
                  源序列为空。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的单个元素。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              输入序列的单个元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  输入的序列包含多个元素。
                
                  - 或 -
                
                  输入的序列为空。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回一个序列，或默认值的唯一元素，如果序列为空，则为如果序列中存在多个元素，则此方法将引发异常。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的单个元素。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              在输入序列的单个元素或 <see langword="default" />(<paramref name="TSource" />) 如果序列不包含任何元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  输入的序列包含多个元素。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回从的单个元素。
              </param>
      <param name="predicate">
                用于测试元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              输入序列中满足该条件的单个元素或 <see langword="default" />(<paramref name="TSource" />) 如果找到这样的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              跳过指定的数量的序列中的元素，然后返回剩余元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回中的元素。
              </param>
      <param name="count">
                返回剩余元素前要跳过的元素数量。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中的指定索引后出现的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <param name="source">
      </param>
      <param name="count">
      </param>
      <typeparam name="TSource">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              只要指定的条件为 true，然后返回剩余元素，跳过序列中的元素。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回中的元素。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含从输入序列不将传递通过指定的测试的线性系列中的第一个元素开始的元素 <paramref name="predicate" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              只要指定的条件为 true，然后返回剩余元素，跳过序列中的元素。
               将在谓词函数的逻辑中使用元素的索引。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回中的元素。
              </param>
      <param name="predicate">
                用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含从输入序列不将传递通过指定的测试的线性系列中的第一个元素开始的元素 <paramref name="predicate" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int32" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Single" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              计算的一系列总和 <see cref="T:System.Single" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Single" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Int64" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Double" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              计算的一系列总和 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Double" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              计算的一系列总和 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int64" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              计算的一系列总和 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Int32" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              计算的一系列总和 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                一系列 <see cref="T:System.Decimal" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="source">
                可以为 null 的序列 <see cref="T:System.Decimal" /> 要对其求和的值。
              </param>
      <returns>
              在序列中值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              计算的序列的和 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              计算可以为 null 的序列的和 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              计算的序列的和 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              计算的序列的和 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              计算的序列的和 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              计算的序列的和 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。
            </summary>
      <param name="source">
                使用要计算的总和的值的序列。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              投影值的总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.OverflowException">
                  之和大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              从序列的开头返回指定的数量的连续元素。
            </summary>
      <param name="source">
                要从其返回元素的序列。
              </param>
      <param name="count">
                要返回的元素数量。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含指定从输入序列的起始位置的元素数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <param name="source">
      </param>
      <param name="count">
      </param>
      <typeparam name="TSource">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              返回序列中的元素，只要指定的条件为真。
            </summary>
      <param name="source">
                要返回元素的序列。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中出现测试不再能够通过在元素之前的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              返回序列中的元素，只要指定的条件为真。
               将在谓词函数的逻辑中使用元素的索引。
            </summary>
      <param name="source">
                要从其返回元素的序列。
              </param>
      <param name="predicate">
                用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中出现测试不再能够通过在元素之前的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              执行后续排序中使用指定的比较器按升序对序列的元素。
            </summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>
              执行后续排序以根据某个键按升序对序列的元素。
            </summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>
              根据某个键将执行后续排序顺序，按降序对序列的元素。
            </summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              执行后续排序中使用指定的比较器按降序对序列的元素。
            </summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              创建一个数组，从 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 若要创建数组。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              一个包含输入序列中的元素的数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器和元素选择器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="elementSelector">
                用于从每个元素产生结果元素值的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
                返回的值的类型 <paramref name="elementSelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="keySelector" /> 生成的密钥 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数、 比较器和元素选择器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="elementSelector">
                用于从每个元素产生结果元素值的转换函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
                返回的值的类型 <paramref name="elementSelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="keySelector" /> 生成的密钥 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含键和值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="keySelector" /> 生成的密钥 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数和键比较器。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含键和值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="keySelector" /> 生成的密钥 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              使用 <paramref name="comparer" /> 通过 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.HashSet`1" />，以用于比较键
            </summary>
      <param name="source">
                要从其创建 <see cref="T:System.Collections.Generic.HashSet`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
              </param>
      <param name="comparer">
                用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
              </param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型
              </typeparam>
      <returns>
              一个包含从输入序列中选择的类型为 <paramref name="TSource" /> 的值的 <see cref="T:System.Collections.Generic.HashSet`1" />。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.HashSet`1" />。
            </summary>
      <param name="source">
                
            要从其创建 <see cref="T:System.Collections.Generic.HashSet`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
              </param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.Generic.HashSet`1" />，包含从输入序列中选择的类型为 TSource 的值。
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              创建 <see cref="T:System.Collections.Generic.List`1" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.List`1" /> 从。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.Generic.List`1" /> ，其中包含输入序列中的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器和元素选择器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="elementSelector">
                用于从每个元素产生结果元素值的转换函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
                返回的值的类型 <paramref name="elementSelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数、 比较和元素选择器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="elementSelector">
                用于从每个元素产生结果元素值的转换函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <typeparam name="TElement">
                返回的值的类型 <paramref name="elementSelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含键和值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数和键比较器。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。
              </param>
      <param name="keySelector">
                用于从每个元素中提取键的函数。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含键和值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              通过使用默认的相等比较器生成的两个序列的并集。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第一个集。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第二个。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含非重复这两个输入序列中的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              使用指定的生成两个序列的并集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第一个集。
              </param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第二个。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。
              </param>
      <typeparam name="TSource">
                输入序列中的元素的类型。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含非重复这两个输入序列中的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              基于谓词筛选值序列。
               将在谓词函数的逻辑中使用每个元素的索引。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 进行筛选。
              </param>
      <param name="predicate">
                用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中满足条件的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              基于谓词筛选值序列。
            </summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 进行筛选。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TSource">
                中的元素的类型 <paramref name="source" />。
              </typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中满足条件的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
              将指定函数应用于两个序列的对应元素，以生成结果序列。
            </summary>
      <param name="first">
                要合并的第一个序列。
              </param>
      <param name="second">
                要合并的第二个序列。
              </param>
      <param name="resultSelector">
                用于指定如何合并这两个序列中的元素的函数。
              </param>
      <typeparam name="TFirst">
                第一个输入序列的元素的类型。
              </typeparam>
      <typeparam name="TSecond">
                第二个输入序列的元素的类型。
              </typeparam>
      <typeparam name="TResult">
                结果序列的元素的类型。
              </typeparam>
      <returns>
              一个包含两个输入序列中的合并元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>
              表示具有公共键的对象的集合。
            </summary>
      <typeparam name="TKey">
                键的类型 <see cref="T:System.Linq.IGrouping`2" />。
              </typeparam>
      <typeparam name="TElement">
                中的值的类型 <see cref="T:System.Linq.IGrouping`2" />。
              </typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>
              获取的键 <see cref="T:System.Linq.IGrouping`2" />。
            </summary>
      <returns>
              键 <see cref="T:System.Linq.IGrouping`2" />。
            </returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>
              定义索引器、 大小属性，并将键映射到的数据结构的布尔搜索方法 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值的序列。
            </summary>
      <typeparam name="TKey">
                中的键的类型 <see cref="T:System.Linq.ILookup`2" />。
              </typeparam>
      <typeparam name="TElement">
                中的元素的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列中的值构成 <see cref="T:System.Linq.ILookup`2" />。
              </typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>
              确定指定的键是否存在于 <see cref="T:System.Linq.ILookup`2" />。
            </summary>
      <param name="key">
                要在中搜索的键 <see cref="T:System.Linq.ILookup`2" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="key" /> 处于 <see cref="T:System.Linq.ILookup`2" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>
              获取对集合中的键/值数 <see cref="T:System.Linq.ILookup`2" />。
            </summary>
      <returns>
              中的键/值集合对的数目 <see cref="T:System.Linq.ILookup`2" />。
            </returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>
              获取 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 按指定的键索引值序列。
            </summary>
      <param name="key">
                所需的值序列的键。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 由指定键的值序列的索引。
            </returns>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>
              表示一个排序的序列。
            </summary>
      <typeparam name="TElement">
                对序列中的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>
              执行后续排序中的元素 <see cref="T:System.Linq.IOrderedEnumerable`1" /> 根据某个键。
            </summary>
      <param name="keySelector">
        <see cref="T:System.Func`2" /> 用于提取每个元素的键。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 用于放置虚拟机返回序列中的键进行比较。
              </param>
      <param name="descending">
        <see langword="true" /> 按降序顺序; 元素进行排序 <see langword="false" /> 按升序排序的元素进行排序。
              </param>
      <typeparam name="TKey">
                键的类型由 <paramref name="keySelector" />。
              </typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。
            </returns>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>
              表示键的集合，其中每个键映射到一个或多个值。
            </summary>
      <typeparam name="TKey">
                中的键的类型 <see cref="T:System.Linq.Lookup`2" />。
              </typeparam>
      <typeparam name="TElement">
                每个元素的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的值 <see cref="T:System.Linq.Lookup`2" />。
              </typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>
              适用于每个键和其相关的值的转换函数，并返回结果。
            </summary>
      <param name="resultSelector">
                用于项目的结果值从每个键和其相关的值的函数。
              </param>
      <typeparam name="TResult">
                生成的结果值的类型 <paramref name="resultSelector" />。
              </typeparam>
      <returns>
              一个集合，包含一个值并在每个键/值集合对 <see cref="T:System.Linq.Lookup`2" />。
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>
              确定指定的键是否在 <see cref="T:System.Linq.Lookup`2" />。
            </summary>
      <param name="key">
                要查找中的键 <see cref="T:System.Linq.Lookup`2" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="key" /> 处于 <see cref="T:System.Linq.Lookup`2" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>
              获取对集合中的键/值数 <see cref="T:System.Linq.Lookup`2" />。
            </summary>
      <returns>
              中的键/值集合对的数目 <see cref="T:System.Linq.Lookup`2" />。
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>
              返回循环访问的泛型枚举器 <see cref="T:System.Linq.Lookup`2" />。
            </summary>
      <returns>
              用于 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。
            </returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>
              获取由指定的键编制索引的值的集合。
            </summary>
      <param name="key">
                所需值集合的键。
              </param>
      <returns>
              由指定键编制索引的值的集合。
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。
               此类不能被继承。
            </summary>
      <returns>
              用于 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。
            </returns>
    </member>
  </members>
</doc>