<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
      <summary>
              表示非对称算法的所有实现都必须从中继承的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  派生类的实现无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Clear">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 类使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create">
      <summary>
              创建用于执行非对称算法的默认加密对象。
            </summary>
      <returns>
              新的 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 实例，除非已使用 &lt;cryptoClass&gt; 元素更改默认设置。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)">
      <summary>
              创建非对称算法的指定实现的实例。
            </summary>
      <param name="algName">
                要使用的非对称算法实现。
                 下表显示 <paramref name="algName" /> 参数的有效值以及它们映射到的算法。
              
                        参数值
                      
                        Implements 
                      
                        System.Security.Cryptography.AsymmetricAlgorithm
                      
                        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />
                      
                        RSA
                      
                        <see cref="T:System.Security.Cryptography.RSA" />
                      
                        System.Security.Cryptography.RSA
                      
                        <see cref="T:System.Security.Cryptography.RSA" />
                      
                        DSA
                      
                        <see cref="T:System.Security.Cryptography.DSA" />
                      
                        System.Security.Cryptography.DSA
                      
                        <see cref="T:System.Security.Cryptography.DSA" />
                      
                        ECDsa
                      
                        <see cref="T:System.Security.Cryptography.ECDsa" />
                      
                        ECDsaCng
                      
                        <see cref="T:System.Security.Cryptography.ECDsaCng" />
                      
                        System.Security.Cryptography.ECDsaCng
                      
                        <see cref="T:System.Security.Cryptography.ECDsaCng" />
                      
                        ECDH
                      
                        <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
                      
                        ECDiffieHellman
                      
                        <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
                      
                        ECDiffieHellmanCng
                      
                        <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
                      
                        System.Security.Cryptography.ECDiffieHellmanCng
                      
                        <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /></param>
      <returns>
              所指定的非对称算法实现的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)">
      <summary>
              当在派生类中重写时，从 XML 字符串重新构造 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象。
               否则，将引发 <see cref="T:System.NotImplementedException" />。
            </summary>
      <param name="xmlString">
                用于重新构造 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象的 XML 字符串。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm">
      <summary>
              当在派生类中重写时，请获取密钥交换算法的名称。
               否则，将引发 <see cref="T:System.NotImplementedException" />。
            </summary>
      <returns>
              密钥交换算法的名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
      <summary>
              获取或设置非对称算法所用密钥模块的大小（以位为单位）。
            </summary>
      <returns>
              非对称算法所用密钥模块的大小（以位为单位）。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥模块大小无效。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue">
      <summary>
              表示非对称算法所用密钥模块的大小（以位为单位）。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
      <summary>
              获取非对称算法支持的密钥大小。
            </summary>
      <returns>
              一个数组，它包含非对称算法支持的密钥大小。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue">
      <summary>
              指定非对称算法支持的密钥大小。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm">
      <summary>
              当在派生类中实现时，请获取签名算法的名称。
               否则，将始终引发 <see cref="T:System.NotImplementedException" />。
            </summary>
      <returns>
              签名算法的名称。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)">
      <summary>
              当在派生类中重写时，创建并返回当前 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象的 XML 字符串表示形式。
               否则，将引发 <see cref="T:System.NotImplementedException" />。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              当前 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象的 XML 字符串编码。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.CipherMode">
      <summary>
              指定要用于加密的块密码模式。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CBC">
      <summary>
              密码块链 (<see langword="CBC" />) 模式引入了反馈。
               每个纯文本块在加密之前，它与结合使用上一个块的密码文本按位异或运算。
               这可确保，即使纯文本包含很多相同的块，它们将每个加密到一个不同的密码文本块。
               初始化向量结合了第一个纯文本块按位异或运算之前加密块。
               如果出错的密码文本块的一个位，则也将出错相应的纯文本块。
               此外，与原始重整位，相同的位置中的后续块中有点也将出错。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CFB">
      <summary>
              密码反馈 (<see langword="CFB" />) 模式下少量递增的纯文本处理成密码文本，而不是一次处理整个块。
               此模式为部分使用一个块的长度并被划分的移位寄存器。
               例如，如果块大小是 8 个字节，并且一次处理一个字节移位寄存器划分为 8 个部分。
               如果有点密码文本中有出错，一个纯文本位出错并且移位寄存器已损坏。
               这会导致正在改变直到外移位寄存器位移坏的位的下一步的几个纯文本增量。
               默认的反馈大小可能会因算法，但通常是 8 位或块大小的比特数。
               您可以通过使用修改的反馈比特数 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> 属性。
               支持 CFB 的算法使用此属性来设置反馈。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CTS">
      <summary>
              密码文本窃取 (<see langword="CTS" />) 模式下处理任何长度的纯文本和生成密钥长度与纯文本长度匹配。
               在此模式下的行为类似 <see langword="CBC" /> 所有模式，但最后两个纯文本块。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.ECB">
      <summary>
              电子密码本 (<see langword="ECB" />) 模式分别加密每个块。
               任何纯文本块相同并且在同一消息，或位于不同的消息加密使用相同的密钥，将转换成相同的密码文本块。
              重要事项︰ 不建议使用此模式，因为它要打开多个安全隐患的门。
               如果要进行加密的纯文本包含大量重复，则适用于一次逐块破解的密码文本。
               还有可能能够使用块分析来确定加密密钥。
               此外，活动的攻击者可以替换并交换个别的块，如果没有检测，允许块，以便能够保存并插入不检测其他点上的流。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.OFB">
      <summary>
              输出反馈 (<see langword="OFB" />) 模式下少量递增的纯文本处理成密码文本，而不是一次处理整个块。
               这种模式十分类似于 <see langword="CFB" />; 只有两种模式之间的区别是 shift 注册的方式进行填充。
               如果有点密码文本中有出错，纯文本的对应位也将出错。
               但是，如果有密码文本的多余或者缺失位，纯文本也将出错从该点上。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>The exception that is thrown when an error occurs during a cryptographic operation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException"></see> class with default properties.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException"></see> class with the specified HRESULT error code.</summary>
      <param name="hr">The HRESULT error code.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException"></see> class with a specified error message in the specified format.</summary>
      <param name="format">The format used to output the error message.</param>
      <param name="insert">The error message that explains the reason for the exception.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
      <summary>
              当加密操作中出现意外操作时引发的异常。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor">
      <summary>
              使用默认属性初始化 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 类的新实例。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 类，具有指定的错误消息中指定的格式。
            </summary>
      <param name="format">
                用于输出的错误消息的格式。
              </param>
      <param name="insert">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>
              定义将数据流链接到加密转换的流。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>
              用目标数据流、要使用的转换和流的模式初始化 <see cref="T:System.Security.Cryptography.CryptoStream" /> 类的新实例。
            </summary>
      <param name="stream">
                对其执行加密转换的流。
              </param>
      <param name="transform">
                要对流执行的加密转换。
              </param>
      <param name="mode">
        <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 值之一。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可读。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不是可写的。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.CryptoStream" /> 类的新实例。
            </summary>
      <param name="stream">
                对其执行加密转换的流。
              </param>
      <param name="transform">
                要对流执行的加密转换。
              </param>
      <param name="mode">
                流的模式。
              </param>
      <param name="leaveOpen">
                若要在释放 <see cref="T:System.Security.Cryptography.CryptoStream" /> 对象时不关闭基础流，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可读。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可写。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>
              获取一个值，该值指示当前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 是否可读。
            </summary>
      <returns>
              如果当前流可读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>
              获取一个值，该值指示你是否可以在当前 <see cref="T:System.Security.Cryptography.CryptoStream" /> 中搜索。
            </summary>
      <returns>
              总是为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>
              获取一个值，该值指示当前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 是否可写。
            </summary>
      <returns>
              如果当前流可写，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
      <summary>
              释放由 <see cref="T:System.Security.Cryptography.CryptoStream" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Security.Cryptography.CryptoStream" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>
              清理当前流的所有缓冲区，并使所有缓冲数据写入基础设备。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>
              异步清理当前流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步刷新操作的任务。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>
              用缓冲区的当前状态更新基础数据源或存储库，随后清除缓冲区。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥已损坏，这可能导致写入流的填充无效。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前流是不可写的。
                
                  - 或 - 
                
                  已转换最终块。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock">
      <summary>
              获取一个值，该值指示最终缓冲区块是否已写入基础流。
            </summary>
      <returns>
              如果已刷新最终块，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>
              获取用字节表示的流长度。
            </summary>
      <returns>
              不支持此属性。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此属性。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>
              获取或设置当前流中的位置。
            </summary>
      <returns>
              不支持此属性。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此属性。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              从当前流读取字节序列，并将流中的位置向前移动读取的字节数。
            </summary>
      <param name="buffer">
                字节数组。
                 从当前流中读取最多的 <paramref name="count" /> 个字节，并将它们存储在 <paramref name="buffer" /> 中。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始存储从当前流中读取的数据。
              </param>
      <param name="count">
                要从当前流中最多读取的字节数。
              </param>
      <returns>
              读入缓冲区中的总字节数。
               如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数；如果已到达流的末尾，则为零。
            </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 与当前关联 <see cref="T:System.Security.Cryptography.CryptoStream" /> 对象不匹配的基础流。
                    例如，将引发此异常，在使用时 <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read" /> 具有基础流是只写的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 参数小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  参数的 <paramref name="count" /> 和 <paramref name="offset" /> 参数的长度超过缓冲区的长度。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              从当前流异步读取字节序列，将此流中的位置提升读取的字节数，并监视取消请求数。
            </summary>
      <param name="buffer">
                数据写入的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。
              </param>
      <param name="count">
                最多读取的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步读取操作的任务。
               目标对象的 <paramref name="TResult" /> 参数的值包含多次读入缓冲区总字节数。
               如果当前可用字节数少于所请求的字节数，则该结果值可能小于所请求的字节数，或者如果已到达流的末尾时，则为 0（零）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  之前的读取操作当前正在使用流。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadByte">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
              设置当前流中的位置。
            </summary>
      <param name="offset">
                相对于 <paramref name="origin" /> 参数的字节偏移量。
              </param>
      <param name="origin">
                一个 <see cref="T:System.IO.SeekOrigin" /> 对象，该对象指示用于获得新位置的参考点。
              </param>
      <returns>
              不支持此方法。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>
              设置当前流的长度。
            </summary>
      <param name="value">
                所需的当前流的长度（以字节表示）。
              </param>
      <exception cref="T:System.NotSupportedException">
                  此属性存在只是为了支持继承 <see cref="T:System.IO.Stream" />, ，且无法使用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将一字节序列写入当前的 <see cref="T:System.Security.Cryptography.CryptoStream" />，并将通过写入的字节数提前该流的当前位置。
            </summary>
      <param name="buffer">
                字节数组。
                 此方法将 <paramref name="count" /> 个字节从 <paramref name="buffer" /> 复制到当前流。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此偏移量开始将字节复制到当前流。
              </param>
      <param name="count">
                要写入当前流的字节数。
              </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.Cryptography.CryptoStreamMode" />与当前关联<see cref="T:System.Security.Cryptography.CryptoStream" />对象与基础流不匹配。
                    例如，将引发此异常，使用时<see cref="F:System.Security.Cryptography.CryptoStreamMode.Write" />与具有只读属性的基础流。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于零。
                
                  - 或 - 
                
                  <paramref name="count" />参数小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  总和<paramref name="count" />和<paramref name="offset" />参数的长度超过缓冲区的长度。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              将字节序列异步写入当前流，将该流的当前位置向前移动写入的字节数，并监视取消请求。
            </summary>
      <param name="buffer">
                从中写入数据的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节写入到该流。
              </param>
      <param name="count">
                最多写入的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  已释放流。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  流正在由前一次写操作使用。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)">
      <param name="value">
      </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>
              指定加密流的模式。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>
              对加密流的读取访问权限。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>
              对加密流写入访问权限。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>
              表示所有加密哈希算法实现均必须从中派生的基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
      <summary>
              获取一个值，该值指示是否可重复使用当前转换。
            </summary>
      <returns>
              总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
      <summary>
              当在派生类中重写时，获取一个值，该值指示是否可以转换多个块。
            </summary>
      <returns>
              如果可以转换多个块，则为 <see langword="true" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>
              计算指定字节数组的哈希值。
            </summary>
      <param name="buffer">
                要计算其哈希代码的输入。
              </param>
      <returns>
              计算所得的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  对象已被释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>
              计算指定 <see cref="T:System.IO.Stream" /> 对象的哈希值。
            </summary>
      <param name="inputStream">
                要计算其哈希代码的输入。
              </param>
      <returns>
              计算所得的哈希代码。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  对象已被释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>
              计算指定字节数组的指定区域的哈希值。
            </summary>
      <param name="buffer">
                要计算其哈希代码的输入。
              </param>
      <param name="offset">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="count">
                数组中用作数据的字节数。
              </param>
      <returns>
              计算所得的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 是一个无效值。
                
                  - 或 -
                
                  <paramref name="buffer" /> 长度无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 超出范围。
                   此参数需要非负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  对象已释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create">
      <summary>
              创建哈希算法的默认实现的实例。
            </summary>
      <returns>
              一个新 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 实例，除非已使用更改默认设置。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create(System.String)">
      <summary>
              创建哈希算法的指定实现的实例。
            </summary>
      <param name="hashName">
                要使用的哈希算法的实现。
                 下表显示 <paramref name="hashName" /> 参数的有效值以及它们映射到的算法。
              
                        参数值
                      
                         Implements 
                      
                        SHA 
                      
                        <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />
                      
                        SHA1 
                      
                        <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />
                      
                        System.Security.Cryptography.SHA1 
                      
                        <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />
                      
                        System.Security.Cryptography.HashAlgorithm 
                      
                        <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />
                      
                        MD5 
                      
                        <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" />
                      
                        System.Security.Cryptography.MD5 
                      
                        <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" />
                      
                        SHA256 
                      
                        <see cref="T:System.Security.Cryptography.SHA256Managed" />
                      
                        SHA 256 
                      
                        <see cref="T:System.Security.Cryptography.SHA256Managed" />
                      
                        System.Security.Cryptography.SHA256 
                      
                        <see cref="T:System.Security.Cryptography.SHA256Managed" />
                      
                        SHA384 
                      
                        <see cref="T:System.Security.Cryptography.SHA384Managed" />
                      
                        SHA-384 
                      
                        <see cref="T:System.Security.Cryptography.SHA384Managed" />
                      
                        System.Security.Cryptography.SHA384 
                      
                        <see cref="T:System.Security.Cryptography.SHA384Managed" />
                      
                        SHA512 
                      
                        <see cref="T:System.Security.Cryptography.SHA512Managed" />
                      
                        SHA 512 个 
                      
                        <see cref="T:System.Security.Cryptography.SHA512Managed" />
                      
                        System.Security.Cryptography.SHA512 
                      
                        <see cref="T:System.Security.Cryptography.SHA512Managed" /></param>
      <returns>
              指定哈希算法的新实例，如果 <paramref name="hashName" /> 不是有效哈希算法，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
      <summary>
              获取计算所得的哈希代码的值。
            </summary>
      <returns>
              计算所得的哈希代码的当前值。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  对象已释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写时，将写入对象的数据路由到哈希算法以计算哈希值。
            </summary>
      <param name="array">
                要计算其哈希代码的输入。
              </param>
      <param name="ibStart">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="cbSize">
                字节数组中用作数据的字节数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>
              当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
      <returns>
              计算所得的哈希代码。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>
              获取计算所得的哈希代码的大小（以位为单位）。
            </summary>
      <returns>
              计算所得的哈希代码的大小（以位为单位）。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
      <summary>
              表示计算所得的哈希代码的大小（以位为单位）。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
      <summary>
              表示计算所得的哈希代码的值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类的实现。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
      <summary>
              当在派生类中重写时，获取输入块的大小。
            </summary>
      <returns>
              输入块的大小。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
      <summary>
              当在派生类中重写时，获取输出块的大小。
            </summary>
      <returns>
              输出块的大小。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
      <summary>
              表示哈希计算的状态。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
              计算输入字节数组指定区域的哈希值，并将输入字节数组指定区域复制到输出字节数组的指定区域。
            </summary>
      <param name="inputBuffer">
                要计算其哈希代码的输入。
              </param>
      <param name="inputOffset">
                输入字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="inputCount">
                输入字节数组中用作数据的字节数。
              </param>
      <param name="outputBuffer">
                用于计算哈希代码的部分输入数组的副本。
              </param>
      <param name="outputOffset">
                输入字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <returns>
              写入的字节数。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> 使用了无效值。
                
                  - 或 -
                
                  <paramref name="inputBuffer" /> 有一个无效的长度。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> 超出范围。
                   此参数需要非负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  对象已释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
              计算指定字节数组的指定区域的哈希值。
            </summary>
      <param name="inputBuffer">
                要计算其哈希代码的输入。
              </param>
      <param name="inputOffset">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="inputCount">
                字节数组中用作数据的字节数。
              </param>
      <returns>
              一个数组，该数组是输入中计算了哈希值的部分的副本。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> 使用了无效值。
                
                  - 或 -
                
                  <paramref name="inputBuffer" /> 具有无效的偏移量的长度。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> 超出范围。
                   此参数需要非负数。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  对象已释放。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithmName">
      <summary>
              指定加密哈希算法的名称。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)">
      <summary>
              初始化具有自定义名称的 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 结构的新实例。
            </summary>
      <param name="name">
                自定义的哈希算法名称。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)">
      <summary>
              返回一个指示当前实例是否与指定对象相等的值。
            </summary>
      <param name="obj">
                要与当前实例进行比较的对象。
              </param>
      <returns>
              如果 <paramref name="obj" /> 是 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 对象且它的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性等于当前实例的属性，则为 <see langword="true" />。
               比较是有序的且区分大小写。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 实例是否相等。
            </summary>
      <param name="other">
                要与当前实例进行比较的对象。
              </param>
      <returns>
              如果 <paramref name="other" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性等于当前实例的属性，则为 <see langword="true" />。
               比较是有序的且区分大小写。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.GetHashCode">
      <summary>
              返回当前实例的哈希代码。
            </summary>
      <returns>
              为当前实例的哈希代码；如果未向 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 构造函数硅酮任何 <paramref name="name" /> 值，则为 0。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.MD5">
      <summary>
              获取表示“MD5”的哈希算法名称。
            </summary>
      <returns>
              表示“MD5”的哈希算法名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.Name">
      <summary>
              获取算法名称的基础字符串表示形式。
            </summary>
      <returns>
              为算法名称的字符串表示形式；如果无可用的哈希算法，则为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              确定两个指定的 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 对象是否相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 具有相同的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              确定两个指定的 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 对象是否不相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <paramref name="left" /> 和 <paramref name="right" /> 均不具有同一 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA1">
      <summary>
              获取表示“SHA1”的哈希算法名称。
            </summary>
      <returns>
              表示“SHA1”的哈希算法名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA256">
      <summary>
              获取表示“SHA256”的哈希算法名称。
            </summary>
      <returns>
              表示“SHA256”的哈希算法名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA384">
      <summary>
              获取表示“SHA384”的哈希算法名称。
            </summary>
      <returns>
              表示“SHA384”的哈希算法名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA512">
      <summary>
              获取表示“SHA512”的哈希算法名称。
            </summary>
      <returns>
              表示“SHA512”的哈希算法名称。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.ToString">
      <summary>
              返回当前 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 实例的字符串表示形式。
            </summary>
      <returns>
              当前 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 实例的字符串表示形式。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
      <summary>
              表示基于哈希的消息验证代码 (HMAC) 的所有实现必须从中派生的抽象类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.HMAC" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.BlockSizeValue">
      <summary>
              获取或设置哈希值中使用的块大小。
            </summary>
      <returns>
              哈希值中使用的块大小。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Create">
      <summary>
              创建基于哈希的消息验证代码 (HMAC) 默认实现的实例。
            </summary>
      <returns>
              新的 SHA-1 实例，除非已使用 &lt;cryptoClass&gt; 元素更改默认设置。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Create(System.String)">
      <summary>
              创建基于哈希的消息验证代码 (HMAC) 指定实现的实例。
            </summary>
      <param name="algorithmName">
                要使用的 HMAC 实现。
                 下表显示 <paramref name="algorithmName" /> 参数的有效值以及它们映射到的算法。
              
                        参数值
                      
                        Implements 
                      
                        System.Security.Cryptography.HMAC
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        System.Security.Cryptography.KeyedHashAlgorithm
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        HMACMD5
                      
                        <see cref="T:System.Security.Cryptography.HMACMD5" />
                      
                        System.Security.Cryptography.HMACMD5
                      
                        <see cref="T:System.Security.Cryptography.HMACMD5" />
                      
                        HMACRIPEMD160
                      
                        <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />
                      
                        System.Security.Cryptography.HMACRIPEMD160
                      
                        <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />
                      
                        HMACSHA1
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        System.Security.Cryptography.HMACSHA1
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        HMACSHA256
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA256" />
                      
                        System.Security.Cryptography.HMACSHA256
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA256" />
                      
                        HMACSHA384
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA384" />
                      
                        System.Security.Cryptography.HMACSHA384
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA384" />
                      
                        HMACSHA512
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA512" />
                      
                        System.Security.Cryptography.HMACSHA512
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA512" />
                      
                        MACTripleDES
                      
                        <see cref="T:System.Security.Cryptography.MACTripleDES" />
                      
                        System.Security.Cryptography.MACTripleDES
                      
                        <see cref="T:System.Security.Cryptography.MACTripleDES" /></param>
      <returns>
              指定的 HMAC 实现的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
      <summary>
              密钥更改合法时释放由 <see cref="T:System.Security.Cryptography.HMAC" /> 类使用的非托管资源，并可选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写时，将写入对象的数据路由给默认 <see cref="T:System.Security.Cryptography.HMAC" /> 哈希算法以计算哈希值。
            </summary>
      <param name="rgb">
                输入数据。
              </param>
      <param name="ib">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="cb">
                数组中用作数据的字节数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
      <summary>
              当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
      <returns>
              字节数组中计算所得的哈希代码。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
      <summary>
              获取或设置用于哈希计算的哈希算法的名称。
            </summary>
      <returns>
              哈希算法的名称。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  不能更改当前的哈希算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
      <summary>
              初始化默认 <see cref="T:System.Security.Cryptography.HMAC" /> 实现的实例。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
      <summary>
              获取或设置用于哈希算法的密钥。
            </summary>
      <returns>
              用于哈希算法的密钥。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  尝试更改 <see cref="P:System.Security.Cryptography.HMAC.Key" /> 哈希算法已开始后的属性。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>
              定义加密转换的基本操作。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>
              获取一个值，该值指示是否可重复使用当前转换。
            </summary>
      <returns>
        <see langword="true" /> 如果可以重用当前的转换;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>
              获取一个值，该值指示是否可以转换多个块。
            </summary>
      <returns>
              如果可以转换多个块，则为 <see langword="true" />；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>
              获取输入块大小。
            </summary>
      <returns>
              输入数据块的大小（以字节为单位）。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>
              获取输出块大小。
            </summary>
      <returns>
              输出数据块的大小（以字节为单位）。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
              转换输入的字节数组的指定的区域，并将转换结果复制到输出字节数组的指定区域。
            </summary>
      <param name="inputBuffer">
                为其计算转换输入。
              </param>
      <param name="inputOffset">
                输入字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="inputCount">
                输入字节数组中用作数据的字节数。
              </param>
      <param name="outputBuffer">
                要向其写入转换输出。
              </param>
      <param name="outputOffset">
                输入字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <returns>
              写入的字节数。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
              转换指定的字节数组的指定的区域。
            </summary>
      <param name="inputBuffer">
                为其计算转换输入。
              </param>
      <param name="inputOffset">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="inputCount">
                字节数组中用作数据的字节数。
              </param>
      <returns>
              计算得到的转换。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>
              显示所有加密哈希算法实现均必须从中派生的抽象类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create">
      <summary>
              创建加密哈希算法的默认实现的实例。
            </summary>
      <returns>
              新 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 实例，除非已更改默认设置。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)">
      <summary>
              创建加密哈希算法的指定实现的实例。
            </summary>
      <param name="algName">
                要使用的加密哈希算法实现。
                 下表显示 <paramref name="algName" /> 参数的有效值以及它们映射到的算法。
              
                        参数值
                      
                        Implements 
                      
                        System.Security.Cryptography.HMAC
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        System.Security.Cryptography.KeyedHashAlgorithm
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        HMACMD5
                      
                        <see cref="T:System.Security.Cryptography.HMACMD5" />
                      
                        System.Security.Cryptography.HMACMD5
                      
                        <see cref="T:System.Security.Cryptography.HMACMD5" />
                      
                        HMACRIPEMD160
                      
                        <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />
                      
                        System.Security.Cryptography.HMACRIPEMD160
                      
                        <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />
                      
                        HMACSHA1
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        System.Security.Cryptography.HMACSHA1
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA1" />
                      
                        HMACSHA256
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA256" />
                      
                        System.Security.Cryptography.HMACSHA256
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA256" />
                      
                        HMACSHA384
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA384" />
                      
                        System.Security.Cryptography.HMACSHA384
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA384" />
                      
                        HMACSHA512
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA512" />
                      
                        System.Security.Cryptography.HMACSHA512
                      
                        <see cref="T:System.Security.Cryptography.HMACSHA512" />
                      
                        MACTripleDES
                      
                        <see cref="T:System.Security.Cryptography.MACTripleDES" />
                      
                        System.Security.Cryptography.MACTripleDES
                      
                        <see cref="T:System.Security.Cryptography.MACTripleDES" /></param>
      <returns>
              指定的加密哈希算法的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>
              获取或设置用于哈希算法的密钥。
            </summary>
      <returns>
              用于哈希算法的密钥。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  尝试更改 <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key" /> 哈希算法已开始后的属性。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
      <summary>
              用于哈希算法的密钥。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>
              确定对称加密算法的一组有效密钥大小。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
              使用指定的密钥值初始化 <see cref="T:System.Security.Cryptography.KeySizes" /> 类的新实例。
            </summary>
      <param name="minSize">
                有效密钥的最小大小。
              </param>
      <param name="maxSize">
                有效密钥的最大大小。
              </param>
      <param name="skipSize">
                有效密钥大小之间的范围。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>
              以位为单位指定最大密钥大小。
            </summary>
      <returns>
              最大密钥大小以位为单位。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>
              以位为单位指定最小密钥大小。
            </summary>
      <returns>
              最小密钥大小以位为单位。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>
              指定以位为单位的有效密钥大小之间的间隔。
            </summary>
      <returns>
              以位为单位的有效密钥大小之间的间隔。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.PaddingMode">
      <summary>
              指定在消息数据块短于加密操作所需的完整字节数时要应用的填充类型。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.ANSIX923">
      <summary>
              ANSIX923 填充字符串包含的一个填充了零长度的字节序列。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.ISO10126">
      <summary>
              ISO10126 填充字符串包含的长度的随机数据。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.None">
      <summary>
              不填充是完成的。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.PKCS7">
      <summary>
              PKCS #7 填充字符串包含一个字节序列的其中每个等同于添加填充字节的总数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.Zeros">
      <summary>
              填充字符串由设置为零的字节组成。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>
              表示所有对称算法的实现都必须从中继承的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  类派生自对称算法的实现是无效的。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>
              获取或设置加密操作的块大小（以位为单位）。
            </summary>
      <returns>
              块大小（以位为单位）。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  块大小无效。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
      <summary>
              表示加密操作的块大小（以位为单位）。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 类使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create">
      <summary>
              创建用于执行对称算法的默认加密对象。
            </summary>
      <returns>
              用于执行对称算法的默认加密对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)">
      <summary>
              创建用于执行对称算法的指定加密对象。
            </summary>
      <param name="algName">
                要使用的 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 类的特定实现的名称。
              </param>
      <returns>
              一个加密对象，用于执行对称算法。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>
              用当前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 创建对称解密器对象。
            </summary>
      <returns>
              对称解密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              当在派生类中重写时，用指定的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 创建对称解密器对象。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称解密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>
              用当前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 创建对称加密器对象。
            </summary>
      <returns>
              对称加密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              当在派生类中重写时，用指定的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 创建对称加密器对象。
            </summary>
      <param name="rgbKey">
                用于对称算法的密钥。
              </param>
      <param name="rgbIV">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称加密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize">
      <summary>
              获取或设置加密操作的反馈大小（以位为单位）。
            </summary>
      <returns>
              反馈大小（以位为单位）。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  反馈大小大于块大小。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue">
      <summary>
              表示加密操作的反馈大小（以位为单位）。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>
              当在派生类中重写时，生成用于该算法的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>
              当在派生类中重写时，生成用于该算法的随机密钥 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>
              获取或设置对称算法的初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <returns>
              初始化向量。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试设置的初始化向量为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  尝试设置为无效大小的初始化向量。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
      <summary>
              表示对称算法的初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>
              获取或设置对称算法的密钥。
            </summary>
      <returns>
              用于对称算法的密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将密钥设置为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥大小无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>
              获取或设置对称算法所用密钥的大小（以位为单位）。
            </summary>
      <returns>
              对称算法所用密钥的大小（以位为单位）。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥大小不是有效的。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
      <summary>
              表示对称算法使用的密钥的大小（以位为单位）。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
      <summary>
              表示对称算法的密钥。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>
              获取对称算法支持的块大小（以位为单位）。
            </summary>
      <returns>
              一个数组，包含此算法支持的块大小。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
      <summary>
              指定对称算法支持的块大小（以位为单位）。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>
              获取对称算法支持的密钥大小（以位为单位）。
            </summary>
      <returns>
              一个数组，包含此算法支持的密钥大小。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
      <summary>
              指定对称算法支持的密钥大小（以位为单位）。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Mode">
      <summary>
              获取或设置对称算法的运算模式。
            </summary>
      <returns>
              对称算法的运算模式。
               默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密码模式不是之一 <see cref="T:System.Security.Cryptography.CipherMode" /> 值。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue">
      <summary>
              表示对称算法中使用的密码模式。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Padding">
      <summary>
              获取或设置对称算法中使用的填充模式。
            </summary>
      <returns>
              对称算法中使用的填充模式。
               默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  填充模式不是之一 <see cref="T:System.Security.Cryptography.PaddingMode" /> 值。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue">
      <summary>
              表示对称算法中使用的填充模式。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
      <summary>
              确定指定的密钥大小对当前算法是否有效。
            </summary>
      <param name="bitLength">
                用于检查有效密钥大小的长度（以位为单位）。
              </param>
      <returns>
              如果指定的密钥大小对当前算法有效，则为 <see langword="true" />；否则，为 <see langword="false" />。
            </returns>
    </member>
  </members>
</doc>