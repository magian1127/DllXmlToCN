<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>
              表示来自单个成功子表达式捕获的结果。
            </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>
              在其中找到被捕获子串的第一个字符的原始字符串中的位置。
            </summary>
      <returns>
              从零开始中的起始位置的原始字符串在其中找到捕获的子字符串。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>
              获取捕获的子字符串的长度。
            </summary>
      <returns>
              捕获的子字符串的长度。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>
              通过调用从输入字符串中检索捕获的子字符串 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 属性。
            </summary>
      <returns>
              通过匹配捕获子字符串。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>
              获取捕获的子字符串的输入字符串中。
            </summary>
      <returns>
              通过匹配捕获的子字符串。
            </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>
              表示单个捕获组执行的捕获集。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将集合的所有元素复制到给定数组中（从给定索引处开始）。
            </summary>
      <param name="array">
                要将集合复制到其中的数组。
              </param>
      <param name="arrayIndex">
                目标数组中的位置将开始复制的位置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array " />是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 超出界限 <paramref name="array" />。
                
                  - 或 -
                
                  <paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> 超出界限 <paramref name="array" />。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>
              获取组捕获的子字符串的数目。
            </summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中的项数。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>
              提供一个循环访问集合的枚举器。
            </summary>
      <returns>
              一个对象，包含所有 <see cref="T:System.Text.RegularExpressions.Capture" /> 中的对象 <see cref="T:System.Text.RegularExpressions.CaptureCollection" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>
              获取一个值，指示集合是否为只读集合。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>
              获取一个值，该值指示对集合的访问是否同步（线程安全）。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>
              获取该集合的单个成员。
            </summary>
      <param name="i">
                捕获集合中的索引。
              </param>
      <returns>
              位置处捕获的子字符串 <paramref name="i" /> 集合中。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0 或大于 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <param name="item">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear">
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <param name="index">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#IsSynchronized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#ICollection#SyncRoot">
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear">
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index">
      </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>
              表示来自单个捕获组的结果。
            </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>
              获取由捕获组，顺序最内层的最左侧第一个匹配的所有捕获的集合 (或如果使用修改正则表达式的最内层的最右边第一个订单 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项)。
               该集合可以有零个或多个项。
            </summary>
      <returns>
              组匹配的子字符串的集合。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>
              返回由当前实例表示的捕获组的名称。
            </summary>
      <returns>
              由当前实例表示的捕获组的名称。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>
              获取一个值，该值指示匹配是否成功。
            </summary>
      <returns>
        <see langword="true" /> 如果匹配成功，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>
              返回 <see langword="Group" /> 等效于提供的一个对象，该对象，则可以安全多个线程间共享。
            </summary>
      <param name="inner">
                输入 <see cref="T:System.Text.RegularExpressions.Group" /> 对象。
              </param>
      <returns>
              正则表达式 <see langword="Group" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>
              返回一次匹配中捕获的组的集。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将集合的所有元素复制到给定数组中（从给定索引处开始）。
            </summary>
      <param name="array">
                要将集合复制到其中的数组。
              </param>
      <param name="arrayIndex">
                目标数组中开始复制的位置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 超出界限 <paramref name="array" />。
                
                  - 或 -
                
                  <paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 超出界限 <paramref name="array" />。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>
              返回集合中的组数。
            </summary>
      <returns>
              集合中的组数。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>
              提供一个循环访问集合的枚举器。
            </summary>
      <returns>
              一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 对象。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>
              获取一个值，指示集合是否为只读集合。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问（线程安全）。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>
              允许通过整数索引访问集合成员。
            </summary>
      <param name="groupnum">
                要检索的集合成员的索引（从零开始）。
              </param>
      <returns>
              由 <paramref name="groupnum" /> 指定的集合的成员。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>
              允许通过字符串索引访问集合成员。
            </summary>
      <param name="groupname">
                捕获组的名称。
              </param>
      <returns>
              由 <paramref name="groupname" /> 指定的集合的成员。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问的对象。
            </summary>
      <returns>
              要同步的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的副本。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <param name="item">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <param name="index">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot">
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index">
      </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>
              表示单个正则表达式匹配的结果。
            </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>
              获取空组。
               所有失败的匹配都返回此空匹配。
            </summary>
      <returns>
              空匹配。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>
              获取由正则表达式匹配的组的集合。
            </summary>
      <returns>
              由模式匹配的字符组。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>
              从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。
            </summary>
      <returns>
              下一个正则表达式匹配。
            </returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>
              返回对指定替换模式的扩展。
            </summary>
      <param name="replacement">
                要使用的替换模式。
              </param>
      <returns>
        <paramref name="replacement" /> 参数的扩展版本。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  此模式不允许使用扩展。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>
              返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。
            </summary>
      <param name="inner">
                与预期匹配等效的正则表达式匹配。
              </param>
      <returns>
              适合在多个线程间共享的正则表达式匹配。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>
              表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              从给定索引处开始将集合的所有元素复制到给定数组。
            </summary>
      <param name="array">
                要将集合复制到其中的数组。
              </param>
      <param name="arrayIndex">
                数组中开始复制的位置。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维数组。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 超出界限 <paramref name="array" />。
                
                  - 或 -
                
                  <paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 超出界限 <paramref name="array" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>
              获取匹配项的数目。
            </summary>
      <returns>
              匹配项的数目。
            </returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>
              提供一个循环访问集合的枚举器。
            </summary>
      <returns>
              一个对象，包含所有 <see cref="T:System.Text.RegularExpressions.Match" /> 中的对象 <see cref="T:System.Text.RegularExpressions.MatchCollection" />。
            </returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>
              获取一个值，指示集合是否为只读集合。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>
              获取一个值，该值指示对集合的访问是否已同步（线程安全）。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>
              获取该集合的单个成员。
            </summary>
      <param name="i">
                中的指数 <see cref="T:System.Text.RegularExpressions.Match" /> 集合。
              </param>
      <returns>
              位置处捕获的子字符串 <paramref name="i" /> 集合中。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0 或大于或等于 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>
              获取可用于同步对集合的访问的对象。
            </summary>
      <returns>
              可用于同步集合访问的对象。
               此属性始终返回对象本身。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <param name="item">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear">
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <param name="index">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot">
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear">
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index">
      </param>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
              表示期间找到正则表达式匹配每次调用的方法 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作。
            </summary>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 对象，表示单个正则表达式匹配期间 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作。
              </param>
      <returns>
              由表示该方法返回一个字符串 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。
            </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>
              表示不可变的正则表达式。
            
              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
              初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 为指定的正则表达式类。
            </summary>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。
            </summary>
      <param name="info">
                对象，其中包含序列化的模式和 <see cref="T:System.Text.RegularExpressions.RegexOptions" />  信息。
              </param>
      <param name="context">
                此序列化的目标。
                 （未使用此参数；指定 <see langword="null" />。）
              </param>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  该模式， <paramref name="info" /> 包含是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> 包含一个无效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" />  标志。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 为指定的正则表达式，用修改模式的选项。
            </summary>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                修改正则表达式的枚举值的按位组合。
              </param>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含无效的标志。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 为指定的正则表达式，修改模式和一个值，指定多长时间的模式匹配方法的选项的类应进行匹配尝试超时之前。
            </summary>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                修改正则表达式的枚举值的按位组合。
              </param>
      <param name="matchTimeout">
                超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 来指示方法应不会超时。
              </param>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>
              获取或设置已编译的正则表达式的当前静态缓存中的最大项数。
            </summary>
      <returns>
              静态缓存中的最大项数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  集运算中的值小于零。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>
              获取或设置将命名捕获组映射到其索引值的字典。
            </summary>
      <returns>
              将命名捕获组映射到其索引值的字典。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  向设置操作中的 <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> 属性分配的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>
              获取或设置将编号捕获组映射到其索引值的字典。
            </summary>
      <returns>
              将编号捕获组映射到其索引值的字典。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  向设置操作中的 <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> 属性分配的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>
              通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。
               这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。
            </summary>
      <param name="str">
                包含要转换的文本的输入字符串。
              </param>
      <returns>
              由转换为转义形式的元字符组成的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>
              返回正则表达式的捕获组名数组。
            </summary>
      <returns>
              组名的字符串数组。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>
              返回与数组中的组名相对应的捕获组号的数组。
            </summary>
      <returns>
              组号的整数数组。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>
              获取与指定组号相对应的组名。
            </summary>
      <param name="i">
                要转换为相应组名的组号。
              </param>
      <returns>
              包含与指定组号关联的组名的字符串。
               如果没有对应的组名称 <paramref name="i" />, ，该方法返回 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>
              返回与指定组名相对应的组号。
            </summary>
      <param name="name">
                要将转换为相应的组号的组名称。
              </param>
      <returns>
              如果对应于指定的组名，则为-1 的组号 <paramref name="name" /> 不是有效的组名称。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>
              指定模式匹配操作不应超时。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
      <exception cref="T:System.NotSupportedException">
                  已初始化的引用。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>
              操作超时之前在一个模式匹配操作中可以经过的最长时间。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
              该值指示是否在指定的正则表达式 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数指定的输入字符串中找到的匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <returns>
        <see langword="true" /> 如果正则表达式找到匹配项，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>
              该值指示是否在指定的正则表达式 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数从字符串中的指定起始位置开始对指定输入字符串中找到的匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="startat">
                若要开始搜索字符位置。
              </param>
      <returns>
        <see langword="true" /> 如果正则表达式找到匹配项，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>
              指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <returns>
        <see langword="true" /> 如果正则表达式找到匹配项，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              指示所指定的正则表达式是否使用指定的匹配选项在指定的输入字符串中找到了匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <returns>
        <see langword="true" /> 如果正则表达式找到匹配项，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效 <see cref="T:System.Text.RegularExpressions.RegexOptions" />  值。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              指示所指定的正则表达式是否使用指定的匹配选项和超时间隔在指定的输入字符串中找到了匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <param name="matchTimeout">
                超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 来指示方法应不会超时。
              </param>
      <returns>
        <see langword="true" /> 如果正则表达式找到匹配项，则否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <returns>
              一个包含有关匹配的信息的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>
              从指定的起始位置开始，在输入字符串中搜索正则表达式的第一个匹配项，并且仅搜索指定数量的字符。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="beginning">
                输入字符串中从零开始的字符位置，它定义要搜索的最左侧的位置。
              </param>
      <param name="length">
                子字符串中包含在搜索中的字符数。
              </param>
      <returns>
              一个包含有关匹配的信息的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 小于零或大于 <paramref name="input" /> 的长度。
                
                  - 或 -
                
                  <paramref name="length" /> 小于零或大于 <paramref name="input" /> 的长度。
                
                  - 或 -
                
                  <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="–1" /> 表示 <paramref name="input" /> 范围外的某个位置。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              使用指定的匹配选项和超时间隔在输入字符串中搜索指定的正则表达式的第一个匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <param name="matchTimeout">
                超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 来指示方法应不会超时。
              </param>
      <returns>
              一个包含有关匹配的信息的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>
              从输入字符串中的指定起始位置开始，在该字符串中搜索正则表达式的第一个匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="startat">
                开始搜索的字符位置（从零开始）。
              </param>
      <returns>
              一个包含有关匹配的信息的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>
              搜索指定的输入的字符串中指定的正则表达式的第一个匹配项 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <returns>
              一个包含有关匹配的信息的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>
              在指定的输入字符串中搜索指定的正则表达式的第一个匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <returns>
              一个包含有关匹配的信息的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>
              在指定的输入字符串中搜索正则表达式的所有匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <returns>
              一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。
               如果未找到匹配项，则此方法将返回一个空集合对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>
              从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="startat">
                在输入字符串中开始搜索的字符位置。
              </param>
      <returns>
              一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。
               如果未找到匹配项，则此方法将返回一个空集合对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>
              在指定的输入字符串中搜索指定的正则表达式的所有匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <returns>
              一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。
               如果未找到匹配项，则此方法将返回一个空集合对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的按位组合，这些枚举值指定用于匹配的选项。
              </param>
      <returns>
              一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。
               如果未找到匹配项，则此方法将返回一个空集合对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              使用指定的匹配选项和超时间隔在指定的输入字符串中搜索指定的正则表达式的所有匹配项。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的按位组合，这些枚举值指定用于匹配的选项。
              </param>
      <param name="matchTimeout">
                超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 来指示方法应不会超时。
              </param>
      <returns>
              一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。
               如果未找到匹配项，则此方法将返回一个空集合对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>
              获取当前实例的超时间隔。
            </summary>
      <returns>
              在模式匹配操作中之前所经过的最大时间间隔 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 在超时被禁用。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
              获取已传入的选项 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。
            </summary>
      <returns>
              一个或多个成员 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举，它表示选项传递到了 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数 
            </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有子字符串。
               如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="evaluator">
                一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <param name="matchTimeout">
                超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
               如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="replacement">
                替换字符串。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <param name="matchTimeout">
                超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>
              在指定的输入子字符串替换与正则表达式模式匹配与返回的字符串的字符串指定的最大 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="evaluator">
                一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。
              </param>
      <param name="count">
                进行替换的最大次数。
              </param>
      <param name="startat">
                输入字符串中开始执行搜索的字符位置。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。
               如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。
               指定的选项将修改匹配操作。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="evaluator">
                一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。
               如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>
              在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="replacement">
                替换字符串。
              </param>
      <param name="count">
                可进行替换的最大次数。
              </param>
      <param name="startat">
                输入字符串中开始执行搜索的字符位置。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
               指定的选项将修改匹配操作。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="replacement">
                替换字符串。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
              在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="evaluator">
                一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。
               如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>
              在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="replacement">
                替换字符串。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>
              在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="replacement">
                替换字符串。
              </param>
      <param name="count">
                可进行替换的最大次数。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
              在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="evaluator">
                一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。
               如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>
              在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有的字符串。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="replacement">
                替换字符串。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
               如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>
              在指定的输入字符串替换与正则表达式模式匹配与返回的字符串的字符串指定的最大 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。
            </summary>
      <param name="input">
                要搜索匹配项的字符串。
              </param>
      <param name="evaluator">
                一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。
              </param>
      <param name="count">
                进行替换的最大次数。
              </param>
      <returns>
              一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。
               如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>
              获取一个值，该值指示正则表达式是否从右向左进行搜索。
            </summary>
      <returns>
        <see langword="true" /> 如果正则表达式搜索，从右到左;，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>
              在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。
               如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。
            </summary>
      <param name="input">
                要拆分的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <param name="matchTimeout">
                超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 来指示方法应不会超时。
              </param>
      <returns>
              字符串数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                
                  - 或 -
                
                  <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
              在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。
               指定的选项将修改匹配操作。
            </summary>
      <param name="input">
                要拆分的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="options">
                枚举值的一个按位组合，这些枚举值提供匹配选项。
              </param>
      <returns>
              字符串数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>
              输入字符串拆分为指定的最大次数的子字符串，定义正则表达式中指定的位置的数组 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。
               从输入字符串的指定字符位置开始搜索正则表达式模式。
            </summary>
      <param name="input">
                要拆分的字符串。
              </param>
      <param name="count">
                可拆分的最大次数。
              </param>
      <param name="startat">
                输入字符串中将开始搜索的字符位置。
              </param>
      <returns>
              字符串数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>
              输入字符串拆分为指定的最大次数的子字符串，定义正则表达式中指定的位置的数组 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。
            </summary>
      <param name="input">
                要拆分的字符串。
              </param>
      <param name="count">
                可拆分的最大次数。
              </param>
      <returns>
              字符串数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
              将输入的字符串拆分为一个定义在由正则表达式模式中指定的位置的子字符串数组 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。
            </summary>
      <param name="input">
                要拆分的字符串。
              </param>
      <returns>
              字符串数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>
              在由正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。
            </summary>
      <param name="input">
                要拆分的字符串。
              </param>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <returns>
              字符串数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  出现正则表达式分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
                  发生超时。
                   有关超时的详细信息，请参阅“备注”部分。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>
              返回传入的正则表达式模式 <see langword="Regex" /> 构造函数。
            </summary>
      <returns>
        <paramref name="pattern" /> 参数传递到 <see langword="Regex" /> 构造函数。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>
              转换输入字符串中的任何转义字符。
            </summary>
      <param name="str">
                包含要转换的文本的输入字符串。
              </param>
      <returns>
              包含任何转换为非转义形式的转义字符的字符串。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 包括一个无法识别的转义序列。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 选项; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>
              检查超时间隔是否在可接受的范围内。
            </summary>
      <param name="matchTimeout">
                要检查的超时间隔。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象来反序列化当前 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象。
            </summary>
      <param name="si">
                要用序列化信息填充的对象。
              </param>
      <param name="context">
                存储和检索序列化数据的位置。
                 此参数保留以供将来使用。
              </param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>
              正则表达式模式匹配方法的执行时间超出其超时时间间隔时引发的异常。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>
              使用由系统提供的消息初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>
              使用指定的消息字符串初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。
            </summary>
      <param name="message">
                描述异常的字符串。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。
            </summary>
      <param name="info">
                包含序列化数据的对象。
              </param>
      <param name="context">
                包含序列化数据的流。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。
            </summary>
      <param name="message">
                描述异常的字符串。
              </param>
      <param name="inner">
                导致当前异常的异常。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>
              新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类包含有关正则表达式模式、 输入的文本和超时间隔的信息。
            </summary>
      <param name="regexInput">
                超时发生时由正则表达式引擎处理该输入的文本。
              </param>
      <param name="regexPattern">
                超时发生时，正则表达式引擎使用的模式。
              </param>
      <param name="matchTimeout">
                超时间隔。
              </param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>
              获取正则表达式引擎处理超时发生时的输入的文本。
            </summary>
      <returns>
              正则表达式输入的文本。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>
              获取正则表达式匹配的超时间隔。
            </summary>
      <returns>
              超时间隔。
            </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>
              获取超时发生时在匹配的操作中使用的正则表达式模式。
            </summary>
      <returns>
              正则表达式模式中。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象序列化所需的数据 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 对象。
            </summary>
      <param name="si">
                要填充数据的对象。
              </param>
      <param name="context">
                此序列化的目标。
              </param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>
              提供用于设置正则表达式选项的枚举值。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>
              指定将正则表达式编译为程序集。
               这会产生更快的执行速度，但会增加启动时间。
               此值不应分配给 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 属性时调用 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 方法。
               有关详细信息，请参阅中的"已编译的正则表达式"一节 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>
              指定忽略语言中的区域性差异。
               有关详细信息，请参阅中的"比较使用固定区域性"一节 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>
              为表达式启用符合 ECMAScript 的行为。
               可以使用此值仅在结合 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />, ，<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />, ，和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 值。
               该值与其他任何值一起使用均将导致异常。
            
              有关详细信息 <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" /> 选项，请参阅中的"ECMAScript 匹配行为"一节 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>
              指定唯一有效的捕获是显式命名或编号的 (?&lt;name&gt;…) 形式的组。
               这使未命名的圆括号可以充当非捕获组，并且不会使表达式的语法 (?:...) 显得笨拙。
               有关详细信息，请参阅中的"仅显式捕获"一节 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>
              指定不区分大小写的匹配。
               有关详细信息，请参阅中的"不区分大小写匹配"一节 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>
              消除模式中的非转义空白并启用由 # 标记的注释。
               但是，此值不会影响或消除中的空白区域、 数值或标记的开头个人的令牌。
               有关详细信息，请参阅的"忽略空白"部分 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>
              多行模式。
               更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。
               有关详细信息，请参阅中的"多行模式"部分 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>
              指定不设置任何选项。
               有关正则表达式引擎的默认行为的详细信息，请参阅中的"默认选项"部分 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>
              指定搜索从右向左而不是从左向右进行。
               有关详细信息，请参阅中的"从右到左模式"部分 正则表达式选项 主题。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>
              指定单行模式。
               更改点 （.） 的含义
               使其匹配 （而不是除 \n 之外的所有字符） 的每个字符。
               有关详细信息，请参阅中的"单行模式"部分 正则表达式选项 主题。
            </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类是已编译的正则表达式类的基类。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>
              初始化 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="capnum">
                捕获数。
              </param>
      <param name="start">
                捕获的起始位置。
              </param>
      <param name="end">
                捕获的结束位置。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
               确定字符是否在字符类中。
            </summary>
      <param name="ch">
                要测试的字符。
              </param>
      <param name="charClass">
                字符类的内部名称。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="ch" /> 参数是由指定的字符类中 <paramref name="charClass" /> 参数。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="ch">
                一个字符。
              </param>
      <param name="set">
                字符集。
              </param>
      <param name="category">
                字符类别。
              </param>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="i">
                要保存的数字。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="index">
                可能的边界位置。
              </param>
      <param name="startpos">
                起始位置。
              </param>
      <param name="endpos">
                结束位置。
              </param>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="index">
                可能的 ECMA 边界位置。
              </param>
      <param name="startpos">
                起始位置。
              </param>
      <param name="endpos">
                结束位置。
              </param>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="cap">
                捕获数。
              </param>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="cap">
                捕获数。
              </param>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="cap">
                捕获数。
              </param>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
      <returns>
              返回 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="regex">
                正则表达式引擎的实例。
              </param>
      <param name="text">
                要扫描模式匹配的文本。
              </param>
      <param name="textbeg">
        <paramref name="text" /> 中从零开始的起始位置（正则表达式引擎在此位置扫描匹配项）。
              </param>
      <param name="textend">
        <paramref name="text" /> 中从零开始的终点位置（正则表达式引擎在此位置扫描匹配项）。
              </param>
      <param name="textstart">
                此匹配项要扫描的从零开始的起始位置。
              </param>
      <param name="prevlen">
                上一个匹配项中的字符数。
              </param>
      <param name="quick">
                若要在快速模式下搜索匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              匹配项。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="regex">
                正则表达式引擎的实例。
              </param>
      <param name="text">
                要扫描模式匹配的文本。
              </param>
      <param name="textbeg">
        <paramref name="text" /> 中从零开始的起始位置（正则表达式引擎在此位置扫描匹配项）。
              </param>
      <param name="textend">
        <paramref name="text" /> 中从零开始的终点位置（正则表达式引擎在此位置扫描匹配项）。
              </param>
      <param name="textstart">
                此匹配项要扫描的从零开始的起始位置。
              </param>
      <param name="prevlen">
                上一个匹配项中的字符数。
              </param>
      <param name="quick">
                若要在快速模式下搜索匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <param name="timeout">
                超时时间间隔。
              </param>
      <returns>
              匹配项。
            </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
            </summary>
      <param name="capnum">
                捕获数。
              </param>
      <param name="uncapnum">
                保存的捕获数。
              </param>
      <param name="start">
                起始位置。
              </param>
      <param name="end">
                结束位置。
              </param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>
              使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。
            </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>
              创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 的已编译的正则表达式类。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>
              初始化 <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>
              当在派生类中重写创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象以特定的编译正则表达式。
            </summary>
      <returns>
              一个 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象用于执行特定于编译的正则表达式。
            </returns>
    </member>
  </members>
</doc>