<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>
              表示所有非对称密钥交换反格式化程序均从中派生的基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>
              在派生类中重写时，从加密的密钥交换数据中提取机密信息。
            </summary>
      <param name="rgb">
                其中隐藏了机密信息的密钥交换数据。
              </param>
      <returns>
              从密钥交换数据派生的机密信息。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>
              在派生类中重写时，获取或设置非对称密钥交换的参数。
            </summary>
      <returns>
              一个 XML 格式的字符串，它包含非对称密钥交换操作的参数。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              在派生类中重写时，设置要用于解密机密信息的私钥。
            </summary>
      <param name="key">
                用于保存私钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 实现的实例。
              </param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>
              表示从中派生出所有非对称密钥交换格式化程序的基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>
              当在派生类中重写时，请从指定的输入数据创建加密的密钥交换数据。
            </summary>
      <param name="data">
                要在密钥交换中传递的机密信息。
              </param>
      <returns>
              要发送到目标接收方的加密密钥交换数据。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>
              当在派生类中重写时，请从指定的输入数据创建加密的密钥交换数据。
            </summary>
      <param name="data">
                要在密钥交换中传递的机密信息。
              </param>
      <param name="symAlgType">
                当前版本未使用此参数。
              </param>
      <returns>
              要发送到目标接收方的加密密钥交换数据。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>
              在派生类中重写时，获取非对称密钥交换的参数。
            </summary>
      <returns>
              一个 XML 格式的字符串，它包含非对称密钥交换操作的参数。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              当在派生类中重写时，设置要用于加密机密信息的公钥。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 实现的实例。
              </param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>
              表示从中派生非对称签名反格式化程序的所有实现的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>
              当在派生类中重写时，设置要用于验证签名的哈希算法。
            </summary>
      <param name="strName">
                用于验证签名的哈希算法的名称。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              当在派生类中重写时，设置要用于验证签名的公钥。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 的实现的实例。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
              在派生类中重写时，验证指定数据的签名。
            </summary>
      <param name="rgbHash">
                用 <paramref name="rgbSignature" /> 签名的数据。
              </param>
      <param name="rgbSignature">
                要为 <paramref name="rgbHash" /> 验证的签名。
              </param>
      <returns>
              如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>
              通过指定的哈希值验证签名。
            </summary>
      <param name="hash">
                用于验证签名的哈希算法。
              </param>
      <param name="rgbSignature">
                要验证的签名。
              </param>
      <returns>
              如果签名对哈希有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>
              表示从中继承非对称算法的所有实现的基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>
              在派生类中重写时，获取指定数据的签名。
            </summary>
      <param name="rgbHash">
                要签名的数据。
              </param>
      <returns>
              参数 <paramref name="rgbHash" /> 的数字签名。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>
              使用指定哈希值创建签名。
            </summary>
      <param name="hash">
                要用于创建签名的哈希算法。
              </param>
      <returns>
              指定哈希值的签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>
              当在派生类中重写时，设置要用于创建签名的哈希算法。
            </summary>
      <param name="strName">
                用于创建签名的哈希算法的名称。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              当在派生类中重写时，设置要用于创建签名的非对称算法。
            </summary>
      <param name="key">
                要用于创建签名的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 的实现的实例。
              </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>
              访问加密配置信息。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.CryptoConfig" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>
              算法映射到用于当前的应用程序域中添加一组的名称。
            </summary>
      <param name="algorithm">
                要映射到的算法。
              </param>
      <param name="names">
                要将映射到算法的名称的数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" algorithm" /> 或 <paramref name="names" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> 无法从外部访问程序集。
                
                  - 或 -
                
                  中的条目之一 <paramref name="names" /> 参数为空或 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>
              对象标识符 (OID) 映射到用于当前的应用程序域中添加一组的名称。
            </summary>
      <param name="oid">
                对象标识符 (OID) 映射到中。
              </param>
      <param name="names">
                要映射到该 OID 的名称的数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" oid" /> 或 <paramref name="names" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  中的条目之一 <paramref name="names" /> 参数为空或 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>
              指示运行时是否应强制执行策略以创建仅联邦信息处理标准 (FIPS) 认证的算法。
            </summary>
      <returns>
        <see langword="true" /> 若要强制实施该策略;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>
              创建指定的加密对象的新实例。
            </summary>
      <param name="name">
                简单的用于创建实例的加密对象的名称。
              </param>
      <returns>
              指定的加密对象的新实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="name" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>
              使用指定的参数创建指定的加密对象的新实例。
            </summary>
      <param name="name">
                简单的用于创建实例的加密对象的名称。
              </param>
      <param name="args">
                用于创建指定的加密对象的参数。
              </param>
      <returns>
              指定的加密对象的新实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="name" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>
              将编码为指定的对象标识符 (OID)。
            </summary>
      <param name="str">
                要编码的 OID。
              </param>
      <returns>
              包含已编码的 OID 的字节数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  OID 进行编码时出错。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>
              获取与指定的简单名称对应的算法的对象标识符 (OID)。
            </summary>
      <param name="name">
                要为其获取 OID 算法的简单名称。
              </param>
      <returns>
              指定算法的 OID。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>
              表示抽象基类，导出指定长度字节序列的所有类都从该基类继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>
              在派生类中重写时，释放由 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 类的当前实例使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>
              在派生类中重写时，释放由 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 类占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>
              当在派生类中被重写时，返回伪随机密钥字节。
            </summary>
      <param name="cb">
                要生成的伪随机密钥字节数。
              </param>
      <returns>
              由伪随机密钥字节组成的字节数组。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>
              当在派生类中被重写时，重置操作的状态。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>
              表示数据加密标准 (DES) 算法的基类，所有 <see cref="T:System.Security.Cryptography.DES" /> 实现都必须从此基类派生。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DES" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>
              创建加密对象的实例以执行数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 算法。
            </summary>
      <returns>
              一个加密对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>
              创建要执行的指定的实现的数据加密标准的加密对象的实例 (<see cref="T:System.Security.Cryptography.DES" />) 算法。
            </summary>
      <param name="algName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.DES" /> 使用。
              </param>
      <returns>
              一个加密对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>
              确定指定的密钥是否为半弱密钥。
            </summary>
      <param name="rgbKey">
                要进行半弱漏洞测试的密钥。
              </param>
      <returns>
              如果密钥为半弱密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 参数的大小无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>
              确定指定的密钥是否为弱密钥。
            </summary>
      <param name="rgbKey">
                要进行漏洞测试的密钥。
              </param>
      <returns>
              如果密钥为弱密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 参数的大小无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>
              获取或设置数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 算法的密钥。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.DES" /> 算法的密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将密钥设置为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  试图设置长度不等于 <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" /> 的密钥。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  试图设置弱密钥（请参阅 <see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />）或半弱密钥（请参阅 <see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />）。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>
              表示数字签名算法（<see cref="T:System.Security.Cryptography.DSA" />）的所有实现都必须从中继承的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DSA" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>
              创建用于执行非对称算法的默认加密对象。
            </summary>
      <returns>
              用于执行非对称算法的加密对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>
              创建具有指定密钥大小的新临时 DSA 密钥。
            </summary>
      <param name="keySizeInBits">
                密钥大小（以位为单位）。
              </param>
      <returns>
              具有指定密钥大小的新临时 DSA 密钥。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> 与 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 不同。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>
              创建具有指定 DSA 密钥参数的新临时 DSA 密钥。
            </summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 算法的参数。
              </param>
      <returns>
              新的临时 DSA 密钥。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>
              创建用于执行非对称算法的指定加密对象。
            </summary>
      <param name="algName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.DSA" /> 使用。
              </param>
      <returns>
              用于执行非对称算法的加密对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>
              当在派生类中重写创建 <see cref="T:System.Security.Cryptography.DSA" /> 为指定的数据的签名。
            </summary>
      <param name="rgbHash">
                要签名的数据。
              </param>
      <returns>
              指定数据的数字签名。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>
              当在派生类中重写时，导出 <see cref="T:System.Security.Cryptography.DSAParameters" />。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>
              重新构造 <see cref="T:System.Security.Cryptography.DSA" /> 从 XML 字符串的对象。
            </summary>
      <param name="xmlString">
                用于重新构造 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 参数的格式无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              在派生类中被重写时，使用指定的哈希算法计算字节数组指定部分的哈希值。
            </summary>
      <param name="data">
                要进行哈希处理的数据。
              </param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。
              </param>
      <param name="count">
                要进行哈希处理的字节数。
              </param>
      <param name="hashAlgorithm">
                要用于对数据进行哈希处理的算法。
              </param>
      <returns>
              经过哈希处理的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              在派生类中被重写时，使用指定的哈希算法计算指定的二进制流的哈希值。
            </summary>
      <param name="data">
                要进行哈希处理的二进制流。
              </param>
      <param name="hashAlgorithm">
                要用于对数据进行哈希处理的算法。
              </param>
      <returns>
              经过哈希处理的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>
              当在派生类中重写时，导入指定的 <see cref="T:System.Security.Cryptography.DSAParameters" />。
            </summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 DSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入流。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 DSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入数据。
              </param>
      <param name="offset">
                数组中自其开始使用数据的偏移量。
              </param>
      <param name="count">
                数组中用作数据的字节数。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 DSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                
                  - 或 -
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>
              创建并返回当前的 XML 字符串表示 <see cref="T:System.Security.Cryptography.DSA" /> 对象。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              当前 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串编码。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="offset">
                开始计算哈希的起始索引。
              </param>
      <param name="count">
                要进行哈希处理的字节数。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <returns>
              如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                
                  - 或 -
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <returns>
              如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <returns>
              如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
              当在派生类中重写验证 <see cref="T:System.Security.Cryptography.DSA" /> 为指定的数据的签名。
            </summary>
      <param name="rgbHash">
                使用数据的哈希签名 <paramref name="rgbSignature" />。
              </param>
      <param name="rgbSignature">
                有关验证的签名 <paramref name="rgbData" />。
              </param>
      <returns>
              如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>
              包含的典型参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>
              指定的计数器 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>
              指定 <see langword="G" /> 参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>
              指定 <see langword="J" /> 参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>
              指定 <see langword="P" /> 参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>
              指定 <see langword="Q" /> 参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>
              指定的种子 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>
              指定 <see langword="X" /> 参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>
              指定 <see langword="Y" /> 参数 <see cref="T:System.Security.Cryptography.DSA" /> 算法。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>
              验证数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) PKCS #1 v1.5 签名。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 类的新实例。
            </summary>
      <param name="key">
                数字签名算法的实例 (<see cref="T:System.Security.Cryptography.DSA" />) 包含密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>
              指定数字签名算法的哈希算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名反格式化程序。
            </summary>
      <param name="strName">
                要用于签名反格式化程序的哈希算法的名称。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 参数不映射到 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              指定要用于数字签名算法的密钥 (<see cref="T:System.Security.Cryptography.DSA" />) 签名反格式化程序。
            </summary>
      <param name="key">
                实例 <see cref="T:System.Security.Cryptography.DSA" /> 包含密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
              验证数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 对数据签名。
            </summary>
      <param name="rgbHash">
                用 <paramref name="rgbSignature" /> 签名的数据。
              </param>
      <param name="rgbSignature">
                要为 <paramref name="rgbHash" /> 验证的签名。
              </param>
      <returns>
        <see langword="true" /> 如果该签名是有效的数据;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="rgbSignature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  找不到 DSA 密钥。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>
              创建数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 类的新实例。
            </summary>
      <param name="key">
                数字签名算法的实例 (<see cref="T:System.Security.Cryptography.DSA" />) 包含密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>
              创建数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 为指定的数据的 PKCS #1 签名。
            </summary>
      <param name="rgbHash">
                要签名的数据。
              </param>
      <returns>
              指定数据的数字签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  OID 是 <see langword="null" />。
                
                  - 或 -
                
                  DSA 密钥是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>
              指定数字签名算法的哈希算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名格式化程序。
            </summary>
      <param name="strName">
                要用于签名格式化程序的哈希算法的名称。
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 参数不映射到 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              指定要用于数字签名算法的密钥 (<see cref="T:System.Security.Cryptography.DSA" />) 签名格式化程序。
            </summary>
      <param name="key">
                实例 <see cref="T:System.Security.Cryptography.DSA" /> 包含密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>
              指示如何解释 <see cref="T:System.Security.Cryptography.ECCurve" /> 对象中包含的数据。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>
              曲线参数表示特征 2 曲线。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>
              没有解释曲线数据。
               假定调用方了解曲线。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>
              曲线参数表示已命名曲线。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>
              曲线参数表示素数曲线，公式为 B*y^2 = x^3 + A*x^2 + x。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>
              曲线参数表示素数曲线，素数字段 P 中的公式为 y^2 = x^3 + A*x + B。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>
              曲线参数表示素数曲线，素数字段 P 中的公式为 A*x^2 + y^2 = 1 + B*x^2*y^2。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>
              表示用于创建已命名曲线的工厂类。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>
              获取名为 brainpoolP160r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP160r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>
              获取名为 brainpoolP160t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP160t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>
              获取名为 brainpoolP192r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP192r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>
              获取名为 brainpoolP192t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP192t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>
              获取名为 brainpoolP224r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP224r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>
              获取名为 brainpoolP224t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP224t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>
              获取名为 brainpoolP256r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP256r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>
              获取名为 brainpoolP256t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP256t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>
              获取名为 brainpoolP320r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP320r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>
              获取名为 brainpoolP320t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP320t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>
              获取名为 brainpoolP384r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP384r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>
              获取名为 brainpoolP384t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP384t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>
              获取名为 brainpoolP512r1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP512r1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>
              获取名为 brainpoolP512t1 的曲线。
            </summary>
      <returns>
              名为 brainpoolP512t1 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>
              获取名为 nistP256 的曲线。
            </summary>
      <returns>
              名为 nistP256 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>
              获取名为 nistP384 的曲线。
            </summary>
      <returns>
              名为 nistP384 的曲线。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>
              获取名为 nistP521 的曲线。
            </summary>
      <returns>
              名为 nistP521 的曲线。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>
              表示椭圆曲线。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>
              显式曲线的第 1 个系数。
               Weierstrass、Montgomery 和 Twisted Edwards 短曲线的 A。
            </summary>
      <returns>
              系数 A。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>
              显式曲线的第 2 个系数。
               对于 short Weierstrass 曲线，为 B；对于 Twisted Edwards 曲线，为 d。
            </summary>
      <returns>
              系数 B。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>
              曲线的余因子。
            </summary>
      <returns>
              曲线的余因子。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>
              使用标识符的指定友好名称创建命名的曲线。
            </summary>
      <param name="oidFriendlyName">
                标识符的友好名称。
              </param>
      <returns>
              表示已命名曲线的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>
              使用指定的 <see cref="T:System.Security.Cryptography.Oid" /> 对象创建已命名曲线。
            </summary>
      <param name="curveOid">
                要使用的对象标识符。
              </param>
      <returns>
              表示已命名曲线的对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>
              使用指定的标识符点分十进制表示形式创建已命名曲线。
            </summary>
      <param name="oidValue">
                标识符的点分数字。
              </param>
      <returns>
              表示已命名曲线的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>
              确定 <see cref="T:System.Security.Cryptography.ECCurve" /> 对象的组成。
            </summary>
      <returns>
              曲线类型。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>
              曲线上操作的生成器或基点。
            </summary>
      <returns>
              基点。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>
              哈希算法的名称，此算法用于根据 ANSI X9.62 生成算法从 <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> 生成曲线系数（<see cref="F:System.Security.Cryptography.ECCurve.A" /> 和 <see cref="F:System.Security.Cryptography.ECCurve.B" />）。
               仅适用于显式曲线。
            </summary>
      <returns>
              用于生成曲线系数的哈希算法的名称。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>
              获取一个值，该值指示曲线类型是否指示显式特征 2 曲线。
            </summary>
      <returns>
              如果该曲线是显式特征 2 曲线，则为 <see langword="true" />；如果该曲线是已命名特征 2、素数或隐式曲线，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>
              获取一个值，该值指示曲线类型是否指示显式曲线（素数曲线或特征 2 曲线）。
            </summary>
      <returns>
              如果曲线是显式曲线（素数曲线或特征 2 曲线），则为 <see langword="true" />；如果曲线是已命名或隐式曲线，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>
              获取一个值，该值指示曲线类型是否指示已命名曲线。
            </summary>
      <returns>
              如果曲线是已命名曲线，则为 <see langword="true" />，如果曲线是隐式或显式曲线（素数曲线或特征 2 曲线），则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>
              获取一个值，该值指示曲线类型是否指示显式素数曲线。
            </summary>
      <returns>
              如果曲线是显式素数曲线，则为 <see langword="true" />；如果曲线是已命名素数、特征 2 或隐式曲线，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>
              获取已命名曲线的标识符。
            </summary>
      <returns>
              已命名曲线的标识符。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>
              曲线的顺序。
               仅适用于显式曲线。
            </summary>
      <returns>
              曲线的顺序。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>
              多项式曲线。
               仅适用于特征 2 曲线。
            </summary>
      <returns>
              多项式曲线。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>
              指定基本字段的素数。
               仅适用于素数曲线。
            </summary>
      <returns>
              素数 p。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>
              ANSI X9.62 生成算法下系数生成的种子值。
               仅适用于显式曲线。
            </summary>
      <returns>
              种子值。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>
              验证当前曲线的完整性。
               如果结构无效，将引发 <see cref="T:System.Security.Cryptography.CryptographicException" /> 异常。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  曲线参数对当前曲线类型无效。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>
              提供所有 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 实现必须从中继承的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 类的新实例。
            </summary>
      <param name="keyBlob">
                表示 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象的字节数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>
              将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 密钥 BLOB 序列化为字节数组。
            </summary>
      <returns>
              一个字节数组，包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>
              将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 公钥序列化为 XML 字符串。
            </summary>
      <returns>
              一个 XML 字符串，该字符串包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>
              提供用于封装椭圆曲线数字签名算法 (ECDSA) 的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.ECDsa" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>
              创建默认实现的椭圆曲线数字签名算法 (ECDSA) 的新实例。
            </summary>
      <returns>
              默认实现的新实例 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的此类。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>
              使用通过指定曲线新生成的密钥，创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的新实例。
            </summary>
      <param name="curve">
                要用于密钥生成的曲线。
              </param>
      <returns>
              此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>
              通过将指定参数用作密钥，创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的新实例。
            </summary>
      <param name="parameters">
                表示要使用的密钥的参数。
              </param>
      <returns>
              此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>
              创建指定的椭圆曲线数字签名算法 (ECDSA) 实现的新实例。
            </summary>
      <param name="algorithm">
                ECDSA 实现的名称。
                 以下字符串全都引用同一个实现，目前是唯一的实现中支持 .NET Framework:
              
                -"ECDsa"
              
                -"ECDsaCng"
              
                -"System.Security.Cryptography.ECDsaCng"
              
                此外可以提供自定义 ECDSA 实现的名称。
              </param>
      <returns>
              指定实现此类的新实例。
               如果指定的算法名称没有映射到 ECDSA 实现，此方法返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>
              在派生类中替代时，导出椭圆曲线的显式参数。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              表示此项在曲线上的点的参数（使用显式曲线格式）。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>
              在派生类中替代时，导出椭圆曲线的已命名或显式参数。
               如果曲线具有一个名称，<see cref="F:System.Security.Cryptography.ECParameters.Curve" /> 字段包含已命名的曲线参数，否则将包含显式参数。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              表示此项在曲线上的点的参数。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <param name="xmlString">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>
              在派生类中替代时，生成指定曲线的一个新公钥/私钥对。
            </summary>
      <param name="curve">
                要使用的曲线。
              </param>
      <exception cref="T:System.NotSupportedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              在派生类中进行重写后，通过使用指定的哈希算法计算指定二进制流的哈希值。
            </summary>
      <param name="data">
                要进行哈希处理的二进制流。
              </param>
      <param name="hashAlgorithm">
                要用于对数据进行哈希处理的算法。
              </param>
      <returns>
              经过哈希处理的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              在派生类中进行重写后，通过使用指定的哈希算法计算字节数组指定部分的哈希值。
            </summary>
      <param name="data">
                要进行哈希处理的数据。
              </param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。
              </param>
      <param name="count">
                要进行哈希处理的字节数。
              </param>
      <param name="hashAlgorithm">
                要用于对数据进行哈希处理的算法。
              </param>
      <returns>
              经过哈希处理的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>
              当在派生类中重写时，导入指定的参数。
            </summary>
      <param name="parameters">
                曲线的参数。
              </param>
      <exception cref="T:System.NotSupportedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>
              获取密钥交换算法的名称。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>
              获取签名算法的名称。
            </summary>
      <returns>
              字符串"ECDsa"。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 ECDSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入流。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 ECDSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入数据。
              </param>
      <param name="offset">
                数组中自其开始使用数据的偏移量。
              </param>
      <param name="count">
                数组中用作数据的字节数。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <returns>
              指定数据的 ECDSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                
                  - 或 -
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>
              为指定的哈希值生成数字签名。
            </summary>
      <param name="hash">
                待签名数据的哈希值。
              </param>
      <returns>
              一个数字签名，其中包含用私钥加密的给定哈希值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <param name="includePrivateParameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <returns>
              如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <returns>
              如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="offset">
                开始计算哈希的起始索引。
              </param>
      <param name="count">
                要进行哈希处理的字节数。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <returns>
              如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                
                  - 或 -
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>
              针对指定的哈希值验证数字签名。
            </summary>
      <param name="hash">
                数据块的哈希值。
              </param>
      <param name="signature">
                要验证的数字签名。
              </param>
      <returns>
              如果哈希值等于已解密的签名，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>
              表示椭圆曲线加密 (ECC) 算法的标准参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>
              表示与公钥 (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) 和可选私钥 (<see cref="F:System.Security.Cryptography.ECParameters.D" />) 相关联的曲线。
            </summary>
      <returns>
              曲线。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>
              表示椭圆曲线加密 (ECC) 算法的私钥 <see langword="D" />（保存为大端格式）。
            </summary>
      <returns>
              椭圆曲线加密 (ECC) 算法的 <see langword="D" /> 参数。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>
              表示椭圆曲线加密 (ECC) 算法的公钥 <see langword="Q" />。
            </summary>
      <returns>
              椭圆曲线加密 (ECC) 算法的 <see langword="Q" /> 参数。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>
              验证当前对象。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥或曲线参数对当前曲线类型无效。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>
              表示椭圆曲线加密 (ECC) 结构的 (X,Y) 坐标对。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>
              表示 X 坐标。
            </summary>
      <returns>
              x 坐标。
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>
              表示 Y 坐标。
            </summary>
      <returns>
              Y 坐标。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>
              表示高级加密标准 (AES) 的所有实现必须从中继承的抽象基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.Aes" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>
              创建用于执行对称算法的加密对象。
            </summary>
      <returns>
              用于执行对称算法的加密对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>
              创建一个加密对象，它指定用于执行对称算法所用的 AES 的实现。
            </summary>
      <param name="algorithmName">
                要使用的 AES 的特定实现的名称。
              </param>
      <returns>
              用于执行对称算法的加密对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmName" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.Aes.LegalBlockSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.Aes.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>
              提供了高级加密标准 (AES) 对称算法的一种托管的实现。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  启用 FIPS Windows 安全策略设置。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>
              创建对称解密器对象使用当前的密钥和初始化向量 (IV)。
            </summary>
      <returns>
              对称解密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称解密器对象使用指定的密钥和初始化向量 (IV)。
            </summary>
      <param name="key">
                用于对称算法的密钥。
              </param>
      <param name="iv">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称解密器对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>
              创建对称加密器对象使用当前的密钥和初始化向量 (IV)。
            </summary>
      <returns>
              对称加密器对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称加密器对象使用指定的密钥和初始化向量 (IV)。
            </summary>
      <param name="key">
                用于对称算法的密钥。
              </param>
      <param name="iv">
                用于对称算法的初始化向量。
              </param>
      <returns>
              对称加密器对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>
              获取或设置要用作反馈的比特数。
            </summary>
      <returns>
              反馈大小，以位为单位。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>
              生成的随机初始化向量 (IV) 用于对称算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>
              生成用于对称算法的随机密钥。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>
              获取或设置的初始化向量 (IV) 用于对称算法。
            </summary>
      <returns>
              要用于对称算法的初始化向量
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>
              获取或设置对称算法所用的密钥。
            </summary>
      <returns>
              对称算法的密钥。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>
              获取或设置大小，以位为单位使用对称算法的机密密钥。
            </summary>
      <returns>
              大小 （以位为单位使用的对称算法的密钥）。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>
              获取或设置对称算法的运算模式。
            </summary>
      <returns>
              指定要用于加密的块密码模式的枚举值之一。
               默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> 设置为 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>
              获取或设置对称算法中使用的填充模式。
            </summary>
      <returns>
              指定要应用的填充类型的枚举值之一。
               默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>
              通过使用计算基于哈希的消息身份验证代码 (HMAC) <see cref="T:System.Security.Cryptography.MD5" /> 哈希函数。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.HMACMD5" /> 类通过使用随机生成的密钥。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.HMACMD5" /> 类通过使用指定的键。
            </summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACMD5" /> 加密的机密密钥。
                 键可以是任意长度，但如果超过 64 个字节它将进行哈希处理 （使用 sha-1） 派生的 64 字节密钥。
                 因此，建议的机密密钥的大小为 64 字节。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb">
      </param>
      <param name="ib">
      </param>
      <param name="cb">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.HashSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize">
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.Key">
      <returns>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>
              计算基于哈希消息身份验证代码 (HMAC) 使用 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希函数。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 类随机生成的密钥。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>
              使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 类的新实例。
            </summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的机密密钥。
                 键可以是任意长度，但如果超过 64 个字节它哈希 （使用 sha-1） 派生的 64 字节密钥。
                 因此，建议的机密密钥的大小为 64 字节。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 类具有指定的密钥数据和值，该值指定是否使用 SHA1 算法的托管的版本。
            </summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的机密密钥。
                 键可以是任意长度，但如果超过 64 个字节，它哈希 （使用 sha-1） 派生的 64 字节密钥。
                 因此，建议的机密密钥的大小为 64 字节。
              </param>
      <param name="useManagedSha1">
        <see langword="true" /> 若要使用 SHA1 算法的托管的实现 ( <see cref="T:System.Security.Cryptography.SHA1Managed" /> 类); <see langword="false" /> 以使用非托管的实现 ( <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />  类)。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb">
      </param>
      <param name="ib">
      </param>
      <param name="cb">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.HashSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <returns>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>
              通过使用计算基于哈希的消息身份验证代码 (HMAC)<see cref="T:System.Security.Cryptography.SHA256" />哈希函数。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>
              初始化的新实例<see cref="T:System.Security.Cryptography.HMACSHA256" />类随机生成的密钥。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>
              使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 类的新实例。
            </summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> 加密的机密密钥。
                 键可以是任意长度。
                 但是，建议的大小是 64 字节。
                 如果键是多于 64 个字节，它哈希 （使用 sha-256） 派生一个 64 字节的密钥。
                 如果是少于 64 个字节，它被填充到 64 个字节。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb">
      </param>
      <param name="ib">
      </param>
      <param name="cb">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.HashSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize">
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.Key">
      <returns>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>
              计算基于哈希的消息身份验证代码 (HMAC) 使用<see cref="T:System.Security.Cryptography.SHA384" />哈希函数。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 类通过使用随机生成的密钥。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>
              初始化的新实例<see cref="T:System.Security.Cryptography.HMACSHA384" />通过使用指定的密钥数据的类。
            </summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> 加密的机密密钥。
                 键可以是任意长度。
                 但是，建议的大小是 128 个字节。
                 如果密钥是 128 字节长，它哈希 （使用 sha-384） 派生一个 128 字节的密钥。
                 如果它是小于 128 个字节长，它被填充到 128 个字节。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb">
      </param>
      <param name="ib">
      </param>
      <param name="cb">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.HashSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize">
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.Key">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>
              提供了一种解决方法有关 .NET Framework&amp;2;.0 实现 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 算法，这是不一致，出现 .NET Framework 2.0 Service Pack 1 算法的实现。
            </summary>
      <returns>
        <see langword="true" /> 若要启用 .NET Framework 2.0 Service Pack 1 应用程序与交互 .NET Framework 2.0 应用程序; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>
              计算基于哈希的消息身份验证代码 (HMAC) 使用<see cref="T:System.Security.Cryptography.SHA512" />哈希函数。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 类随机生成的密钥。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>
              使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 类的新实例。
            </summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA512" /> 加密的机密密钥。
                 键可以是任意长度。
                 但是，建议的大小是 128 个字节。
                 如果键是超过 128 个字节，它哈希 （使用 sha-512） 派生的 128 字节密钥。
                 如果该值小于 128 个字节，则插入为 128 字节。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <param name="rgb">
      </param>
      <param name="ib">
      </param>
      <param name="cb">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.HashSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize">
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.Key">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>
              提供了一种解决方法有关 .NET Framework&amp;2;.0 实现 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 算法，这是不一致，出现 .NET Framework 2.0 Service Pack 1 实现。
            </summary>
      <returns>
        <see langword="true" /> 若要启用 .NET Framework 2.0 Service Pack 1 应用程序与交互 .NET Framework 2.0 应用程序; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>
              支持跨多个段以增量方式计算哈希或基于哈希的消息验证代码 (HMAC) 值。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>
              获取正在执行的算法的名称。
            </summary>
      <returns>
              正在执行的算法的名称。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>
              将指定数据追加到已进行哈希或 HMAC 处理的数据。
            </summary>
      <param name="data">
                要处理的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>
              从指定偏移量开始，向已经过哈希或基于哈希的消息验证代码 (HMAC) 处理的数据追加指定数据的指定字节数。
            </summary>
      <param name="data">
                要处理的数据。
              </param>
      <param name="offset">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="count">
                要从 <paramref name="data" /> 中使用的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="offset" /> 为负数。
                
                  - 或 -
                
                  <paramref name="count" /> 大于 <paramref name="data" /> 的长度。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 与 <paramref name="count" /> 的总和大于数据长度。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              为指定算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />。
            </summary>
      <param name="hashAlgorithm">
                要执行的哈希算法的名称。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 实例，该实例已准备好计算 <paramref name="hashAlgorithm" /> 指定的哈希算法。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或空字符串。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的哈希算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>
              使用指定的哈希算法和密钥为基于哈希的消息验证代码 (HMAC) 算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />。
            </summary>
      <param name="hashAlgorithm">
                要在 HMAC 内执行的哈希算法的名称。
              </param>
      <param name="key">
                     HMAC 的密钥。
                 密钥可以为任何长度，但将对长度超过指定哈希算法的输出大小的密钥进行哈希处理，以便派生大小正确的密钥。
                 因此，建议的密钥大小为指定哈希算法的输出大小。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 类的一个实例，该实例已准备好计算指定的哈希算法。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或空字符串。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的哈希算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 类的当前实例使用的资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>
              检索哈希或基于哈希的消息验证代码 (HMAC)（用于从之前对 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])" /> 方法的调用中累积的数据），并将对象重置为初始状态。
            </summary>
      <returns>
              计算所得的哈希或 HMAC。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>
              表示所有掩码生成器算法均必须从中派生的抽象类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>
              当在派生类中重写时，使用指定的随机种子生成将具有指定长度的掩码。
            </summary>
      <param name="rgbSeed">
                用于计算掩码的随机种子。
              </param>
      <param name="cbReturn">
                生成的掩码长度（以字节为单位）。
              </param>
      <returns>
              长度等于 <paramref name="cbReturn" /> 参数的随机生成的掩码。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>
              表示的抽象类的所有实现从中<see cref="T:System.Security.Cryptography.MD5" />哈希算法继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.MD5" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>
              创建一个实例的默认实现 <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法。
            </summary>
      <returns>
              新实例 <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>
              创建一个实例的指定实现的 <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法。
            </summary>
      <param name="algName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.MD5" /> 使用。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> 的指定实现的新实例。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="algName" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>
              根据 PKCS #1 计算用于密钥交换算法的掩码。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>
              用指定长度的指定随机种子生成并返回掩码。
            </summary>
      <param name="rgbSeed">
                用于计算掩码的随机种子。
              </param>
      <param name="cbReturn">
                生成的掩码长度（以字节为单位）。
              </param>
      <returns>
              长度等于 <paramref name="cbReturn" /> 参数的随机生成的掩码。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>
              获取或设置要用于生成掩码的哈希算法类型的名称。
            </summary>
      <returns>
              实现哈希算法以计算掩码的类型的名称。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>
              表示加密随机数生成器的所有实现从中派生的抽象类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>
              在派生类中重写时，创建可用于生成随机数据的加密随机数生成器默认实现的实例。
            </summary>
      <returns>
              加密随机数生成器的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>
              在派生类中重写时，创建加密随机数生成器的指定实现的实例。
            </summary>
      <param name="rngName">
                要使用的随机数生成器实现的名称。
              </param>
      <returns>
              加密随机数生成器的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>
              在派生类中重写时，释放由 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 类的当前实例使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>
              在派生类中被重写时，释放由 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 使用的非托管资源，也可以根据需要释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>
              当在派生类中重写时，用加密型强随机值序列填充字节数组。
            </summary>
      <param name="data">
                要用加密型强随机字节填充的数组。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
              用加密型强随机值序列填充指定的字节数组。
            </summary>
      <param name="data">
                要用加密型强随机字节填充的数组。
              </param>
      <param name="offset">
                开始填充操作的数组的索引。
              </param>
      <param name="count">
                要填充的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 超过了 <paramref name="data" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>
              当在派生类中重写时，用加密型强随机非零值序列填充字节数组。
            </summary>
      <param name="data">
                用加密型强随机非零字节填充的数组。
              </param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RC2" /> 算法的所有实现均必须从中派生的基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RC2" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>
              创建加密对象的实例以执行 <see cref="T:System.Security.Cryptography.RC2" /> 算法。
            </summary>
      <returns>
              加密对象的实例。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>
              创建加密的对象来执行的指定的实现的实例 <see cref="T:System.Security.Cryptography.RC2" /> 算法。
            </summary>
      <param name="AlgName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.RC2" /> 使用。
              </param>
      <returns>
              加密对象的实例。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="algName" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>
              获取或设置 <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的有效大小（以位为单位）。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 算法所使用的有效密钥大小。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  有效密钥大小无效。
                </exception>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>
              表示由所用密钥的有效大小 <see cref="T:System.Security.Cryptography.RC2" /> 以位为单位的算法。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>
              获取或设置 <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的大小（以位为单位）。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的大小。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  RC2 密钥大小的值小于有效密钥大小值。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>
              通过使用基于 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 的伪随机数生成器，实现基于密码的密钥派生功能 (PBKDF2)。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>
              通过使用密码和 salt 值派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                用于派生密钥的密码。
              </param>
      <param name="salt">
                用于派生密钥的密钥 salt。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的 salt 大小小于 8 个字节或迭代计数等于或大于 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  密码或 salt <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>
              通过使用密码和 salt 大小派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                用于派生密钥的密码。
              </param>
      <param name="saltSize">
                你希望类生成的随机 salt 的大小。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的 salt 大小小于 8 个字节。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  密码或 salt <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>
              通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                用于派生密钥的密码。
              </param>
      <param name="salt">
                用于派生密钥的密钥 salt。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的 salt 大小小于 8 个字节或迭代计数等于或大于 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  密码或 salt <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>
              通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                用于派生密钥的密码。
              </param>
      <param name="salt">
                用于派生密钥的密钥 salt。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的 salt 大小小于 8 个字节或迭代计数等于或大于 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  密码或 salt <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
              通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。
            </summary>
      <param name="password">
                用于派生密钥的密码。
              </param>
      <param name="saltSize">
                你希望类生成的随机 salt 的大小。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的 salt 大小小于 8 个字节或迭代次数等于或大于 1。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  密码或 salt <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations " />超出了范围。
                   此参数要求的非负数。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。
            </summary>
      <param name="password">
                用以派生密钥的密码。
              </param>
      <param name="salt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <param name="hashAlgorithm">
                用于派生密钥的哈希算法。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  哈希算法名称无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。
            </summary>
      <param name="password">
                用以派生密钥的密码。
              </param>
      <param name="salt">
                用以导出密钥的密钥 salt。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <param name="hashAlgorithm">
                用于派生密钥的哈希算法。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  哈希算法名称无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt 大小、迭代数和哈希算法名称来派生密钥。
            </summary>
      <param name="password">
                用以派生密钥的密码。
              </param>
      <param name="saltSize">
                你希望类生成的随机 salt 的大小。
              </param>
      <param name="iterations">
                操作的迭代数。
              </param>
      <param name="hashAlgorithm">
                用于派生密钥的哈希算法。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  哈希算法名称无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>
              从 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 对象导出加密密钥。
            </summary>
      <param name="algname">
                为其导出密钥的算法名称。
              </param>
      <param name="alghashname">
                用于导出密钥的哈希算法名称。
              </param>
      <param name="keySize">
                要导出的密钥的大小（以位为单位）。
              </param>
      <param name="rgbIV">
                用于导出密钥的初始化向量 (IV)。
              </param>
      <returns>
              导出的密钥。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 参数不正确。
                
                  - 或 - 
                
                  无法获取加密服务提供程序 (CSP)。
                
                  - 或 - 
                
                  <paramref name="algname" /> 参数不是有效的算法名称。
                
                  - 或 - 
                
                  <paramref name="alghashname" /> 参数不是有效的哈希算法名称。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>
              返回此对象的伪随机密钥。
            </summary>
      <param name="cb">
                要生成的伪随机密钥字节数。
              </param>
      <returns>
              由伪随机密钥字节组成的字节数组。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb " />超出了范围。
                   此参数需要非负数。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>
              获取或设置操作的迭代数。
            </summary>
      <returns>
              操作的迭代数。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  迭代次数是等于或大于 1。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>
              重置操作的状态。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>
              获取或设置操作的密钥 salt 值。
            </summary>
      <returns>
              操作的密钥 salt 值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  指定的 salt 大小小于 8 个字节。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Salt 是 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>
              表示的基类的所有实现从中<see cref="T:System.Security.Cryptography.Rijndael" />对称加密算法必须继承。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.Rijndael" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>
              创建要执行的加密对象 <see cref="T:System.Security.Cryptography.Rijndael" /> 算法。
            </summary>
      <returns>
              一个加密对象。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>
              创建一个加密对象来执行的指定的实现的 <see cref="T:System.Security.Cryptography.Rijndael" /> 算法。
            </summary>
      <param name="algName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.Rijndael" /> 来创建。
              </param>
      <returns>
              一个加密对象。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="algName" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>
              访问的托管的版本<see cref="T:System.Security.Cryptography.Rijndael" />算法。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RijndaelManaged" /> 类的新实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  此类不符合 FIPS 的算法。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 <see cref="T:System.Security.Cryptography.Rijndael" /> 解密器对象具有指定 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                要用于对称算法的机密密钥。
                 密钥大小必须是 128、 192 或 256 位。
              </param>
      <param name="rgbIV">
                用于对称算法 IV。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.Rijndael" /> 解密器对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 参数为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="rgbIV" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性不是 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, ，<see cref="F:System.Security.Cryptography.CipherMode.CBC" />, ，或 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              创建对称 <see cref="T:System.Security.Cryptography.Rijndael" /> 加密器对象具有指定 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。
            </summary>
      <param name="rgbKey">
                要用于对称算法的机密密钥。
                 密钥大小必须是 128、 192 或 256 位。
              </param>
      <param name="rgbIV">
                用于对称算法 IV。
              </param>
      <returns>
              对称 <see cref="T:System.Security.Cryptography.Rijndael" /> 加密器对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 参数为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="rgbIV" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  值 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性不是 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, ，<see cref="F:System.Security.Cryptography.CipherMode.CBC" />, ，或 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>
              生成的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 要用于该算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>
              生成的随机 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 要用于该算法。
            </summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <returns>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的所有实现均从中继承的基类。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSA" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.RSA" /> 算法的默认实现的实例。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的默认实现的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>
              创建具有指定密钥大小的新临时 RSA 密钥。
            </summary>
      <param name="keySizeInBits">
                密钥大小（以位为单位）。
              </param>
      <returns>
              具有指定密钥大小的新临时 RSA 密钥。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> 与 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 不同。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>
              创建具有指定 RSA 密钥参数的新临时 RSA 密钥。
            </summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 算法的参数。
              </param>
      <returns>
              新的临时 RSA 密钥。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.RSA" /> 的指定实现的实例。
            </summary>
      <param name="algName">
                要使用的 <see cref="T:System.Security.Cryptography.RSA" /> 的实现的名称。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的指定实现的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              在派生类中被重写时，使用指定的填充模式来解密输入数据。
            </summary>
      <param name="data">
                要解密的数据。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              已解密的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>
              当在派生类中重写时，使用私钥解密输入数据。
            </summary>
      <param name="rgb">
                要解密的密码文本。
              </param>
      <returns>
        <paramref name="rgb" /> 参数产生的纯文本形式的解密结果。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此方法调用。
                   从 .NET Framework 4.6 开始引发了此异常。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              在派生类中被重写时，使用指定的填充模式加密输入数据。
            </summary>
      <param name="data">
                要加密的数据。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              已加密的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>
              当在派生类中重写时，使用公钥加密输入数据。
            </summary>
      <param name="rgb">
                要加密的纯文本。
              </param>
      <returns>
        <paramref name="rgb" /> 参数产生的密码文本形式的加密结果。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持此方法调用。
                   从 .NET Framework 4.6 开始引发了此异常。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>
              当在派生类中重写时，导出 <see cref="T:System.Security.Cryptography.RSAParameters" />。
            </summary>
      <param name="includePrivateParameters">
                若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>
              通过 XML 字符串中的密钥信息初始化 <see cref="T:System.Security.Cryptography.RSA" /> 对象。
            </summary>
      <param name="xmlString">
                包含 <see cref="T:System.Security.Cryptography.RSA" /> 密钥信息的 XML 字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 参数的格式无效。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              在派生类中被重写时，使用指定的哈希算法计算字节数组指定部分的哈希值。
            </summary>
      <param name="data">
                要进行哈希处理的数据。
              </param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。
              </param>
      <param name="count">
                要进行哈希处理的字节数。
              </param>
      <param name="hashAlgorithm">
                要用于哈希处理数据的算法。
              </param>
      <returns>
              经过哈希处理的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              在派生类中被重写时，使用指定的哈希算法计算指定的二进制流的哈希值。
            </summary>
      <param name="data">
                要进行哈希处理的二进制流。
              </param>
      <param name="hashAlgorithm">
                哈希算法。
              </param>
      <returns>
              经过哈希处理的数据。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>
              当在派生类中重写时，导入指定的 <see cref="T:System.Security.Cryptography.RSAParameters" />。
            </summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 的参数。
              </param>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>
              获取可用于 <see cref="T:System.Security.Cryptography.RSA" /> 的此实现的密钥交换算法的名称。
            </summary>
      <returns>
              返回“RSA”。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>
              获取可用于 <see cref="T:System.Security.Cryptography.RSA" /> 的此实现的签名算法的名称。
            </summary>
      <returns>
              返回“RSA”。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              使用指定的哈希算法和填充模式计算指定字节的哈希值，并对生产的哈希值进行签名。
            </summary>
      <param name="data">
                要为其计算哈希的输入数据。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              指定的数据的 RSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              使用指定的哈希算法和填充模式计算指定流的哈希值并签名生成的哈希值。
            </summary>
      <param name="data">
                为其计算哈希的输入流。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              指定的数据的 RSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              使用指定的哈希算法和填充模式计算指定字节数组部分的哈希值并签名生成的哈希值。
            </summary>
      <param name="data">
                要计算哈希的输入数据。
              </param>
      <param name="offset">
                数组中自其开始使用数据的偏移量。
              </param>
      <param name="count">
                数组中用作数据的字节数。
              </param>
      <param name="hashAlgorithm">
                要用于创建哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              指定的数据的 RSA 签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                
                  - 或 -
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              在派生类中重写时，计算指定的哈希值的签名，方法是使用指定填充将其与私钥一起加密。
            </summary>
      <param name="hash">
                待签名数据的哈希值。
              </param>
      <param name="hashAlgorithm">
                要用于创建数据哈希值的哈希算法。
              </param>
      <param name="padding">
                填充。
              </param>
      <returns>
              指定哈希值的 RSA 签名。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生方法必须重写此方法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>
              创建并返回包含当前 <see cref="T:System.Security.Cryptography.RSA" /> 对象的密钥的 XML 字符串。
            </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> 表示同时包含 RSA 公钥和私钥；<see langword="false" /> 表示仅包含公钥。
              </param>
      <returns>
              包含当前 <see cref="T:System.Security.Cryptography.RSA" /> 对象的密钥的 XML 字符串。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              通过使用指定的哈希算法和填充模式计算字节数组某部分中数据的哈希值，并将其与所提供的签名进行比较，以此验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="offset">
                开始计算哈希的起始索引。
              </param>
      <param name="count">
                要进行哈希处理的字节数。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                用于创建数据哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              如果该签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                
                  - 或 -
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              通过使用指定的哈希算法和填充方式计算指定数据的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                用于创建数据哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              如果该签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              通过使用指定的哈希算法和填充方式计算指定流的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。
            </summary>
      <param name="data">
                已签名的数据。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                用于创建数据哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              如果该签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signature" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="padding" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              通过使用指定的哈希算法和填充方式计算签名中的哈希值，然后将其与提供的哈希值进行比较来验证数字签名是否有效。
            </summary>
      <param name="hash">
                签名数据中的哈希值。
              </param>
      <param name="signature">
                要验证的签名数据。
              </param>
      <param name="hashAlgorithm">
                用于创建哈希值的哈希算法。
              </param>
      <param name="padding">
                填充模式。
              </param>
      <returns>
              如果该签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  派生类必须重写此方法。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>
              指定填充模式和参数以使用与 RSA 加密或解密操作。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              创建一个新的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 实例，它的 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 是具有给定哈希算法的 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />。
            </summary>
      <param name="hashAlgorithm">
                哈希算法。
              </param>
      <returns>
              其模式为 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 的对象是具有 <paramref name="hashAlgorithm" /> 指定的哈希算法的 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />。
               .
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>
              确定当前实例是否与指定对象相等。
            </summary>
      <param name="obj">
                要比较的对象。
              </param>
      <returns>
              如果 <paramref name="obj" /> 等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              确定当前实例是否与指定的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象相等。
            </summary>
      <param name="other">
                要比较的对象。
              </param>
      <returns>
              如果 <paramref name="other" /> 等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象的哈希代码。
            </summary>
      <returns>
              此实例的哈希代码。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>
              获取此 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 实例所表示的填充模式。
            </summary>
      <returns>
              一种填充模式。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>
              获取与 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> 填充模式结合使用的哈希算法。
               如果 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 属性的值不是 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />，则 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" />。
            </summary>
      <returns>
              哈希算法。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>
              获取一个对象，该对象表示最优非对称加密填充 (OAEP) 加密标准（包含 SHA1 哈希算法）。
            </summary>
      <returns>
              一个表示 OAEP 加密标准（包含 SHA1 哈希算法）的对象。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>
              获取一个表示使用 SHA256 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
            </summary>
      <returns>
              一个表示使用 SHA256 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>
              获取一个表示使用 SHA-384 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
            </summary>
      <returns>
              一个表示使用 SHA384 哈希算法的 OAEP 加密标准的对象。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>
              获取一个表示使用 SHA512 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
            </summary>
      <returns>
              一个表示使用 SHA512 哈希算法的 OAEP 加密标准的对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              指示所指定的两个 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象是否相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <see langword="left" /> 和 <see langword="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              指示两个指定的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象是否不相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <see langword="left" /> 和 <see langword="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>
              获取一个表示 PKCS #1 加密标准的对象。
            </summary>
      <returns>
              一个表示 PKCS #1 加密标准的对象。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>
              返回当前 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 实例的字符串表示形式。
            </summary>
      <returns>
              当前对象的字符串表示形式。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>
              指定要与 RSA 加密或解密操作一起使用的填充模式。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>
              最佳非对称加密填充。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>
              PKCS #1 v1.5。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>
              对最优非对称加密填充 (OAEP) 密钥交换数据进行解密。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 类的新实例。
            </summary>
      <param name="key">
                包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>
              从加密的密钥交换数据中提取机密信息。
            </summary>
      <param name="rgbData">
                其中隐藏了机密信息的密钥交换数据。
              </param>
      <returns>
              从密钥交换数据派生的机密信息。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  密钥交换数据验证已失败。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  缺少密钥。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>
              获取或设置最优不对称加密填充 (OAEP) 密钥交换的参数。
            </summary>
      <returns>
              包含 OAEP 密钥交换操作的参数的 XML 字符串。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              设置用于解密机密信息的私钥。
            </summary>
      <param name="key">
                包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>
              使用 <see cref="T:System.Security.Cryptography.RSA" /> 创建最优非对称加密填充 (OAEP) 密钥交换数据。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 类的新实例。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>
              从指定的输入数据创建加密的密钥交换数据。
            </summary>
      <param name="rgbData">
                要在密钥交换中传递的机密信息。
              </param>
      <returns>
              要发送到目标接收方的加密密钥交换数据。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  缺少密钥。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>
              从指定的输入数据创建加密的密钥交换数据。
            </summary>
      <param name="rgbData">
                要在密钥交换中传递的机密信息。
              </param>
      <param name="symAlgType">
                当前版本未使用此参数。
              </param>
      <returns>
              要发送到目标接收方的加密密钥交换数据。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>
              获取或设置用于在密钥交换创建过程中创建空白的参数。
            </summary>
      <returns>
              参数值。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>
              获取或设置最优不对称加密填充 (OAEP) 密钥交换的参数。
            </summary>
      <returns>
              包含 OAEP 密钥交换操作的参数的 XML 字符串。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>
              获取或设置创建密钥交换时要使用的随机数生成器算法。
            </summary>
      <returns>
              要使用的随机数生成器算法的实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              设置要用于对密钥交换数据进行加密的公钥。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " />是 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的标准参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="D" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="DP" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="DQ" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="Exponent" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="InverseQ" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="Modulus" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="P" /> 参数。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>
              表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="Q" /> 参数。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>
              对 PKCS #1 密钥交换数据进行解密。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 类的新实例。
            </summary>
      <param name="key">
                包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>
              从加密的密钥交换数据中提取机密信息。
            </summary>
      <param name="rgbIn">
                其中隐藏了机密信息的密钥交换数据。
              </param>
      <returns>
              从密钥交换数据派生的机密信息。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  缺少密钥。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>
              获取 PKCS #1 密钥交换的参数。
            </summary>
      <returns>
              一个 XML 字符串，其中包含 PKCS #1 密钥交换操作的参数。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>
              获取或设置创建密钥交换时要使用的随机数生成器算法。
            </summary>
      <returns>
              要使用的随机数生成器算法的实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              设置用于解密机密信息的私钥。
            </summary>
      <param name="key">
                包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>
              使用 <see cref="T:System.Security.Cryptography.RSA" /> 创建 PKCS#1 密钥交换数据。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 类的新实例。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>
              从指定的输入数据创建加密的密钥交换数据。
            </summary>
      <param name="rgbData">
                要在密钥交换中传递的机密信息。
              </param>
      <returns>
              要发送到目标接收方的加密密钥交换数据。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData " /> 过大。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  键为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>
              从指定的输入数据创建加密的密钥交换数据。
            </summary>
      <param name="rgbData">
                要在密钥交换中传递的机密信息。
              </param>
      <param name="symAlgType">
                当前版本未使用此参数。
              </param>
      <returns>
              要发送到目标接收方的加密密钥交换数据。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>
              获取 PKCS #1 密钥交换的参数。
            </summary>
      <returns>
              一个 XML 字符串，其中包含 PKCS #1 密钥交换操作的参数。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>
              获取或设置创建密钥交换时要使用的随机数生成器算法。
            </summary>
      <returns>
              要使用的随机数生成器算法的实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              设置要用于对密钥交换数据进行加密的公钥。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " />是 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>
              验证 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版签名。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 类的新实例。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>
              设置用于验证签名的哈希算法。
            </summary>
      <param name="strName">
                用于验证签名的哈希算法的名称。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              设置用于验证签名的公钥。
            </summary>
      <param name="key">
                包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
              验证指定数据的 <see cref="T:System.Security.Cryptography.RSA" /> PKCS#1 签名。
            </summary>
      <param name="rgbHash">
                用 <paramref name="rgbSignature" /> 签名的数据。
              </param>
      <param name="rgbSignature">
                要为 <paramref name="rgbHash" /> 验证的签名。
              </param>
      <returns>
              如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  键为 <see langword="null" />。
                
                  - 或 - 
                
                  哈希算法为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="rgbSignature" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版签名。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 类的新实例。
            </summary>
      <param name="key">
                包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>
              为指定数据创建 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 签名。
            </summary>
      <param name="rgbHash">
                要签名的数据。
              </param>
      <returns>
        <paramref name="rgbHash" /> 的数字签名。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
                  键为 <see langword="null" />。
                
                  - 或 - 
                
                  哈希算法为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>
              设置用于创建签名的哈希算法。
            </summary>
      <param name="strName">
                用于创建签名的哈希算法的名称。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              设置要用于创建签名的私钥。
            </summary>
      <param name="key">
                包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>
              指定要用于 RSA 签名创建或验证操作填充模式和参数。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与当前实例进行比较的对象。
              </param>
      <returns>
              如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 对象相等。
            </summary>
      <param name="other">
                要与当前实例进行比较的对象。
              </param>
      <returns>
              如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的哈希代码。
            </summary>
      <returns>
              此 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的哈希代码。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>
              获取此 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的填充模式。
            </summary>
      <returns>
              此实例的填充模式（<see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 或 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />）。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              指示所指定的两个 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 对象是否相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <see langword="left" /> 和 <see langword="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              指示所指定的两个 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 对象是否不相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              如果 <see langword="left" /> 和 <see langword="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>
              获取使用 PKCS #1 v1.5 填充模式的对象。
            </summary>
      <returns>
              使用的 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 填充模式的对象。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>
              获取使用 PSS 填充模式的对象。
            </summary>
      <returns>
              使用的 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> 填充模式的对象（salt 字节数等于哈希大小）。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>
              返回当前 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的字符串表示形式。
            </summary>
      <returns>
              当前对象的字符串表示形式。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>
              指定要使用 RSA 签名创建或验证操作的填充模式。
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>
              PKCS #1 v1.5
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>
              概率签名方案
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA1" /> 输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA1" /> 的新实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  此对象上的策略不符合 FIPS 的算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>
              创建一个实例的默认实现 <see cref="T:System.Security.Cryptography.SHA1" />。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.SHA1" /> 的指定实现的实例。
            </summary>
      <param name="hashName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.SHA1" /> 要使用。
              </param>
      <returns>
              新实例 <see cref="T:System.Security.Cryptography.SHA1" /> 使用指定的实现。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA1" /> 使用托管的库的输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 类的新实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  此类不符合 FIPS 的算法。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将数据写入到对象路由 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 哈希算法以计算哈希值。
            </summary>
      <param name="rgb">
                输入数据。
              </param>
      <param name="ibStart">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="cbSize">
                数组中用作数据的字节数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
      <summary>
              返回计算所得 <see cref="T:System.Security.Cryptography.SHA1" /> 后的所有数据的哈希值写入对象。
            </summary>
      <returns>
              计算所得的哈希代码。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA256" /> 输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA256" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>
              创建一个实例的默认实现 <see cref="T:System.Security.Cryptography.SHA256" />。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" /> 的新实例。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>
              创建的指定实现的实例 <see cref="T:System.Security.Cryptography.SHA256" />。
            </summary>
      <param name="hashName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.SHA256" /> 要使用。
              </param>
      <returns>
              新实例 <see cref="T:System.Security.Cryptography.SHA256" /> 使用指定的实现。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="hashName" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA256" /> 使用托管的库的输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 类使用的托管的库。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  启用联邦信息处理标准 (FIPS) 的安全设置。
                   此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写，将数据写入到对象的路由 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希算法以计算哈希值。
            </summary>
      <param name="rgb">
                输入数据。
              </param>
      <param name="ibStart">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="cbSize">
                数组中用作数据的字节数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
      <summary>
              当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
      <returns>
              计算所得的哈希代码。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA384" /> 输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA384" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>
              创建一个实例的默认实现 <see cref="T:System.Security.Cryptography.SHA384" />。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" /> 的新实例。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>
              创建的指定实现的实例 <see cref="T:System.Security.Cryptography.SHA384" />。
            </summary>
      <param name="hashName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.SHA384" /> 要使用。
              </param>
      <returns>
              新实例 <see cref="T:System.Security.Cryptography.SHA384" /> 使用指定的实现。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="hashName" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA384" /> 使用托管的库的输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 类的新实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  启用联邦信息处理标准 (FIPS) 的安全设置。
                   此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写，将数据写入到对象的路由 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 哈希算法以计算哈希值。
            </summary>
      <param name="rgb">
                输入数据。
              </param>
      <param name="ibStart">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="cbSize">
                数组中用作数据的字节数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashFinal">
      <summary>
              当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
      <returns>
              计算所得的哈希代码。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 的实例。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA512" /> 输入数据的哈希值。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA512" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>
              创建一个实例的默认实现 <see cref="T:System.Security.Cryptography.SHA512" />。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" /> 的新实例。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>
              创建的指定实现的实例 <see cref="T:System.Security.Cryptography.SHA512" />。
            </summary>
      <param name="hashName">
                名称的特定实现 <see cref="T:System.Security.Cryptography.SHA512" /> 要使用。
              </param>
      <returns>
              新实例 <see cref="T:System.Security.Cryptography.SHA512" /> 使用指定的实现。
            </returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
                  所描述的算法 <paramref name="hashName" /> 参数在使用了联邦信息处理标准 (FIPS) 模式下启用，但没有获得 FIPS 兼容。
                </exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>
              计算 <see cref="T:System.Security.Cryptography.SHA512" /> 使用托管的库的输入数据的哈希算法。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 类的新实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  启用联邦信息处理标准 (FIPS) 的安全设置。
                   此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)">
      <param name="disposing">
      </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写，将数据写入到对象的路由 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 哈希算法以计算哈希值。
            </summary>
      <param name="rgb">
                输入数据。
              </param>
      <param name="ibStart">
                字节数组中的偏移量，从该位置开始使用数据。
              </param>
      <param name="cbSize">
                数组中用作数据的字节数。
              </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashFinal">
      <summary>
              当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
      <returns>
              计算所得的哈希代码。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>
              初始化的实例 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 类使用的托管的库。
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>
              包含有关数字签名的属性的信息。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>
              从指定的 <see cref="T:System.Security.SecurityElement" /> 初始化 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 类的新实例。
            </summary>
      <param name="el">
        <see cref="T:System.Security.SecurityElement" /> 要从其中获取签名说明算法。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="el" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 实例与指定的密钥使用 <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" /> 属性。
            </summary>
      <param name="key">
                要在中使用的键 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />。
              </param>
      <returns>
              新创建 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例使用 <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" /> 属性。
            </summary>
      <returns>
              新创建 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
              创建 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 实例与指定的密钥使用 <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" /> 属性。
            </summary>
      <param name="key">
                要在中使用的键 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />。
              </param>
      <returns>
              新创建 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 实例。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>
              获取或设置签名说明的反格式化程序算法。
            </summary>
      <returns>
              签名说明的反格式化程序算法。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>
              获取或设置签名说明的摘要算法。
            </summary>
      <returns>
              签名说明的摘要算法。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>
              获取或设置签名说明的格式化程序算法。
            </summary>
      <returns>
              签名说明的格式化程序算法。
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>
              获取或设置签名说明的密钥算法。
            </summary>
      <returns>
              签名说明的密钥算法。
            </returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>
              表示三重数据加密标准算法的基类，<see cref="T:System.Security.Cryptography.TripleDES" /> 的所有实现都必须从此基类派生。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Cryptography.TripleDES" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>
              创建加密对象的实例以执行 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法。
            </summary>
      <returns>
              加密对象的实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>
              创建加密的对象来执行的指定的实现的实例 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法。
            </summary>
      <param name="str">
                名称的特定实现 <see cref="T:System.Security.Cryptography.TripleDES" /> 使用。
              </param>
      <returns>
              加密对象的实例。
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>
              确定指定的密钥是否为弱密钥。
            </summary>
      <param name="rgbKey">
                要进行漏洞测试的密钥。
              </param>
      <returns>
              如果密钥为弱密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 参数的大小无效。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>
              获取或设置 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法的密钥。
            </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 算法的密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将密钥设置为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  尝试设置的密钥长度无效。
                
                  - 或 - 
                
                  尝试设置弱密钥（请参阅 <see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" />）。
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.LegalBlockSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.LegalKeySizes">
      <returns>
      </returns>
    </member>
  </members>
</doc>