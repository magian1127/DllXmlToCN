<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>
              表示已验证的 XML 节点的架构验证信息集。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 对应的内容类型的对象验证 XML 节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>
              获取或设置一个值，该值指示是否这个被验证的 XML 节点被设置为在 XML 架构定义语言 (XSD) 架构验证过程中应用的默认的结果。
            </summary>
      <returns>
              一个 <see langword="bool" /> 值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>
              获取或设置一个值，该值指示此验证的 XML 节点值是否为零。
            </summary>
      <returns>
              一个 <see langword="bool" /> 值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>
              获取或设置此已验证的 XML 节点的动态架构类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>
              获取或设置已编译 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 与对应于此的对象验证 XML 节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>
              获取或设置已编译 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 与对应于此的对象验证 XML 节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>
              获取或设置此已验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 验证 XML 节点的此值。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>
              此类表示 <see langword="key" /> 由 World Wide Web 联合会 (W3C) 指定来自 xml 架构元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaKey" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>
              此类表示 <see langword="keyref" /> 由 World Wide Web 联合会 (W3C) 指定来自 xml 架构元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>
              获取或设置键的名称（此约束在另一个简单或复杂的类型中引用）。
            </summary>
      <returns>
              此约束引用的键的 QName。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>
              表示 <see langword="length" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构方面。
               此类可用于指定的长度限制 <see langword="simpleType" /> 上的数据类型的元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>
              表示 <see langword="maxExclusive" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于指定的最大值限制 <see langword="simpleType" /> 元素。
               此元素的值必须小于的值 <see langword="maxExclusive" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>
              表示 <see langword="maxInclusive" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于指定的最大值限制 <see langword="simpleType" /> 元素。
               此元素的值必须小于或等于的值 <see langword="maxInclusive" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>
              表示 <see langword="maxLength" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于指定的数据值的最大长度限制 <see langword="simpleType" /> 元素。
               长度必须小于的值 <see langword="maxLength" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>
              表示 <see langword="minExclusive" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于指定的最小值限制 <see langword="simpleType" /> 元素。
               此元素的值必须是大于值 <see langword="minExclusive" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>
              表示 <see langword="minInclusive" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于对 simpleType 元素的最小值指定限制。
               此元素的值必须大于或等于的值 <see langword="minInclusive" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>
              表示 <see langword="minLength" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于指定的数据值的最小长度限制 <see langword="simpleType" /> 元素。
               长度必须大于值 <see langword="minLength" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>
              表示 <see langword="notation" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               XML 架构 <see langword="notation" /> 声明是一种重构形式的 <see langword="XML 1.0 NOTATION" /> 声明。
               批注的目的是描述 XML 文档中的非 XML 数据的格式。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>
              获取或设置批注的名称。
            </summary>
      <returns>
              批注的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>
              获取或设置 <see langword="public" /> 标识符。
            </summary>
      <returns>
        <see langword="public" /> 标识符。
               该值必须是有效的统一资源标识符 (URI)。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>
              获取或设置 <see langword="system" /> 标识符。
            </summary>
      <returns>
        <see langword="system" /> 标识符。
               该值必须是有效的 URI。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>
              抽象类，用于定义 <see langword="numeric" /> 方面。
               此类是数值方面类的基类如 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /></summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>
              表示 Xml 架构对象模型层次结构的根类，并如作为类的基类 <see cref="T:System.Xml.Schema.XmlSchema" /> 类。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>
              获取或设置到的文件中的行号 <see langword="schema" /> 元素引用。
            </summary>
      <returns>
              行号。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>
              获取或设置到的文件中的行位置 <see langword="schema" /> 元素引用。
            </summary>
      <returns>
              行位置。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>
              获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 要用于此架构对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 架构对象的属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>
              获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </summary>
      <returns>
              父 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>
              获取或设置加载的架构的文件的源位置。
            </summary>
      <returns>
              文件的源位置 (URI)。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的集合。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>
              初始化 <see langword="XmlSchemaObjectCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>
              新实例初始化 <see langword="XmlSchemaObjectCollection" /> 采用类 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </summary>
      <param name="parent">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>
              将 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 添加到 <see langword="XmlSchemaObjectCollection" /> 中。
            </summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <returns>
              已从该处添加项的索引。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 大于 <see langword="Count" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 指定参数的类型不是 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 或其派生的类型 <see cref="T:System.Xml.Schema.XmlSchemaImport" />, ，<see cref="T:System.Xml.Schema.XmlSchemaInclude" />, ，和 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>
              指示如果指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 处于 <see langword="XmlSchemaObjectCollection" />。
            </summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <returns>
        <see langword="true" /> 如果指定的限定的名是集合中的否则，返回 <see langword="false" />。
               如果提供空值， <see langword="false" /> 返回因为具有空名称的限定的名。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>
              将所有复制 <see cref="T:System.Xml.Schema.XmlSchemaObject" />s 从到给定数组，从给定索引处开始的集合。
            </summary>
      <param name="array">
                一维数组，它是从 <see langword="XmlSchemaObjectCollection" /> 中复制的元素的目标。
                 该数组的索引必须从零开始。
              </param>
      <param name="index">
                数组中开始复制的位置的索引（从零开始）。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为空引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                  - 或 - 
                
                  <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                  - 或 - 
                
                  源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中的元素数大于从索引到目标数组末尾处的可用空间。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  源类型 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 无法自动转换为目标数组的类型。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>
              返回一个枚举数用于循环访问 <see langword="XmlSchemaObjects" /> 中包含 <see langword="XmlSchemaObjectCollection" />。
            </summary>
      <returns>
              迭代器返回 <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>
              获取对应于指定的集合索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 你想要返回其索引。
              </param>
      <returns>
              对应于指定的索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>
              将插入 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 到 <see langword="XmlSchemaObjectCollection" />。
            </summary>
      <param name="index">
                从零开始的索引，应在该位置插入项。
              </param>
      <param name="item">
                要插入的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 - 
                
                  <paramref name="index" /> 大于 <see langword="Count" />。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>
              获取位于指定索引处的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </summary>
      <param name="index">
                索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>
        <see langword="OnClear" /> 在标准之前调用 <see langword="Clear" /> 行为。
               有关详细信息，请参阅 OnClear 方法 <see cref="T:System.Collections.CollectionBase" />。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="OnInsert" /> 在标准之前调用 <see langword="Insert" /> 行为。
               有关详细信息，请参阅 <see langword="OnInsert" /> 方法 <see cref="T:System.Collections.CollectionBase" />。
            </summary>
      <param name="index">
                索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <param name="item">
                项。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="OnRemove" /> 在标准之前调用 <see langword="Remove" /> 行为。
               有关详细信息，请参阅 <see langword="OnRemove" /> 方法 <see cref="T:System.Collections.CollectionBase" />。
            </summary>
      <param name="index">
                索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <param name="item">
                项。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="OnSet" /> 在标准之前调用 <see langword="Set" /> 行为。
               有关详细信息，请参阅的开始方法 <see cref="T:System.Collections.CollectionBase" />。
            </summary>
      <param name="index">
                索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
      <param name="oldValue">
                旧值。
              </param>
      <param name="newValue">
                新值。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>
              删除 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 从 <see langword="XmlSchemaObjectCollection" />。
            </summary>
      <param name="item">
                要移除的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
              </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>
              表示 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 的枚举器。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>
              获取当前 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 集合中。
            </summary>
      <returns>
              当前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>
              移至集合中的下一个项。
            </summary>
      <returns>
        <see langword="false" /> 在集合的末尾。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>
              将枚举数重置到集合的开头。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />。
            </summary>
      <returns>
              当前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />。
            </summary>
      <returns>
              下一个 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>
              中的包含元素的集合提供 <see cref="T:System.Xml.Schema.XmlSchema" /> 类 （例如，属性、 属性组、 元素和等等）。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>
              确定集合中是否存在指定的限定的名。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" />。
              </param>
      <returns>
        <see langword="true" /> 如果指定的限定的名集合中的存在否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中包含的项的数量。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中包含的项的数量。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>
              返回可循环访问 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 的枚举器。
            </summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> ，它可以循环访问 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>
              返回中的元素 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 指定限定名。
            </summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> 要返回的元素。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中的元素的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 指定限定名。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>
              返回一个集合中的所有命名元素 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。
            </summary>
      <returns>
              中的所有命名元素的集合 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>
              返回集合中的所有元素的所有值的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。
            </summary>
      <returns>
              中的所有元素的所有值的集合 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>
              为此，抽象类是所有微粒类型的基类 (例如 <see cref="T:System.Xml.Schema.XmlSchemaAny" />)。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>
              获取或设置最大数目的粒子可发生的次数。
            </summary>
      <returns>
              粒子可发生的最大次数。
               默认值为 1。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>
              获取或设置作为字符串值的数目。
               粒子可发生的最大次数。
            </summary>
      <returns>
              将数字显示为一个字符串值。
              <see langword="String.Empty" /> 指示 <see langword="MaxOccurs" /> 是否等同于默认值。
               默认为空引用。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>
              获取或设置粒子可发生最小次数。
            </summary>
      <returns>
              粒子可发生的最小次数。
               默认值为 1。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>
              获取或设置作为字符串值的数目。
               粒子可发生的最小次数。
            </summary>
      <returns>
              将数字显示为一个字符串值。
              <see langword="String.Empty" /> 指示 <see langword="MinOccurs" /> 是否等同于默认值。
               默认为空引用。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>
              表示 <see langword="pattern" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于指定为输入的值限制 <see langword="simpleType" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>
              表示 <see langword="redefine" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于允许在当前架构中重新定义来自外部架构文件中的简单和复杂类型、组和属性组。
               此类还可用于为架构元素提供版本控制。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> , ，对于架构中的所有属性，它保存编译后值的 <see langword="AttributeGroups" /> 属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有属性。
               编译后值的 <see langword="AttributeGroups" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />, ，架构中的所有组，它都保存编译后值的 <see langword="Groups" /> 属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有组。
               编译后值的 <see langword="Groups" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>
              获取下列类的集合︰ <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, ，<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, ，<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, ，和 <see cref="T:System.Xml.Schema.XmlSchemaGroup" />。
            </summary>
      <returns>
              重新定义的元素中包含的元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />, ，对于架构中的所有简单和复杂类型，它保存编译后值的 <see langword="SchemaTypes" /> 属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有架构类型。
               编译后值的 <see langword="SchemaTypes" /> 属性。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>
              表示 <see langword="sequence" /> 由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素 （复合器）。
              <see langword="sequence" /> 要求要显示在包含元素内指定的序列中的组中的元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>
              包含在排序器中的元素。
               集合 <see cref="T:System.Xml.Schema.XmlSchemaElement" />, ，<see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaSequence" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaAny" />。
            </summary>
      <returns>
              包含在排序器中的元素。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>
              包含 XML 架构定义语言 (XSD) 架构的缓存。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>
              使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
            </summary>
      <param name="nameTable">
                要使用的 <see cref="T:System.Xml.XmlNameTable" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlNameTable" /> 对象作为参数传递 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>
              添加了给定 <see cref="T:System.Xml.Schema.XmlSchema" /> 到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 要添加到对象 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象架构是否有效。
               如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定了，则 <see langword="null" /> 返回并引发适当的验证事件。
               否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  架构是无效的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象作为参数传递 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>
              中的所有 XML 架构定义语言 (XSD) 架构中都添加给定 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  中的架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象作为参数传递 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>
              将 XML 架构定义语言 (XSD) 架构添加到指定的 URL 处 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="targetNamespace">
                架构 targetNamespace 属性，或 <see langword="null" /> 使用 targetNamespace 架构中指定。
              </param>
      <param name="schemaUri">
                指定要加载的架构的 URL。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象架构是否有效。
               如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定了，则 <see langword="null" /> 返回并引发适当的验证事件。
               否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  架构是无效的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  作为参数传递的 URL 是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>
              添加包含在 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.XmlReader" /> 到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="targetNamespace">
                架构 targetNamespace 属性，或 <see langword="null" /> 使用 targetNamespace 架构中指定。
              </param>
      <param name="schemaDocument">
        <see cref="T:System.Xml.XmlReader" /> 对象。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象架构是否有效。
               如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定了，则 <see langword="null" /> 返回并引发适当的验证事件。
               否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  架构是无效的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象作为参数传递 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
               默认值是 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 实例与 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 属性设置为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>
              将添加到 XML 架构定义语言 (XSD) 架构编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 成一个逻辑架构。
            </summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  验证和编译中的架构时出错 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>
              该值指示指定的目标命名空间 URI 与 XML 架构定义语言 (XSD) 架构是否处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="targetNamespace">
                架构 targetNamespace 属性。
              </param>
      <returns>
        <see langword="true" /> 如果与指定的目标命名空间 URI 的架构是否在 <see cref="T:System.Xml.Schema.XmlSchemaSet" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>
              指示是否指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> 对象处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 参数原样传递 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
              将所有复制 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 到给定数组，从给定索引处开始。
            </summary>
      <param name="schemas">
                要向其复制对象的数组。
              </param>
      <param name="index">
                数组中开始复制处的索引。
              </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>
              获取数逻辑 XML 架构定义语言 (XSD) 架构中 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <returns>
              中的逻辑架构数 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>
              获取所有全局属性中所有 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <returns>
              属性特性的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>
              获取所有全局元素中所有 XML 架构定义语言 (XSD) 架构中 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <returns>
              全局元素的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>
              获取所有全局简单和复杂类型中所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <returns>
              全局简单和复杂类型的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>
              获取一个值，该值指示是否在 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 已编译。
            </summary>
      <returns>
        <see langword="true" /> 如果在架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 自上次架构已添加或删除从已编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>
              获取默认 <see cref="T:System.Xml.XmlNameTable" /> 使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 加载新的 XML 架构定义语言 (XSD) 架构时。
            </summary>
      <returns>
              原子化字符串对象表。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>
              删除指定的 XML 架构定义语言 (XSD) 架构从 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象以去除 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 从已删除对象 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 或 <see langword="null" /> 如果中找不到该架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  架构不是有效的架构。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 参数原样传递 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>
              删除指定的 XML 架构定义语言 (XSD) 架构和它从中导入的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schemaToRemove">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象以去除 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象以及所有导入已成功删除; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 参数原样传递 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>
              重新处理 XML 架构定义语言 (XSD) 架构中已存在 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <param name="schema">
                要重新处理的架构。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象架构是否是有效的架构。
               如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定，则 <see langword="null" /> 返回并引发适当的验证事件。
               否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  架构是无效的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象作为参数传递 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象传递参数中已不存在，因此 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>
              返回集合的所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含已添加到的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
               如果没有架构已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />, ，空 <see cref="T:System.Collections.ICollection" /> 返回对象。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>
              返回集合的所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 属于给定命名空间。
            </summary>
      <param name="targetNamespace">
                架构 targetNamespace 属性。
              </param>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含已添加到的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 属于给定命名空间。
               如果没有架构已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />, ，空 <see cref="T:System.Collections.ICollection" /> 返回对象。
            </returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>
              指定一个事件处理程序，用于接收有关 XML 架构定义语言 (XSD) 架构验证错误的信息。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>
              集 <see cref="T:System.Xml.XmlResolver" /> 用于解析包含和导入的架构元素的命名空间或中引用的位置。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> 用于解析包含和导入的架构元素的命名空间或中引用的位置。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>
              表示 <see langword="simpleContent" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类用于具有简单内容模型的简单和复杂类型。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>
              获取其中一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />。
            </summary>
      <returns>
              中包含的内容 <see langword="XmlSchemaSimpleContentRestriction" /> 或 <see langword="XmlSchemaSimpleContentExtension" /> 类。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>
              表示 <see langword="extension" /> 从 XML 架构中由 World Wide Web 联合会 (W3C) 指定的简单内容的元素。
               此类可用于按扩展派生简单类型。
               通过添加属性，此类派生可用于扩展元素的简单类型内容。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>
              获取或设置 <see langword="XmlSchemaAnyAttribute" /> 用于属性值。
            </summary>
      <returns>
        <see langword="XmlSchemaAnyAttribute" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>
              获取的集合 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />。
            </summary>
      <returns>
              属性集合 <see langword="simpleType" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>
              获取或设置内置数据类型或简单类型的名称（从其中扩展该类型）。
            </summary>
      <returns>
              基类型名称。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>
              表示 <see langword="restriction" /> 从 XML 架构中由 World Wide Web 联合会 (W3C) 指定的简单内容的元素。
               此类可用以通过限制派生简单类型。
               此种派生可用于将元素的值范围限制为在继承的简单类型中指定的值的子集。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 用于属性值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 属性值。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>
              获取简单类型的属性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 集合。
            </summary>
      <returns>
              简单类型的属性集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>
              获取或设置简单类型基值。
            </summary>
      <returns>
              简单类型基值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>
              获取或设置内置数据类型或简单类型（该类型从其中派生）的名称。
            </summary>
      <returns>
              基类型的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>
              获取或设置一个 XML 架构方面。
            </summary>
      <returns>
              以下方面类之一：
            
              <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>
              表示 <see langword="simpleType" /> 从 XML 架构中由 World Wide Web 联合会 (W3C) 指定的简单内容的元素。
               此类定义简单类型。
               简单类型可以为具有纯文本内容的属性值或元素值指定信息和约束。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>
              获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />, ，<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />。
            </summary>
      <returns>
              其中一个 <see langword="XmlSchemaSimpleTypeUnion" />, ，<see langword="XmlSchemaSimpleTypeList" />, ，或 <see langword="XmlSchemaSimpleTypeRestriction" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>
              简单类型内容类的的抽象类。 的
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>
              表示 <see langword="list" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可以用于定义 <see langword="simpleType" /> 元素，作为指定的数据类型的值的列表。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 表示类型的 <see langword="simpleType" /> 元素根据 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" /> 简单类型的值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 表示类型的 <see langword="simpleType" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>
              获取或设置 <see langword="simpleType" /> 从基值指定的类型派生的元素。
            </summary>
      <returns>
              简单类型元素的项类型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>
              获取或设置内置数据类型的名称或 <see langword="simpleType" /> 此架构 （或由指定的命名空间指示的另一个架构） 中定义的元素。
            </summary>
      <returns>
              简单类型列表的类型名称。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>
              表示 <see langword="restriction" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构简单类型的元素。
               此类可用于限制 <see langword="simpleType" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>
              获取或设置有关基类型的信息。
            </summary>
      <returns>
              基类型 <see langword="simpleType" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>
              获取或设置限定的基类型的名称。
            </summary>
      <returns>
              简单类型限制基类型的限定名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>
              获取或设置一个 XML 架构方面。
            </summary>
      <returns>
              以下方面类之一：
            
              <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>
              表示 <see langword="union" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构简单类型的元素。
               一个 <see langword="union" /> 数据类型可以用于指定的内容 <see langword="simpleType" />。
               值 <see langword="simpleType" /> 元素必须是该联合中指定的备用数据类型的一任何的组一个。
               联合类型始终是派生类型，必须至少包含两种替代数据类型。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>
              获取一个数组 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象表示的一种 <see langword="simpleType" /> 元素根据 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 简单类型的值。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象表示的一种 <see langword="simpleType" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>
              获取基类型的集合。
            </summary>
      <returns>
              简单类型基值的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>
              获取或设置内置数据类型的名称的限定的成员的数组或 <see langword="simpleType" /> 此架构 （或由指定的命名空间指示的另一个架构） 中定义的元素。
            </summary>
      <returns>
              一个由内置数据类型或简单类型的成员列表组成的数组。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>
              表示 <see langword="totalDigits" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构方面。
               此类可用于指定的数字个数，可输入的值的限制 <see langword="simpleType" /> 元素。
               该值的 <see langword="totalDigits" /> 必须是正整数。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>
              所有简单类型和复杂类型的基类。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>
              获取编译后的对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 简单类型元素或 complexType 元素。
               这是后架构编译信息集属性。
            </summary>
      <returns>
              内置 XSD 数据类型、 简单类型元素或 complexType 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>
              获取此架构类型的基类型编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象，表示此架构类型的基类型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>
              获取复杂类型的数据类型的编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 架构编译后值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>
              获取此元素通过其基类型派生的方式上的编译后信息。
            </summary>
      <returns>
              一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>
              获取或设置指示是否允许进一步派生的类型派生的最终属性。
            </summary>
      <returns>
              一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值。
               默认值为 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>
              获取的编译后值 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 属性。
            </summary>
      <returns>
              编译后值的 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 属性。
               默认值是 <see langword="finalDefault" /> 属性值为 <see langword="schema" /> 元素。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>
              返回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> ，它表示指定的复杂类型的内置复杂类型。
            </summary>
      <param name="typeCode">
                其中一个 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 表示复杂类型的值。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> ，它表示的内置复杂类型。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>
              返回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> ，它表示指定限定名的复杂类型的内置复杂类型。
            </summary>
      <param name="qualifiedName">
        <see cref="T:System.Xml.XmlQualifiedName" /> 的复杂类型。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> ，它表示的内置复杂类型。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>
              返回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> ，它表示指定的简单类型的内置简单类型。
            </summary>
      <param name="typeCode">
                其中一个 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 表示简单类型的值。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> ，它表示的内置简单类型。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>
              返回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> ，它表示由限定的名称指定的简单类型的内置简单类型。
            </summary>
      <param name="qualifiedName">
        <see cref="T:System.Xml.XmlQualifiedName" /> 的简单类型。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> ，它表示的内置简单类型。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>
              返回一个值，该值指示指定的派生的架构类型从指定的基本架构类型派生
            </summary>
      <param name="derivedType">
                在派生 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 测试。
              </param>
      <param name="baseType">
                基 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 测试派生 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对。
              </param>
      <param name="except">
                其中一个 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 表示不包括在测试的类型派生方法的值。
              </param>
      <returns>
        <see langword="true" /> 如果派生的类型派生自基类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>
              获取或设置一个值，该值指示此类型是否具有混合内容模型。
               此属性才是有效的复杂类型中。
            </summary>
      <returns>
        <see langword="true" /> 如果该类型具有混合内容模型中;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>
              获取或设置类型的名称。
            </summary>
      <returns>
              类型的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>
              获取从生成的类型的限定的名 <see langword="Name" /> 此类型的属性。
               这是后架构编译属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" /> 从生成的类型为 <see langword="Name" /> 此类型的属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值之一。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>
              表示 <see langword="unique" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类可用于标识一组元素中的唯一约束。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>
              如何使用该属性指示符。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>
              使用未指定的属性。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>
              属性是可选的。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>
              不能使用属性。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>
              属性必须出现一次。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>
              表示正在验证的 XML 文档中遇到 XML 架构定义语言 (XSD) 架构验证错误和警告时引发的异常。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 类，具有指定的异常消息。
            </summary>
      <param name="message">
                一个 <see langword="string" /> 错误条件的说明。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 指定的对象。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 使用异常消息和原始 <see cref="T:System.Exception" /> 导致此异常指定的对象。
            </summary>
      <param name="message">
                一个 <see langword="string" /> 错误条件的说明。
              </param>
      <param name="innerException">
                原始 <see cref="T:System.Exception" /> 导致此异常的对象。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 用指定的异常消息和原始 <see cref="T:System.Exception" /> 对象、 行号和导致此异常指定的 xml 的行位置。
            </summary>
      <param name="message">
                一个 <see langword="string" /> 错误条件的说明。
              </param>
      <param name="innerException">
                原始 <see cref="T:System.Exception" /> 导致此异常的对象。
              </param>
      <param name="lineNumber">
                导致此异常的 XML 行号。
              </param>
      <param name="linePosition">
                导致此异常的 XML 行位置。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              构造一个新 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 对象与给定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 包含的所有属性的信息 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>
              设置会导致错误的 XML 节点。
            </summary>
      <param name="sourceObject">
                源对象。
              </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>
              获取导致以下情况的 XML 节点 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />。
            </summary>
      <returns>
              导致以下情况的 XML 节点 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>
              指定使用的架构验证选项 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 和 <see cref="T:System.Xml.XmlReader" /> 类。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>
              允许将 xml: * 属性即使它们未定义的架构中。
               属性将基于其数据类型验证。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>
              不能处理标识约束、 内联架构、 架构位置提示或报告架构验证警告。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>
              处理标识约束 (xs:ID, ，xs:IDREF, ，xs:key, ，xs:keyref, ，xs:unique) 在验证期间遇到。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>
              在验证期间遇到进程内联架构。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>
              处理架构位置提示 (xsi:schemaLocation, ，xsi:noNamespaceSchemaLocation) 在验证期间遇到。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>
              报告在验证期间遇到的架构验证警告。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>
              表示一个 XML 架构定义语言 (XSD) 架构验证引擎。
              <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类不能被继承。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类的新实例。
            </summary>
      <param name="nameTable">
        <see cref="T:System.Xml.XmlNameTable" /> 对象，它包含作为原子化字符串的元素和属性名称。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，其中包含用于验证的 XML 架构定义语言 (XSD) 架构。
              </param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象用于解析在验证过程中遇到的命名空间。
              </param>
      <param name="validationFlags">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 值，该值指定架构验证选项。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  一个或多个指定的参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
                  编译中的架构时出错 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 参数。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>
              将一个 XML 架构定义语言 (XSD) 架构添加到用于验证的架构集。
            </summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 要添加到的一组用于验证的架构对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 参数指定是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  目标命名空间 <see cref="T:System.Xml.Schema.XmlSchema" /> 参数与匹配的任何元素或属性已经遇到 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象。
                </exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 是无效的参数。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>
              结束验证，并检查整个 XML 文档的标识约束。
            </summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  XML 文档中找到一个标识约束错误。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>
              返回当前元素上下文的期望属性。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对象或如果没有期望的属性的空数组。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>
              返回当前元素上下文中的期望微粒。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 对象或如果没有期望的粒子的空数组。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>
              验证默认属性的标识约束，并填充 <see cref="T:System.Collections.ArrayList" /> 指定 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 具有未经过以前验证使用的默认值的任何属性的对象 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 元素上下文中的方法。
            </summary>
      <param name="defaultAttributes">
        <see cref="T:System.Collections.ArrayList" /> 要填充 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 尚未在元素上下文中的验证过程中遇到的任何属性的对象。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>
              初始化的状态 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 方法均有效的构造后立即 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象或调用了 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 仅。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>
              初始化的状态 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象使用 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 指定以进行部分验证。
            </summary>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 用于初始化的验证上下文对象 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象以进行部分验证。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 方法均有效的构造后立即 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象或调用了 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 仅。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 参数不是 <see cref="T:System.Xml.Schema.XmlSchemaElement" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 参数不能为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>
              获取或设置所验证的 XML 节点的行号信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.IXmlLineInfo" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>
              跳过当前元素内容的验证并准备 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象以验证父元素的上下文中的内容。
            </summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 如果成功跳过当前元素内容都将设置其属性的对象。
                 此参数可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 按照正确的顺序不调用方法。
                   例如，调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>
              获取或设置所验证 XML 节点的源 URI。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 对象表示所验证的 XML 节点的源 URI; 默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>
              验证当前元素上下文中的属性名称、命名空间 URI 和值。
            </summary>
      <param name="localName">
                要验证的属性的本地名称。
              </param>
      <param name="namespaceUri">
                要验证的属性的命名空间 URI。
              </param>
      <param name="attributeValue">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" /> 用于将作为公共语言运行时 (CLR) 类型的属性的值传递与该属性的 XML 架构定义语言 (XSD) 类型兼容。
              </param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象在成功验证特性后设置其属性。
                 此参数可以是 <see langword="null" />。
              </param>
      <returns>
              验证的属性的值。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  该属性无效，不能在当前元素上下文中。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 按照正确的顺序不调用方法。
                   例如，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  一个或多个指定的参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>
              验证当前元素上下文中的属性名称、命名空间 URI 和值。
            </summary>
      <param name="localName">
                要验证的属性的本地名称。
              </param>
      <param name="namespaceUri">
                要验证的属性的命名空间 URI。
              </param>
      <param name="attributeValue">
                要验证的属性的值。
              </param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象在成功验证特性后设置其属性。
                 此参数可以为 <see langword="null" />。
              </param>
      <returns>
              验证的属性的值。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  该属性无效，不能在当前元素上下文中。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 按照正确的顺序不调用方法。
                   例如，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  一个或多个指定的参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>
              验证当前上下文中的元素。
            </summary>
      <param name="localName">
                要验证的元素的本地名称。
              </param>
      <param name="namespaceUri">
                要验证的元素的命名空间 URI。
              </param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性设置在成功验证元素的名称。
                 此参数可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  此元素的名称在当前上下文中无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 按照正确的顺序不调用方法。
                   例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>
              验证与当前上下文中的元素 xsi:Type, ，xsi:Nil, ，xsi:SchemaLocation, ，和 xsi:NoNamespaceSchemaLocation 属性指定的值。
            </summary>
      <param name="localName">
                要验证的元素的本地名称。
              </param>
      <param name="namespaceUri">
                要验证的元素的命名空间 URI。
              </param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性设置在成功验证元素的名称。
                 此参数可以为 <see langword="null" />。
              </param>
      <param name="xsiType">
                xsi:Type 属性的元素的值。
                 此参数可以为 <see langword="null" />。
              </param>
      <param name="xsiNil">
                xsi:Nil 属性的元素的值。
                 此参数可以为 <see langword="null" />。
              </param>
      <param name="xsiSchemaLocation">
                xsi:SchemaLocation 属性的元素的值。
                 此参数可以为 <see langword="null" />。
              </param>
      <param name="xsiNoNamespaceSchemaLocation">
                xsi:NoNamespaceSchemaLocation 属性的元素的值。
                 此参数可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  此元素的名称在当前上下文中无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 按照正确的顺序不调用方法。
                   例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>
              对于具有简单内容的元素，根据其数据类型验证元素的文本内容是否有效；对于具有复杂内容的元素，验证当前元素的内容是否完整。
            </summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象在成功验证元素设置其属性。
                 此参数可以为 <see langword="null" />。
              </param>
      <returns>
              如果元素具有简单内容，则为该元素已分析的类型化文本值。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  元素的内容不是有效的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 按照正确的顺序不调用方法。
                   例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法在调用之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>
              根据指定元素的数据类型验证该元素的文本内容是否有效。
            </summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 在成功验证元素的文本内容设置其属性的对象。
                 此参数可以为 <see langword="null" />。
              </param>
      <param name="typedValue">
                元素中的类型化文本内容。
              </param>
      <returns>
              元素的已分析的类型化简单内容。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  元素的文本内容不是有效的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 按照正确的顺序不调用方法 (例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法在调用之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />)，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 已以前所做的方法，或者该元素具有复杂内容。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  键入的文本内容参数不能为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>
              验证元素上下文中所有必需的属性是否已存在，并且 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象是否已准备好验证元素的子内容。
            </summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象在成功验证元素上下文中需要的所有属性都是否存在设置其属性。
                 此参数可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  找不到一个或多个当前元素上下文中所需的属性。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 按照正确的顺序不调用方法。
                   例如，调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  一个或多个指定的参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>
              验证是否文本 <see langword="string" /> 是否允许在当前元素上下文中，指定并累积文本以进行验证，如果当前元素具有简单内容。
            </summary>
      <param name="elementValue">
                文本 <see langword="string" /> 在当前元素上下文中进行验证。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  文本 <see langword="string" /> 指定不允许在当前元素上下文中。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 按照正确的顺序不调用方法。
                   例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  文本 <see langword="string" /> 参数不能为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>
              验证是否返回的文本 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 指定对象允许在当前元素上下文中，并累积文本以进行验证，如果当前元素具有简单内容。
            </summary>
      <param name="elementValue">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" /> 用来传递作为公共语言运行时 (CLR) 类型的文本值与该属性的 XML 架构定义语言 (XSD) 类型兼容。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  文本 <see langword="string" /> 指定不允许在当前元素上下文中。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 按照正确的顺序不调用方法。
                   例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  文本 <see langword="string" /> 参数不能为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>
              验证是否中的空白 <see langword="string" /> 是否允许在当前元素上下文中，指定并累积空白以进行验证，如果当前元素具有简单内容。
            </summary>
      <param name="elementValue">
                空白 <see langword="string" /> 在当前元素上下文中进行验证。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  当前元素上下文中不允许有空格。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 按照正确的顺序不调用方法。
                   例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>
              验证是否返回空白 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 对象指定允许在当前元素上下文中，并累积空白以进行验证，如果当前元素具有简单内容。
            </summary>
      <param name="elementValue">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" /> 用来传递作为公共语言运行时 (CLR) 类型的空白值与该属性的 XML 架构定义语言 (XSD) 类型兼容。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  当前元素上下文中不允许有空格。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 按照正确的顺序不调用方法。
                   例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。
                </exception>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> ，它接收架构验证警告和架构验证过程中遇到错误。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>
              获取或设置作为验证事件的发件人对象所发送的对象。
            </summary>
      <returns>
        <see cref="T:System.Object" />; 这是默认值 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>
              集 <see cref="T:System.Xml.XmlResolver" /> 对象用于解析 xs:import 和 xs:include 元素，以及 xsi:schemaLocation 和 xsi:noNamespaceSchemaLocation 属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> 对象; 默认值是 <see cref="T:System.Xml.XmlUrlResolver" /> 对象。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>
              表示由验证 XML 项的有效性 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>
              XML 项无效。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>
              XML 项的有效性未知。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>
              XML 项才有效。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="whiteSpace" /> 方面。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="selector" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>
              获取或设置 XPath 表达式的属性。
            </summary>
      <returns>
              XPath 表达式的字符串属性值。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>
              表示验证事件的严重性。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>
              指示在验证实例文档时出现验证错误。
               这适用于文档类型定义 (Dtd) 和 XML 架构定义语言 (XSD) 架构。
               World Wide Web 联合会 (W3C) 有效性约束被视为错误。
               如果尚未创建任何验证事件处理程序，错误将引发异常。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>
              表示验证事件发生，不是一个错误。
               在没有验证特定元素或属性对没有 DTD 或 XML 架构时，通常会发出警告。
               与错误不同，警告确实引发了异常，如果没有验证事件处理程序。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>
              表示 W3C XML 架构定义语言 (XSD) 架构类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>
              联合的任何原子值。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>
              W3C XML 架构 <see langword="xs:anyURI" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>
              W3C XML 架构 <see langword="xs:base64Binary" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>
              W3C XML 架构 <see langword="xs:boolean" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>
              W3C XML 架构 <see langword="xs:byte" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>
              W3C XML 架构 <see langword="xs:date" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>
              W3C XML 架构 <see langword="xs:dateTime" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>
              W3C XML 架构 <see langword="xs:decimal" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>
              W3C XML 架构 <see langword="xs:double" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>
              W3C XML 架构 <see langword="xs:Duration" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>
              W3C XML 架构 <see langword="xs:ENTITY" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>
              W3C XML 架构 <see langword="xs:float" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>
              W3C XML 架构 <see langword="xs:gDay" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>
              W3C XML 架构 <see langword="xs:gMonth" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>
              W3C XML 架构 <see langword="xs:gMonthDay" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>
              W3C XML 架构 <see langword="xs:gYear" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>
              W3C XML 架构 <see langword="xs:gYearMonth" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>
              W3C XML 架构 <see langword="xs:hexBinary" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>
              W3C XML 架构 <see langword="xs:ID" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>
              W3C XML 架构 <see langword="xs:IDREF" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>
              W3C XML 架构 <see langword="xs:int" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>
              W3C XML 架构 <see langword="xs:integer" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>
              例如，节点或原子值项。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>
              W3C XML 架构 <see langword="xs:language" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>
              W3C XML 架构 <see langword="xs:long" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>
              W3C XML 架构 <see langword="xs:Name" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>
              W3C XML 架构 <see langword="xs:NCName" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>
              W3C XML 架构 <see langword="xs:negativeInteger" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>
              W3C XML 架构 <see langword="xs:NMTOKEN" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>
              没有类型信息。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>
              W3C XML 架构 <see langword="xs:nonNegativeInteger" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>
              W3C XML 架构 <see langword="xs:nonPositiveInteger" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>
              W3C XML 架构 <see langword="xs:normalizedString" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>
              W3C XML 架构 <see langword="xs:NOTATION" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>
              W3C XML 架构 <see langword="xs:positiveInteger" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>
              W3C XML 架构 <see langword="xs:QName" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>
              W3C XML 架构 <see langword="xs:short" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>
              W3C XML 架构 <see langword="xs:string" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>
              W3C XML 架构 <see langword="xs:time" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>
              W3C XML 架构 <see langword="xs:token" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>
              W3C XML 架构 <see langword="xs:unsignedByte" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>
              W3C XML 架构 <see langword="xs:unsignedInt" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>
              W3C XML 架构 <see langword="xs:unsignedLong" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>
              W3C XML 架构 <see langword="xs:unsignedShort" /> 类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>
              非类型化的原子值。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>
              此值支持.NET Framework 基础结构，不宜在代码中直接使用。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>
              一个 <see langword="delegate" /> 使用 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类作为公共语言运行时 (CLR) 类型兼容的属性、 文本或空白的 XML 架构定义语言 (XSD) 类型传递属性、 文本和空白值。
            </summary>
      <returns>
              包含属性、 文本或空白值的对象。
               对象是属性、 文本或空白值的 XSD 类型相对应的 CLR 类型。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>
              为 XML 序列化和反序列化提供自定义格式。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>
              此方法是保留方法，请不要使用。
               在实现 <see langword="IXmlSerializable" /> 接口时，应从此方法返回 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />），如果需要指定自定义架构，应向该类应用 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>
              从对象的 XML 表示形式生成该对象。
            </summary>
      <param name="reader">
                从中对对象进行反序列化的 <see cref="T:System.Xml.XmlReader" /> 流。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>
              将对象转换为其 XML 表示形式。
            </summary>
      <param name="writer">
                对象要序列化为的 <see cref="T:System.Xml.XmlWriter" /> 流。
              </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>
              指定该成员 (返回的数组的字段 <see cref="T:System.Xml.XmlAttribute" /> 对象) 都可以包含任何 XML 特性。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>
              构造的新实例 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> 类。
            </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>
              指定该成员 (返回的数组的字段 <see cref="T:System.Xml.XmlElement" /> 或 <see cref="T:System.Xml.XmlNode" /> 对象) 包含这些对象表示任何不具备对应成员对象以序列化或反序列化的 XML 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 类，并指定在 XML 文档中生成的 XML 元素名称。
            </summary>
      <param name="name">
                XML 元素的名称， <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 类，并指定 XML 文档和其 XML 命名空间中所生成的 XML 元素名称。
            </summary>
      <param name="name">
                XML 元素的名称， <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成。
              </param>
      <param name="ns">
                XML 元素的 XML 命名空间。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>
              获取或设置 XML 元素名称。
            </summary>
      <returns>
              XML 元素的名称。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数组成员的元素名称与指定的元素名称不匹配 <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> 属性。
                </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>
              获取或设置在 XML 文档中生成的 XML 命名空间。
            </summary>
      <returns>
              XML 命名空间。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>
              获取或设置显式的顺序序列化或反序列化元素。
            </summary>
      <returns>
              代码生成的顺序。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>
              指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必须将序列化为 XML 特性的类成员。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类并指定生成的 XML 特性的名称。
            </summary>
      <param name="attributeName">
                XML 的名称特性 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 用来存储该属性。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例。
            </summary>
      <param name="attributeName">
                生成的 XML 属性的名称。
              </param>
      <param name="type">
        <see cref="T:System.Type" /> 用来存储该属性。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>
              获取或设置 XML 属性的名称。
            </summary>
      <returns>
              XML 属性的名称。
               默认值为成员名称。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>
              获取或设置由生成的 XML 属性的 XSD 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />。
            </summary>
      <returns>
              XSD （XML 架构文档） 数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构︰ 数据类型"。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>
              获取或设置一个值，该值指示是否由生成的 XML 属性名称 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 受限定的。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。
               默认值为 <see langword="XmlForm.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>
              获取或设置 XML 属性的 XML 命名空间。
            </summary>
      <returns>
              XML 特性的 XML 命名空间。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>
              获取或设置 XML 属性的复杂类型。
            </summary>
      <returns>
              XML 特性的类型。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>
              指示公共字段或属性表示一个 XML 元素时 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化或反序列化包含它的对象。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 类，并指定的 XML 元素的名称。
            </summary>
      <param name="elementName">
                序列化成员的 XML 元素名称。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 类，并指定到的成员的类型 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 应用。
               此类型由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 当序列化或反序列化包含它的对象。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 从成员的类型派生的对象。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> ，并且指定的成员的名称的 XML 元素和派生的类型 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 应用。
               使用此成员类型时 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化包含它的对象。
            </summary>
      <param name="elementName">
                序列化成员的 XML 元素名称。
              </param>
      <param name="type">
        <see cref="T:System.Type" /> 从成员的类型派生的对象。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>
              获取或设置由生成的 XML 元素的 XML 架构定义 (XSD) 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />。
            </summary>
      <returns>
              XML 架构数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构第 2︰ 数据类型"。
            </returns>
      <exception cref="T:System.Exception">
                  具有指定的 XML 架构数据类型无法映射到.net 数据类型。
                </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>
              获取或设置生成的 XML 元素的名称。
            </summary>
      <returns>
              生成的 XML 元素的名称。
               默认值为成员标识符。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>
              获取或设置一个值，该值指示是否限定该元素。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。
               默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必须设置为成员序列化为 <see langword="null" /> 的空标记为 <see langword="xsi:nil" /> 属性设置为 <see langword="true" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="xsi:nil" /> 属性; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>
              获取或设置分配给此类序列化时所产生的 XML 元素的命名空间。
            </summary>
      <returns>
              XML 元素的命名空间。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>
              获取或设置显式的顺序序列化或反序列化元素。
            </summary>
      <returns>
              代码生成的顺序。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>
              获取或设置用于表示 XML 元素的对象类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 的成员。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>
              控件如何 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化枚举成员。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 类，并指定的 XML 值 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成或识别 （当它序列化或反序列化枚举时，将分别）。
            </summary>
      <param name="name">
                枚举成员的重写的名称。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>
              获取或设置生成的 XML 文档中的值实例时 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化枚举或识别时它反序列化枚举成员的值。
            </summary>
      <returns>
              生成的 XML 文档中的值时实例 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将枚举时或识别的值序列化时将其反序列化枚举成员。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>
              指示 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 方法 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 进行序列化的公共字段或公共读/写属性值。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>
              指定目标属性、参数、返回值或类成员包含与 XML 文档中使用的命名空间相关联的前缀。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>
              控制视为 XML 根元素的属性目标的 XML 序列化。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 类并指定的 XML 根元素的名称。
            </summary>
      <param name="elementName">
                XML 根元素的名称。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>
              获取或设置 XML 根元素的 XSD 数据类型。
            </summary>
      <returns>
              XSD （XML 架构文档） 数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构︰ 数据类型"。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>
              获取或设置生成并被识别的 XML 元素名称 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 和 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> 方法，分别。
            </summary>
      <returns>
              生成并将其识别 XML 文档实例中的 XML 根元素的名称。
               默认值是序列化类的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必须设置为成员序列化为 <see langword="null" /> 到 <see langword="xsi:nil" /> 属性设置为 <see langword="true" />。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="xsi:nil" /> 属性; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>
              获取或设置 XML 根元素的命名空间。
            </summary>
      <returns>
              XML 元素的命名空间。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>
              应用于某个类型时，存储返回 XML 架构的该类型静态方法的名称和控制该类型序列化的 <see cref="T:System.Xml.XmlQualifiedName" />（对于匿名类型，为 <see cref="T:System.Xml.Schema.XmlSchemaType" />）。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 类的新实例，需要一个静态方法的名称，该方法提供了该类型的 XML 架构。
            </summary>
      <param name="methodName">
                必须实现的静态方法的名称。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>
              获取或设置一个值，该值确定目标类是否为通配符，或者此类的架构是否只包含 <see langword="xs:any" /> 元素。
            </summary>
      <returns>
              如果此类是通配符或者其架构仅包含 <see langword="xs:any" /> 元素，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>
              获取静态方法的名称，该方法提供类型的 XML 架构和类型的 XML 架构数据类型的名称。
            </summary>
      <returns>
              该方法的名称，XML 基础结构调用该方法以返回 XML 架构。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>
              包含 XML 命名空间和前缀 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 用于生成 XML 文档实例中的限定的名。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类，使用指定的实例 <see langword="XmlSerializerNamespaces" /> 包含前缀和命名空间对的集合。
            </summary>
      <param name="namespaces">
                一个实例 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />包含命名空间和前缀对。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类的新实例。
            </summary>
      <param name="namespaces">
                一个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象数组。
              </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>
              前缀和命名空间将对添加到 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 对象。
            </summary>
      <param name="prefix">
                与 XML 命名空间关联的前缀。
              </param>
      <param name="ns">
                XML 命名空间。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>
              获取集合中的前缀和命名空间对的数目。
            </summary>
      <returns>
              集合中的前缀和命名空间对的数目。
            </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>
              获取数组中的前缀和命名空间对 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 对象。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.XmlQualifiedName" /> 对象，以用作限定 XML 文档中的名称。
            </returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>
              指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 成员必须处理作为 XML 文本中，当序列化或反序列化包含它的类。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> 要进行序列化的成员。
              </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>
              获取或设置生成的文本的 XML 架构定义语言 (XSD) 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />。
            </summary>
      <returns>
              XML 架构 (XSD) 数据类型，按照万维网联合会 (www.w3.org) 文档"XML 架构 Part 2: Datatypes"的定义。
            </returns>
      <exception cref="T:System.Exception">
                  具有指定的 XML 架构数据类型无法映射到.NET 数据类型。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  具有指定的 XML 架构数据类型的属性无效，无法转换为成员类型。
                </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>
              获取或设置成员类型。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 的成员。
            </returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>
              指定要执行的验证的类型。
            </summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>
              验证是否找到 DTD 或架构信息。
            </summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>
              根据 DTD 进行验证。
            </summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>
              未执行任何验证。
               此设置创建符合 XML 1.0 的非验证分析程序。
            </summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>
              根据 XML 架构定义语言 (XSD) 架构（包括内联 XML 架构）进行验证。
               XML 架构的命名空间 Uri 与关联通过使用<see langword="schemaLocation" />特性或提供<see langword="Schemas" />属性。
            </summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>
              根据 XML 数据简化 (XDR) 架构（包括内联 XDR 架构）进行验证。
               XDR 架构都使用可以识别<see langword="x-schema" />命名空间前缀或<see cref="P:System.Xml.XmlValidatingReader.Schemas" />属性。
            </summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>
              指定如何处理空白区域。
            </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>
              返回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点。
               这是默认设置。
            </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>
              不返回任何 <see langword="Whitespace" /> 和 no <see langword="SignificantWhitespace" /> 节点。
            </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>
              返回 <see langword="SignificantWhitespace" /> 仅限节点。
            </summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
              指定 <see cref="T:System.Xml.XmlWriter" /> 的状态。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>
              指示正在写入属性值。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
              指示 <see cref="M:System.Xml.XmlWriter.Close" /> 调用方法。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>
              指示正在写入元素内容。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>
              指示正在写入元素开始标记。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>
              已引发异常，这已离开 <see cref="T:System.Xml.XmlWriter" /> 处于无效状态。
               您可以调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法将 <see cref="T:System.Xml.XmlWriter" /> 中 <see cref="F:System.Xml.WriteState.Closed" /> 状态。
               任何其他 <see cref="T:System.Xml.XmlWriter" /> 方法调用都将导致 <see cref="T:System.InvalidOperationException" />。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>
              指示正在写入序言中。
            </summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>
              指示尚未调用写入方法。
            </summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>
              表示属性。
               属性的有效值和默认值在文档类型定义 (DTD) 或架构中定义。
            </summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlAttribute" /> 类的新实例。
            </summary>
      <param name="prefix">
                命名空间前缀。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                命名空间统一资源标识符 (URI)。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>
              将指定的节点添加到该节点的子节点列表的末尾。
            </summary>
      <param name="newChild">
                要添加的 <see cref="T:System.Xml.XmlNode" />。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 添加。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>
              获取基统一资源标识符 (URI) 的节点。
            </summary>
      <returns>
              从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
               属性节点具有作为其所有者元素相同的基 URI。
               如果属性节点不具有所有者元素中， <see langword="BaseURI" /> 返回 String.Empty。
            </returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
        <see langword="true" /> 递归地克隆指定节点之下的子树 <see langword="false" /> 克隆节点本身 
              </param>
      <returns>
              重复节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>
              设置节点及其所有子级的串连的值。
            </summary>
      <returns>
              节点及其所有子级的串连值。
               对于属性节点，此属性具有相同的功能 <see cref="P:System.Xml.XmlAttribute.Value" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>
              设置该属性的值。
            </summary>
      <returns>
              特性值。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  设置此属性时指定的 XML 格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
              将指定的节点紧接着插入指定的引用节点之后。
            </summary>
      <param name="newChild">
                要插入的 <see cref="T:System.Xml.XmlNode" />。
              </param>
      <param name="refChild">
        <see cref="T:System.Xml.XmlNode" /> ，它是引用节点。
                <paramref name="newChild" /> 放在 <paramref name="refChild" />。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 插入。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  <paramref name="refChild" /> 不是此节点的子级。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
              将指定的节点紧接着插入指定的引用节点之前。
            </summary>
      <param name="newChild">
                要插入的 <see cref="T:System.Xml.XmlNode" />。
              </param>
      <param name="refChild">
        <see cref="T:System.Xml.XmlNode" /> ，它是引用节点。
                <paramref name="newChild" /> 放置在该节点之前。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 插入。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  <paramref name="refChild" /> 不是此节点的子级。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              移除了前缀的属性节点的名称。
               在下面的示例 &lt; 预订 bk:genre = '新颖 &gt;，则 <see langword="LocalName" /> 的属性是 <see langword="genre" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              属性节点的限定的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>
              获取该节点的命名空间 URI。
            </summary>
      <returns>
              该节点的命名空间 URI。
               如果该属性未显式给予命名空间，则此属性返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              节点类型 <see langword="XmlAttribute" /> 节点是 XmlNodeType.Attribute。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>
              获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。
            </summary>
      <returns>
              此节点所属的 XML 文档。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>
              获取 <see cref="T:System.Xml.XmlElement" /> 特性所属。
            </summary>
      <returns>
        <see langword="XmlElement" /> 属性属于或 <see langword="null" /> 如果没有此特性的一部分 <see langword="XmlElement" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>
              获取此节点的父级。
               有关 <see langword="XmlAttribute" /> 节点，此属性始终返回 <see langword="null" />。
            </summary>
      <returns>
              有关 <see langword="XmlAttribute" /> 节点，此属性始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>
              获取或设置该节点的命名空间前缀。
            </summary>
      <returns>
              该节点的命名空间前缀。
               如果没有前缀，则该属性返回 String.Empty。
            </returns>
      <exception cref="T:System.ArgumentException">
                  此节点是只读的。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  指定的前缀包含无效字符。
                
                  指定的前缀格式不正确。
                
                  该节点的 namespaceURI 为 <see langword="null" />。
                
                  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
                
                  此节点是一个属性，指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
                
                  此节点是一个特性，且该节点的 qualifiedName"xmlns"[命名空间]。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>
              将指定的节点添加到该节点的子节点列表的开头。
            </summary>
      <param name="newChild">
                要添加的 <see cref="T:System.Xml.XmlNode" />。
                 如果它是 <see cref="T:System.Xml.XmlDocumentFragment" />, ，将文档片段的全部内容移至该节点的子列表。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 添加。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>
              删除指定的子节点。
            </summary>
      <param name="oldChild">
                要移除的 <see cref="T:System.Xml.XmlNode" />。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 中删除。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> 不是此节点的子级。
                   或此节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
              将替换与指定的新子节点指定的子节点。
            </summary>
      <param name="newChild">
                新的子 <see cref="T:System.Xml.XmlNode" />。
              </param>
      <param name="oldChild">
        <see cref="T:System.Xml.XmlNode" /> 来替换。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 替换。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  此节点是只读的。
                
                  <paramref name="oldChild" /> 不是此节点的子级。
                </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>
              获取后期-架构验证的信息集已分配给此节点作为架构验证结果。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 包含后-架构验证的信息集的此节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>
              获取一个值，该值指示是否显式设置属性值。
            </summary>
      <returns>
        <see langword="true" /> 如果此属性已显式指定一个值，在原始实例文档;，否则为 <see langword="false" />。
               值为 <see langword="false" /> 指示该属性的值来自 DTD。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。
               有关 <see langword="XmlAttribute" /> 节点，此属性是属性的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该节点是只读的而 set 操作称为。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>
              表示可以按名称或索引访问的属性的集合。
            </summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>
              将集合中的最后一个节点作为插入指定的属性。
            </summary>
      <param name="node">
                要插入的 <see cref="T:System.Xml.XmlAttribute" />。
              </param>
      <returns>
        <see langword="XmlAttribute" /> 要追加到集合。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 已创建从不同于创建此集合的文档。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>
              将所有复制 <see cref="T:System.Xml.XmlAttribute" /> 到给定数组此集合中的对象。
            </summary>
      <param name="array">
                一个数组，它是从该集合复制的对象的目标。
              </param>
      <param name="index">
                复制开始处的数组中的索引。
              </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>
              在指定的引用属性之后立即插入指定的特性。
            </summary>
      <param name="newNode">
                要插入的 <see cref="T:System.Xml.XmlAttribute" />。
              </param>
      <param name="refNode">
        <see cref="T:System.Xml.XmlAttribute" /> ，它是引用属性。
                <paramref name="newNode" /> 放置后 <paramref name="refNode" />。
              </param>
      <returns>
        <see langword="XmlAttribute" /> 要插入到集合。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="newNode" /> 从文档不同于创建此集合创建。
                   或者 <paramref name="refNode" /> 不是此集合的成员。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>
              将插入指定的属性之前指定的引用属性。
            </summary>
      <param name="newNode">
                要插入的 <see cref="T:System.Xml.XmlAttribute" />。
              </param>
      <param name="refNode">
        <see cref="T:System.Xml.XmlAttribute" /> ，它是引用属性。
                <paramref name="newNode" /> 前后放置 <paramref name="refNode" />。
              </param>
      <returns>
        <see langword="XmlAttribute" /> 要插入到集合。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="newNode" /> 从文档不同于创建此集合创建。
                   或者 <paramref name="refNode" /> 不是此集合的成员。
                </exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>
              获取具有指定索引的属性。
            </summary>
      <param name="i">
                属性的索引。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Xml.XmlAttribute" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  正在传递的索引超出了范围。
                </exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>
              获取具有指定名称的属性。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              具有指定名称的 <see cref="T:System.Xml.XmlAttribute" />。
               如果该属性不存在，此属性返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>
              获取具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlAttribute" /> 具有指定的本地名称和命名空间 URI。
               如果该属性不存在，此属性返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>
              将指定的特性插入集合中的第一个节点。
            </summary>
      <param name="node">
                要插入的 <see cref="T:System.Xml.XmlAttribute" />。
              </param>
      <returns>
        <see langword="XmlAttribute" /> 添加到集合。
            </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>
              从集合中移除指定的属性。
            </summary>
      <param name="node">
                要移除的 <see cref="T:System.Xml.XmlAttribute" />。
              </param>
      <returns>
              已移除的节点或 <see langword="null" /> 如果它找不到集合中。
            </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>
              移除集合中的所有属性。
            </summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>
              删除指定的索引从集合相对应的属性。
            </summary>
      <param name="i">
                要删除的节点的索引。
                 第一个节点的索引为 0。
              </param>
      <returns>
              返回 <see langword="null" /> 是否存在任何属性中指定索引处。
            </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>
              添加 <see cref="T:System.Xml.XmlNode" /> 使用其 <see cref="P:System.Xml.XmlNode.Name" /> 属性 
            </summary>
      <param name="node">
                要在此集合中存储的属性节点。
                 以后将使用节点的名称可以访问该节点。
                 如果已在集合中存在具有该名称的节点，则替换它一个新;否则，该节点被追加到集合的末尾。
              </param>
      <returns>
              如果 <paramref name="node" /> 替换现有节点具有相同名称，旧节点则返回; 否则为返回添加的节点。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 创建来自不同 <see cref="T:System.Xml.XmlDocument" /> 比创建此集合。
                
                  这 <see langword="XmlAttributeCollection" /> 是只读的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 是 <see cref="T:System.Xml.XmlAttribute" /> 已的另一个属性 <see cref="T:System.Xml.XmlElement" /> 对象。
                   若要重新使用在其他元素中的属性，则必须将克隆 <see langword="XmlAttribute" /> 对象想要重新使用。
                </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />。
            </summary>
      <param name="array">
                一个数组，它是从该集合复制的对象的目标。
              </param>
      <param name="index">
                复制开始处的数组中的索引。
              </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />。
            </summary>
      <returns>
              返回 <see langword="int" /> 包含的属性计数。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" />。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果集合已同步。
            </returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" />。
            </summary>
      <returns>
              返回 <see cref="T:System.Object" /> ，它是集合的根。
            </returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>
              表示 CDATA 节。
            </summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlCDataSection" /> 类的新实例。
            </summary>
      <param name="data">
        <see cref="T:System.String" /> 包含字符数据。
              </param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 由于 CDATA 节点没有子级，因此不管参数的设置如何，克隆的节点都将始终包含数据内容。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              对于 CDATA 节点，本地名称是 <see langword="#cdata-section" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              对于 CDATA 节点，该名称是 <see langword="#cdata-section" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              节点类型。
               对于 CDATA 节点，该值是 XmlNodeType.CDATA。
            </returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary>
              获取该节点的父级（针对可以拥有父级的节点）。
            </summary>
      <returns>
              作为当前节点父级的 <see langword="XmlNode" />。
               如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。
               对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。
               下表描述了 <see langword="ParentNode" /> 属性可能的返回值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary>
              获取紧接在该节点之前的文本节点。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.XmlNode" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>
              提供由几个类使用的文本操作方法。
            </summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlCharacterData" /> 类的新实例。
            </summary>
      <param name="data">
                字符串，其中包含字符数据要添加到文档。
              </param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 包含字符数据。
              </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>
              将指定的字符串追加到该节点的字符数据的末尾。
            </summary>
      <param name="strData">
                要插入现有字符串的字符串。
              </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>
              包含该节点的数据。
            </summary>
      <returns>
              节点的数据。
            </returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>
              从节点中删除某个范围的字符。
            </summary>
      <param name="offset">
                要开始删除字符串内的位置。
              </param>
      <param name="count">
                要删除的字符数。
              </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>
              获取或设置该节点的串连的值和节点的所有子级。
            </summary>
      <returns>
              节点和节点的所有子级的串连的值。
            </returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>
              指定的字符偏移量处插入指定的字符串。
            </summary>
      <param name="offset">
                要插入的提供的字符串数据的字符串中的位置。
              </param>
      <param name="strData">
                是要插入到现有字符串的字符串数据。
              </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>
              获取数据的长度，以字符为单位。
            </summary>
      <returns>
              以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" /> 属性。
               长度可能为 0。也就是说，CharacterData 节点可以是空的。
            </returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>
              替换指定的数目的字符与指定的字符串指定的偏移量处开始。
            </summary>
      <param name="offset">
                要开始替换的字符串中的位置。
              </param>
      <param name="count">
                要替换的字符数。
              </param>
      <param name="strData">
                新数据将替换旧的字符串数据。
              </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>
              从指定范围中检索一个完整的字符串的子字符串。
            </summary>
      <param name="offset">
                要开始检索的字符串中的位置。
                 偏移量为零表示的起始点是在数据的开始处。
              </param>
      <param name="count">
                要检索的字符数。
              </param>
      <returns>
              对应于指定的范围内的子字符串。
            </returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              节点的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  节点是只读的。
                </exception>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>
              表示 XML 注释的内容。
            </summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlComment" /> 类的新实例。
            </summary>
      <param name="comment">
                批注元素的内容。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 因为注释节点不具有子级，克隆的节点始终包含文本内容，而不考虑参数设置。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              对于注释节点，则这是 <see langword="#comment" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              对于注释节点，则这是 <see langword="#comment" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              对于注释节点的值是 XmlNodeType.Comment。
            </returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
               因为注释节点不具有子级，此方法不起作用。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>
              对 XML 名称进行编码和解码，并提供方法在公共语言运行时类型和 XML 架构定义语言 (XSD) 类型之间进行转换。
               转换数据类型时，返回的值是独立于区域设置的。
            </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlConvert" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>
              对名称进行解码。
               该方法完成 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> 和 <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> 方法的反向操作。
            </summary>
      <param name="name">
                要转换的名称。
              </param>
      <returns>
              解码的名称。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>
              将名称转换为有效的 XML 本地名称。
            </summary>
      <param name="name">
                要编码的名称。
              </param>
      <returns>
              已编码的名称。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>
              将名称转换为有效的 XML 名称。
            </summary>
      <param name="name">
                要转换的名称。
              </param>
      <returns>
              返回名称，任何无效的字符都由转义字符串替换。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>
              根据 XML 规范验证该名称是否有效。
            </summary>
      <param name="name">
                要编码的名称。
              </param>
      <returns>
              已编码的名称。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>
              检查传入的字符是否是有效的非冒号字符类型。
            </summary>
      <param name="ch">
                要验证是否为非冒号字符的字符。
              </param>
      <returns>
              如果字符是有效的非冒号字符类型，则返回 <see langword="true" />；否则返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>
              如果参数中的字符是有效的公共 ID 字符，则返回传入的字符实例；否则返回 <see langword="null" />。
            </summary>
      <param name="ch">
                要验证的 <see cref="T:System.Char" /> 对象。
              </param>
      <returns>
              如果字符是有效的公共 ID 字符，则返回传入的字符；否则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>
              检查传入的字符是否为有效的启动名称字符类型。
            </summary>
      <param name="ch">
                要验证的字符。
              </param>
      <returns>
              如果字符是有效的启动名称字符类型，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>
              检查传入的字符是否是有效的 XML 空白字符。
            </summary>
      <param name="ch">
                要验证的字符。
              </param>
      <returns>
              如果传入的字符是有效的 XML 空白字符，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>
              检查传入的字符是否是有效的 XML 字符。
            </summary>
      <param name="ch">
                要验证的字符。
              </param>
      <returns>
              如果传入的字符是有效的 XML 字符，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>
              检查传入的代理项字符对是否是有效的 XML 字符。
            </summary>
      <param name="lowChar">
                要验证的代理项字符。
              </param>
      <param name="highChar">
                要验证的代理项字符。
              </param>
      <returns>
              如果传入的字符代理项对是有效的 XML 字符，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Boolean" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              一个 <see langword="Boolean" /> 值，即 <see langword="true" /> 或 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 并不表示 <see langword="Boolean" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Byte" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Byte" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Char" />。
            </summary>
      <param name="s">
                包含所要转换的单个字符的字符串。
              </param>
      <returns>
              代表单个字符的 <see langword="Char" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数的值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数将包含多个字符。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTime" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="DateTime" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 为空字符串或未采用正确格式。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTime" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <param name="format">
                该格式结构适用于转换的 <see langword="DateTime" />。
                 有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。
                 根据此格式验证字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="DateTime" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是 String.Empty 
                
                  - 或 - 
                
                  <paramref name="s" /> 不包含的日期和时间，对应于 <paramref name="format" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTime" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <param name="formats">
                包含格式结构的数组，这些格式结构适用于转换的 <see langword="DateTime" />。
                 有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。
              </param>
      <returns>
              与该字符串等效的 <see langword="DateTime" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 一个元素或 <paramref name="formats" /> 是 String.Empty 
                
                  - 或 - 
                
                  <paramref name="s" /> 不包含日期和时间对应的元素中的任何 <paramref name="formats" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 将 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" /></summary>
      <param name="s">
                要转换的 <see cref="T:System.String" /> 值。
              </param>
      <param name="dateTimeOption">
        <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 值之一，用于指定日期是应该转换为本地时间，还是应该保留为协调通用时间 (UTC)（如果它为 UTC 日期）。
              </param>
      <returns>
        <see cref="T:System.DateTime" /> 的等效 <see cref="T:System.String" />。
            </returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOption" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 为空字符串或不是有效格式。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>
              将提供的 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <param name="formats">
                可以转换 <paramref name="s" /> 的格式数组。
                <paramref name="formats" /> 中的每个格式均可以是 XML DateTime 类型的 W3C 建议的任何子集。
                 （有关更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。）
                 将根据这些格式中的一个格式验证字符串 <paramref name="s" />。
              </param>
      <returns>
              与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>
              将提供的 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <param name="format">
                从中转换 <paramref name="s" /> 的格式。
                 该格式参数可以是 XML DateTime 类型的 W3C 建议的任何子集。
                 （有关更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。）
                 根据此格式验证字符串 <paramref name="s" />。
              </param>
      <returns>
              与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 为一个空字符串或不在指定的格式。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>
              将提供的 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTimeOffset" />。
            </summary>
      <param name="s">
                要转换的字符串。
              
                “注意”   该字符串必须符合 XML DateTime 类型的 W3C 建议的子集。
                 更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。
              </param>
      <returns>
              与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  传递给此方法的参数是允许的值的范围之外。
                   有关允许的值的信息，请参阅 <see cref="T:System.DateTimeOffset" />。
                </exception>
      <exception cref="T:System.FormatException">
                  参数传递给此方法不符合 XML dateTime 类型的 W3C 建议的子集。
                   有关详细信息请参阅 http://www.w3.org/TR/xmlschema-2/#dateTime。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Decimal" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Decimal" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Double" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Double" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Guid" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Guid" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Int16" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Int16" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Int32" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Int32" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Int64" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Int64" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.SByte" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="SByte" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Single" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="Single" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
              将 <see cref="T:System.Single" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Single" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
              将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="TimeSpan" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>
              将 <see cref="T:System.UInt16" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="UInt16" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
              将 <see cref="T:System.UInt32" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="UInt32" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>
              将提供的 <see cref="T:System.DateTimeOffset" /> 转换为指定格式的 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.DateTimeOffset" />。
              </param>
      <param name="format">
        <paramref name="s" /> 转换为的格式。
                 该格式参数可以是 XML DateTime 类型的 W3C 建议的任何子集。
                 （有关更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。）
              </param>
      <returns>
              提供的 <see cref="T:System.DateTimeOffset" /> 的指定格式的 <see cref="T:System.String" /> 表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>
              将 <see cref="T:System.DateTime" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="format">
                定义如何显示转换的字符串的格式结构。
                 有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。
              </param>
      <returns>
              指定格式的 <see langword="DateTime" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 将 <see cref="T:System.DateTime" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.DateTime" /> 值。
              </param>
      <param name="dateTimeOption">
        <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 值之一，用于指定如何处理 <see cref="T:System.DateTime" /> 值。
              </param>
      <returns>
        <see cref="T:System.String" /> 的等效 <see cref="T:System.DateTime" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOption" /> 值无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="dateTimeOption" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
              将 <see cref="T:System.SByte" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="SByte" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
              将 <see cref="T:System.UInt64" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="UInt64" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
              将 <see cref="T:System.Int64" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Int64" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
              将 <see cref="T:System.Boolean" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Boolean" /> 的字符串表示形式，即“true”或“false”。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
              将 <see cref="T:System.Int16" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Int16" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
              将 <see cref="T:System.Guid" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Guid" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
              将 <see cref="T:System.Double" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Double" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
              将 <see cref="T:System.Decimal" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Decimal" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>
              将提供的 <see cref="T:System.DateTimeOffset" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的 <see cref="T:System.DateTimeOffset" />。
              </param>
      <returns>
              提供的 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.String" /> 表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>
              将 <see cref="T:System.DateTime" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="DateTime" /> 的字符串表示形式，格式为 yyyy-MM-ddTHH:mm:ss，其中“T”是常数文本。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
              将 <see cref="T:System.Char" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Char" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>
              将 <see cref="T:System.Byte" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Byte" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
              将 <see cref="T:System.Int32" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
        <see langword="Int32" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.TimeSpan" />。
            </summary>
      <param name="s">
                要转换的字符串。
                 字符串格式必须符合 W3C XML 架构第 2 部分：持续时间数据类型建议。
              </param>
      <returns>
              与该字符串等效的 <see langword="TimeSpan" />。
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是正确的格式来表示 <see langword="TimeSpan" /> 值。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.UInt16" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="UInt16" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.UInt32" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="UInt32" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
              将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.UInt64" />。
            </summary>
      <param name="s">
                要转换的字符串。
              </param>
      <returns>
              与该字符串等效的 <see langword="UInt64" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>
              根据 W3C 可扩展标记语言建议验证该名称是否是有效的名称。
            </summary>
      <param name="name">
                要验证的名称。
              </param>
      <returns>
              该名称（如果它是有效的 XML 名称）。
            </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> 不是有效的 XML 名称。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" /> ，则为 String.Empty。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>
              根据 W3C 可扩展标记语言建议，验证名称是否是有效的 <see langword="NCName" />。
              <see langword="NCName" /> 是不能包含冒号的名称。
            </summary>
      <param name="name">
                要验证的名称。
              </param>
      <returns>
              该名称（如果它是有效的 NCName）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" /> 或 String.Empty。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> 不是有效的非冒号名称。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>
              根据 W3C 的 XML 架构第 2 部分“数据类型建议”，验证字符串是否为有效 NMTOKEN
            </summary>
      <param name="name">
                要验证的字符串。
              </param>
      <returns>
              名称标记（如果它是有效的 NMTOKEN）。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  字符串不是有效的名称标记。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>
              如果字符串自变量中的所有字符都是有效的公共 ID 字符，则返回传入的字符串实例。
            </summary>
      <param name="publicId">
                包含要验证的 ID 的 <see cref="T:System.String" />。
              </param>
      <returns>
              如果自变量中的所有字符都是有效的公共 ID 字符，则返回传入的字符串。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>
              根据 W3C XML 架构第 2 部分“数据类型”建议，验证该字符串是否为有效标记。
            </summary>
      <param name="token">
                要验证的字符串值。
              </param>
      <returns>
              标记（如果它是有效的标记）。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  字符串值不是有效的令牌。
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>
              如果字符串自变量中的所有字符都是有效的空白字符，则返回传入的字符串实例。
            </summary>
      <param name="content">
                要验证的 <see cref="T:System.String" />。
              </param>
      <returns>
              如果字符串参数中的所有字符都是有效的空白字符，则返回传入的字符串实例；否则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>
              如果字符串参数中的所有字符和代理项对字符都是有效的 XML 字符，则返回传入的字符串；否则将引发 <see langword="XmlException" /> 并提供有关遇到的第一个无效字符的信息。
            </summary>
      <param name="content">
                包含要验证的字符的 <see cref="T:System.String" />。
              </param>
      <returns>
              如果字符串参数中的所有字符和代理项对字符都是有效的 XML 字符，则返回传入的字符串；否则将引发 <see langword="XmlException" /> 并提供有关遇到的第一个无效字符的信息。
            </returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>
              指定如何处理字符串之间进行转换时的时间值和 <see cref="T:System.DateTime" />。
            </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>
              作为本地时间进行处理。
               如果 <see cref="T:System.DateTime" /> 对象都表示协调世界时 (UTC)，它将转换为本地时间。
            </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>
              在转换时，应保留时区信息。
            </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>
              如果将视为本地时间 <see cref="T:System.DateTime" /> 要转换为一个字符串。
            </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>
              将视为 UTC。
               如果 <see cref="T:System.DateTime" /> 对象都表示本地时间，它将转换为 UTC。
            </summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>
              表示 XML 声明节点 &lt;?xml version='1.0'...?&gt;。
            </summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlDeclaration" /> 类的新实例。
            </summary>
      <param name="version">
                XML 版本;请参阅 <see cref="P:System.Xml.XmlDeclaration.Version" /> 属性。
              </param>
      <param name="encoding">
                编码方案;请参阅 <see cref="P:System.Xml.XmlDeclaration.Encoding" /> 属性。
              </param>
      <param name="standalone">
                指示 XML 文档是否依赖外部 DTD;请参阅 <see cref="P:System.Xml.XmlDeclaration.Standalone" /> 属性。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 因为 <see langword="XmlDeclaration" /> 节点没有子级，克隆的节点始终包含数据值，而不考虑参数设置。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>
              获取或设置 XML 文档的编码级别。
            </summary>
      <returns>
              有效的字符编码名称。
               最常受支持的字符集编码名称的 XML 如下所示︰
            
                      类别 
                    
                      编码名称 
                    
                      Unicode 
                    
                      UTF-8、 UTF-16 
                    
                      ISO 10646 
                    
                      ISO 10646-UCS 2，ISO 10646 UCS 4 
                    
                      ISO 8859 
                    
                      ISO 8859-n （其中"n"是从 1 到 9 的数字） 
                    
                      X JIS 0208 1997 
                    
                      ISO-2022年-JP，Shift_JIS，EUC-JP 
                    
              此值为可选值。
               如果未设置一个值，则此属性返回 String.Empty。
            
              如果未包括出编码方式特性，则编写或保存文档时将假定为 utf-8 编码。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>
              获取或设置的串连的值 <see langword="XmlDeclaration" />。
            </summary>
      <returns>
              串联的值 <see langword="XmlDeclaration" /> (即之间的所有内容 &lt;?xml 和 ?&gt;)。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              有关 <see langword="XmlDeclaration" /> 节点，本地名称是 <see langword="xml" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              有关 <see langword="XmlDeclaration" /> 节点，名称是 <see langword="xml" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              有关 <see langword="XmlDeclaration" /> 节点，此值是 XmlNodeType.XmlDeclaration。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>
              获取或设置独立的属性的值。
            </summary>
      <returns>
              有效值为 <see langword="yes" /> 所需的 XML 文档的所有实体声明将都包含在文档或 <see langword="no" /> 是否需要外部文档类型定义 (DTD)。
               如果出独立特性不存在 XML 声明中，此属性返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>
              获取或设置的值 <see langword="XmlDeclaration" />。
            </summary>
      <returns>
              内容 <see langword="XmlDeclaration" /> (即之间的所有内容 &lt;?xml 和 ?&gt;)。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>
              获取文档的 XML 版本。
            </summary>
      <returns>
              此值始终是 <see langword="1.0" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />。
               因为 <see langword="XmlDeclaration" /> 节点没有子级，此方法不起作用。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>
              表示 XML 文档。
               可使用此类在文档中加载、验证、编辑、添加和放置 XML。
            </summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlDocument" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>
              使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlImplementation" /> 类的新实例。
            </summary>
      <param name="imp">
                要使用的 <see langword="XmlImplementation" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>
              使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
            </summary>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>
              获取当前节点的基 URI。
            </summary>
      <returns>
              从其加载节点的位置。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              克隆的 <see langword="XmlDocument" /> 节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>
              创建具有指定 <see cref="P:System.Xml.XmlDocument.Name" /> 的 <see cref="T:System.Xml.XmlAttribute" />。
            </summary>
      <param name="name">
                属性的限定名称。
                 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性反映名称中第一个冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" /> 属性反映名称中第一个冒号之后的部分。
                <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 保持为空，除非该前缀是一个可识别的内置前缀，例如 xmlns。
                 在这种情况下，<see langword="NamespaceURI" /> 具有值 http://www.w3.org/2000/xmlns/。
              </param>
      <returns>
              新的 <see langword="XmlAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>
              创建具有指定限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。
            </summary>
      <param name="qualifiedName">
                属性的限定名称。
                 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 属性将反映名称中位于冒号后的部分。
              </param>
      <param name="namespaceURI">
                属性的 namespaceURI。
                 如果限定名称包含前缀 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/。
              </param>
      <returns>
              新的 <see langword="XmlAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>
              创建一个具有指定的 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。
            </summary>
      <param name="prefix">
                属性的前缀（如果有的话）。
                 String.Empty 与 <see langword="null" /> 等效。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI（如果有的话）。
                 String.Empty 与 <see langword="null" /> 等效。
                 如果 <paramref name="prefix" /> 为 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/；否则将引发异常。
              </param>
      <returns>
              新的 <see langword="XmlAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>
              创建包含指定数据的 <see cref="T:System.Xml.XmlCDataSection" />。
            </summary>
      <param name="data">
                新 <see langword="XmlCDataSection" /> 的内容。
              </param>
      <returns>
              新的 <see langword="XmlCDataSection" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>
              创建包含指定数据的 <see cref="T:System.Xml.XmlComment" />。
            </summary>
      <param name="data">
                新 <see langword="XmlComment" /> 的内容。
              </param>
      <returns>
              新的 <see langword="XmlComment" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>
              创建具有指定前缀、本地名称和命名空间 URI 的默认属性。
            </summary>
      <param name="prefix">
                属性的前缀（如果有的话）。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI（如果有的话）。
              </param>
      <returns>
              新的 <see cref="T:System.Xml.XmlAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>
              创建一个 <see cref="T:System.Xml.XmlDocumentFragment" />。
            </summary>
      <returns>
              新的 <see langword="XmlDocumentFragment" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>
              返回新 <see cref="T:System.Xml.XmlDocumentType" /> 对象。
            </summary>
      <param name="name">
                此文档类型的名称。
              </param>
      <param name="publicId">
                此文档类型的公共标识符或 <see langword="null" />。
                 你可以指定一个公共 URI 以及一个系统标识符以标识外部 DTD 子集的位置。
              </param>
      <param name="systemId">
                此文档类型的系统标识符或 <see langword="null" />。
                 指定外部 DTD 子集的文件位置的 URL。
              </param>
      <param name="internalSubset">
                此文档类型的 DTD 内部子集或 <see langword="null" />。
              </param>
      <returns>
              新的 <see langword="XmlDocumentType" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>
              创建具有指定名称的元素。
            </summary>
      <param name="name">
                元素的限定名。
                 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性反映名称中位于冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" /> 属性反映名称中位于冒号之后的部分。
                 限定名称不能包含“xmlns”前缀。
              </param>
      <returns>
              新的 <see langword="XmlElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>
              创建具有限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlElement" />。
            </summary>
      <param name="qualifiedName">
                元素的限定名。
                 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 属性将反映名称中位于冒号后的部分。
                 限定名称不能包含“xmlns”前缀。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              新的 <see langword="XmlElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>
              创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。
            </summary>
      <param name="prefix">
                新元素的前缀（如果有的话）。
                 String.Empty 与 <see langword="null" /> 等效。
              </param>
      <param name="localName">
                新元素的本地名称。
              </param>
      <param name="namespaceURI">
                新元素的命名空间 URI（如果有的话）。
                 String.Empty 与 <see langword="null" /> 等效。
              </param>
      <returns>
              新的 <see cref="T:System.Xml.XmlElement" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>
              创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。
            </summary>
      <param name="name">
                实体引用的名称。
              </param>
      <returns>
              新的 <see langword="XmlEntityReference" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  名称无效（例如，以“#”开头的名称无效。）
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>
              创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>
              创建 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，以定位位于指定的 <see cref="T:System.Xml.XmlNode" /> 上的此文档。
            </summary>
      <param name="node">
                希望导航器最初定位在的 <see cref="T:System.Xml.XmlNode" />。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>
              创建具有指定的节点类型、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。
            </summary>
      <param name="nodeTypeString">
                新节点的 <see cref="T:System.Xml.XmlNodeType" /> 的字符串版本。
                 该参数必须是下表中列出的值之一。
              </param>
      <param name="name">
                新节点的限定名称。
                 如果名称包含一个冒号，则将它解析为 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 两部分。
              </param>
      <param name="namespaceURI">
                新节点的命名空间 URI。
              </param>
      <returns>
              新的 <see langword="XmlNode" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  未提供名称，而 <see langword="XmlNodeType" /> 需要名称；或者 <paramref name="nodeTypeString" /> 不是下列字符串之一。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>
              创建一个具有指定的 <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。
            </summary>
      <param name="type">
                新节点的 <see langword="XmlNodeType" />。
              </param>
      <param name="name">
                新节点的限定名称。
                 如果名称包含一个冒号，则将其解析为 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 两部分。
              </param>
      <param name="namespaceURI">
                新节点的命名空间 URI。
              </param>
      <returns>
              新的 <see langword="XmlNode" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  未提供名称，而 <see langword="XmlNodeType" /> 需要名称。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>
              创建一个具有指定的<see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。
            </summary>
      <param name="type">
                新节点的 <see langword="XmlNodeType" />。
              </param>
      <param name="prefix">
                新节点的前缀。
              </param>
      <param name="name">
                新节点的本地名称。
              </param>
      <param name="namespaceURI">
                新节点的命名空间 URI。
              </param>
      <returns>
              新的 <see langword="XmlNode" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  未提供名称，而 <see langword="XmlNodeType" /> 需要名称。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>
              创建一个具有指定名称和数据的 <see cref="T:System.Xml.XmlProcessingInstruction" />。
            </summary>
      <param name="target">
                处理指令的名称。
              </param>
      <param name="data">
                处理指令的数据。
              </param>
      <returns>
              新的 <see langword="XmlProcessingInstruction" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>
              创建一个 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 节点。
            </summary>
      <param name="text">
                此字符串必须只包含下列字符：&amp;#20；&amp;#10；&amp;#13 和 &amp;#9； 
              </param>
      <returns>
              一个新的 <see langword="XmlSignificantWhitespace" /> 节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>
              创建具有指定文本的 <see cref="T:System.Xml.XmlText" />。
            </summary>
      <param name="text">
                Text 节点的文本。
              </param>
      <returns>
              新的 <see langword="XmlText" /> 节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>
              创建一个 <see cref="T:System.Xml.XmlWhitespace" /> 节点。
            </summary>
      <param name="text">
                此字符串必须只包含下列字符：&amp;#20；&amp;#10；&amp;#13 和 &amp;#9； 
              </param>
      <returns>
              一个新的 <see langword="XmlWhitespace" /> 节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>
              创建一个具有指定值的 <see cref="T:System.Xml.XmlDeclaration" /> 节点。
            </summary>
      <param name="version">
                版本必须为“1.0”。
              </param>
      <param name="encoding">
                编码属性的值。
                 这是当将 <see cref="T:System.Xml.XmlDocument" /> 保存到文件或流时使用的编码方式；因此必须将其设置为 <see cref="T:System.Text.Encoding" /> 类支持的字符串，否则 <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> 失败。
                 如果这是 <see langword="null" /> 或 String.Empty，则 <see langword="Save" /> 方法不在 XML 声明上写出编码方式特性，因此将使用默认的编码方式 UTF-8。
              
                注意：如果将 <see langword="XmlDocument" /> 保存到 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlTextWriter" />，则放弃该编码值。
                 而改用 <see langword="TextWriter" /> 或 <see langword="XmlTextWriter" /> 的编码方式。
                 这会确保可以使用正确的编码读回写出的 XML。
              </param>
      <param name="standalone">
                该值必须是“yes”或“no”。
                 如果这是 <see langword="null" /> 或 String.Empty，<see langword="Save" /> 方法不在 XML 声明上写出独立特性。
              </param>
      <returns>
              新的 <see langword="XmlDeclaration" /> 节点。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 或 <paramref name="standalone" /> 的值是除上面指定的值以外的值。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>
              获取文档的根 <see cref="T:System.Xml.XmlElement" />。
            </summary>
      <returns>
              表示 XML 文档树的根的 <see langword="XmlElement" />。
               如果不存在根，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>
              获取包含 DOCTYPE 声明的节点。
            </summary>
      <returns>
              包含 DocumentType（DOCTYPE 声明）的 <see cref="T:System.Xml.XmlNode" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>
              获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。
            </summary>
      <param name="elementId">
                要匹配的属性 ID。
              </param>
      <returns>
              具有匹配 ID 的 <see langword="XmlElement" />；如果未找到匹配的元素，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" /> 匹配的所有子代元素的列表。
            </summary>
      <param name="name">
                要匹配的限定名称。
                 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。
                 特殊值“*”匹配所有标记。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。
               如果没有任何节点与 <paramref name="name" /> 匹配，则返回的集合将为空。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 匹配的所有子代元素的列表。
            </summary>
      <param name="localName">
                要匹配的 LocalName。
                 特殊值“*”匹配所有标记。
              </param>
      <param name="namespaceURI">
                要匹配的 NamespaceURI。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。
               如果没有任何节点与指定的 <paramref name="localName" /> 和 <paramref name="namespaceURI" /> 匹配，则返回的集合将为空。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>
              获取当前文档的 <see cref="T:System.Xml.XmlImplementation" /> 对象。
            </summary>
      <returns>
              当前文档的 <see langword="XmlImplementation" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>
              将节点从另一个文档导入到当前文档。
            </summary>
      <param name="node">
                正在被导入的节点。
              </param>
      <param name="deep">
                如果执行深层克隆，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              导入的 <see cref="T:System.Xml.XmlNode" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在无法导入的节点类型上调用此方法。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>
              在所有情况下引发 <see cref="T:System.InvalidOperationException" />。
            </summary>
      <returns>
              节点及其所有子节点的值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在所有情况下。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>
              获取或设置表示当前节点的子级的标记。
            </summary>
      <returns>
              当前节点的子级的标记。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  设置此属性时指定的 XML 格式不正确。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>
              获取一个值，该值指示当前节点是否是只读的。
            </summary>
      <returns>
              如果当前节点为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see langword="XmlDocument" /> 节点始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>
              从指定的流加载 XML 文档。
            </summary>
      <param name="inStream">
                包含要加载的 XML 文档的流。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  XML 中存在加载或分析错误。
                   在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>
              从指定的 <see cref="T:System.IO.TextReader" /> 加载 XML 文档。
            </summary>
      <param name="txtReader">
                用于将 XML 数据输送到文档中的 <see langword="TextReader" />。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  XML 中存在加载或分析错误。
                   在这种情况下，该文档保留为空。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>
              从指定的 URL 加载 XML 文档。
            </summary>
      <param name="filename">
                含要加载的 XML 文档的文件的 URL。
                 URL 既可以是本地文件，也可以是 HTTP URL（Web 地址）。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  XML 中存在加载或分析错误。
                   在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                   例如，在基于 Windows 的平台上，路径必须少于 248 个字符，且文件名必须少于 260 个字符。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定的路径无效（例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.IO.IOException">
                  打开文件时发生 I/O 错误。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" /> 指定了一个只读文件。
                
                  - 或 - 
                
                  当前平台不支持此操作。
                
                  - 或 - 
                
                  <paramref name="filename" /> 指定了一个目录。
                
                  - 或 - 
                
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  未找到 <paramref name="filename" /> 中指定的文件。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" /> 的格式无效。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>
              从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 XML 文档。
            </summary>
      <param name="reader">
                用于将 XML 数据输送到文档中的 <see langword="XmlReader" />。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  XML 中存在加载或分析错误。
                   在这种情况下，该文档保留为空。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>
              从指定的字符串加载 XML 文档。
            </summary>
      <param name="xml">
                包含要加载的 XML 文档的字符串。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  XML 中存在加载或分析错误。
                   在这种情况下，该文档保留为空。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              对于 <see langword="XmlDocument" /> 节点，本地名称是 #document。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              对于 <see langword="XmlDocument" /> 节点，该名称是 #document。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>
              获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
      <returns>
        <see langword="XmlNameTable" />，它使您能够获取该文档中字符串的原子化版本。
            </returns>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>
              当属于该文档的节点的 <see cref="P:System.Xml.XmlNode.Value" /> 已被更改时发生。
            </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>
              当属于该文档的节点的 <see cref="P:System.Xml.XmlNode.Value" /> 将被更改时发生。
            </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>
              将属于该文档的节点插入另一个节点时发生。
            </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>
              将属于该文档的节点插入另一个节点时发生。
            </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>
              当属于该文档的节点已从其父级中移除时发生。
            </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>
              当属于该文档的节点将从文档中移除时发生。
            </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              节点类型。
               对于 <see langword="XmlDocument" /> 节点，该值是 XmlNodeType.Document。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>
              获取当前节点所属的 <see cref="T:System.Xml.XmlDocument" />。
            </summary>
      <returns>
              对于 <see langword="XmlDocument" /> 节点（<see cref="P:System.Xml.XmlDocument.NodeType" /> 等于 XmlNodeType.Document），该属性总是返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>
              获取该节点的父节点（针对可以拥有父级的节点）。
            </summary>
      <returns>
              始终返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>
              获取或设置一个值，该值指示是否在元素内容中保留空白区域。
            </summary>
      <returns>
        <see langword="true" /> 表示保留空白；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>
              根据 <see cref="T:System.Xml.XmlReader" /> 中的信息创建一个 <see cref="T:System.Xml.XmlNode" /> 对象。
               读取器必须定位在节点或属性上。
            </summary>
      <param name="reader">
                XML 源 
              </param>
      <returns>
              新的 <see langword="XmlNode" />；如果不存在其他节点，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.NullReferenceException">
                  此读取器位于未转换为有效的 DOM 节点（例如，EndElement 或 EndEntity）的节点类型上。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>
              将 XML 文档保存到指定的流。
            </summary>
      <param name="outStream">
                要保存到其中的流。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>
              将 XML 文档保存到指定的 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="writer">
                要保存到其中的 <see langword="TextWriter" />。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>
              将 XML 文档保存到指定的文件。
               如果存在指定文件，则此方法会覆盖它。
            </summary>
      <param name="filename">
                要将文档保存到其中的文件的位置。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>
              将 XML 文档保存到指定的 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>
              返回节点的后架构验证信息集 (PSVI)。
            </summary>
      <returns>
              表示节点的 PSVI 的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>
              获取或设置与此 <see cref="T:System.Xml.XmlDocument" /> 关联的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。
            </summary>
      <returns>
              为一个包含与此 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 关联的 XML 架构定义语言 (XSD) 架构的 <see cref="T:System.Xml.XmlDocument" /> 对象；否则，为一个空 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>
              验证 <see cref="T:System.Xml.XmlDocument" /> 是不是 <see cref="P:System.Xml.XmlDocument.Schemas" /> 属性中包含的 XML 架构定义语言 (XSD) 架构。
            </summary>
      <param name="validationEventHandler">
                接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。
              </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>
              根据 <see cref="P:System.Xml.XmlDocument.Schemas" /> 属性中的 XML 架构定义语言 (XSD) 架构，验证指定的 <see cref="T:System.Xml.XmlNode" /> 对象。
            </summary>
      <param name="validationEventHandler">
                接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。
              </param>
      <param name="nodeToValidate">
                从 <see cref="T:System.Xml.XmlDocument" /> 创建的要验证的 <see cref="T:System.Xml.XmlNode" /> 对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlNode" /> 对象参数不是从 <see cref="T:System.Xml.XmlDocument" /> 创建的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlNode" /> 对象参数不是元素、特性、文档片段或根节点。
                </exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将 <see langword="XmlDocument" /> 节点的所有子级保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="xw">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将 <see langword="XmlDocument" /> 节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>
              设置 <see cref="T:System.Xml.XmlResolver" /> 以用于解析外部资源。
            </summary>
      <returns>
              要使用的 <see langword="XmlResolver" />。
            
              在 .NET Framework 1.1 版中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  此属性设置为 <see langword="null" />，并且遇到了外部 DTD 或实体。
                </exception>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>
              表示对树插入操作非常有用的轻量级对象。
            </summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlDocumentFragment" /> 类的新实例。
            </summary>
      <param name="ownerDocument">
                XML 文档片段的源。
              </param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>
              获取或设置表示此节点的子级的标记。
            </summary>
      <returns>
              此节点子级的标记。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  设置此属性时指定的 XML 格式不正确。
                </exception>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              有关 <see langword="XmlDocumentFragment" /> 节点，本地名称是 <see langword="#document-fragment" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              有关 <see langword="XmlDocumentFragment" />, ，名称是 <see langword="#document-fragment" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              有关 <see langword="XmlDocumentFragment" /> 节点，此值是 XmlNodeType.DocumentFragment。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>
              获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。
            </summary>
      <returns>
        <see langword="XmlDocument" /> 此节点所属。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>
              获取该节点的父级（针对可以拥有父级的节点）。
            </summary>
      <returns>
              此节点的父级。
            
              有关 <see langword="XmlDocumentFragment" /> 节点，此属性始终为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>
              表示文档类型声明。
            </summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlDocumentType" /> 类的新实例。
            </summary>
      <param name="name">
                限定的名;请参阅 <see cref="P:System.Xml.XmlDocumentType.Name" /> 属性。
              </param>
      <param name="publicId">
                公共标识符;请参阅 <see cref="P:System.Xml.XmlDocumentType.PublicId" /> 属性。
              </param>
      <param name="systemId">
                号的系统标识符。请参阅 <see cref="P:System.Xml.XmlDocumentType.SystemId" /> 属性。
              </param>
      <param name="internalSubset">
                DTD 内部子集;请参阅 <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> 属性。
              </param>
      <param name="doc">
                父文档。
              </param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 对于文档类型节点，克隆的节点始终包含的子树，而不考虑参数设置。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>
              获取的集合 <see cref="T:System.Xml.XmlEntity" /> 节点在文档类型声明中声明。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNamedNodeMap" /> 包含 <see langword="XmlEntity" /> 节点。
               返回的 <see langword="XmlNamedNodeMap" /> 是只读的。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>
              获取文档类型定义 (DTD) 内部子集中的值上的 DOCTYPE 声明。
            </summary>
      <returns>
              DTD 内部子集上 DOCTYPE。
               如果没有 DTD 内部子集，则返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>
              获取指示节点是否只读的值。
            </summary>
      <returns>
        <see langword="true" /> 如果节点是只读的;否则为 <see langword="false" />。
            
              DocumentType 节点是只读的因为此属性始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              对于 DocumentType 节点，此属性返回的文档类型的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              对于 DocumentType 节点，此属性返回的文档类型的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              对于 DocumentType 节点，此值是 XmlNodeType.DocumentType。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>
              获取的集合 <see cref="T:System.Xml.XmlNotation" /> 文档中存在的节点类型声明。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNamedNodeMap" /> 包含 <see langword="XmlNotation" /> 节点。
               返回的 <see langword="XmlNamedNodeMap" /> 是只读的。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>
              获取上 DOCTYPE 声明的公共标识符的值。
            </summary>
      <returns>
              DOCTYPE 上的公共标识符。
               如果没有公共标识符， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>
              获取上 DOCTYPE 声明的系统标识符的值。
            </summary>
      <returns>
              DOCTYPE 上的系统标识符。
               如果没有系统标识符， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
               有关 <see langword="XmlDocumentType" /> 节点，此方法不起作用。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>
              表示元素。
            </summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlElement" /> 类的新实例。
            </summary>
      <param name="prefix">
                命名空间前缀;请参阅 <see cref="P:System.Xml.XmlElement.Prefix" /> 属性。
              </param>
      <param name="localName">
                本地名称;请参阅 <see cref="P:System.Xml.XmlElement.LocalName" /> 属性。
              </param>
      <param name="namespaceURI">
                命名空间 URI;请参阅 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 属性。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>
              获取包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />。
            </summary>
      <returns>
              包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身（如果节点是 <see langword="XmlElement" />，还克隆其属性），则为 <see langword="false" />。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>
              返回具有指定名称的属性的值。
            </summary>
      <param name="name">
                要检索的属性的名称。
                 这是限定名。
                 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。
              </param>
      <returns>
              指定的属性的值。
               如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>
              返回具有指定的本地名称和命名空间 URI 的属性的值。
            </summary>
      <param name="localName">
                要检索的属性本地名称。
              </param>
      <param name="namespaceURI">
                命名空间 URI 的属性检索。
              </param>
      <returns>
              指定的属性的值。
               如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>
              返回具有指定名称的 <see langword="XmlAttribute" />。
            </summary>
      <param name="name">
                要检索的属性的名称。
                 这是限定名。
                 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。
              </param>
      <returns>
              如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />；如果未找到，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>
              返回 <see cref="T:System.Xml.XmlAttribute" /> 具有指定的本地名称和命名空间 URI。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />；如果未找到，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlElement.LocalName" /> 和 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 匹配的所有子代元素的列表。
            </summary>
      <param name="localName">
                要匹配的本地名称。
                 星号 (*) 是匹配所有标记的特殊值。
              </param>
      <param name="namespaceURI">
                命名空间 URI 相匹配。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。
               如果不存在任何匹配节点，则该列表为空。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlElement.Name" /> 匹配的所有子代元素的列表。
            </summary>
      <param name="name">
                要匹配的名称标记。
                 这是限定名。
                 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。
                 星号 (*) 是匹配所有标记的特殊值。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。
               如果不存在任何匹配节点，则该列表为空。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>
              确定当前节点是否具有带有指定名称的属性。
            </summary>
      <param name="name">
                要查找的属性的名称。
                 这是限定名。
                 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。
              </param>
      <returns>
              如果当前节点具有指定的属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>
              确定当前节点是否具有指定的本地名称和命名空间 URI 的属性。
            </summary>
      <param name="localName">
                要查找的属性本地名称。
              </param>
      <param name="namespaceURI">
                命名空间 URI 的属性查找。
              </param>
      <returns>
              如果当前节点具有指定的属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>
              获取一个 <see langword="boolean" /> 值，该值指示当前节点是否有任何属性。
            </summary>
      <returns>
              如果当前节点具有属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>
              获取或设置节点及其所有子级的串连值。
            </summary>
      <returns>
              节点及其所有子级的串连值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>
              获取或设置仅表示此节点的子级的标记。
            </summary>
      <returns>
              此节点子级的标记。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  设置此属性时指定的 XML 格式不正确。
                </exception>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>
              获取或设置元素的标记格式。
            </summary>
      <returns>
              如果元素将以标记短格式“&lt;item/&gt;”序列化，则返回 <see langword="true" />；对于长格式“&lt;item&gt;&lt;/item&gt;”，则为 <see langword="false" />。
            
              在设置此属性时，如果设置为 <see langword="true" />，将删除元素的子级，并且以短标记格式序列化该元素。
               如果设置为 <see langword="false" />，将更改属性值（无论元素是否有内容）；如果该元素为空，则会采用长格式序列化。
            
              此属性是文档对象模型 (DOM) 的 Microsoft 扩展。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>
              获取当前节点的本地名称。
            </summary>
      <returns>
              移除了前缀的当前节点的名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" /> 是 book。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              节点的限定名称。
               对于 <see langword="XmlElement" /> 节点，这是元素的标记名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>
              获取该节点的命名空间 URI。
            </summary>
      <returns>
              该节点的命名空间 URI。
               如果没有命名空间 URI，则此属性返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>
              获取 <see cref="T:System.Xml.XmlNode" /> 紧接在此元素。
            </summary>
      <returns>
        <see langword="XmlNode" /> 紧接在此元素。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              节点类型。
               有关 <see langword="XmlElement" /> 节点，此值是 XmlNodeType.Element。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>
              获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。
            </summary>
      <returns>
              此元素所属的 <see langword="XmlDocument" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary>
              获取该节点的父级（针对可以拥有父级的节点）。
            </summary>
      <returns>
              作为当前节点父级的 <see langword="XmlNode" />。
               如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。
               对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。
               下表描述了 <see langword="ParentNode" /> 属性可能的返回值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>
              获取或设置该节点的命名空间前缀。
            </summary>
      <returns>
              该节点的命名空间前缀。
               如果没有前缀，则该属性返回 String.Empty。
            </returns>
      <exception cref="T:System.ArgumentException">
                  该节点是只读的 
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  指定的前缀包含无效字符。
                
                  指定的前缀格式不正确。
                
                  该节点的 namespaceURI 为 <see langword="null" />。
                
                  指定的前缀为“xml”，而该节点的 namespaceURI 与 http://www.w3.org/XML/1998/namespace 不同。
                </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>
              删除当前节点的所有指定特性和子级。
               不删除默认属性。
            </summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>
              从元素中删除所有指定的属性。
               不删除默认属性。
            </summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>
              按名称删除特性。
            </summary>
      <param name="name">
                要删除的特性的名称。该名称限定名称。
                 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。
              </param>
      <exception cref="T:System.ArgumentException">
                  该节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>
              删除具有指定的本地名称和命名空间 URI 的属性。
               （如果删除的特性具有默认值时，则将立即替换它）。
            </summary>
      <param name="localName">
                要移除的属性本地名称。
              </param>
      <param name="namespaceURI">
                命名空间 URI 的属性中删除。
              </param>
      <exception cref="T:System.ArgumentException">
                  该节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>
              从元素中删除具有指定索引的特性节点。
               （如果删除的特性具有默认值时，则将立即替换它）。
            </summary>
      <param name="i">
                要删除的节点的索引。
                 第一个节点的索引为 0。
              </param>
      <returns>
              已删除的特性节点；若给定索引处无节点则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>
              移除指定 <see cref="T:System.Xml.XmlAttribute" />。
            </summary>
      <param name="oldAttr">
        <see langword="XmlAttribute" /> 要移除的节点。
                 如果移除的属性具有默认值，则立即将其替换。
              </param>
      <returns>
              移除 <see langword="XmlAttribute" /> 或 <see langword="null" /> 如果 <paramref name="oldAttr" /> 不是属性节点的 <see langword="XmlElement" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  此节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>
              删除 <see cref="T:System.Xml.XmlAttribute" /> 指定本地名称和命名空间 URI。
               （如果删除的特性具有默认值时，则将立即替换它）。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              移除 <see langword="XmlAttribute" /> 或 <see langword="null" /> 如果 <see langword="XmlElement" /> 没有匹配的属性节点。
            </returns>
      <exception cref="T:System.ArgumentException">
                  此节点是只读的。
                </exception>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>
              获取作为架构验证的结果分配给此节点的后架构验证信息集。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象，其中包含此节点的后架构验证信息集。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>
              设置具有指定名称的属性的值。
            </summary>
      <param name="name">
                要创建或更改的属性的名称。
                 这是限定名。
                 如果名称包含的冒号将它解析为前缀和本地名称组件。
              </param>
      <param name="value">
                要为该属性设置的值。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  指定的名称包含无效字符。
                </exception>
      <exception cref="T:System.ArgumentException">
                  该节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>
              设置具有指定的本地名称和命名空间 URI 的属性的值。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <param name="value">
                要为该属性设置的值。
              </param>
      <returns>
              特性值。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>
              添加指定 <see cref="T:System.Xml.XmlAttribute" />。
            </summary>
      <param name="newAttr">
        <see langword="XmlAttribute" /> 节点将添加到此元素的属性集合。
              </param>
      <returns>
              如果特性将取代现有属性具有相同名称，旧 <see langword="XmlAttribute" /> 返回; 否则为 <see langword="null" /> 返回。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="newAttr" /> 从创建此节点比不同文档创建。
                   或此节点是只读的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newAttr" /> 已经是另一个属性 <see langword="XmlElement" /> 对象。
                   您必须显式克隆 <see langword="XmlAttribute" /> 节点重新使用它们在其他 <see langword="XmlElement" /> 对象。
                </exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>
              添加指定 <see cref="T:System.Xml.XmlAttribute" />。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              要添加的 <see langword="XmlAttribute" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将当前节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>
              表示实体声明，如 &lt; ！实体 … &gt;。
            </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>
              获取当前节点的基础统一资源标识符 (URI)。
            </summary>
      <returns>
              从其加载节点的位置。
            </returns>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
               无法克隆的实体节点。
               对调用此方法 <see cref="T:System.Xml.XmlEntity" /> 对象会引发异常。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              返回一份 <see cref="T:System.Xml.XmlNode" /> 从中调用该方法。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  无法克隆的实体节点。
                   对调用此方法 <see cref="T:System.Xml.XmlEntity" /> 对象会引发异常。
                </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>
              获取实体节点及其所有子级的串连的值。
            </summary>
      <returns>
              节点及其所有子级的串连值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试将设置该属性。
                </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>
              获取表示此节点的子级的标记。
            </summary>
      <returns>
              有关 <see langword="XmlEntity" /> 节点，则返回 String.Empty。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试将设置该属性。
                </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>
              获取指示节点是否只读的值。
            </summary>
      <returns>
        <see langword="true" /> 如果节点是只读的;否则为 <see langword="false" />。
            
              因为 <see langword="XmlEntity" /> 节点是只读的此属性始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>
              获取不带命名空间前缀的节点的名称。
            </summary>
      <returns>
              有关 <see langword="XmlEntity" /> 节点，此属性返回的实体名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>
              获取节点的名称。
            </summary>
      <returns>
              实体的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>
              获取节点的类型。
            </summary>
      <returns>
              节点类型。
               有关 <see langword="XmlEntity" /> 节点，则这是 XmlNodeType.Entity。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>
              获取此实体声明上的可选 NDATA 属性的名称。
            </summary>
      <returns>
              N 数据属性的名称。
               如果没有 NDATA <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>
              获取表示此节点及其所有子级的标记。
            </summary>
      <returns>
              有关 <see langword="XmlEntity" /> 节点，则返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>
              实体声明上获取的公共标识符的值。
            </summary>
      <returns>
              实体上的公共标识符。
               如果没有公共标识符， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>
              获取实体声明上的系统标识符的值。
            </summary>
      <returns>
              实体上的系统标识符。
               如果没有系统标识符， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
               有关 <see langword="XmlEntity" /> 节点，此方法不起作用。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
               有关 <see langword="XmlEntity" /> 节点，此方法不起作用。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>
              表示实体引用节点。
            </summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlEntityReference" /> 类的新实例。
            </summary>
      <param name="name">
                实体引用中; 的名称请参阅 <see cref="P:System.Xml.XmlEntityReference.Name" /> 属性。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>
              获取当前节点的基础统一资源标识符 (URI)。
            </summary>
      <returns>
              从其加载节点的位置。
            </returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 有关 <see langword="XmlEntityReference" /> 节点，此方法始终返回无子项的实体引用节点。
                 当将节点插入父级时，设置替换文本。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>
              获取指示节点是否只读的值。
            </summary>
      <returns>
        <see langword="true" /> 如果节点是只读的;否则为 <see langword="false" />。
            
              因为 <see langword="XmlEntityReference" /> 节点是只读的此属性始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              有关 <see langword="XmlEntityReference" /> 节点，此属性返回引用的实体的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>
              获取节点的名称。
            </summary>
      <returns>
              引用的实体的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>
              获取节点的类型。
            </summary>
      <returns>
              节点类型。
               有关 <see langword="XmlEntityReference" /> 节点，该值是 XmlNodeType.EntityReference。
            </returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              节点的值。
               有关 <see langword="XmlEntityReference" /> 节点，此属性返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  节点是只读的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  设置的属性。
                </exception>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>
              返回有关上一个异常的详细信息。
            </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>
              初始化 <see langword="XmlException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see langword="XmlException" /> 类的新实例。
            </summary>
      <param name="message">
                错误说明。
              </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="XmlException" /> 类使用中的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，其中包含的所有属性 <see langword="XmlException" />。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 对象，其中包含上下文信息。
              </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see langword="XmlException" /> 类的新实例。
            </summary>
      <param name="message">
                错误条件的说明。
              </param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 引发了 <see langword="XmlException" />, ，如果有的话。
                 此值可为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see langword="XmlException" /> 类，具有指定的消息、 内部异常、 行号和行位置。
            </summary>
      <param name="message">
                错误说明。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 此值可为 <see langword="null" />。
              </param>
      <param name="lineNumber">
                指示发生错误的行号。
              </param>
      <param name="linePosition">
                指示发生错误的行位置。
              </param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              流式处理所有 <see langword="XmlException" /> 属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。
              </param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>
              获取指示出现了错误的行号。
            </summary>
      <returns>
              指示发生错误的行号。
            </returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>
              获取指示出现了错误的行位置。
            </summary>
      <returns>
              指示发生错误的行位置。
            </returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>
              获取描述当前异常的消息。
            </summary>
      <returns>
              解释异常原因的错误消息。
            </returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>
              获取 XML 文件的位置。
            </summary>
      <returns>
              用于 XML 数据的源 URI。
               如果没有源 URI，则此属性返回 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>
              定义一组的上下文 <see cref="T:System.Xml.XmlDocument" /> 对象。
            </summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlImplementation" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.XmlImplementation" /> 类 <see cref="T:System.Xml.XmlNameTable" /> 指定。
            </summary>
      <param name="nt">
                一个 <see cref="T:System.Xml.XmlNameTable" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>
              创建一个新的 <see cref="T:System.Xml.XmlDocument" />。
            </summary>
      <returns>
              新的 <see langword="XmlDocument" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>
              测试是否有文档对象模型 (DOM) 实现所实现的特定功能。
            </summary>
      <param name="strFeature">
                要测试的功能的程序包名称。
                 该名称不区分大小写。
              </param>
      <param name="strVersion">
                这是要测试的程序包名称的版本号。
                 如果未指定版本 (<see langword="null" />)，则支持该功能的任何版本会导致该方法以返回 <see langword="true" />。
              </param>
      <returns>
        <see langword="true" /> 如果在指定的版本; 中实现该功能否则为 <see langword="false" />。
            
              下表显示了导致的组合 <see langword="HasFeature" /> 返回 <see langword="true" />。
            
                      strFeature 
                    
                      strVersion 
                    
                      XML 
                    
                      1.0 
                    
                      XML 
                    
                      2.0 
                    </returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>
              获取紧接在该节点之前或之后的节点。
            </summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>
              获取紧接在该节点之后的节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 紧随该节点或 <see langword="null" /> 如果不存在。
            </returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>
              获取紧接在该节点之前的节点。
            </summary>
      <returns>
              前面 <see cref="T:System.Xml.XmlNode" /> 或 <see langword="null" /> 如果不存在。
            </returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>
              表示可以按名称或索引访问的节点的集合。
            </summary>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>
              获取中的节点数 <see langword="XmlNamedNodeMap" />。
            </summary>
      <returns>
              节点数。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>
              中的节点集合上进行"foreach"样式迭代提供支持 <see langword="XmlNamedNodeMap" />。
            </summary>
      <returns>
              枚举器对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>
              检索 <see cref="T:System.Xml.XmlNode" /> 由名称指定。
            </summary>
      <param name="name">
                要检索的节点的限定的名称。
                 它针对匹配节点的 <see cref="P:System.Xml.XmlNode.Name" /> 属性进行匹配。
              </param>
      <returns>
        <see langword="XmlNode" /> 具有指定名称或 <see langword="null" /> 如果找不到匹配的节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>
              检索与匹配的节点 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />。
            </summary>
      <param name="localName">
                要检索的节点本地名称。
              </param>
      <param name="namespaceURI">
                命名空间统一资源标识符 (URI) 的节点来检索。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 具有匹配的本地名称和命名空间 URI 或 <see langword="null" /> 如果找不到匹配的节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>
              检索在指定索引处的节点 <see langword="XmlNamedNodeMap" />。
            </summary>
      <param name="index">
                要从检索的节点的索引位置 <see langword="XmlNamedNodeMap" />。
                 索引是从零开始;因此，第一个节点的索引为 0，最后一个节点的索引为 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Xml.XmlNode" />。
               如果 <paramref name="index" /> 小于 0 或大于或等于 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> 属性， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>
              删除从节点 <see langword="XmlNamedNodeMap" />。
            </summary>
      <param name="name">
                要移除的节点的限定的名称。
                 名称匹配对 <see cref="P:System.Xml.XmlNode.Name" /> 匹配节点的属性。
              </param>
      <returns>
        <see langword="XmlNode" /> 删除从此 <see langword="XmlNamedNodeMap" /> 或 <see langword="null" /> 如果找不到匹配的节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>
              中删除具有匹配节点 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />。
            </summary>
      <param name="localName">
                要移除的节点本地名称。
              </param>
      <param name="namespaceURI">
                命名空间节点的 URI 中删除。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 删除或 <see langword="null" /> 如果找不到匹配的节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>
              添加 <see cref="T:System.Xml.XmlNode" /> 使用其 <see cref="P:System.Xml.XmlNode.Name" /> 属性。
            </summary>
      <param name="node">
        <see langword="XmlNode" /> 将存储在 <see langword="XmlNamedNodeMap" />。
                 如果具有该名称的节点已存在于映射，则一个新替换它。
              </param>
      <returns>
              如果 <paramref name="node" /> 将取代现有节点具有相同名称，旧的节点是返回; 否则为 <see langword="null" /> 返回。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 创建来自不同 <see cref="T:System.Xml.XmlDocument" /> 比创建 <see langword="XmlNamedNodeMap" />; 或 <see langword="XmlNamedNodeMap" /> 是只读的。
                </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>
              解析集合的命名空间、向集合添加命名空间和从集合中移除命名空间，以及提供对这些命名空间的范围管理。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlNamespaceManager" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
            </summary>
      <param name="nameTable">
                要使用的 <see cref="T:System.Xml.XmlNameTable" />。
              </param>
      <exception cref="T:System.NullReferenceException">
        <see langword="null" /> 传递给构造函数 
                </exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>
              将给定的命名空间添加到集合。
            </summary>
      <param name="prefix">
                与要添加的命名空间关联的前缀。
                 使用 String.Empty 来添加默认命名空间。
              
                注意如果 <see cref="T:System.Xml.XmlNamespaceManager" /> 将使用用于解析 XML 路径语言 (XPath) 表达式中的命名空间，则必须指定前缀。
                 如果 XPath 表达式不包含前缀，则假定命名空间统一资源标识符 (URI) 为空命名空间。
                 有关 XPath 表达式的详细信息和 <see cref="T:System.Xml.XmlNamespaceManager" />, ，请参阅 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> 和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> 方法。
              </param>
      <param name="uri">
                要添加的命名空间。
              </param>
      <exception cref="T:System.ArgumentException">
                  值为 <paramref name="prefix" /> 是"xml"或"xmlns"。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  值为 <paramref name="prefix" /> 或 <paramref name="uri" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>
              获取默认命名空间的命名空间 URI。
            </summary>
      <returns>
              返回默认命名空间的命名空间 URI；如果没有默认命名空间，则返回 String.Empty。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
              返回一个枚举器，用于循环访问中的命名空间 <see cref="T:System.Xml.XmlNamespaceManager" />。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 包含存储的前缀 <see cref="T:System.Xml.XmlNamespaceManager" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              获取被可用于枚举当前范围内的命名空间的前缀键控的命名空间名称的集合。
            </summary>
      <param name="scope">
                一个指定要返回的命名空间节点的类型的枚举值。
              </param>
      <returns>
              当前范围中的命名空间和前缀对的集合。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>
              获取一个值，该值指示所提供的前缀是否具有为当前推送的范围定义的命名空间。
            </summary>
      <param name="prefix">
                你想要查找的命名空间前缀。
              </param>
      <returns>
        <see langword="true" />如果没有定义; 的命名空间，否则为<see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>
              获取指定前缀的命名空间 URI。
            </summary>
      <param name="prefix">
                要解析其命名空间 URI 的前缀。
                 若要匹配默认命名空间，请传递 String.Empty。
              </param>
      <returns>
              返回的命名空间 URI 为 <paramref name="prefix" /> 或 <see langword="null" /> 如果没有映射的命名空间。
               返回的字符串是原子化的。
            
              原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" /> 类。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>
              查找为给定的命名空间 URI 声明的前缀。
            </summary>
      <param name="uri">
                要为前缀解析的命名空间。
              </param>
      <returns>
              匹配的前缀。
               如果没有映射的前缀，则方法返回 String.Empty。
               如果提供 null 值，则 <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>
              获取 <see cref="T:System.Xml.XmlNameTable" /> 与此对象关联。
            </summary>
      <returns>
              此对象使用的 <see cref="T:System.Xml.XmlNameTable" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>
              将命名空间范围弹出堆栈。
            </summary>
      <returns>
        <see langword="true" /> 如果有留在堆栈上的命名空间范围， <see langword="false" /> 如果有多个要弹出的命名空间。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>
              将命名空间范围推送到堆栈上。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>
              为给定的前缀移除给定的命名空间。
            </summary>
      <param name="prefix">
                命名空间的前缀 
              </param>
      <param name="uri">
                要为给定的前缀移除的命名空间。
                 所移除的命名空间来自当前的命名空间范围。
                 忽略当前范围以外的命名空间。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  值 <paramref name="prefix" /> 或 <paramref name="uri" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>
              定义命名空间范围。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>
              在当前节点的范围内定义的所有命名空间。
               这包括总是隐式声明的 xmlns: xml 命名空间。
               未定义的顺序返回的命名空间。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>
              在当前节点，包括总是隐式声明 xmlns: xml 命名空间范围内定义的所有命名空间。
               未定义的顺序返回的命名空间。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>
              在当前节点本地定义的所有命名空间。
            </summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>
              原子化字符串对象表。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>
              当在派生类中重写，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />。
            </summary>
      <param name="array">
                要添加的名称。
              </param>
      <returns>
              新原子化的字符串或现有如果已经存在。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />。
            </summary>
      <param name="array">
                包含要添加的名称的字符数组。
              </param>
      <param name="offset">
                数组中指定名称的第一个字符的从零开始索引。
              </param>
      <param name="length">
                在名称中的字符数。
              </param>
      <returns>
              新原子化的字符串或现有如果已经存在。
               如果长度为零，则返回 String.Empty。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  0 &gt; <paramref name="offset" />
                
                  - 或 - 
                
                  <paramref name="offset" /> &gt;= <paramref name="array" />.长度 
                
                  - 或 - 
                
                  <paramref name="length" /> &gt; <paramref name="array" />.长度 
                
                  上述条件不会导致如果引发异常 <paramref name="length" /> = 0。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.
                </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>
              当在派生类中重写时获取包含与指定的字符串相同的值的原子化的字符串。
            </summary>
      <param name="array">
                要查找的名称。
              </param>
      <returns>
              原子化的字符串或 <see langword="null" /> 如果字符串具有不尚未原子化。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写时获取包含指定的范围内的给定数组中的字符相同的字符的原子化的字符串。
            </summary>
      <param name="array">
                包含要查找的名称的字符数组。
              </param>
      <param name="offset">
                数组中指定名称的第一个字符从零开始的索引。
              </param>
      <param name="length">
                在名称中的字符数。
              </param>
      <returns>
              原子化的字符串或 <see langword="null" /> 如果字符串具有不尚未原子化。
               如果 <paramref name="length" /> 为零，则返回 String.Empty。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  0 &gt; <paramref name="offset" />
                
                  - 或 - 
                
                  <paramref name="offset" /> &gt;= <paramref name="array" />.长度 
                
                  - 或 - 
                
                  <paramref name="length" /> &gt; <paramref name="array" />.长度 
                
                  上述条件不会导致如果引发异常 <paramref name="length" /> = 0。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.
                </exception>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>
              表示 XML 文档中的单个节点。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>
              将指定的节点添加到该节点的子节点列表的末尾。
            </summary>
      <param name="newChild">
                要添加的节点。
                 要添加的节点的全部内容会移动到指定位置。
              </param>
      <returns>
              添加的节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>
              获取 <see cref="T:System.Xml.XmlAttributeCollection" /> 包含此节点的属性。
            </summary>
      <returns>
        <see langword="XmlAttributeCollection" /> 包含节点的属性。
            
              如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
               否则，此属性将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>
              获取当前节点的基 URI。
            </summary>
      <returns>
              从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>
              获取节点的所有子节点。
            </summary>
      <returns>
              一个包含节点的所有子节点的对象。
            
              如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>
              创建此节点的副本。
            </summary>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>
              当在派生类中被重写时，创建该节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              克隆的节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不能克隆的节点类型上调用此方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>
              创建 <see cref="T:System.Xml.XPath.XPathNavigator" /> 用于定位此对象。
            </summary>
      <returns>
        <see langword="XPathNavigator" /> 对象，用于导航节点。
              <see langword="XPathNavigator" /> 定位从中调用该方法的节点上。
               它不定位在文档的根上。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>
              获取节点的第一个子级。
            </summary>
      <returns>
              节点的第一个子级。
               如果没有此类节点 <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>
              获取循环访问当前节点中子节点的枚举。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问当前节点中的子节点的对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>
              查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
            </summary>
      <param name="prefix">
                你想查找的命名空间 URI 的前缀。
              </param>
      <returns>
              指定前缀的命名空间 URI。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>
              查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
            </summary>
      <param name="namespaceURI">
                要查找其前缀的命名空间 URI。
              </param>
      <returns>
              指定的命名空间 URI 的前缀。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>
              获取一个值，该值指示此节点是否有任何子节点。
            </summary>
      <returns>
        <see langword="true" /> 如果该节点具有子节点，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>
              获取或设置节点及其所有子节点的串连值。
            </summary>
      <returns>
              节点及其所有子节点的串连值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>
              获取或设置仅表示该节点的子节点的标记。
            </summary>
      <returns>
              该节点的子节点的标记。
            
                <see langword="InnerXml" /> 不会返回默认属性。
              </returns>
      <exception cref="T:System.InvalidOperationException">
                  在节点上设置此属性不能有子节点。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  设置此属性时指定的 XML 格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
              将指定的节点紧接着插入指定的引用节点之后。
            </summary>
      <param name="newChild">
                要插入的 <see langword="XmlNode" />。
              </param>
      <param name="refChild">
        <see langword="XmlNode" /> ，它是引用节点。
                <paramref name="newNode" /> 放在 <paramref name="refNode" />。
              </param>
      <returns>
              插入的节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  <paramref name="refChild" /> 不是此节点的子级。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
              将指定的节点紧接着插入指定的引用节点之前。
            </summary>
      <param name="newChild">
                要插入的 <see langword="XmlNode" />。
              </param>
      <param name="refChild">
        <see langword="XmlNode" /> ，它是引用节点。
                <paramref name="newChild" /> 放置在该节点之前。
              </param>
      <returns>
              插入的节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  <paramref name="refChild" /> 不是此节点的子级。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>
              获取指示节点是否只读的值。
            </summary>
      <returns>
        <see langword="true" /> 如果节点是只读的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>
              获取具有指定的第一个子元素 <see cref="P:System.Xml.XmlNode.Name" />。
            </summary>
      <param name="name">
                要检索的元素的限定的名称。
              </param>
      <returns>
              第一个 <see cref="T:System.Xml.XmlElement" /> 指定的名称相匹配。
               它将返回 null 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果不匹配。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>
              获取具有指定的第一个子元素 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />。
            </summary>
      <param name="localname">
                元素的本地名称。
              </param>
      <param name="ns">
                元素的命名空间 URI。
              </param>
      <returns>
              第一个 <see cref="T:System.Xml.XmlElement" /> 具有匹配 <paramref name="localname" /> 和 <paramref name="ns" />。
               。
               它将返回 null 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果不匹配。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>
              获取节点的最后一个子级。
            </summary>
      <returns>
              节点的最后一个子级。
               如果没有此类节点 <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>
              当在派生类中被重写时，获取节点的本地名称。
            </summary>
      <returns>
              移除了前缀的节点的名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" /> 是 book。
            
              返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" /> 的节点︰ 
            
                      类型 
                    
                      名称 
                    
                      特性 
                    
                      属性的本地名称。
                    
                      CDATA 
                    
                      #cdata-section 
                    
                      注释 
                    
                      #comment 
                    
                      Document 
                    
                      #document 
                    
                      DocumentFragment 
                    
                      #document-fragment 
                    
                      DocumentType 
                    
                      文档类型名称。
                    
                      元素 
                    
                      元素的本地名称。
                    
                      实体 
                    
                      实体的名称。
                    
                      EntityReference 
                    
                      引用的实体的名称。
                    
                      Notation 
                    
                      表示法名称。
                    
                      ProcessingInstruction 
                    
                      处理指令的目标。
                    
                      Text 
                    
                      #text 
                    
                      Whitespace 
                    
                      #whitespace 
                    
                      SignificantWhitespace 
                    
                      #significant-whitespace 
                    
                      XmlDeclaration 
                    
                      #xml-declaration 
                    </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>
              当在派生类中被重写时，获取节点的限定名称。
            </summary>
      <returns>
              节点的限定名称。
               返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" /> 的节点︰
            
                      类型 
                    
                      名称 
                    
                      特性 
                    
                      属性的限定名称。
                    
                      CDATA 
                    
                      #cdata-section 
                    
                      注释 
                    
                      #comment 
                    
                      Document 
                    
                      #document 
                    
                      DocumentFragment 
                    
                      #document-fragment 
                    
                      DocumentType 
                    
                      文档类型名称。
                    
                      元素 
                    
                      元素的限定名。
                    
                      实体 
                    
                      实体的名称。
                    
                      EntityReference 
                    
                      引用的实体的名称。
                    
                      Notation 
                    
                      表示法名称。
                    
                      ProcessingInstruction 
                    
                      处理指令的目标。
                    
                      Text 
                    
                      #text 
                    
                      Whitespace 
                    
                      #whitespace 
                    
                      SignificantWhitespace 
                    
                      #significant-whitespace 
                    
                      XmlDeclaration 
                    
                      #xml-declaration 
                    </returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>
              获取该节点的命名空间 URI。
            </summary>
      <returns>
              该节点的命名空间 URI。
               如果没有命名空间 URI，则此属性返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>
              获取紧接在该节点之后的节点。
            </summary>
      <returns>
              下一个 <see langword="XmlNode" />。
               如果没有下一个节点 <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>
              当在派生类中被重写时，获取当前节点的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>
              将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
            </summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>
              获取包含此节点及其所有子节点的标记。
            </summary>
      <returns>
              包含此节点及其所有子节点的标记。
            
                <see langword="OuterXml" /> 不会返回默认属性。
              </returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>
              获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlDocument" /> 此节点所属。
            
              如果节点是 <see cref="T:System.Xml.XmlDocument" /> （NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>
              获取该节点的父级（针对可以拥有父级的节点）。
            </summary>
      <returns>
              作为当前节点父级的 <see langword="XmlNode" />。
               如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。
               对于所有其他节点，返回的值取决于 <see cref="P:System.Xml.XmlNode.NodeType" /> 的节点。
               下表描述了 <see langword="ParentNode" /> 属性可能的返回值。
            
                      NodeType 
                    
                      ParentNode 的返回值 
                    
                      Attribute、Document、DocumentFragment、Entity、Notation 
                    
                      返回 <see langword="null" />; 这些节点不具有父级。
                    
                      CDATA 
                    
                      返回包含 CDATA 节的元素或实体引用。
                    
                      注释 
                    
                      返回包含注释的元素、实体引用、文档类型或文档。
                    
                      DocumentType 
                    
                      返回文档节点。
                    
                      元素 
                    
                      返回该元素的父节点。
                       如果该元素是树中的根节点，则父级是文档节点。
                    
                      EntityReference 
                    
                      返回包含该实体引用的元素、特性或实体引用。
                    
                      ProcessingInstruction 
                    
                      返回包含该处理指令的文档、元素、文档类型或实体引用。
                    
                      Text 
                    
                      返回包含该文本节点的父元素、特性或实体引用。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>
              获取或设置该节点的命名空间前缀。
            </summary>
      <returns>
              该节点的命名空间前缀。
               例如， <see langword="Prefix" /> 元素 &lt; bk:book &gt; 是 bk。
               如果没有前缀，则该属性返回 String.Empty。
            </returns>
      <exception cref="T:System.ArgumentException">
                  此节点是只读的。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  指定的前缀包含无效字符。
                
                  指定的前缀格式不正确。
                
                  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
                
                  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
                
                  此节点是属性，该节点的 qualifiedName 是"xmlns"。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>
              将指定的节点添加到该节点的子节点列表的开头。
            </summary>
      <param name="newChild">
                要添加的节点。
                 要添加的节点的全部内容会移动到指定位置。
              </param>
      <returns>
              添加的节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  此节点是只读的。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>
              获取紧接在该节点之前的节点。
            </summary>
      <returns>
              前面 <see langword="XmlNode" />。
               如果前面没有节点 <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary>
              获取紧接在该节点之前的文本节点。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.XmlNode" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>
              移除当前节点的所有子节点和/或属性。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>
              移除指定的子节点。
            </summary>
      <param name="oldChild">
                正在被移除的节点。
              </param>
      <returns>
              已移除的节点。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> 不是此节点的子级。
                   或此节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
              替换子节点 <paramref name="oldChild" /> 与 <paramref name="newChild" /> 节点。
            </summary>
      <param name="newChild">
                要放入子列表的新节点。
              </param>
      <param name="oldChild">
                列表中正在被替换的节点。
              </param>
      <returns>
              被替换的节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此节点是不允许子的类型的节点的类型 <paramref name="newChild" /> 节点。
                
                  <paramref name="newChild" /> 是此节点的祖先。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 从创建此节点比不同文档创建。
                
                  此节点是只读的。
                
                  <paramref name="oldChild" /> 不是此节点的子级。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>
              获取作为架构验证的结果分配给此节点的后架构验证信息集。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象，其中包含此节点的后架构验证信息集。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>
              选择匹配 XPath 表达式的节点列表。
            </summary>
      <param name="xpath">
                XPath 表达式。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" /> 包含匹配 XPath 查询的节点集合。
            </returns>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式包含的前缀。
                   请参阅 XPath 示例。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>
              选择匹配 XPath 表达式的节点列表。
               使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />。
            </summary>
      <param name="xpath">
                XPath 表达式。
                 请参阅 XPath 示例。
              </param>
      <param name="nsmgr">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 以用于解析 XPath 表达式中的前缀的命名空间。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" /> 包含匹配 XPath 查询的节点集合。
            </returns>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>
              选择第一个 <see langword="XmlNode" /> ，与 XPath 表达式匹配。
            </summary>
      <param name="xpath">
                XPath 表达式。
                 请参阅 XPath 示例。
              </param>
      <returns>
              第一个 <see langword="XmlNode" /> 匹配 XPath 查询或 <see langword="null" /> 如果不找到任何匹配节点。
            </returns>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式包含的前缀。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>
              选择第一个 <see langword="XmlNode" /> ，与 XPath 表达式匹配。
               使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />。
            </summary>
      <param name="xpath">
                XPath 表达式。
                 请参阅 XPath 示例。
              </param>
      <param name="nsmgr">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 以用于解析 XPath 表达式中的前缀的命名空间。
              </param>
      <returns>
              第一个 <see langword="XmlNode" /> 匹配 XPath 查询或 <see langword="null" /> 如果不找到任何匹配节点。
            </returns>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>
              测试 DOM 实现是否实现特定的功能。
            </summary>
      <param name="feature">
                要测试的功能的程序包名称。
                 该名称不区分大小写。
              </param>
      <param name="version">
                要测试的程序包名称的版本号。
                 如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
              </param>
      <returns>
        <see langword="true" /> 如果在指定的版本; 中实现该功能否则为 <see langword="false" />。
               下表描述了返回的组合 <see langword="true" />。
            
                      功能 
                    
                      版本 
                    
                      XML 
                    
                      1.0 
                    
                      XML 
                    
                      2.0 
                    </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />的节点︰ 
            
                      类型 
                    
                      值 
                    
                      特性 
                    
                      属性的值。
                    
                      CDATASection 
                    
                      CDATA 节的内容。
                    
                      注释 
                    
                      注释的内容。
                    
                      Document 
                    
                      <see langword="null" />。
                    
                      DocumentFragment 
                    
                      <see langword="null" />。
                    
                      DocumentType 
                    
                      <see langword="null" />。
                    
                      元素 
                    
                      <see langword="null" />。
                       你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />或<see cref="P:System.Xml.XmlElement.InnerXml" />属性来访问元素节点的值。
                    
                      实体 
                    
                      <see langword="null" />。
                    
                      EntityReference 
                    
                      <see langword="null" />。
                    
                      Notation 
                    
                      <see langword="null" />。
                    
                      ProcessingInstruction 
                    
                      全部内容（不包括指令目标）。
                    
                      Text 
                    
                      文本节点的内容。
                    
                      SignificantWhitespace 
                    
                      空格字符。
                       空白可由一个或多个空格字符、回车符、换行符或制表符组成。
                    
                      Whitespace 
                    
                      空格字符。
                       空白可由一个或多个空格字符、回车符、换行符或制表符组成。
                    
                      XmlDeclaration 
                    
                      声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
                    </returns>
      <exception cref="T:System.ArgumentException">
                  节点的值设置为只读。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  不应该具有值 （例如，元素节点） 的节点的值设置。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将所有子节点的节点都保存到指定 <see cref="T:System.Xml.XmlWriter" />, ，当在派生类中重写。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将当前节点保存到指定 <see cref="T:System.Xml.XmlWriter" />, ，当在派生类中重写。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.XmlNode.GetEnumerator" />。
            </summary>
      <returns>
              返回集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.XmlNode.Clone" />。
            </summary>
      <returns>
              节点的副本，它通过该节点调用。
            </returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>
              指定节点更改的类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>
              正在更改节点值。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>
              要在树中插入一个节点。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>
              正在从树中删除一个节点。
            </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>
              将提供数据供 <see cref="E:System.Xml.XmlDocument.NodeChanged" />, ，<see cref="E:System.Xml.XmlDocument.NodeChanging" />, ，<see cref="E:System.Xml.XmlDocument.NodeInserted" />, ，<see cref="E:System.Xml.XmlDocument.NodeInserting" />, ，<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 事件。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> 类的新实例。
            </summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 生成了该事件。
              </param>
      <param name="oldParent">
                旧的父级 <see cref="T:System.Xml.XmlNode" /> 的 <see cref="T:System.Xml.XmlNode" /> 生成了该事件。
              </param>
      <param name="newParent">
                新的父级 <see cref="T:System.Xml.XmlNode" /> 的 <see cref="T:System.Xml.XmlNode" /> 生成了该事件。
              </param>
      <param name="oldValue">
                旧值 <see cref="T:System.Xml.XmlNode" /> 生成了该事件。
              </param>
      <param name="newValue">
                新值 <see cref="T:System.Xml.XmlNode" /> 生成了该事件。
              </param>
      <param name="action">
        <see cref="T:System.Xml.XmlNodeChangedAction" />。
              </param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>
              获取一个值，该值指示发生何种类型的节点更改事件。
            </summary>
      <returns>
        <see langword="XmlNodeChangedAction" /> 描述该节点的值更改事件。
            
                      XmlNodeChangedAction 值 
                    
                      描述 
                    
                      Insert 
                    
                      已或将插入的节点。
                    
                      删除 
                    
                      节点已被，否则会被删除。
                    
                      更改 
                    
                      节点已被更改或将更改。
                    
                <see langword="Action" /> 值不会区分事件何时发生 （之前或之后）。
                 您可以创建单独的事件处理程序来处理这两个实例。
              </returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>
              获取的值 <see cref="P:System.Xml.XmlNode.ParentNode" /> 操作完成后。
            </summary>
      <returns>
              值 <see langword="ParentNode" /> 操作完成后。
               此属性返回 <see langword="null" /> 如果已移除的节点。
            
                对于属性节点此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。
              </returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>
              获取节点的新值。
            </summary>
      <returns>
              节点的新值。
               此属性返回 <see langword="null" /> 节点是否既不属性，也不是文本节点，或已移除的节点。
            
              如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件， <see langword="NewValue" /> 返回节点的值，如果更改成功。
               如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件， <see langword="NewValue" /> 返回节点的当前值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>
              获取 <see cref="T:System.Xml.XmlNode" /> 要添加、 移除或更改。
            </summary>
      <returns>
        <see langword="XmlNode" /> 正被添加、 删除或已更改; 此属性绝不会返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>
              获取的值 <see cref="P:System.Xml.XmlNode.ParentNode" /> 操作开始前。
            </summary>
      <returns>
              值 <see langword="ParentNode" /> 操作开始前。
               此属性返回 <see langword="null" /> 如果节点没有父级。
            
                对于属性节点此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。
              </returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>
              获取节点的原始值。
            </summary>
      <returns>
              节点的原始值。
               此属性返回 <see langword="null" /> 节点是否既不属性，也不是文本节点，或插入节点。
            
              如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件， <see langword="OldValue" /> 返回成功更改是否将被替换的节点的当前值。
               如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件， <see langword="OldValue" /> 返回之前更改节点的值。
            </returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.Xml.XmlDocument.NodeChanged" />, ，<see cref="E:System.Xml.XmlDocument.NodeChanging" />, ，<see cref="E:System.Xml.XmlDocument.NodeInserted" />, ，<see cref="E:System.Xml.XmlDocument.NodeInserting" />, ，<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Xml.XmlNodeChangedEventArgs" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>
              表示节点的有序集合。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlNodeList" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>
              获取中的节点数 <see langword="XmlNodeList" />。
            </summary>
      <returns>
              中的节点数 <see langword="XmlNodeList" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>
              获取循环的枚举器遍历节点集合。
            </summary>
      <returns>
              一个用于循环访问节点的集合的枚举。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>
              检索给定索引处的节点。
            </summary>
      <param name="index">
                中的节点列表的从零开始索引。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 具有在集合中指定的索引。
               如果 <paramref name="index" /> 是大于或等于的节点数在列表中，这将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>
              获取给定索引处的节点。
            </summary>
      <param name="i">
                中的节点列表的从零开始索引。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 具有在集合中指定的索引。
               如果索引是大于或等于列表中的节点数，这将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary>
              私下释放节点列表中的资源。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary>
              释放 <see cref="T:System.Xml.XmlNodeList" /> 类使用的所有资源。
            </summary>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>
              描述某节点相对于第二个节点的文档顺序。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>
              此导航器的当前节点是提供导航器的当前节点之后。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>
              此导航器的当前节点是提供导航器在当前节点之前。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>
              两种导航器位于同一个节点上。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>
              按文档顺序，相对于彼此，无法确定节点位置。
               如果两个节点驻留在不同的树中，也可能发生。
            </summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>
              表示提供快速、 非缓存只进访问中的 XML 数据的读取器 <see cref="T:System.Xml.XmlNode" />。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>
              创建的一个实例 <see langword="XmlNodeReader" /> 类使用指定 <see cref="T:System.Xml.XmlNode" />。
            </summary>
      <param name="node">
        <see langword="XmlNode" /> 要从中读取。
              </param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>
              获取当前节点上的属性数目。
            </summary>
      <returns>
              当前节点上的属性数目。
               该数目包括默认属性。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>
              获取当前节点的基 URI。
            </summary>
      <returns>
              当前节点的基 URI。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XmlNodeReader" /> 是否实现二进制内容读取方法。
            </summary>
      <returns>
              如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see cref="T:System.Xml.XmlNodeReader" /> 类始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>
              获取一个值，该值指示此读取器是否可以分析和解析实体。
            </summary>
      <returns>
              如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see langword="XmlNodeReader" /> 始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>
              将 <see cref="P:System.Xml.XmlNodeReader.ReadState" /> 改为 <see langword="Closed" />。
            </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>
              获取 XML 文档中当前节点的深度。
            </summary>
      <returns>
              XML 文档中当前节点的深度。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>
              获取一个值，该值指示读取器是否定位在流结尾。
            </summary>
      <returns>
              如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>
              获取具有指定名称的属性的值。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>
              获取具有指定本地名称和命名空间 URI 的属性的值。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>
              获取具有指定索引的属性的值。
            </summary>
      <param name="attributeIndex">
                属性的索引。
                 索引是从零开始的。
                 （第一个属性的索引为 0。）
              </param>
      <returns>
              指定的属性的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>
              获取一个值，该值指示当前节点是否有任何属性。
            </summary>
      <returns>
              如果当前节点具有属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>
              获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlNodeReader.Value" />。
            </summary>
      <returns>
              如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>
              获取一个值，该值指示当前节点是否是从文档类型定义 (DTD) 或架构中定义的默认值生成的属性。
            </summary>
      <returns>
              如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />；如果属性值为显式设置的，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>
              获取一个值，该值指示当前节点是否为空元素（例如，&lt;MyElement/&gt;）。
            </summary>
      <returns>
        <see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlNodeReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" />) 结尾 /&gt;; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>
              获取当前节点的本地名称。
            </summary>
      <returns>
              移除了前缀的当前节点的名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" /> 为 <see langword="book" />。
            
              对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 String.Empty。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>
              解析当前元素的范围内的命名空间前缀。
            </summary>
      <param name="prefix">
                要解析其命名空间 URI 的前缀。
                 若要匹配默认命名空间，请传递一个空字符串。
                 不必原子化该字符串。
              </param>
      <returns>
              前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>
              移动到具有指定索引的属性。
            </summary>
      <param name="attributeIndex">
                属性的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>
              移动到具有指定名称的属性。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>
              移动到具有指定本地名称和命名空间 URI 的属性。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>
              移动到包含当前属性节点的元素。
            </summary>
      <returns>
              如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>
              移动到第一个属性。
            </summary>
      <returns>
              如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>
              移动到下一个属性。
            </summary>
      <returns>
              如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>
              获取当前节点的限定名称。
            </summary>
      <returns>
              当前节点的限定名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="Name" /> 为 <see langword="bk:book" />。
            
              返回的名称取决于节点的 <see cref="P:System.Xml.XmlNodeReader.NodeType" />。
               下列节点类型返回所列的值。
               所有其他节点类型返回空字符串。
            
                      节点类型 
                    
                      名称 
                    
                      <see langword="Attribute" />
                    
                      属性名。
                    
                      <see langword="DocumentType" />
                    
                      文档类型名称。
                    
                      <see langword="Element" />
                    
                      标记名称。
                    
                      <see langword="EntityReference" />
                    
                      引用的实体的名称。
                    
                      <see langword="ProcessingInstruction" />
                    
                      处理指令的目标。
                    
                      <see langword="XmlDeclaration" />
                    
                      文字字符串 <see langword="xml" />。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>
              获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。
            </summary>
      <returns>
              当前节点的命名空间 URI；否则为空字符串。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>
              获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>
              获取与当前节点关联的命名空间前缀。
            </summary>
      <returns>
              与当前节点关联的命名空间前缀。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>
              从流中读取下一个节点。
            </summary>
      <returns>
              如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>
              将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。
            </summary>
      <returns>
              如果有可返回的节点，则为 <see langword="true" />。
            
              如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。
            
              如果是空属性（如 misc=""），则返回 <see langword="true" />，同时返回值为 String.Empty 的单个节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 Base64 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> 不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 BinHex 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 Base64 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合的内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 BinHex 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合的内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>
              获取读取器的状态。
            </summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>
              将元素或文本节点的内容读取为一个字符串。
            </summary>
      <returns>
              元素或类似文本节点（这可以包括 CDATA、Text 节点等）的内容。
               如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。
            
              <see langword="Note:" />文本节点可以是元素或属性文本节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>
              解析 <see langword="EntityReference" /> 节点的实体引用。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  读取器未定位在 <see langword="EntityReference" /> 节点。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>
              获取已分配给当前节点的架构信息。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象，它包含当前节点的架构信息。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>
              跳过当前节点的子级。
            </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>
              获取当前节点的文本值。
            </summary>
      <returns>
              返回的值取决于节点的 <see cref="P:System.Xml.XmlNodeReader.NodeType" />。
               下表列出具有要返回的值的节点类型。
               所有其他节点类型返回 String.Empty。
            
                      节点类型 
                    
                      值 
                    
                      <see langword="Attribute" />
                    
                      属性的值。
                    
                      <see langword="CDATA" />
                    
                      CDATA 节的内容。
                    
                      <see langword="Comment" />
                    
                      注释的内容。
                    
                      <see langword="DocumentType" />
                    
                      内部子集。
                    
                      <see langword="ProcessingInstruction" />
                    
                      全部内容（不包括指令目标）。
                    
                      <see langword="SignificantWhitespace" />
                    
                      混合内容模型中标记之间的空白区域。
                    
                      <see langword="Text" />
                    
                      文本节点的内容。
                    
                      <see langword="Whitespace" />
                    
                      标记之间的空白。
                    
                      <see langword="XmlDeclaration" />
                    
                      声明的内容。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>
              获取当前 <see langword="xml:lang" /> 范围。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 范围。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>
              获取当前 <see langword="xml:space" /> 范围。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。
               如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。
            </summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 对象。
              </param>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 包含作用域中的命名空间的对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。
            </summary>
      <param name="prefix">
        <see cref="T:System.String" /> 包含命名空间前缀。
              </param>
      <returns>
        <see cref="T:System.String" /> 包含命名空间名称。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。
            </summary>
      <param name="namespaceName">
        <see cref="T:System.String" /> 标识命名空间的对象。
              </param>
      <returns>
        <see cref="T:System.String" /> 包含命名空间前缀的对象。
            </returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>
              指定节点的类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>
              属性 (例如， id='123' )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>
              CDATA 节 (例如， &lt;![CDATA[my escaped text]]&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>
              注释 (例如， &lt;!-- my comment --&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>
              文档提供的对象，作为文档树的根访问整个 XML 文档。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>
              将文档片段。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>
              文档类型声明中，由以下标记 (例如， &lt;!DOCTYPE...&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>
              元素 (例如， &lt;item&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>
              结束元素标记 (例如， &lt;/item&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
              返回当 <see langword="XmlReader" /> 到达实体替换为调用的结果末尾 <see cref="M:System.Xml.XmlReader.ResolveEntity" />。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>
              实体声明 (例如， &lt;!ENTITY...&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>
              对实体的引用 (例如， &amp;num; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>
              这由返回 <see cref="T:System.Xml.XmlReader" /> 如果 <see langword="Read" /> 不调用方法。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>
              在文档类型声明中的表示法 (例如， &lt;!NOTATION...&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>
              处理指令 (例如， &lt;?pi test?&gt; )。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>
              在混合内容模型或内的空格中标记之间空白区域 xml:space="preserve" 作用域。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>
              节点的文本内容。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>
              标记之间的空白区域。
            </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>
              XML 声明 (例如， &lt;?xml version='1.0'?&gt; )。
            </summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>
              表示一个表示法声明，如 &lt; ！表示法 … &gt;。
            </summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
               无法克隆这些节点表示法。
               对调用此方法 <see cref="T:System.Xml.XmlNotation" /> 对象会引发异常。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              返回 <see cref="T:System.Xml.XmlNode" /> 从中调用该方法的节点的副本。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  无法克隆这些节点表示法。
                   对调用此方法 <see cref="T:System.Xml.XmlNotation" /> 对象会引发异常。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>
              获取表示此节点的子级的标记。
            </summary>
      <returns>
              有关 <see langword="XmlNotation" /> 节点，则返回 String.Empty。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试将设置该属性。
                </exception>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>
              获取指示节点是否只读的值。
            </summary>
      <returns>
        <see langword="true" /> 如果节点是只读的;否则为 <see langword="false" />。
            
              因为 <see langword="XmlNotation" /> 节点是只读的此属性始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>
              获取当前节点没有命名空间前缀的名称。
            </summary>
      <returns>
              有关 <see langword="XmlNotation" /> 节点，此属性返回表示法的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>
              获取当前节点的名称。
            </summary>
      <returns>
              批注的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              节点类型。
               有关 <see langword="XmlNotation" /> 节点，则这是 XmlNodeType.Notation。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>
              获取表示此节点及其所有子级的标记。
            </summary>
      <returns>
              有关 <see langword="XmlNotation" /> 节点，则返回 String.Empty。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>
              获取此表示法声明的公共标识符的值。
            </summary>
      <returns>
              此表示法公共标识符。
               如果没有公共标识符， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>
              获取表示法声明上的系统标识符的值。
            </summary>
      <returns>
              此表示法系统标识符。
               如果没有系统标识符， <see langword="null" /> 返回。
            </returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />。
               此方法不起任何作用 <see langword="XmlNotation" /> 节点。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
               此方法不起任何作用 <see langword="XmlNotation" /> 节点。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>
              指定用于序列化的方法 <see cref="T:System.Xml.XmlWriter" /> 输出。
            </summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>
              使用 XSLT 规则之间进行选择 <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 和 <see cref="F:System.Xml.XmlOutputMethod.Html" /> 输出方法在运行时。
            </summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>
              根据指定的 XSLT 的 HTML 规则进行序列化。
            </summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>
              将序列化为文本仅块。
            </summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>
              根据 XML 1.0 规则进行序列化。
            </summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>
              提供所需的上下文信息 <see cref="T:System.Xml.XmlReader" /> 来分析 XML 片段。
            </summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>
              新实例初始化 <see langword="XmlParserContext" /> 类与指定 <see cref="T:System.Xml.XmlNameTable" />, ，<see cref="T:System.Xml.XmlNamespaceManager" />, ，<see langword="xml:lang" />, ，和 <see langword="xml:space" /> 值。
            </summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> 用于原子化字符串。
                 如果这是 <see langword="null" />, ，用来构造的名称表 <paramref name="nsMgr" /> 改为使用。
                 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。
              </param>
      <param name="nsMgr">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 要用于查找命名空间信息或 <see langword="null" />。
              </param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 作用域。
              </param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，该值指示 <see langword="xml:space" /> 作用域。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 不相同 <see langword="XmlNameTable" /> 用于构造 <paramref name="nsMgr" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
              新实例初始化 <see langword="XmlParserContext" /> 类与指定 <see cref="T:System.Xml.XmlNameTable" />, ，<see cref="T:System.Xml.XmlNamespaceManager" />, ，<see langword="xml:lang" />, ，<see langword="xml:space" />, ，和编码。
            </summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> 用于原子化字符串。
                 如果这是 <see langword="null" />, ，用来构造的名称表 <paramref name="nsMgr" /> 改为使用。
                 原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。
              </param>
      <param name="nsMgr">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 要用于查找命名空间信息或 <see langword="null" />。
              </param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 作用域。
              </param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，该值指示 <see langword="xml:space" /> 作用域。
              </param>
      <param name="enc">
        <see cref="T:System.Text.Encoding" /> 对象，它指示编码设置。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 不相同 <see langword="XmlNameTable" /> 用于构造 <paramref name="nsMgr" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>
              新实例初始化 <see langword="XmlParserContext" /> 类与指定 <see cref="T:System.Xml.XmlNameTable" />, ，<see cref="T:System.Xml.XmlNamespaceManager" />, ，基 URI， <see langword="xml:lang" />, ，<see langword="xml:space" />, ，和文档类型值。
            </summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> 用于原子化字符串。
                 如果这是 <see langword="null" />, ，用来构造的名称表 <paramref name="nsMgr" /> 改为使用。
                 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。
              </param>
      <param name="nsMgr">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 要用于查找命名空间信息或 <see langword="null" />。
              </param>
      <param name="docTypeName">
                文档类型声明的名称。
              </param>
      <param name="pubId">
                公共标识符。
              </param>
      <param name="sysId">
                系统标识符。
              </param>
      <param name="internalSubset">
                内部 DTD 子集。
                 DTD 子集用于实体解析，而不能用于文档验证。
              </param>
      <param name="baseURI">
                基 URI 的 xml 片段 （从中加载该片段的位置）。
              </param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 作用域。
              </param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，该值指示 <see langword="xml:space" /> 作用域。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 不相同 <see langword="XmlNameTable" /> 用于构造 <paramref name="nsMgr" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
              新实例初始化 <see langword="XmlParserContext" /> 类与指定 <see cref="T:System.Xml.XmlNameTable" />, ，<see cref="T:System.Xml.XmlNamespaceManager" />, ，基 URI， <see langword="xml:lang" />, ，<see langword="xml:space" />, 、 编码和文档类型值。
            </summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> 用于原子化字符串。
                 如果这是 <see langword="null" />, ，用来构造的名称表 <paramref name="nsMgr" /> 改为使用。
                 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。
              </param>
      <param name="nsMgr">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 要用于查找命名空间信息或 <see langword="null" />。
              </param>
      <param name="docTypeName">
                文档类型声明的名称。
              </param>
      <param name="pubId">
                公共标识符。
              </param>
      <param name="sysId">
                系统标识符。
              </param>
      <param name="internalSubset">
                内部 DTD 子集。
                 DTD 用于实体解析，而不能用于文档验证。
              </param>
      <param name="baseURI">
                基 URI 的 xml 片段 （从中加载该片段的位置）。
              </param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 作用域。
              </param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，该值指示 <see langword="xml:space" /> 作用域。
              </param>
      <param name="enc">
        <see cref="T:System.Text.Encoding" /> 对象，它指示编码设置。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 不相同 <see langword="XmlNameTable" /> 用于构造 <paramref name="nsMgr" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>
              获取或设置基 URI。
            </summary>
      <returns>
              要用于解析 DTD 文件的基 URI。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>
              获取或设置文档类型声明的名称。
            </summary>
      <returns>
              文档类型声明的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>
              获取或设置的编码类型。
            </summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 对象，它指示编码类型。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>
              获取或设置内部 DTD 子集。
            </summary>
      <returns>
              内部 DTD 子集。
               例如，此属性返回的所有内容方括号 &lt;!DOCTYPE doc [...]&gt;。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
              获取或设置 <see cref="T:System.Xml.XmlNamespaceManager" />。
            </summary>
      <returns>
        <see langword="XmlNamespaceManager" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>
              获取 <see cref="T:System.Xml.XmlNameTable" /> 用于原子化字符串。
               原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
      <returns>
        <see langword="XmlNameTable" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>
              获取或设置公共标识符。
            </summary>
      <returns>
              公共标识符。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>
              获取或设置的系统标识符。
            </summary>
      <returns>
              系统标识符。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>
              获取或设置当前 <see langword="xml:lang" /> 作用域。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 范围。
               如果没有任何 <see langword="xml:lang" /> 在范围内， <see langword="String.Empty" /> 返回。
            </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>
              获取或设置当前 <see langword="xml:space" /> 作用域。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值，该值指示 <see langword="xml:space" /> 作用域。
            </returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>
              表示一条处理指令，XML 定义该处理指令以将处理器特定的信息保存在文档的文本中。
            </summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlProcessingInstruction" /> 类的新实例。
            </summary>
      <param name="target">
                目标的处理指令;请参阅 <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> 属性。
              </param>
      <param name="data">
                指令; 的内容请参阅 <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> 属性。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              重复节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>
              获取或设置处理指令的内容（目标除外）。
            </summary>
      <returns>
              处理指令的内容（目标除外）。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>
              获取或设置节点及其所有子级的串连值。
            </summary>
      <returns>
              节点及其所有子级的串连值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              对于处理指令节点，此属性返回处理指令的目标。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              对于处理指令节点，此属性返回处理指令的目标。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              有关 <see langword="XmlProcessingInstruction" /> 节点，该值是 XmlNodeType.ProcessingInstruction。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>
              获取处理指令的目标。
            </summary>
      <returns>
              处理指令的目标。
            </returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              处理指令的全部内容（目标除外）。
            </returns>
      <exception cref="T:System.ArgumentException">
                  节点是只读的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
               因为 ProcessingInstruction 节点不具有子级，所以此方法无效。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>
              表示 XML 限定名称。
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>
              用指定的名称初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 类的新实例。
            </summary>
      <param name="name">
                要用作名称的本地名称 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>
              用指定的名称和命名空间初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 类的新实例。
            </summary>
      <param name="name">
                要用作名称的本地名称 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。
              </param>
      <param name="ns">
                命名空间 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。
              </param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>
              提供了一个空 <see cref="T:System.Xml.XmlQualifiedName" />。
            </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Xml.XmlQualifiedName" /> 对象是否等于当前 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。
            </summary>
      <param name="other">
                要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。
              </param>
      <returns>
        <see langword="true" /> 如果两个相同的实例对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
              返回 <see cref="T:System.Xml.XmlQualifiedName" /> 的哈希代码。
            </summary>
      <returns>
              此对象的哈希代码。
            </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Xml.XmlQualifiedName" /> 为空。
            </summary>
      <returns>
        <see langword="true" /> 如果名称和命名空间为空字符串;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
              获取的限定名称的字符串表示 <see cref="T:System.Xml.XmlQualifiedName" />。
            </summary>
      <returns>
              字符串表示形式的限定的名称或 String.Empty，如果为该对象未定义的名称。
            </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
              获取的命名空间的字符串表示 <see cref="T:System.Xml.XmlQualifiedName" />。
            </summary>
      <returns>
              字符串表示形式的命名空间或 String.Empty，如果没有为该对象定义命名空间。
            </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
              比较两个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。
            </summary>
      <param name="a">
                要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。
              </param>
      <param name="b">
                要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。
              </param>
      <returns>
        <see langword="true" /> 如果两个对象具有相同的名称和命名空间值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
              比较两个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。
            </summary>
      <param name="a">
                要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。
              </param>
      <param name="b">
                要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。
              </param>
      <returns>
        <see langword="true" /> 如果两个对象的名称和命名空间值不同。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
              返回的字符串值 <see cref="T:System.Xml.XmlQualifiedName" />。
            </summary>
      <returns>
              字符串值 <see cref="T:System.Xml.XmlQualifiedName" /> 的格式为 <see langword="namespace:localname" />。
               如果该对象不具有定义的命名空间，此方法将返回只是本地名称。
            </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
              返回的字符串值 <see cref="T:System.Xml.XmlQualifiedName" />。
            </summary>
      <param name="name">
                对象的名称。
              </param>
      <param name="ns">
                对象的命名空间。
              </param>
      <returns>
              字符串值 <see cref="T:System.Xml.XmlQualifiedName" /> 的格式为 <see langword="namespace:localname" />。
               如果该对象不具有定义的命名空间，此方法将返回只是本地名称。
            </returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>
              表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。
            
              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
            </summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>
              初始化 <see langword="XmlReader" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>
              当在派生类中被重写时，获取当前节点上的属性数。
            </summary>
      <returns>
              当前节点上的属性数目。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>
              当在派生类中被重写时，获取当前节点的基 URI。
            </summary>
      <returns>
              当前节点的基 URI。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" /> 是否实现二进制内容读取方法。
            </summary>
      <returns>
              如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" /> 是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XmlReader" /> 实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>
              获取一个值，该值指示此读取器是否可以分析和解析实体。
            </summary>
      <returns>
              如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>
              当在派生类中重写，将更改 <see cref="P:System.Xml.XmlReader.ReadState" /> 到 <see cref="F:System.Xml.ReadState.Closed" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>
              使用指定的 URI、设置和进行分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="inputUri">
                包含 XML 数据的文件的 URI。
                <see cref="T:System.Xml.XmlReaderSettings" /> 对象上的 <see cref="T:System.Xml.XmlResolver" /> 对象用于将路径转换为规范化数据表示形式。
                 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 为 <see langword="null" />，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 对象。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <param name="inputContext">
                分析 XML 片段所需的上下文信息.
                 上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 xml:lang 和 xml:space 范围、基 URI 和文档类型定义。
              
                此值可为 <see langword="null" />。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="inputUri" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 没有足够的权限访问 XML 数据的位置。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 属性都包含值。
                   （只能设置并使用这些 <see langword="NameTable" /> 属性之中的一个）。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到 URI 指定的文件。
                </exception>
      <exception cref="T:System.UriFormatException">
                  URI 格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>
              使用指定的文本读取器、设置和要用于分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                从其中读取 XML 数据的文本读取器。
                 由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <param name="inputContext">
                分析 XML 片段所需的上下文信息.
                 上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 xml:lang 和 xml:space 范围、基 URI 和文档类型定义。
              
                此值可为 <see langword="null" />。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 属性都包含值。
                   （只能设置并使用这些 <see langword="NameTable" /> 属性之中的一个）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>
              使用指定的文本读取器、设置和基 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="input">
                从其中读取 XML 数据的文本读取器。
                 由于文本读取器返回的是 Unicode 字符流，因此，<see cref="T:System.Xml.XmlReader" /> 未使用 XML 声明中指定的编码对数据流进行解码。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <param name="baseUri">
                正在读取的实体或文档的基 URI。
                 此值可为 <see langword="null" />。
              
                “安全说明”   基 URI 用于解析 XML 文档的相对 URI。
                 不要使用来自非信任源的基 URI。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>
              使用指定的流、基 URI 和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                包含 XML 数据的流。
              
                <see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
                 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <param name="baseUri">
                正在读取的实体或文档的基 URI。
                 此值可为 <see langword="null" />。
              
                “安全说明”   基 URI 用于解析 XML 文档的相对 URI。
                 不要使用来自非信任源的基 URI。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>
              使用指定的 XML 读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="reader">
                要用作基础 XML 编写器的对象。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
              
                <see cref="T:System.Xml.XmlReaderSettings" /> 对象的一致性级别要么必须与基础读取器的一致性级别匹配，要么必须设置为 <see cref="F:System.Xml.ConformanceLevel.Auto" />。
              </param>
      <returns>
              在指定的 <see cref="T:System.Xml.XmlReader" /> 对象周围包装的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  如果 <see cref="T:System.Xml.XmlReaderSettings" /> 对象指定的一致性级别与基础读取器一致性级别不一致。
                
                  - 或 -
                
                  基础 <see cref="T:System.Xml.XmlReader" /> 处于 <see cref="F:System.Xml.ReadState.Error" /> 或 <see cref="F:System.Xml.ReadState.Closed" /> 状态。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>
              使用指定的流、设置和用于分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                包含 XML 数据的流。
              
                <see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
                 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <param name="inputContext">
                分析 XML 片段所需的上下文信息.
                 上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 xml:lang 和 xml:space 范围、基 URI 和文档类型定义。
              
                此值可为 <see langword="null" />。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>
              使用指定的文本读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                从其中读取 XML 数据的文本读取器。
                 由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 的设置。
                 此值可为 <see langword="null" />。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>
              使用指定的流和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                包含 XML 数据的流。
              
                <see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
                 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>
              使用指定的 URI 和设置创建新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="inputUri">
                包含 XML 数据的文件的 URI。
                <see cref="T:System.Xml.XmlReaderSettings" /> 对象上的 <see cref="T:System.Xml.XmlResolver" /> 对象用于将路径转换为规范化数据表示形式。
                 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 为 <see langword="null" />，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 对象。
              </param>
      <param name="settings">
                新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。
                 此值可为 <see langword="null" />。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到 URI 指定的文件。
                </exception>
      <exception cref="T:System.UriFormatException">
                    在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
                  
                  URI 格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>
              用指定的 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="inputUri">
                包含 XML 数据的文件的 URI。
                <see cref="T:System.Xml.XmlUrlResolver" /> 类用于将路径转换为规范化数据表示形式。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 没有足够的权限访问 XML 数据的位置。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  由 URI 标识的文件不存在。
                </exception>
      <exception cref="T:System.UriFormatException">
                    在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
                  
                  URI 格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>
              使用指定的文本读取器创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                从其中读取 XML 数据的文本读取器。
                 由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>
              使用带默认设置的指定流创建新的 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <param name="input">
                包含 XML 数据的流。
              
                <see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
                 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
              </param>
      <returns>
              一个用于读取数据流中所含数据的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 没有足够的权限访问 XML 数据的位置。
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>
              当在派生类中被重写时，获取 XML 文档中当前节点的深度。
            </summary>
      <returns>
              XML 文档中当前节点的深度。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary>
              释放 <see cref="T:System.Xml.XmlReader" /> 类的当前实例所使用的所有资源。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Xml.XmlReader" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>
              当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。
            </summary>
      <returns>
              如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>
              当在派生类中被重写时，获取具有指定索引的属性的值。
            </summary>
      <param name="i">
                属性的索引。
                 索引是从零开始的。
                 （第一个属性的索引为 0。）
              </param>
      <returns>
              指定的属性的值。
               此方法不移动读取器。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 超出范围。
                   它必须是非负数且小于属性集合的大小。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>
              当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.Name" />。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              指定的属性的值。
               如果找不到属性或值为 <see langword="String.Empty" />, ，<see langword="null" /> 返回。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>
              当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              指定的属性的值。
               如果找不到属性或值为 <see langword="String.Empty" />, ，<see langword="null" /> 返回。
               此方法不移动读取器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary>
              异步获取当前节点的值。
            </summary>
      <returns>
              当前节点的值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>
              获取一个值，该值指示当前节点是否有任何属性。
            </summary>
      <returns>
              如果当前节点具有属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>
              当在派生类中重写，获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlReader.Value" />。
            </summary>
      <returns>
              如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果 <see langword="false" />, ，该节点具有值为 <see langword="String.Empty" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>
              当在派生类中被重写时，获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的特性。
            </summary>
      <returns>
              如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />；如果属性值为显式设置的，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>
              当在派生类中重写，获取一个值，该值指示当前节点是否为空元素 (例如， &lt;MyElement/&gt;)。
            </summary>
      <returns>
              如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" />），则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>
              返回一个值，该值指示字符串自变量是否是有效的 XML 名称。
            </summary>
      <param name="str">
                要验证的名称。
              </param>
      <returns>
        <see langword="true" /> 如果该名称是否有效;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>
              返回一个值，该值指示该字符串自变量是否是有效的 XML 名称标记。
            </summary>
      <param name="str">
                要验证的名称标记。
              </param>
      <returns>
        <see langword="true" /> 如果它是有效的名称的标记;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
              调用 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 并测试当前内容节点是开始标记还是空元素标记。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 找到开始标记还是空元素标记; <see langword="false" /> 如果以外的节点类型 <see langword="XmlNodeType.Element" /> 找。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
              调用 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.Name" /> 属性找到的元素与给定的参数匹配。
            </summary>
      <param name="name">
                匹配的字符串 <see langword="Name" /> 找到的元素的属性。
              </param>
      <returns>
        <see langword="true" /> 如果生成的节点是元素与 <see langword="Name" /> 属性与指定的字符串匹配。
              <see langword="false" /> 如果以外的节点类型 <see langword="XmlNodeType.Element" /> 找或者，如果该元素 <see langword="Name" /> 属性与指定的字符串不匹配。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
              调用 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性找到的元素与给定的字符串匹配。
            </summary>
      <param name="localname">
                要匹配的字符串 <see langword="LocalName" /> 找到的元素的属性。
              </param>
      <param name="ns">
                要匹配的字符串 <see langword="NamespaceURI" /> 找到的元素的属性。
              </param>
      <returns>
        <see langword="true" /> 如果生成的节点是一个元素。
              <see langword="false" /> 如果以外的节点类型 <see langword="XmlNodeType.Element" /> 找或者，如果 <see langword="LocalName" /> 和 <see langword="NamespaceURI" /> 元素的属性与指定的字符串不匹配。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>
              当在派生类中被重写时，获取具有指定索引的属性的值。
            </summary>
      <param name="i">
                属性的索引。
              </param>
      <returns>
              指定的属性的值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>
              当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.Name" />。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>
              当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>
              当在派生类中被重写时，获取当前节点的本地名称。
            </summary>
      <returns>
              移除了前缀的当前节点的名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" /> 为 <see langword="book" />。
            
              对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 <see langword="String.Empty" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>
              当在派生类中被重写时，在当前元素的范围内解析命名空间前缀。
            </summary>
      <param name="prefix">
                要解析其命名空间 URI 的前缀。
                 若要匹配默认命名空间，请传递一个空字符串。
              </param>
      <returns>
              前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>
              当在派生类中被重写时，移动到具有指定索引的属性。
            </summary>
      <param name="i">
                属性的索引。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  参数具有值为负。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>
              当在派生类中重写，将移动到具有指定的属性 <see cref="P:System.Xml.XmlReader.Name" />。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentException">
                  该参数为空字符串。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>
              当在派生类中重写，将移动到具有指定的属性 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  这两个参数的值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>
              检查当前节点是否为内容 (非空白文本、 <see langword="CDATA" />, ，<see langword="Element" />, ，<see langword="EndElement" />, ，<see langword="EntityReference" />, ，或 <see langword="EndEntity" />) 节点。
               如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
               它跳过以下类型的节点：<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" /> 或 <see langword="SignificantWhitespace" />。
            </summary>
      <returns>
        <see cref="P:System.Xml.XmlReader.NodeType" /> 方法找到的当前节点或 <see langword="XmlNodeType.None" /> 如果读取器已到达输入流的末尾。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary>
              异步检查当前节点是否为内容节点。
               如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
            </summary>
      <returns>
              此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。
                   在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中”。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。
                   在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>
              当在派生类中被重写时，移动到包含当前属性节点的元素。
            </summary>
      <returns>
              如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>
              当在派生类中被重写时，移动到第一个属性。
            </summary>
      <returns>
              如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>
              当在派生类中被重写时，移动到下一个属性。
            </summary>
      <returns>
              如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>
              当在派生类中被重写时，获取当前节点的限定名。
            </summary>
      <returns>
              当前节点的限定名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="Name" /> 为 <see langword="bk:book" />。
            
              返回的名称取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />。
               下列节点类型返回所列的值。
               所有其他节点类型返回空字符串。
            
                      节点类型 
                    
                      名称 
                    
                      <see langword="Attribute" />
                    
                      属性名。
                    
                      <see langword="DocumentType" />
                    
                      文档类型名称。
                    
                      <see langword="Element" />
                    
                      标记名称。
                    
                      <see langword="EntityReference" />
                    
                      引用的实体的名称。
                    
                      <see langword="ProcessingInstruction" />
                    
                      处理指令的目标。
                    
                      <see langword="XmlDeclaration" />
                    
                      文字字符串 <see langword="xml" />。
                    </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>
              当在派生类中被重写时，获取读取器定位在其上的节点的命名空间 URI（采用 W3C 命名空间规范中定义的形式）。
            </summary>
      <returns>
              当前节点的命名空间 URI；否则为空字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>
              当在派生类中重写时获取 <see cref="T:System.Xml.XmlNameTable" /> 与此实现关联。
            </summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>
              当在派生类中被重写时，获取当前节点的类型。
            </summary>
      <returns>
              指定当前节点的类型的枚举值之一。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>
              当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
            </summary>
      <returns>
              与当前节点关联的命名空间前缀。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>
              当在派生类中被重写时，获取用于括住特性节点值的引号字符。
            </summary>
      <returns>
              用于括起属性节点的值的引号字符（" 或 '）。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>
              当在派生类中被重写时，从流中读取下一个节点。
            </summary>
      <returns>
              如果已成功读取下一节点，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  分析 XML 时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。
                   在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中”。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary>
              异步读取该流的下一个节点。
            </summary>
      <returns>
              如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>
              当在派生类中重写，将属性值分析为一个或多个 <see langword="Text" />, ，<see langword="EntityReference" />, ，或 <see langword="EndEntity" /> 节点。
            </summary>
      <returns>
              如果有可返回的节点，则为 <see langword="true" />。
            
              如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。
            
              如果是空属性（如 misc=""），则返回 <see langword="true" />，同时返回值为 <see langword="String.Empty" /> 的单个节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              将内容作为指定类型的对象读取。
            </summary>
      <param name="returnType">
                要返回的值的类型。
              
                注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" /> 参数现在可以 <see cref="T:System.DateTimeOffset" /> 类型。
              </param>
      <param name="namespaceResolver">
                一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。
                 例如，将 <see cref="T:System.Xml.XmlQualifiedName" /> 对象转换为 xs:string 时可以使用此对象。
              
                此值可为 <see langword="null" />。
              </param>
      <returns>
              已转换为请求类型的串联文本内容或属性值。
            </returns>
      <exception cref="T:System.FormatException">
                  内容不在的正确格式为目标类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是受支持的节点类型。
                   请参阅下的表以了解详细信息。
                </exception>
      <exception cref="T:System.OverflowException">
                  读取 <see langword="Decimal.MaxValue" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              将内容作为指定类型的对象异步读取。
            </summary>
      <param name="returnType">
                要返回的值的类型。
              </param>
      <param name="namespaceResolver">
                一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。
              </param>
      <returns>
              已转换为请求类型的串联文本内容或属性值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 Base64 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> 不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>
              异步读取内容并返回 Base64 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> 不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
              异步读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>
              作为将当前位置的文本内容读取 <see langword="Boolean" />。
            </summary>
      <returns>
              文本内容作为 <see cref="T:System.Boolean" /> 对象。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>
              作为将当前位置的文本内容读取 <see cref="T:System.DateTime" /> 对象。
            </summary>
      <returns>
              文本内容作为 <see cref="T:System.DateTime" /> 对象。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary>
              作为将当前位置的文本内容读取 <see cref="T:System.DateTimeOffset" /> 对象。
            </summary>
      <returns>
              文本内容作为 <see cref="T:System.DateTimeOffset" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>
              作为将当前位置的文本内容读取 <see cref="T:System.Decimal" /> 对象。
            </summary>
      <returns>
              作为将当前位置的文本内容 <see cref="T:System.Decimal" /> 对象。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>
              将当前位置的文本内容作为双精度浮点数读取。
            </summary>
      <returns>
              作为双精度浮点数的文本内容。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>
              将当前位置的文本内容作为单精度浮点数读取。
            </summary>
      <returns>
              作为单精度浮点数的当前位置的文本内容。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>
              将当前位置的文本内容作为 32 位有符号整数读取。
            </summary>
      <returns>
              作为 32 位有符号整数的文本内容。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>
              将当前位置的文本内容作为 64 位有符号整数读取。
            </summary>
      <returns>
              作为 64 位有符号整数的文本内容。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>
              作为将当前位置的文本内容读取 <see cref="T:System.Object" />。
            </summary>
      <returns>
              作为最适当的公共语言运行时 (CLR) 对象的文本内容。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary>
              异步读取作为当前位置的文本内容 <see cref="T:System.Object" />。
            </summary>
      <returns>
              作为最适当的公共语言运行时 (CLR) 对象的文本内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>
              作为将当前位置的文本内容读取 <see cref="T:System.String" /> 对象。
            </summary>
      <returns>
              文本内容作为 <see cref="T:System.String" /> 对象。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.FormatException">
                  字符串格式无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary>
              异步读取作为当前位置的文本内容 <see cref="T:System.String" /> 对象。
            </summary>
      <returns>
              文本内容作为 <see cref="T:System.String" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              将元素内容作为请求类型读取。
            </summary>
      <param name="returnType">
                要返回的值的类型。
              
                注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" /> 参数现在可以 <see cref="T:System.DateTimeOffset" /> 类型。
              </param>
      <param name="namespaceResolver">
                一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。
              </param>
      <returns>
              转换为请求类型的对象的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为请求的类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.OverflowException">
                  读取 <see langword="Decimal.MaxValue" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。
            </summary>
      <param name="returnType">
                要返回的值的类型。
              
                注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" /> 参数现在可以 <see cref="T:System.DateTimeOffset" /> 类型。
              </param>
      <param name="namespaceResolver">
                一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              转换为请求类型的对象的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为请求的类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.OverflowException">
                  读取 <see langword="Decimal.MaxValue" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              将元素内容作为请求类型异步读取。
            </summary>
      <param name="returnType">
                要返回的值的类型。
              </param>
      <param name="namespaceResolver">
                一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。
              </param>
      <returns>
              转换为请求类型的对象的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 <see langword="Base64" /> 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>
              异步读取元素并对 <see langword="Base64" /> 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。
                   在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中”。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。
                   在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 <see langword="BinHex" /> 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
              以异步方式读取元素并将解码 <see langword="BinHex" /> 内容。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Boolean" /> 对象。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              元素内容作为 <see cref="T:System.Boolean" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为请求的类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>
              读取当前元素并返回将内容作为 <see cref="T:System.Boolean" /> 对象。
            </summary>
      <returns>
              元素内容作为 <see cref="T:System.Boolean" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 <see cref="T:System.Boolean" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>
              读取当前元素并返回将内容作为 <see cref="T:System.DateTime" /> 对象。
            </summary>
      <returns>
              元素内容作为 <see cref="T:System.DateTime" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 <see cref="T:System.DateTime" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.DateTime" /> 对象。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              元素内容作为 <see cref="T:System.DateTime" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为请求的类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>
              读取当前元素并返回将内容作为 <see cref="T:System.Decimal" /> 对象。
            </summary>
      <returns>
              元素内容作为 <see cref="T:System.Decimal" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 <see cref="T:System.Decimal" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Decimal" /> 对象。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              元素内容作为 <see cref="T:System.Decimal" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 <see cref="T:System.Decimal" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>
              读取当前元素并将内容作为双精度浮点数返回。
            </summary>
      <returns>
              作为双精度浮点数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为双精度浮点数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              作为双精度浮点数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为请求的类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>
              读取当前元素并将内容作为单精度浮点数返回。
            </summary>
      <returns>
              作为单精度浮点数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为单精度浮点数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              作为单精度浮点数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为单精度浮点数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>
              读取当前元素并将内容作为 32 位有符号整数返回。
            </summary>
      <returns>
              作为 32 位有符号整数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 32 位有符号整数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              作为 32 位有符号整数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 32 位有符号整数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>
              读取当前元素并将内容作为 64 位有符号整数返回。
            </summary>
      <returns>
              作为 64 位有符号整数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 64 位有符号整数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              作为 64 位有符号整数的元素内容。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 64 位有符号整数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>
              读取当前元素并返回将内容作为 <see cref="T:System.Object" />。
            </summary>
      <returns>
              一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
              <see cref="P:System.Xml.XmlReader.ValueType" /> 属性确定适合的 CLR 类型。
               如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能为请求的类型转换的元素内容
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Object" />。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
              <see cref="P:System.Xml.XmlReader.ValueType" /> 属性确定适合的 CLR 类型。
               如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  不能将元素内容转换为请求的类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary>
              异步读取当前元素并返回将内容作为 <see cref="T:System.Object" />。
            </summary>
      <returns>
              一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
              <see cref="P:System.Xml.XmlReader.ValueType" /> 属性确定适合的 CLR 类型。
               如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>
              检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.String" /> 对象。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              元素内容作为 <see cref="T:System.String" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 <see cref="T:System.String" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>
              读取当前元素并返回将内容作为 <see cref="T:System.String" /> 对象。
            </summary>
      <returns>
              元素内容作为 <see cref="T:System.String" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  当前元素包含子元素。
                
                  - 或 -
                
                  无法将元素内容转换为 <see cref="T:System.String" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  默认情况下，调用与 <see langword="null" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary>
              异步读取当前元素并返回将内容作为 <see cref="T:System.String" /> 对象。
            </summary>
      <returns>
              元素内容作为 <see cref="T:System.String" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>
              读取纯文本元素。
               但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> 方法相反，因为它提供了更直接的方法来处理此操作。
            </summary>
      <returns>
              所读取的元素中包含的文本。
               如果元素为空，则返回一个空字符串。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  不是开始标记; 下一个内容节点。或找到的元素不包含简单的文本值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>
              检查 <see cref="P:System.Xml.XmlReader.Name" /> 属性找到的元素与给定的字符串匹配在读取纯文本元素之前。
               但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> 方法相反，因为它提供了更直接的方法来处理此操作。
            </summary>
      <param name="name">
                要检查的名称。
              </param>
      <returns>
              所读取的元素中包含的文本。
               如果元素为空，则返回一个空字符串。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="Name" /> 与给定的参数; 不匹配，或者如果找到该元素不包含简单的文本值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>
              检查 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 找到与给定的字符串匹配在读取纯文本元素之前的元素的属性。
               但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" /> 方法相反，因为它提供了更直接的方法来处理此操作。
            </summary>
      <param name="localname">
                要检查的本地名称。
              </param>
      <param name="ns">
                要检查的命名空间 URI。
              </param>
      <returns>
              所读取的元素中包含的文本。
               如果元素为空，则返回一个空字符串。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="LocalName" /> 或 <see langword="NamespaceURI" /> 不匹配给定的参数; 或者如果找到该元素不包含简单的文本值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>
              检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
            </summary>
      <exception cref="T:System.Xml.XmlException">
                  当前节点不是一个结束标记或输入流中遇到不正确的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>
              当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。
            </summary>
      <returns>
              当前节点中的所有 XML 内容（包括标记）。
               如果当前节点没有任何子级，则返回空字符串。
            
              如果当前节点既非元素，也非属性，则返回空字符串。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  XML 不正确，或者分析 XML 时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary>
              异步读取所有内容，包括作为字符串的标记。
            </summary>
      <returns>
              当前节点中的所有 XML 内容（包括标记）。
               如果当前节点没有任何子级，则返回空字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>
              当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。
            </summary>
      <returns>
              如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  XML 不正确，或者分析 XML 时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary>
              异步读取包含该节点和所有它的子级的内容（包括标记）。
            </summary>
      <returns>
              如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>
              检查当前节点是否为元素并将读取器推进到下一个节点。
            </summary>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>
              检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.Name" /> 并将读取器推进到下一个节点。
            </summary>
      <param name="name">
                元素的限定名。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                
                  - 或 - 
                
                  <see cref="P:System.Xml.XmlReader.Name" /> 不匹配的元素的给定 <paramref name="name" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>
              检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 并将读取器推进到下一个节点。
            </summary>
      <param name="localname">
                元素的本地名称。
              </param>
      <param name="ns">
                元素的命名空间 URI。
              </param>
      <exception cref="T:System.Xml.XmlException">
                  在输入流中遇到不正确的 XML。
                
                  - 或 -
                
                  <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性找到的元素与给定的参数不匹配。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>
              当在派生类中被重写时，获取读取器的状态。
            </summary>
      <returns>
              指定读取器的状态的枚举值之一。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>
              当在派生类中被重写时，将元素或文本节点的内容当做字符串读取。
               但是，我们建议你使用 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> 方法相反，因为它提供了更直接的方法来处理此操作。
            </summary>
      <returns>
              元素的内容或空字符串。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  分析 XML 时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>
              返回一个新 <see langword="XmlReader" /> 能用于读取当前节点及其所有子代的实例。
            </summary>
      <returns>
              新的 XML 读取器实例设置为 <see cref="F:System.Xml.ReadState.Initial" />。
               调用 <see cref="M:System.Xml.XmlReader.Read" /> 方法将新的读取器定位在调用之前的当前节点上 <see cref="M:System.Xml.XmlReader.ReadSubtree" /> 方法。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  调用此方法时，XML 读取器未定位在元素上。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>
              前移 <see cref="T:System.Xml.XmlReader" /> 到下一个具有指定的本地名称和命名空间 URI 的子代元素。
            </summary>
      <param name="localName">
                要移动到的元素的本地名称。
              </param>
      <param name="namespaceURI">
                要移动到的元素的命名空间 URI。
              </param>
      <returns>
        <see langword="true" /> 如果找到匹配的子代元素，则否则为 <see langword="false" />。
               如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" /> 定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" /> 是 <see langword="XmlNodeType.EndElement" />) 的元素。
            
              如果 <see cref="T:System.Xml.XmlReader" /> 未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> 调用，此方法返回 <see langword="false" /> 和位置的 <see cref="T:System.Xml.XmlReader" /> 未发生更改时。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  这两个参数的值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>
              前移 <see cref="T:System.Xml.XmlReader" /> 到下一个具有指定限定名的子代元素。
            </summary>
      <param name="name">
                要移动到的元素的限定名。
              </param>
      <returns>
        <see langword="true" /> 如果找到匹配的子代元素，则否则为 <see langword="false" />。
               如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" /> 定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" /> 是 <see langword="XmlNodeType.EndElement" />) 的元素。
            
              如果 <see cref="T:System.Xml.XmlReader" /> 未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> 调用，此方法返回 <see langword="false" /> 和位置的 <see cref="T:System.Xml.XmlReader" /> 未发生更改时。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentException">
                  该参数为空字符串。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>
              一直读取，直到找到具有指定限定名的元素。
            </summary>
      <param name="name">
                元素的限定名。
              </param>
      <returns>
        <see langword="true" /> 如果找到匹配的元素;否则为 <see langword="false" /> 和 <see cref="T:System.Xml.XmlReader" /> 处于的文件结束状态。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentException">
                  该参数为空字符串。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>
              一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
        <see langword="true" /> 如果找到匹配的元素;否则为 <see langword="false" /> 和 <see cref="T:System.Xml.XmlReader" /> 处于的文件结束状态。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  这两个参数的值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>
              前移 <see langword="XmlReader" /> 到下一个具有指定限定名的同级元素。
            </summary>
      <param name="name">
                要移动到的同级元素的限定名。
              </param>
      <returns>
        <see langword="true" /> 如果找到匹配的同级元素，则否则为 <see langword="false" />。
               如果未找到匹配的同级元素， <see langword="XmlReader" /> 定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" /> 是 <see langword="XmlNodeType.EndElement" />) 的父元素。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.ArgumentException">
                  该参数为空字符串。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>
              将 <see langword="XmlReader" /> 推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。
            </summary>
      <param name="localName">
                要移动到的同级元素的本地名称。
              </param>
      <param name="namespaceURI">
                你希望移动到的同级元素的命名空间 URI。
              </param>
      <returns>
              如果找到匹配的同级元素，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果没有找到匹配的同级元素，<see langword="XmlReader" /> 会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" /> 为 <see langword="XmlNodeType.EndElement" />）上。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。
                   在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中”。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  两个参数值均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>
              读取嵌入在 XML 文档中的大量文本流。
            </summary>
      <param name="buffer">
                作为文本内容写入到的缓冲区的字符数组。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" /> 可以开始将结果复制。
              </param>
      <param name="count">
                要复制到缓冲区中的最大字符数。
                 此方法返回复制的实际字符数。
              </param>
      <returns>
              读取到缓冲区中的字符数。
               如果不再有文本内容，则返回值零。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不具有值 (<see cref="P:System.Xml.XmlReader.HasValue" /> 是 <see langword="false" />)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  到缓冲区中的索引或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  XML 数据格式不正确。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              异步读取嵌入在 XML 文档中的大量文本流。
            </summary>
      <param name="buffer">
                作为文本内容写入到的缓冲区的字符数组。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" /> 可以开始将结果复制。
              </param>
      <param name="count">
                要复制到缓冲区中的最大字符数。
                 此方法返回复制的实际字符数。
              </param>
      <returns>
              读取到缓冲区中的字符数。
               如果不再有文本内容，则返回值零。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>
              当在派生类中重写时解析的实体引用 <see langword="EntityReference" /> 节点。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  读取器未定位在 <see langword="EntityReference" /> 节点; 此读取器的实现无法解析实体 (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> 返回 <see langword="false" />)。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>
              获取作为架构验证结果分配给当前节点的架构信息。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象，它包含当前节点的架构信息。
               架构信息可以对元素、 属性或具有非空文本节点上设置 <see cref="P:System.Xml.XmlReader.ValueType" /> （类型化值）。
            
              如果当前节点不属于上述节点类型，或者如果 <see langword="XmlReader" /> 实例不会报告架构信息，则此属性返回 <see langword="null" />。
            
              如果是通过调用此属性 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 对象，则此属性始终返回 <see langword="null" />。
               这些 <see langword="XmlReader" /> 实现不公开架构信息通过 <see langword="SchemaInfo" /> 属性。
            
                如果必须为某个元素获取架构验证后信息集 (PSVI)，请在此元素的结束标记处（而不是在开始标记处）放置读取器。
                 获取 PSVI <see langword="SchemaInfo" /> 读取器的属性。
                 通过创建的验证读取器 <see cref="Overload:System.Xml.XmlReader.Create" /> 与 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 属性设置为 <see cref="F:System.Xml.ValidationType.Schema" /> 具有完整的 PSVI 的元素仅在读取器定位在元素的结束标记上时。
              </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>
              获取用于创建此 <see cref="T:System.Xml.XmlReader" /> 实例的 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlReaderSettings" /> 对象，用于创建此读取器实例。
               如果此读取器不使用创建 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法，则此属性返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>
              跳过当前节点的子级。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary>
              异步跳过当前节点的子级。
            </summary>
      <returns>
              当前节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>
              当在派生类中被重写时，获取当前节点的文本值。
            </summary>
      <returns>
              返回的值取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />。
               下表列出具有要返回的值的节点类型。
               所有其他节点类型返回 <see langword="String.Empty" />。
            
                      节点类型 
                    
                      值 
                    
                      <see langword="Attribute" />
                    
                      属性的值。
                    
                      <see langword="CDATA" />
                    
                      CDATA 节的内容。
                    
                      <see langword="Comment" />
                    
                      注释的内容。
                    
                      <see langword="DocumentType" />
                    
                      内部子集。
                    
                      <see langword="ProcessingInstruction" />
                    
                      全部内容（不包括指令目标）。
                    
                      <see langword="SignificantWhitespace" />
                    
                      混合内容模型中标记之间的空白区域。
                    
                      <see langword="Text" />
                    
                      文本节点的内容。
                    
                      <see langword="Whitespace" />
                    
                      标记之间的空白。
                    
                      <see langword="XmlDeclaration" />
                    
                      声明的内容。
                    </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>
              获取当前节点的公共语言运行时 (CLR) 类型。
            </summary>
      <returns>
              与节点的类型化值对应的 CLR 类型。
               默认值为 <see langword="System.String" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>
              当在派生类中重写，获取当前 <see langword="xml:lang" /> 作用域。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 范围。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>
              当在派生类中重写，获取当前 <see langword="xml:space" /> 作用域。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。
               如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>
              指定的功能以支持上的一组 <see cref="T:System.Xml.XmlReader" /> 创建的对象 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法。
            </summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary>
              获取或设置是否异步 <see cref="T:System.Xml.XmlReader" /> 方法可对特定 <see cref="T:System.Xml.XmlReader" /> 实例。
            </summary>
      <returns>
        <see langword="true" /> 如果可以使用异步方法，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>
              获取或设置一个值，该值指示是否进行字符检查。
            </summary>
      <returns>
        <see langword="true" /> 若要进行字符检查;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            
                如果 <see cref="T:System.Xml.XmlReader" /> 是处理文本数据时，将始终检查 XML 名称和文本内容是否有效，而不考虑属性设置。
                 设置 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> 到 <see langword="false" /> 关闭字符检查的字符实体引用。
              </returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>
              创建 <see cref="T:System.Xml.XmlReaderSettings" /> 实例的副本。
            </summary>
      <returns>
              克隆 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>
              获取或设置一个值，该值指示是否在基础流或 <see cref="T:System.IO.TextReader" /> 时读取器关闭时被关闭。
            </summary>
      <returns>
        <see langword="true" /> 若要关闭基础流或 <see cref="T:System.IO.TextReader" /> 时读取器已关闭，否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>
              获取或设置的一致性级别的 <see cref="T:System.Xml.XmlReader" /> 将遵循。
            </summary>
      <returns>
              指定一致性级别（XML 读取器将强制该级别）的枚举值之一。
               默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>
              获取或设置确定 DTD 的处理的值。
            </summary>
      <returns>
              确定 DTD 的处理的枚举值之一。
               默认值为 <see cref="F:System.Xml.DtdProcessing.Prohibit" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>
              获取或设置一个值，该值指示是否忽略注释。
            </summary>
      <returns>
        <see langword="true" /> 若要忽略注释;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>
              获取或设置一个值，该值指示是否忽略处理指令。
            </summary>
      <returns>
        <see langword="true" /> 若要忽略处理指令，则否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>
              获取或设置一个值，该值指示是否忽略无关紧要的空白区域。
            </summary>
      <returns>
        <see langword="true" /> 若要忽略空白;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>
              获取或设置行号偏移量的 <see cref="T:System.Xml.XmlReader" /> 对象。
            </summary>
      <returns>
              行号偏移量。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>
              获取或设置的行位置偏移量 <see cref="T:System.Xml.XmlReader" /> 对象。
            </summary>
      <returns>
              行位置偏移量。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>
              获取或设置一个值，该值指示文档中允许扩展实体产生的最大字符数。
            </summary>
      <returns>
              扩展实体中允许的最大字符数。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>
              获取或设置一个值，该值指明 XML 文档中所允许的最大字符数。
               零 (0) 值表示对 XML 文档的大小没有限制。
               非零值指定最大大小（以字符数计）。
            </summary>
      <returns>
              XML 文档中所允许的最大字符数。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>
              获取或设置 <see cref="T:System.Xml.XmlNameTable" /> 用于原子化的字符串比较。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" /> 用于存储所有使用的所有原子化的字符串 <see cref="T:System.Xml.XmlReader" /> 创建使用此实例 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。
            
              默认值为 <see langword="null" />。
               创建 <see cref="T:System.Xml.XmlReader" /> 实例将使用新的空 <see cref="T:System.Xml.NameTable" /> 如果此值是 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>
              获取或设置一个值，该值指示是否禁用文档类型定义 (DTD) 处理。
               此属性已过时。
               请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。
            </summary>
      <returns>
        <see langword="true" /> 若要禁用 DTD 处理。否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>
              将设置类的成员重置为各自的默认值。
            </summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 在执行架构验证时使用。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 在执行架构验证时使用。
               默认值为空 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。
            </returns>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>
              在读取器遇到验证错误时发生。
            </summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>
              获取或设置一个指示架构验证设置的值。
               此设置适用于<see cref="T:System.Xml.XmlReader" />验证架构的对象 (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" />属性设置为<see langword="ValidationType.Schema" />)。
            </summary>
      <returns>
              指定验证选项的枚举值的按位组合。
              <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" />和<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" />默认启用。
              <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" /><see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />，和<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" />默认处于禁用状态。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>
              获取或设置一个值，该值指示是否<see cref="T:System.Xml.XmlReader" />将执行验证或读取时键入分配。
            </summary>
      <returns>
              之一<see cref="T:System.Xml.ValidationType" />值，该值指示是否将执行验证或读取时键入分配 XmlReader。
               默认值为 <see langword="ValidationType.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>
              集 <see cref="T:System.Xml.XmlResolver" /> 用来访问外部文档。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> 用来访问外部文档。
               如果设置为 <see langword="null" />, 、 <see cref="T:System.Xml.XmlException" /> 时，将引发 <see cref="T:System.Xml.XmlReader" /> 尝试访问外部资源。
               默认值是一种新 <see cref="T:System.Xml.XmlUrlResolver" /> 没有凭据。
                从.NET Framework 4.5.2 开始，此设置具有默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>
              解析由统一资源标识符 (URI) 命名的外部 XML 资源。
            </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlResolver" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>
              当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
            </summary>
      <returns>
              用于对 Web 请求进行身份验证的凭据。
               如果未设置该属性，则该值默认为 <see langword="null" />；即 <see langword="XmlResolver" /> 没有用户凭据。
            </returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
              当在派生类中被重写时，将 URI 映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当前未使用。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                 当前版本只返回 System.IO.Stream 对象。
              </param>
      <returns>
              流对象；如果指定了流以外的类型，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 不是 <see langword="Stream" /> 类型。
                </exception>
      <exception cref="T:System.UriFormatException">
                  指定的 URI 不是一个绝对 URI。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Exception">
                  没有运行时错误 （例如，中断的服务器连接）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 异步映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当前未使用。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。
              </param>
      <returns>
              流对象；如果指定了流以外的类型，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>
              当在派生类中被重写时，从基 URI 和相对 URI 解析绝对 URI。
            </summary>
      <param name="baseUri">
                用于解析相对 URI 的基 URI。
              </param>
      <param name="relativeUri">
                要解析的 URI。
                 URI 可以是绝对的或相对的。
                 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。
                 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。
              </param>
      <returns>
              绝对 URI 或 <see langword="null" /> 如果能解析相对 URI。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>
              使之外的返回类型的解析程序 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="absoluteUri">
                URI。
              </param>
      <param name="type">
                要返回的类型。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="type" /> 受支持; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>
              通过包装 <see cref="T:System.Xml.XmlResolver" /> 对象和限制基础 <see cref="T:System.Xml.XmlResolver" /> 有权访问的资源，帮助保护 <see cref="T:System.Xml.XmlResolver" /> 的另一个实现。
            </summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>
              使用提供的 <see cref="T:System.Xml.XmlResolver" /> 和 URL 初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 类的一个新实例。
            </summary>
      <param name="resolver">
                由 <see cref="T:System.Xml.XmlSecureResolver" /> 包装的 XML 解析程序。
              </param>
      <param name="securityUrl">
                用于创建将应用于基础 <see cref="T:System.Xml.XmlResolver" /> 的<see cref="T:System.Security.PermissionSet" /> 的 URL。
                <see cref="T:System.Xml.XmlSecureResolver" /> 在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 之前，先对创建的 <see cref="T:System.Security.PermissionSet" /> 调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />。
              </param>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>
              设置用于对 Web 请求进行身份验证的凭据。
            </summary>
      <returns>
              用于对 Web 请求进行身份验证的凭据。
              <see cref="T:System.Xml.XmlSecureResolver" /> 在基础 <see cref="T:System.Xml.XmlResolver" /> 上设置给定的凭据。
               如果未设置该属性，则该值默认为 <see langword="null" />；即 <see cref="T:System.Xml.XmlSecureResolver" /> 没有用户凭据。
            </returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 映射到包含实际资源的对象。
               此方法在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用<see langword="GetEntity" /> 之前，先调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />，以临时设置构造函数中创建的 <see cref="T:System.Security.PermissionSet" />，从而打开该资源。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当前未使用。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。
              </param>
      <returns>
              通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="GetEntity" /> 而返回的流。
               如果指定 <see cref="T:System.IO.Stream" /> 以外的类型，方法将返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see cref="T:System.IO.Stream" /> 类型。
                </exception>
      <exception cref="T:System.UriFormatException">
                  指定的 URI 不是一个绝对 URI。
                </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Exception">
                  没有运行时错误 （例如，中断的服务器连接）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 异步映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当前未使用。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。
              </param>
      <returns>
              通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="GetEntity" /> 而返回的流。
               如果指定 <see cref="T:System.IO.Stream" /> 以外的类型，方法将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>
              通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="ResolveUri" />，从基 URI 和相对 URI 中解析绝对 URI。
            </summary>
      <param name="baseUri">
                用于解析相对 URI 的基 URI。
              </param>
      <param name="relativeUri">
                要解析的 URI。
                 URI 可以是绝对的或相对的。
                 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。
                 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。
              </param>
      <returns>
              绝对 URI；如果不能解析相对 URI，则为 <see langword="null" />（通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="ResolveUri" /> 来返回）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>
              表示在混合内容节点中标记之间的空白或 xml:space= 'preserve' 范围内的空白。
               这也称为有效空白。
            </summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 类的新实例。
            </summary>
      <param name="strData">
                节点中的空白字符。
              </param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 对于重要的空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              有关 <see langword="XmlSignificantWhitespace" /> 节点，此属性返回 <see langword="#significant-whitespace" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              有关 <see langword="XmlSignificantWhitespace" /> 节点，此属性返回 <see langword="#significant-whitespace" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              有关 <see langword="XmlSignificantWhitespace" /> 节点，该值是 XmlNodeType.SignificantWhitespace。
            </returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>
              获取当前节点的父节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 当前节点的父节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary>
              获取紧接在该节点之前的文本节点。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.XmlNode" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              在节点中找到空白字符。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置 <see langword="Value" /> 到无效空白字符。
                </exception>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>
              指定当前 <see langword="xml:space" /> 作用域。
            </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <see langword="xml:space" /> 范围等于 <see langword="default" />。
            </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>
              否 <see langword="xml:space" /> 作用域。
            </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <see langword="xml:space" /> 范围等于 <see langword="preserve" />。
            </summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>
              表示元素或属性的文本内容。
            </summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlText" /> 类的新实例。
            </summary>
      <param name="strData">
                节点; 的内容请参阅 <see cref="P:System.Xml.XmlText.Value" /> 属性。
              </param>
      <param name="doc">
                父 XML 文档。
              </param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              对于文本节点，此属性返回 <see langword="#text" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              对于文本节点，此属性返回 <see langword="#text" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              对于文本节点，该值是 XmlNodeType.Text。
            </returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary>
              获取该节点的父级（针对可以拥有父级的节点）。
            </summary>
      <returns>
              作为当前节点父级的 <see langword="XmlNode" />。
               如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。
               对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。
               下表描述了 <see langword="ParentNode" /> 属性可能的返回值。
            </returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary>
              获取紧接在该节点之前的文本节点。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.XmlNode" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>
              在指定的偏移点将该节点拆分为两个节点，并使树中的这两个节点成为同级。
            </summary>
      <param name="offset">
                拆分节点的偏移点。
              </param>
      <returns>
              新的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              文本节点的内容。
            </returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
              <see langword="XmlText" /> 节点没有子级，因此此方法不起作用。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see langword="XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>
              表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。
            
              从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlReader" /> 类。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>
              初始化 <see langword="XmlTextReader" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
              使用指定的字符串、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="xmlFragment">
                包含要分析的 XML 片段的字符串。
              </param>
      <param name="fragType">
                XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。
                 这也确定了片段字符串可以包含的内容。
                 （请参见下表。）
              </param>
      <param name="context">
                分析 <paramref name="xmlFragment" /> 所用的 <see cref="T:System.Xml.XmlParserContext" />。
                 这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码方式、命名空间范围、当前 xml:lang 和 xml:space 范围。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是 <see langword="Element" />, ，<see langword="Attribute" />, ，或 <see langword="Document" /><see langword="XmlNodeType" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>
              使用指定的 URL、<see cref="T:System.IO.TextReader" /> 和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="url">
                用于解析外部资源的 URL。
                <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。
                 如果 <paramref name="url" /> 为 <see langword="null" />，则 <see langword="BaseURI" /> 设置为 <see langword="String.Empty" />。
              </param>
      <param name="input">
                包含要读取的 XML 数据的 <see langword="TextReader" />。
              </param>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nt" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>
              使用指定的 URL、流和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="url">
                用于解析外部资源的 URL。
                <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。
                 如果 <paramref name="url" /> 为 <see langword="null" />，则 <see langword="BaseURI" /> 设置为 <see langword="String.Empty" />。
              </param>
      <param name="input">
                包含要读取的 XML 数据的流。
              </param>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 或 <paramref name="nt" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
              用指定的流、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="xmlFragment">
                包含要分析的 XML 片段的流。
              </param>
      <param name="fragType">
                XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。
                 这也确定了片段可以包含的内容。
                 （请参见下表。）
              </param>
      <param name="context">
                分析 <paramref name="xmlFragment" /> 所用的 <see cref="T:System.Xml.XmlParserContext" />。
                 这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码方式、命名空间范围、当前 xml:lang 和 xml:space 范围。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是元素、 特性或文档 <see langword="XmlNodeType" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>
              使用指定的文件和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="url">
                包含要读取的 XML 数据的文件的 URL。
              </param>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到指定的文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  找不到的文件名或目录的一部分。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> 是一个空字符串。
                </exception>
      <exception cref="T:System.Net.WebException">
                  无法解析远程文件名。
                
                  - 或 -
                
                  处理请求时出错。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 不是有效的 URI。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>
              使用指定的 URL 和流初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="url">
                用于解析外部资源的 URL。
                <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。
              </param>
      <param name="input">
                包含要读取的 XML 数据的流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>
              使用指定的 URL 和 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="url">
                用于解析外部资源的 URL。
                <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。
              </param>
      <param name="input">
                包含要读取的 XML 数据的 <see langword="TextReader" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>
              用指定的流和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="input">
                包含要读取的 XML 数据的流。
              </param>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 或 <paramref name="nt" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
            </summary>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>
              用指定的文件初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="url">
                包含 XML 数据的文件的 URL。
                <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。
              </param>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到指定的文件。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  找不到的文件名或目录的一部分。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> 是一个空字符串。
                </exception>
      <exception cref="T:System.Net.WebException">
                  无法解析远程文件名。
                
                  - 或 -
                
                  处理请求时出错。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 不是有效的 URI。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。
            </summary>
      <param name="input">
                包含要读取的 XML 数据的 <see langword="TextReader" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>
              使用指定的流初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。
            </summary>
      <param name="input">
                包含要读取的 XML 数据的流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
            </summary>
      <param name="input">
                包含要读取的 XML 数据的 <see langword="TextReader" />。
              </param>
      <param name="nt">
                要使用的 <see langword="XmlNameTable" />。
              </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>
              获取当前节点上的属性数目。
            </summary>
      <returns>
              当前节点上的属性数目。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>
              获取当前节点的基 URI。
            </summary>
      <returns>
              当前节点的基 URI。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" /> 是否实现二进制内容读取方法。
            </summary>
      <returns>
              如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" /> 是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XmlTextReader" /> 实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>
              获取一个值，该值指示此读取器是否可以分析和解析实体。
            </summary>
      <returns>
              如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see langword="XmlTextReader" /> 类始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>
              将 <see cref="P:System.Xml.XmlReader.ReadState" /> 改为 <see langword="Closed" />。
            </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>
              获取 XML 文档中当前节点的深度。
            </summary>
      <returns>
              XML 文档中当前节点的深度。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>
              获取或设置 <see cref="T:System.Xml.DtdProcessing" /> 枚举。
            </summary>
      <returns>
        <see cref="T:System.Xml.DtdProcessing" /> 枚举。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>
              获取文档的编码。
            </summary>
      <returns>
              编码值。
               如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>
              获取或设置一个值，该值指定读取器处理实体的方式。
            </summary>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 值之一。
               如果未指定 <see langword="EntityHandling" />，它将默认为 <see langword="EntityHandling.ExpandCharEntities" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>
              获取一个值，该值指示读取器是否定位在流结尾。
            </summary>
      <returns>
              如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>
              获取具有指定名称的属性的值。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>
              获取具有指定本地名称和命名空间 URI 的属性的值。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
               此方法不移动读取器。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>
              获取具有指定索引的属性的值。
            </summary>
      <param name="i">
                属性的索引。
                 索引是从零开始的。
                 （第一个属性的索引为 0。）
              </param>
      <returns>
              指定的属性的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              获取一个集合，该集合包含当前在范围内的所有命名空间。
            </summary>
      <param name="scope">
                一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。
              </param>
      <returns>
              一个包含当前在范围内的所有命名空间的 <see cref="T:System.Collections.IDictionary" /> 对象。
               如果读取器未定位在某元素上，则返回空字典（无命名空间）。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>
              获取已缓冲的 XML 的剩余部分。
            </summary>
      <returns>
              包含已缓冲的 XML 的剩余部分的 <see cref="T:System.IO.TextReader" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>
              获取一个值，该值指示该类是否可返回行信息。
            </summary>
      <returns>
              如果该类可以返回行信息，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>
              获取一个值，该值指示当前节点是否可以具有 <see langword="String.Empty" /> 以外的 <see cref="P:System.Xml.XmlTextReader.Value" />。
            </summary>
      <returns>
              如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>
              获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的属性。
            </summary>
      <returns>
              此属性始终返回 <see langword="false" />。
               （<see cref="T:System.Xml.XmlTextReader" /> 不展开默认属性。）
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>
              获取一个值，该值指示当前节点是否为空元素（例如，&lt;MyElement/&gt;）。
            </summary>
      <returns>
              如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlTextReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" />），则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>
              获取当前行号。
            </summary>
      <returns>
              当前行号。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>
              获取当前行位置。
            </summary>
      <returns>
              当前行位置。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>
              获取当前节点的本地名称。
            </summary>
      <returns>
              移除了前缀的当前节点的名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" /> 为 <see langword="book" />。
            
              对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 <see langword="String.Empty" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>
              解析当前元素的范围内的命名空间前缀。
            </summary>
      <param name="prefix">
                要解析其命名空间 URI 的前缀。
                 若要匹配默认命名空间，请传递一个空字符串。
                 不必原子化该字符串。
              </param>
      <returns>
              前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> 属性设置为 <see langword="true" /> 和 <paramref name="prefix" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>
              移动到具有指定索引的属性。
            </summary>
      <param name="i">
                属性的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>
              移动到具有指定名称的属性。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>
              移动到具有指定本地名称和命名空间 URI 的属性。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>
              移动到包含当前属性节点的元素。
            </summary>
      <returns>
              如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>
              移动到第一个属性。
            </summary>
      <returns>
              如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>
              移动到下一个属性。
            </summary>
      <returns>
              如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>
              获取当前节点的限定名称。
            </summary>
      <returns>
              当前节点的限定名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="Name" /> 为 <see langword="bk:book" />。
            
              返回的名称取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。
               下列节点类型返回所列的值。
               所有其他节点类型返回空字符串。
            
                      节点类型 
                    
                      名称 
                    
                      <see langword="Attribute" />
                    
                      属性名。
                    
                      <see langword="DocumentType" />
                    
                      文档类型名称。
                    
                      <see langword="Element" />
                    
                      标记名称。
                    
                      <see langword="EntityReference" />
                    
                      引用的实体的名称。
                    
                      <see langword="ProcessingInstruction" />
                    
                      处理指令的目标。
                    
                      <see langword="XmlDeclaration" />
                    
                      文字字符串 <see langword="xml" />。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>
              获取或设置一个值，该值指示是否进行命名空间支持。
            </summary>
      <returns>
              要进行命名空间支持，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  将此属性设置读取的操作发生后 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 不是 <see langword="ReadState.Initial" />)。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>
              获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。
            </summary>
      <returns>
              当前节点的命名空间 URI；否则为空字符串。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>
              获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>
              获取或设置一个值，该值指示是否规范化空白区域和属性值。
            </summary>
      <returns>
              如果要进行规范化，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  将此属性设置在读取器关闭时 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 是 <see langword="ReadState.Closed" />)。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>
              获取与当前节点关联的命名空间前缀。
            </summary>
      <returns>
              与当前节点关联的命名空间前缀。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>
              获取或设置一个值，该值指示是否允许 DTD 处理。
               此属性已过时。
               请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。
            </summary>
      <returns>
              如果不允许 DTD 处理，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>
              获取用于括起属性节点的值的引号字符。
            </summary>
      <returns>
              用于括起属性节点的值的引号字符（" 或 '）。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>
              从流中读取下一个节点。
            </summary>
      <returns>
              如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  分析 XML 时出错。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>
              将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。
            </summary>
      <returns>
              如果有可返回的节点，则为 <see langword="true" />。
            
              如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。
            
              如果是空属性（如 misc=""），则返回 <see langword="true" />，同时返回值为 <see langword="String.Empty" /> 的单个节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              对 Base64 进行解码并返回解码的二进制字节。
            </summary>
      <param name="array">
                作为文本内容写入到的缓冲区的字符数组。
              </param>
      <param name="offset">
                数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。
              </param>
      <param name="len">
                要写入缓冲区的字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  Base64 序列无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 的值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0，或 <paramref name="len" /> &lt; 0，或 <paramref name="len" /> &gt; <paramref name="array" />。长度- <paramref name="offset" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              对 <see langword="BinHex" /> 进行解码并返回解码后的二进制字节。
            </summary>
      <param name="array">
                作为解码的二进制字节写入到的缓冲区的字节数组。
              </param>
      <param name="offset">
                数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。
              </param>
      <param name="len">
                要写入缓冲区的字节数。
              </param>
      <returns>
              写入你的缓冲区的字节数。
            </returns>
      <exception cref="T:System.Xml.XmlException">
        <see langword="BinHex" /> 序列无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 的值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0，或 <paramref name="len" /> &lt; 0，或 <paramref name="len" /> &gt; <paramref name="array" />。长度- <paramref name="offset" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>
              将元素的文本内容读入字符缓冲区。
               通过连续调用此方法，可以读取大的嵌入文本的流。
            </summary>
      <param name="buffer">
                作为文本内容写入到的缓冲区的字符数组。
              </param>
      <param name="index">
        <paramref name="buffer" /> 中的位置，此方法可以从该位置开始写入文本内容。
              </param>
      <param name="count">
                要写入 <paramref name="buffer" /> 的字符数。
              </param>
      <returns>
              读取的字符数。
               如果读取器未定位在元素上，或如果当前上下文中没有要返回的其他文本内容，则这可以是 <see langword="0" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中指定的空间（缓冲区大小 - <paramref name="index" />）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />
        <see langword="&lt; 0" /> 或 <paramref name="count" /><see langword="&lt; 0" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 <see langword="Base64" /> 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  不支持在当前节点中。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 实现不支持此方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 Base64 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 <see langword="BinHex" /> 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>
              获取读取器的状态。
            </summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>
              将元素或文本节点的内容读取为一个字符串。
            </summary>
      <returns>
              该元素或文本节点的内容。
               如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。
            
              <see langword="Note:" />文本节点可以是元素或属性文本节点。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  分析 XML 时出错。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尝试了无效的操作。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>
              将读取器的状态重置为 ReadState.Initial。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  调用 <see langword="ResetState" /> 如果读取器使用构造 <see cref="T:System.Xml.XmlParserContext" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  一个流中的文档并共享相同的编码。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>
              解析 <see langword="EntityReference" /> 节点的实体引用。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>
              跳过当前节点的子级。
            </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>
              获取当前节点的文本值。
            </summary>
      <returns>
              返回的值取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。
               下表列出具有要返回的值的节点类型。
               所有其他节点类型返回 <see langword="String.Empty" />。
            
                      节点类型 
                    
                      值 
                    
                      <see langword="Attribute" />
                    
                      属性的值。
                    
                      <see langword="CDATA" />
                    
                      CDATA 节的内容。
                    
                      <see langword="Comment" />
                    
                      注释的内容。
                    
                      <see langword="DocumentType" />
                    
                      内部子集。
                    
                      <see langword="ProcessingInstruction" />
                    
                      全部内容（不包括指令目标）。
                    
                      <see langword="SignificantWhitespace" />
                    
                      中的空白区域 <see langword="xml:space" />= 'preserve' 范围。
                    
                      <see langword="Text" />
                    
                      文本节点的内容。
                    
                      <see langword="Whitespace" />
                    
                      标记之间的空白。
                    
                      <see langword="XmlDeclaration" />
                    
                      声明的内容。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>
              获取或设置一个值，该值指定如何处理空白区域。
            </summary>
      <returns>
        <see cref="T:System.Xml.WhitespaceHandling" /> 值之一。
               默认值为 <see langword="WhitespaceHandling.All" />（返回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点）。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  将此属性设置在读取器关闭时 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 是 <see langword="ReadState.Closed" />)。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>
              获取当前 <see langword="xml:lang" /> 范围。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 范围。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>
              设置用于解析 DTD 引用的 <see cref="T:System.Xml.XmlResolver" />。
            </summary>
      <returns>
              要使用的 <see langword="XmlResolver" />。
               如果设置为 <see langword="null" />，则不解析外部资源。
            
              在 .NET Framework 的 1.1 版中，调用方必须完全受到信任，才能指定 <see langword="XmlResolver" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>
              获取当前 <see langword="xml:space" /> 范围。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。
               如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。
            </summary>
      <param name="scope">
                一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。
              </param>
      <returns>
              一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。
            </summary>
      <param name="prefix">
                要查找其命名空间 URI 的前缀。
              </param>
      <returns>
              映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。
            </summary>
      <param name="namespaceName">
                要查找其前缀的命名空间 URI。
              </param>
      <returns>
              映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>
              指定的输入或输出检查的量 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Xml.XmlWriter" /> 对象执行。
            </summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 对象会自动检测是否文档级别或片段级别检查应执行，并执行相应的检查。
               如果正在包装另一个 <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 对象，外层对象不进行任何附加一致性检查。
               一致性检查只针对基础对象。
            
              请参阅 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> 和 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> 有关如何确定符合性级别的详细信息的属性。
            </summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>
              XML 数据符合格式正确的规则 XML 1.0 document, ，如按 W3C 定义。
            </summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>
              XML 数据是 well-formed XML fragment, ，如按 W3C 定义。
            </summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>
              指定用于处理 DTD 的选项。
              <see cref="T:System.Xml.DtdProcessing" /> 枚举由 <see cref="T:System.Xml.XmlReaderSettings" /> 类。
            </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>
              将导致 DOCTYPE 元素被忽略。
               不进行 DTD 处理时发生。
            </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>
              用于分析 Dtd。
            </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>
              指定当遇到 DTD， <see cref="T:System.Xml.XmlException" /> 会引发一条消息，表明 Dtd 被禁止。
               这是默认行为。
            </summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>
              指定如何 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 处理实体。
            </summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>
              扩展字符实体，并返回作为常规实体 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 节点。
            </summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>
              展开所有实体，并返回展开的节点。
            </summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>
              指定的格式设置选项 <see cref="T:System.Xml.XmlTextWriter" />。
            </summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>
              可能导致子元素根据缩进显示 <see cref="P:System.Xml.XmlTextWriter.Indentation" /> 和 <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> 设置。
            </summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>
              尚无特殊格式设置将应用。
               这是默认设置。
            </summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary>
              表示一个应用程序资源流冲突解决程序。
            </summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary>
              从指定的 URI 返回应用程序资源流。
            </summary>
      <param name="relativeUri">
                相对 URI。
              </param>
      <returns>
              应用程序资源流。
            </returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>
              支持的一类以返回 <see cref="T:System.Xml.XmlNode" /> 距当前上下文或位置。
            </summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>
              返回 <see cref="T:System.Xml.XmlNode" /> 当前位置。
            </summary>
      <returns>
        <see langword="XmlNode" /> 当前位置。
            </returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>
              提供一个使类可以返回行和位置信息的接口。
            </summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>
              获取一个值，该值指示该类是否可返回行信息。
            </summary>
      <returns>
              如果可以提供 <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> 和 <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>
              获取当前行号。
            </summary>
      <returns>
              当前行号或 0，如果没有行的信息 (例如， <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 返回 <see langword="false" />)。
            </returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>
              获取当前行位置。
            </summary>
      <returns>
              当前行位置或 0，如果没有行的信息 (例如， <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 返回 <see langword="false" />)。
            </returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>
              提供对一组前缀和命名空间映射的只读访问。
            </summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              获取当前处于作用域定义的前缀和命名空间映射的集合。
            </summary>
      <param name="scope">
                一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。
              </param>
      <returns>
              一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />。
            </returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>
              获取 URI 映射到指定的前缀的命名空间。
            </summary>
      <param name="prefix">
                要查找其命名空间 URI 的前缀。
              </param>
      <returns>
              映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>
              获取映射到指定的命名空间 URI 的前缀。
            </summary>
      <param name="namespaceName">
                要查找其前缀的命名空间 URI。
              </param>
      <returns>
              映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>
              使用 XSLT 样式表转换 XML 数据。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类，具有指定的调试设置。
            </summary>
      <param name="enableDebug">
        <see langword="true" /> 生成调试信息;否则为 <see langword="false" />。
                 此值设置为 <see langword="true" /> 使您能够调试样式表与 Microsoft Visual Studio 调试器。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
              编译 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />。
              <see cref="T:System.Xml.XmlResolver" /> 解析任何 XSLT import 或 include 元素和 XSLT 设置决定了样式表的权限。
            </summary>
      <param name="stylesheet">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含样式表。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 要应用于样式表。
                 如果这是 <see langword="null" />, 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 应用设置。
              </param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT 中引用的所有样式表 import 和 include 元素。
                 如果这是 <see langword="null" />, ，则不解析外部资源。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  样式表包含一个错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
              加载和编译 URI 指定的 XSLT 样式表。
              <see cref="T:System.Xml.XmlResolver" /> 解析任何 XSLT import 或 include 元素和 XSLT 设置决定了样式表的权限。
            </summary>
      <param name="stylesheetUri">
                样式表的 URI。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 要应用于样式表。
                 如果这是 <see langword="null" />, 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 应用设置。
              </param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析样式表 URI 和 XSLT 中引用的所有样式表 import 和 include 元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 或 <paramref name="stylesheetResolver" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  样式表包含一个错误。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到样式表。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 值包括文件名或找不到的目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="stylesheetUri" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载样式表出现分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>
              从使用编译的样式表加载一个方法 <see langword="XSLTC.exe" /> 实用程序。
            </summary>
      <param name="executeMethod">
                一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示由编译器生成 <paramref name="execute" /> 的已编译的样式表的方法。
              </param>
      <param name="queryData">
                序列化数据的字节数组中的结构 <paramref name="staticData" /> 字段的已编译的样式表生成 <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 方法。
              </param>
      <param name="earlyBoundTypes">
                存储在由编译器生成的类型的数组 <paramref name="ebTypes" /> 字段的已编译的样式表。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
              编译 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />。
              <see cref="T:System.Xml.XmlResolver" /> 解析任何 XSLT import 或 include 的元素和 XSLT 设置决定了样式表的权限。
            </summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XmlReader" /> 包含样式表。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 要应用于样式表。
                 如果这是 <see langword="null" />, 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 应用设置。
              </param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT 中引用的所有样式表 import 和 include 元素。
                 如果这是 <see langword="null" />, ，则不解析外部资源。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  样式表包含一个错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>
              编译样式表中包含 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XmlReader" /> 包含样式表。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  样式表包含一个错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>
              加载的已编译的样式表中使用创建 XSLT 编译器 (xsltc.exe)。
            </summary>
      <param name="compiledStylesheet">
                包含已编译样式表的类的名称。
              
                该名称通常是样式表的名称。
                 除非另外指定，否则，xsltc.exe 工具将样式表名称用作类和程序集的名称。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>
              加载和编译位于指定 URI 的样式表。
            </summary>
      <param name="stylesheetUri">
                样式表的 URI。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  样式表包含一个错误。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到样式表。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 值包括文件名或找不到的目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="stylesheetUri" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载样式表出现分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
              编译样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象。
            </summary>
      <param name="stylesheet">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含样式表。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  样式表包含一个错误。
                </exception>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>
              获取 <see cref="T:System.Xml.XmlWriterSettings" /> 对象，其中包含的输出信息派生自 xsl:output 样式表中的元素。
            </summary>
      <returns>
              一个只读的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象，其中包含的输出信息派生自 xsl:output 样式表中的元素。
               此值可为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" /> 对象，并将结果输出到 <see cref="T:System.IO.TextWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XmlReader" /> 包含输入的文档。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象，并将结果输出到 <see cref="T:System.IO.TextWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象，并将结果输出到流。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" /> 对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XmlReader" /> 包含输入的文档。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" /> 对象，并将结果输出到流。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XmlReader" /> 包含输入的文档。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>
              使用 URI 指定的输入文档执行转换，然后将结果输出到文件。
            </summary>
      <param name="inputUri">
                输入文档的 URI。
              </param>
      <param name="resultsFile">
                输出文件的 URI。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  找不到的输入的文档。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值包含一个文件名或找不到目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载的输入的文档分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
              使用由 URI 指定的输入的文档执行转换，并将结果输出到 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="inputUri">
                输入文档的 URI。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 值包含一个文件名或找不到目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载的输入的文档分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
              使用 URI 指定的输入文档执行转换，然后将结果输出到流。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="inputUri">
                输入文档的 URI。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的流。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 值包含一个文件名或找不到目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载的输入的文档分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" /> 对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XmlReader" /> 包含输入的文档。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>
              使用由 URI 指定的输入的文档执行转换，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="inputUri">
                输入文档的 URI。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 值包含一个文件名或找不到目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载的输入的文档分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
              使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" /> 对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数，而 XmlResolver 解析 XSLT document() 函数。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XmlReader" /> 包含输入的文档。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <param name="documentResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
              使用由 URI 指定的输入的文档执行转换，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。
            </summary>
      <param name="inputUri">
                输入文档的 URI。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
                 此值可为 <see langword="null" />。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" /> 使用 <see cref="T:System.Xml.XmlWriterSettings" /> 从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 具有正确的输出设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值是 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.Xsl.XsltException">
                  执行 XSLT 转换时出错。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputtUri" /> 值包含一个文件名或找不到目录。
                </exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 值不能为已解决。
                
                  - 或 -
                
                  处理请求时出错。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  没有加载的输入的文档分析错误。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
              使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
              <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数，而 <see cref="T:System.Xml.XmlResolver" /> 解析 XSLT <see langword="document()" /> 函数。
            </summary>
      <param name="input">
                由 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的要转换的文档。
              </param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 形式的参数列表。
              </param>
      <param name="results">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              
                如果样式表包含 <see langword="xsl:output" /> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。
                 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。
              </param>
      <param name="documentResolver">
                用于解析 XSLT <see langword="document()" /> 函数的 <see cref="T:System.Xml.XmlResolver" />。
                 如果为 <see langword="null" />，则不解析 <see langword="document()" /> 函数。
              </param>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>
              包含数目可变的参数是 XSLT 参数或扩展对象。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>
              实现的新实例 <see cref="T:System.Xml.Xsl.XsltArgumentList" />。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>
              添加将新对象传递给 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 并将其与命名空间 URI 相关联。
            </summary>
      <param name="namespaceUri">
                命名空间 URI 与对象关联。
                 若要使用的默认命名空间，请指定一个空字符串。
              </param>
      <param name="extension">
                要添加到列表中的对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> 是 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform 
                
                  <paramref name="namespaceUri" /> 已有一个与其关联的扩展对象。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有足够的权限来调用此方法。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>
              添加到参数 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 并将其关联的命名空间限定名称。
            </summary>
      <param name="name">
                要与参数关联的名称。
              </param>
      <param name="namespaceUri">
                命名空间 URI 与参数关联。
                 若要使用的默认命名空间，请指定一个空字符串。
              </param>
      <param name="parameter">
                参数值或要添加到列表对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> 是 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform。
                
                  <paramref name="name" /> 不是 W3C XML 规范的有效名称。
                
                  <paramref name="namespaceUri" /> 已具有与其关联的参数。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>
              删除所有参数和扩展对象从 <see cref="T:System.Xml.Xsl.XsltArgumentList" />。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>
              获取与给定的命名空间关联的对象。
            </summary>
      <param name="namespaceUri">
                命名空间的对象的 URI。
              </param>
      <returns>
              命名空间 URI 对象或 <see langword="null" /> 如果未找到。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>
              获取与命名空间限定名关联的参数。
            </summary>
      <param name="name">
                参数的名称。
                <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 不会检查以确保传入的名称是有效的本地名称;但是，名称不能 <see langword="null" />。
              </param>
      <param name="namespaceUri">
                命名空间 URI 与参数相关联。
              </param>
      <returns>
              参数对象或 <see langword="null" /> 如果未找到。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>
              对象中删除具有命名空间 URI 从 <see cref="T:System.Xml.Xsl.XsltArgumentList" />。
            </summary>
      <param name="namespaceUri">
                与要删除的对象关联的命名空间 URI。
              </param>
      <returns>
              与命名空间 URI 的对象或 <see langword="null" /> 如果未找到。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>
              删除从参数 <see cref="T:System.Xml.Xsl.XsltArgumentList" />。
            </summary>
      <param name="name">
                要删除的参数的名称。
                <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 不会检查以确保传入的名称是有效的本地名称;但是，名称不能 <see langword="null" />。
              </param>
      <param name="namespaceUri">
                命名空间 URI 的参数中删除。
              </param>
      <returns>
              参数对象或 <see langword="null" /> 如果未找到。
            </returns>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>
              通过样式表中指定一条消息时发生 xsl:message 元素。
            </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>
              通过引发的异常 负载 XSLT 样式表中找到了错误的方法。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 类的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="XsltCompileException" /> 类使用中的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，其中包含的所有属性 <see langword="XsltCompileException" />。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 对象，其中包含上下文信息。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 类指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常或 <see langword="null" /> 如果未不指定任何内部异常。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>
              初始化 <see langword="XsltCompileException" /> 类的新实例。
            </summary>
      <param name="inner">
        <see cref="T:System.Exception" /> 引发了 <see langword="XsltCompileException" />。
              </param>
      <param name="sourceUri">
                样式表的位置路径。
              </param>
      <param name="lineNumber">
                指示在样式表中发生错误的行号。
              </param>
      <param name="linePosition">
                指示在样式表中发生错误的行位置。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              流式处理所有 <see langword="XsltCompileException" /> 属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。
              </param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>
              封装可扩展样式表语言转换 (XSLT) 处理器允许 XML 路径语言 (XPath) 若要解决的函数、 参数和命名空间中的 XPath 表达式的当前执行上下文。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Xsl.XsltContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>
              使用指定的 <see cref="T:System.Xml.Xsl.XsltContext" /> 初始化 <see cref="T:System.Xml.NameTable" /> 类的新实例。
            </summary>
      <param name="table">
                要使用的 <see cref="T:System.Xml.NameTable" />。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>
              当在派生类中重写，会比较基统一资源标识符 (Uri) 的两个文档根据 XSLT 处理器加载文档的顺序 (即， <see cref="T:System.Xml.Xsl.XslTransform" /> 类)。
            </summary>
      <param name="baseUri">
                要比较的第一个文档的基 URI。
              </param>
      <param name="nextbaseUri">
                要比较的第二个文档的基 URI。
              </param>
      <returns>
              说明两个基 Uri 的相对顺序的整数值︰ <see langword="-" />1 如果 <paramref name="baseUri" /> 之前发生 <paramref name="nextbaseUri" />; 如果两个基 Uri 是相同的; 则为 0 和 1 如果 <paramref name="baseUri" /> 后就会出现 <paramref name="nextbaseUri" />。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>
              当在派生类中重写，评估是否要保留空白节点还是针对给定上下文将它们抽出。
            </summary>
      <param name="node">
                在当前上下文中要保留或抽出的空白节点。
              </param>
      <returns>
              返回 <see langword="true" /> 如果空白区域将被保留或 <see langword="false" /> 空白区域则被去除。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>
              当在派生类中重写时解析函数引用并返回 <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> 表示的函数。
              <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> 在执行时使用来获取该函数的返回值。
            </summary>
      <param name="prefix">
                在 XPath 表达式中显示的函数的前缀。
              </param>
      <param name="name">
                函数名。
              </param>
      <param name="ArgTypes">
                正在被解析的函数的自变量类型的数组。
                 这样您就可以在同名称的方法（例如，重载方法）中进行选择。
              </param>
      <returns>
        <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> 表示的函数。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>
              当在派生类中重写时解析变量引用并返回 <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> 表示该变量。
            </summary>
      <param name="prefix">
                在 XPath 表达式中显示的变量的前缀。
              </param>
      <param name="name">
                变量名。
              </param>
      <returns>
        <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> 表示该变量在运行时。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>
              当在派生类中重写时获取一个值，该值指示是否在输出中包含空白节点。
            </summary>
      <returns>
        <see langword="true" /> 若要检查包含在输出; 与源文档中的空白节点 <see langword="false" /> 不评估空白节点。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>
              当处理 XSLT 转换过程中发生错误时引发的异常。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 类的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="XsltException" /> 类使用中的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，其中包含的所有属性 <see langword="XsltException" />。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see langword="XsltException" /> 类的新实例。
            </summary>
      <param name="message">
                错误条件的说明。
              </param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 引发 <see langword="XsltException" />, ，如果有的话。
                 此值可为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              流式处理所有 <see langword="XsltException" /> 属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。
              </param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>
              获取指示样式表中发生错误的行号。
            </summary>
      <returns>
              指示在样式表中发生错误的行号。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>
              获取指示样式表中发生错误的行位置。
            </summary>
      <returns>
              指示在样式表中发生错误的行位置。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>
              获取描述当前异常的经过格式化的错误消息。
            </summary>
      <returns>
              描述当前异常的经过格式化的错误消息。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>
              获取样式表的位置路径。
            </summary>
      <returns>
              样式表的位置路径。
            </returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>
              为 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件提供数据。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>
              获取的内容 xsl:message 元素。
            </summary>
      <returns>
              内容 xsl:message 元素。
            </returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
        <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> 包含事件数据。
              </param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>
              使用转换 XML 数据的可扩展样式表语言转换 (XSLT) 样式表。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>
              加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含的 XSLT 样式表。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用来加载引用中的所有样式表 xsl:import 和 xsl:include 元素。
                 如果这是 <see langword="null" />, ，则不解析外部资源。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  当前节点不符合有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>
              加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />。
            </summary>
      <param name="stylesheet">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含 XSLT 样式表。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用来加载引用中的所有样式表 xsl:import 和 xsl:include 的元素。
                 如果这是 <see langword="null" />, ，则不解析外部资源。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  加载的资源不是有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
              加载 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XmlReader" /> 对象，其中包含的 XSLT 样式表。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用来加载引用中的所有样式表 xsl:import 和 xsl:include 元素。
                 如果这是 <see langword="null" />, ，则不解析外部资源。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />  方法完成。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  当前节点不符合有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>
              加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含的 XSLT 样式表。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  当前节点不符合有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
              加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />。
            </summary>
      <param name="stylesheet">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含 XSLT 样式表。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  加载的资源不是有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>
              加载 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XmlReader" /> 对象，其中包含的 XSLT 样式表。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  当前节点不符合有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>
              加载由 URL 指定的 XSLT 样式表。
            </summary>
      <param name="url">
                指定要加载的 XSLT 样式表的 URL。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  加载的资源不是有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>
              加载由 URL 指定的 XSLT 样式表。
            </summary>
      <param name="url">
                指定要加载的 XSLT 样式表的 URL。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 要用于加载该样式表以及中引用的任何样式表 xsl:import 和 xsl:include 元素。
              
                如果这是 <see langword="null" />, ，默认值 <see cref="T:System.Xml.XmlUrlResolver" /> 在无用户凭据用于打开样式表。
                 默认值 <see cref="T:System.Xml.XmlUrlResolver" /> 不用于解析样式表中的任何外部资源因此 xsl:import 和 xsl:include 未解决的元素。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">
                  加载的资源不是有效的样式表。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  样式表包含嵌入的脚本，并且调用方不具有 <see langword="UnmanagedCode" /> 权限。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 包含转换的结果。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的流。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的流。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定的参数并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>
              转换的输入文件中的 XML 数据并将结果输出到输出文件。
            </summary>
      <param name="inputfile">
                要转换的源文档的 URL。
              </param>
      <param name="outputfile">
                输出文件的 URL。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 包含转换的结果。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的流。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定的参数并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析 XSLT document() 函数。
                 如果这是 <see langword="null" />, 、 document() 函数未得到解决。
              
                <see cref="T:System.Xml.XmlResolver" /> 后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 包含转换的结果。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="input">
                一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口。
                 在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" /> (通常 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 包含转换的结果。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>
              转换的输入文件中的 XML 数据并将结果输出到输出文件。
            </summary>
      <param name="inputfile">
                要转换的源文档的 URL。
              </param>
      <param name="outputfile">
                输出文件的 URL。
              </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
              中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 使用指定 <paramref name="args" /> 并将结果输出到 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 包含要转换的数据。
              </param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 包含用作转换输入的命名空间限定参数。
              </param>
      <param name="output">
                要输出到的流。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  处理 XSLT 转换时出错。
                
                  注意︰ 这是从早期版本的行为的更改。
                  <see cref="T:System.Xml.Xsl.XsltException" /> 如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
                </exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>
              集 <see cref="T:System.Xml.XmlResolver" /> 用于解析外部资源时 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 调用方法。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> 在转换过程中使用。
               如果设置为 <see langword="null" />, ，XSLT document() 函数未得到解决。
            </returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>
              指定的 XSLT 功能以支持在 XSLT 样式表的执行过程。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>
              用默认设置初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 类使用指定的设置。
            </summary>
      <param name="enableDocumentFunction">
        <see langword="true" /> 若要启用对 XSLT document() 函数; 否则为 <see langword="false" />。
              </param>
      <param name="enableScript">
        <see langword="true" /> 若要启用对嵌入的脚本块;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>
              获取 <see cref="T:System.Xml.Xsl.XsltSettings" /> 使用默认设置的对象。
               支持 XSLT document() 函数和嵌入式的脚本块被禁用。
            </summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 属性设置为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>
              获取或设置一个值，该值指示是否启用支持 XSLT document() 函数。
            </summary>
      <returns>
        <see langword="true" /> 若要支持 XSLT document() 函数; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>
              获取或设置一个值，该值指示是否启用对嵌入式的脚本块的支持。
            </summary>
      <returns>
        <see langword="true" /> 若要支持脚本块中 XSLT 样式表;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>
              获取 <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象，它可以支持 XSLT document() 函数以及嵌入式的脚本块。
            </summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 属性设置为 <see langword="true" />。
            </returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>
              指定是否删除重复的命名空间中的声明 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>
              指定将不会删除重复的命名空间声明。
            </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>
              指定将移除重复的命名空间声明。
               对于要删除的重复命名空间，前缀和命名空间必须匹配。
            </summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>
              实现单线程 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>
              初始化 <see langword="NameTable" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>
              将指定的字符串原子化并将其添加到 <see langword="NameTable" />。
            </summary>
      <param name="key">
                要添加的字符串。
              </param>
      <returns>
              原子化的字符串; 如果它已存在于现有字符串 <see langword="NameTable" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
              将指定的字符串原子化并将其添加到 <see langword="NameTable" />。
            </summary>
      <param name="key">
                包含要添加的字符串的字符数组。
              </param>
      <param name="start">
                数组中指定的第一个字符的字符串的从零开始的索引。
              </param>
      <param name="len">
                在字符串中的字符数。
              </param>
      <returns>
              原子化的字符串; 如果中已存在的现有字符串 <see langword="NameTable" />。
               如果 <paramref name="len" /> 为零，则返回 String.Empty。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  0 &gt; <paramref name="start" />
                
                  - 或 - 
                
                  <paramref name="start" /> &gt;= <paramref name="key" />.长度 
                
                  - 或 - 
                
                  <paramref name="len" /> &gt;= <paramref name="key" />.长度 
                
                  上述条件不会导致如果引发异常 <paramref name="len" /> = 0。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.
                </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>
              获取具有指定值的原子化的字符串。
            </summary>
      <param name="value">
                要查找的名称。
              </param>
      <returns>
              原子化的字符串对象或 <see langword="null" /> 如果字符串具有不尚未原子化。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
              获取包含指定的范围内的给定数组中的字符相同的字符的原子化的字符串。
            </summary>
      <param name="key">
                包含要查找的名称的字符数组。
              </param>
      <param name="start">
                数组中指定名称的第一个字符从零开始的索引。
              </param>
      <param name="len">
                在名称中的字符数。
              </param>
      <returns>
              原子化的字符串或 <see langword="null" /> 如果字符串具有不尚未原子化。
               如果 <paramref name="len" /> 为零，则返回 String.Empty。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  0 &gt; <paramref name="start" />
                
                  - 或 - 
                
                  <paramref name="start" /> &gt;= <paramref name="key" />.长度 
                
                  - 或 - 
                
                  <paramref name="len" /> &gt;= <paramref name="key" />.长度 
                
                  上述条件不会导致如果引发异常 <paramref name="len" /> = 0。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.
                </exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>
              指定如何处理换行符。
            </summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>
              新行字符被实体化。
               此设置可保留的所有字符，当规范化读取输出 <see cref="T:System.Xml.XmlReader" />。
            </summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>
              新行字符保持不变。
               输出是输入一样。
            </summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>
              若要在指定的字符匹配的新行字符将替换 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />  属性。
            </summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>
              指定读取器的状态。
            </summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlReader.Close" /> 调用方法。
            </summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>
              已成功到达文件末尾。
            </summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>
              将出现错误，以防止读取的操作继续进行。
            </summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>
        <see langword="Read" /> 不调用方法。
            </summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>
        <see langword="Read" /> 调用方法。
               可以在读取器上调用其他方法。
            </summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 枚举由 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 并定义哪些已知 Dtd， <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 识别。
            </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>
              指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将识别当前支持的所有 Dtd。
               这是默认行为。
            </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>
              指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将不识别任何预定义的 Dtd。
            </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>
              指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将识别 Dtd 和在 RSS 0.91 中定义的实体。
            </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>
              指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将识别 Dtd 和 XHTML 1.0 中定义的实体。
            </summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>
              表示一个类，用于预填充缓存的 Dtd 或 XML 流。
            </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类与指定预加载已知 Dtd。
            </summary>
      <param name="preloadedDtds">
                应预填充到缓存中的已知 Dtd。
              </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类具有指定的回退冲突解决程序。
            </summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />, ，<see langword="XmlXapResolver" />, ，或者您自己的冲突解决程序。
              </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类到指定的回退解析程序并预加载已知 Dtd。
            </summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />, ，<see langword="XmlXapResolver" />, ，或者您自己的冲突解决程序。
              </param>
      <param name="preloadedDtds">
                应预填充到缓存中的已知 Dtd。
              </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类，具有指定的回退解析程序，预加载已知 Dtd 和 URI 的相等比较器。
            </summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />, ，<see langword="XmlXapResolver" />, ，或者您自己的冲突解决程序。
              </param>
      <param name="preloadedDtds">
                应预填充到缓存中的已知 Dtd。
              </param>
      <param name="uriComparer">
                实现 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口，在比较 Uri 时使用。
              </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>
              将字节数组转换为 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储并将其映射到的 URI。
               如果存储已包含对同一 uri 的映射，将重写现有的映射。
            </summary>
      <param name="uri">
                将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储。
              </param>
      <param name="value">
                具有与所提供 URI 相对应的数据的字节数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>
              添加 <see cref="T:System.IO.Stream" /> 到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储并将其映射到的 URI。
               如果存储已包含对同一 uri 的映射，将重写现有的映射。
            </summary>
      <param name="uri">
                将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储。
              </param>
      <param name="value">
                一个 <see cref="T:System.IO.Stream" /> 对应于提供的 URI 的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>
              将一个字符串与预加载数据添加 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储并将其映射到的 URI。
               如果存储已包含对同一 uri 的映射，将重写现有的映射。
            </summary>
      <param name="uri">
                将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储。
              </param>
      <param name="value">
                一个 <see langword="String" /> 对应于提供的 URI 的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>
              将字节数组转换为 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储并将其映射到的 URI。
               如果存储已包含对同一 uri 的映射，将重写现有的映射。
            </summary>
      <param name="uri">
                将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储。
              </param>
      <param name="value">
                具有与所提供 URI 相对应的数据的字节数组。
              </param>
      <param name="offset">
                中提供的字节数组数据开始位置的偏移量。
              </param>
      <param name="count">
                要从字节数组，从提供的偏移量开始读取的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0。
                
                  - 或 -
                
                  长度 <paramref name="value" /> 减去 <paramref name="offset" /> 是小于 <paramref name="count." /></exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>
              设置用于验证身份的基础的凭据 <see cref="T:System.Net.WebRequest" />。
            </summary>
      <returns>
              使用基础 web 请求进行身份验证的凭据。
            </returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当解析 Uri 时，Silverlight 的.NET framework 当前版本不使用此参数。
                 此参数提供供今后的扩展使用。
                 例如，此参数可以是映射到 xlink:role，用作在其他情况下的特定于实现的参数。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支持 <see cref="T:System.IO.Stream" /> 对象和 <see cref="T:System.IO.TextReader" /> 对象添加为 Uri <see langword="String" />。
                 如果冲突解决程序不支持所请求的类型，则将引发异常。
                 使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法，以确定是否具有特定 <see langword="Type" /> 受此冲突解决程序。
              </param>
      <returns>
              一个 <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 对应于实际的源的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  无法解析 URI 中传递 <paramref name="absoluteUri" />。
                
                  - 或 -
                
                  <paramref name="ofObjectToReturn" /> 不是类型的受支持。
                </exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 异步映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当解析 Uri 时，Silverlight 的.NET framework 当前版本不使用此参数。
                 此参数提供供今后的扩展使用。
                 例如，此参数可以是映射到 xlink:role，用作在其他情况下的特定于实现的参数。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支持 <see cref="T:System.IO.Stream" /> 对象和 <see cref="T:System.IO.TextReader" /> 对象添加为 Uri <see langword="String" />。
                 如果冲突解决程序不支持所请求的类型，则将引发异常。
                 使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法，以确定是否具有特定 <see langword="Type" /> 受此冲突解决程序。
              </param>
      <returns>
              一个 <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 对应于实际的源的对象。
            </returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>
              获取预加载的 Uri 的集合。
            </summary>
      <returns>
              预加载的 Uri 的集合。
            </returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>
              删除与从 URI 相对应的数据 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />。
            </summary>
      <param name="uri">
                应从删除的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>
              从基 URI 和相对 URI 解析绝对 URI。
            </summary>
      <param name="baseUri">
                用于解析相对 URI 的基 URI。
              </param>
      <param name="relativeUri">
                要解析的 URI。
                 URI 可以是绝对的或相对的。
                 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。
                 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。
              </param>
      <returns>
        <see cref="T:System.Uri" /> 表示的绝对 URI 或 <see langword="null" /> 如果能解析相对 URI。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>
              确定冲突解决程序是否支持其他 <see cref="T:System.Type" />s 比只是 <see cref="T:System.IO.Stream" />。
            </summary>
      <param name="absoluteUri">
                要检查的绝对 URI。
              </param>
      <param name="type">
                要返回的 <see cref="T:System.Type" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Type" /> 受支持; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>
              定义已验证的 XML 节点的架构验证信息集。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>
              获取一个值，该值指示是否这个被验证的 XML 节点被设置为在 XML 架构定义语言 (XSD) 架构验证过程中应用的默认的结果。
            </summary>
      <returns>
        <see langword="true" /> 如果此验证的 XML 节点被设置为默认值在架构验证，则为期间应用的结果否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>
              获取一个值，该值指示此验证的 XML 节点值是否为零。
            </summary>
      <returns>
        <see langword="true" /> 此值被验证的 XML 节点是否为零;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>
              获取此已验证的 XML 节点的动态架构类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 表示此动态架构类型的对象验证 XML 节点。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>
              获取已编译 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对应于这个被验证的 XML 节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对应于这个被验证的 XML 节点。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>
              获取已编译 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 对应于这个被验证的 XML 节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 对应于这个被验证的 XML 节点。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>
              获取此已验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 此被验证的 XML 节点。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 验证 XML 节点的此值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 验证 XML 节点的此值。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>
              返回与相关的详细的信息 <see langword="ValidationEventHandler" />。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 与验证事件关联。
            </summary>
      <returns>
        <see langword="XmlSchemaException" /> 与验证事件关联。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>
              获取对应于验证事件的文本说明。
            </summary>
      <returns>
              文本说明。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>
              获取验证事件的严重级别。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSeverityType" /> 值，该值表示验证事件的严重性。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>
              表示将处理 XML 架构验证事件的回调方法和 <see cref="T:System.Xml.Schema.ValidationEventArgs" />。
            </summary>
      <param name="sender">
                事件源。
              
                注意    然后再使用它在代码中确定发件人的类型。
                 您不能假定发件人为特定类型的实例。
                 发件人也不保证不会是 null。
                 总是使用失败处理逻辑要求您强制转换。
              </param>
      <param name="e">
                事件数据。
              </param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>
              表示已验证的 XML 元素或属性的类型化的值。
              <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 类不能被继承。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>
              返回一份 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象的副本 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>
              获取一个值，该值指示是否已验证的 XML 元素或属性一个 XPath 节点或原子值。
            </summary>
      <returns>
        <see langword="true" /> 如果已验证的 XML 元素或属性是一个 XPath 节点; <see langword="false" /> 如果已验证的 XML 元素或属性是一个原子值。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>
              获取 <see langword="string" /> 已验证的 XML 元素或属性的值。
            </summary>
      <returns>
        <see langword="string" /> 已验证的 XML 元素或属性的值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>
              获取当前已验证的 XML 元素或属性符合其架构类型最适合的 Microsoft.NET Framework 类型的装箱对象形式。
            </summary>
      <returns>
              当前作为最合适的.NET Framework 类型的装箱对象验证 XML 元素或属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>
              获取 <see langword="string" /> 已验证的 XML 元素或属性的值。
            </summary>
      <returns>
        <see langword="string" /> 已验证的 XML 元素或属性的值。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              验证的 XML 元素或属性的值按使用指定的类型返回 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 指定用来解析命名空间前缀的对象。
            </summary>
      <param name="type">
                要验证的 XML 元素或属性的值作为返回的类型。
              </param>
      <param name="nsResolver">
                用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。
              </param>
      <returns>
              已验证的 XML 元素或作为请求的类型的属性的值。
            </returns>
      <exception cref="T:System.FormatException">
                  验证的 XML 元素或特性的值不在的正确格式为目标类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>
              获取验证的 XML 元素或属性的值作为 <see cref="T:System.Boolean" />。
            </summary>
      <returns>
              验证的 XML 元素或属性的值作为 <see cref="T:System.Boolean" />。
            </returns>
      <exception cref="T:System.FormatException">
                  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Boolean" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Boolean" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>
              获取验证的 XML 元素或属性的值作为 <see cref="T:System.DateTime" />。
            </summary>
      <returns>
              验证的 XML 元素或属性的值作为 <see cref="T:System.DateTime" />。
            </returns>
      <exception cref="T:System.FormatException">
                  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.DateTime" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.DateTime" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>
              获取验证的 XML 元素或属性的值作为 <see cref="T:System.Double" />。
            </summary>
      <returns>
              验证的 XML 元素或属性的值作为 <see cref="T:System.Double" />。
            </returns>
      <exception cref="T:System.FormatException">
                  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Double" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Double" /> 无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>
              获取验证的 XML 元素或属性的值作为 <see cref="T:System.Int32" />。
            </summary>
      <returns>
              验证的 XML 元素或属性的值作为 <see cref="T:System.Int32" />。
            </returns>
      <exception cref="T:System.FormatException">
                  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Int32" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Int32" /> 无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>
              获取验证的 XML 元素或属性的值作为 <see cref="T:System.Int64" />。
            </summary>
      <returns>
              验证的 XML 元素或属性的值作为 <see cref="T:System.Int64" />。
            </returns>
      <exception cref="T:System.FormatException">
                  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Int64" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Int64" /> 无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>
              获取经验证的 XML 元素或特性的 Microsoft.NET Framework 的类型。
            </summary>
      <returns>
              已验证的 XML 元素或属性的.NET Framework 类型。
               默认值为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 经验证的 XML 元素或属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 经验证的 XML 元素或属性。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />。
            </summary>
      <returns>
              返回一份 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>
              XML 架构，World Wide Web 联合会 (W3C) 中指定的内存中表示 XML Schema Part 1: Structures 和 XML Schema Part 2: Datatypes 规范。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchema" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>
              获取或设置在架构的目标命名空间中声明的属性的窗体。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，该值指示是否需要用命名空间前缀限定目标命名空间的属性。
               默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>
              获取架构中所有全局属性组的架构编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有全局属性组的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>
              获取架构中所有属性的架构编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有特性的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>
              获取或设置 <see langword="blockDefault" /> 属性将设置的默认值 <see langword="block" /> 元素和中的复杂类型属性 <see langword="targetNamespace" /> 的架构。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，该值表示阻止派生的不同方法。
               默认值为 <see langword="XmlSchemaDerivationMethod.None" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>
              将 XML 架构对象模型 (SOM) 编译为架构信息供验证使用。
               用于检查以编程方式生成的 SOM 的语法和语义结构。
               语义验证检查在编译期间执行。
            </summary>
      <param name="validationEventHandler">
                验证事件处理程序，它接收 XML 架构验证错误的相关信息。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>
              将 XML 架构对象模型 (SOM) 编译为架构信息供验证使用。
               用于检查以编程方式生成的 SOM 的语法和语义结构。
               语义验证检查在编译期间执行。
            </summary>
      <param name="validationEventHandler">
                验证事件处理程序接收 XML 架构验证错误的相关信息。
              </param>
      <param name="resolver">
        <see langword="XmlResolver" /> 用于解析命名空间中引用 <see langword="include" /> 和 <see langword="import" /> 元素。
              </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>
              获取或设置在架构的目标命名空间中声明的元素的窗体。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，该值指示是否需要用命名空间前缀限定目标命名空间的元素。
               默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>
              获取架构中所有元素的架构编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有元素的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>
              获取或设置 <see langword="finalDefault" /> 属性将设置的默认值 <see langword="final" /> 对元素和架构的目标命名空间中的复杂类型的属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，该值表示阻止派生的不同方法。
               默认值为 <see langword="XmlSchemaDerivationMethod.None" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>
              获取架构中所有组的架构编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中的所有组的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>
              获取或设置字符串 ID。
            </summary>
      <returns>
              字符串的 ID。
               默认值为 <see langword="String.Empty" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>
              获取包含的和导入的架构的集合。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 包含和导入架构。
            </returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>
              XML 架构实例命名空间。
               此字段为常数。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>
              表明架构是否已编译。
            </summary>
      <returns>
        <see langword="true" /> 如果已编译架构，否则， <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>
              在架构中获取架构元素的集合，并使用它来添加新的元素类型在 <see langword="schema" /> 元素级别。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 的架构中的架构元素。
            </returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>
              XML 架构命名空间。
               此字段为常数。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>
              获取架构中所有注释的架构编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 架构中所有注释的集合。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              从提供的流中读取 XML 架构。
            </summary>
      <param name="stream">
                提供的数据流。
              </param>
      <param name="validationEventHandler">
                验证事件处理程序，它接收 XML 架构语法错误的相关信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 表示 XML 架构的对象。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> 如果没有，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              所提供的读取 XML 架构 <see cref="T:System.IO.TextReader" />。
            </summary>
      <param name="reader">
        <see langword="TextReader" /> 包含要读取的 XML 架构。
              </param>
      <param name="validationEventHandler">
                验证事件处理程序，它接收 XML 架构语法错误的相关信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 表示 XML 架构的对象。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> 如果没有，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              所提供的读取 XML 架构 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see langword="XmlReader" /> 包含要读取的 XML 架构。
              </param>
      <param name="validationEventHandler">
                验证事件处理程序，它接收 XML 架构语法错误的相关信息。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 表示 XML 架构的对象。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> 如果没有，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>
              获取架构中所有架构类型的架构编译后值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 架构中的所有架构类型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>
              获取或设置架构目标命名空间的统一资源标识符 (URI)。
            </summary>
      <returns>
              架构目标命名空间。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>
              获取和设置不属于架构目标命名空间的限定属性。
            </summary>
      <returns>
              数组的限定 <see cref="T:System.Xml.XmlAttribute" /> 对象不属于架构目标命名空间。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>
              获取或设置架构的版本。
            </summary>
      <returns>
              架构的版本。
               默认值为 <see langword="String.Empty" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>
              将　XML 架构写入提供的数据流中。
            </summary>
      <param name="stream">
                提供的数据流。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>
              将 XML 架构写入提供 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>
              将 XML 架构写入提供 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 参数为 null。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>
              将 XML 架构写入提供 <see cref="T:System.IO.Stream" /> 使用 <see cref="T:System.Xml.XmlNamespaceManager" /> 指定。
            </summary>
      <param name="stream">
                提供的数据流。
              </param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>
              将 XML 架构写入提供 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。
              </param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>
              将 XML 架构写入提供 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。
              </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="all" /> 元素 （复合器）。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>
              获取的集合 <see langword="XmlSchemaElement" /> 中包含的元素 <see langword="all" /> 复合器。
            </summary>
      <returns>
              中包含的元素集合 <see langword="XmlSchemaAll" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>
              可以包含批注的元素的任何元素的基类。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>
              获取或设置 <see langword="annotation" /> 属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> 表示 <see langword="annotation" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>
              获取或设置字符串 id。
            </summary>
      <returns>
              字符串 id。
               默认值为 <see langword="String.Empty" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>
              获取或设置不属于当前架构目标命名空间的限定的属性。
            </summary>
      <returns>
              数组的限定 <see cref="T:System.Xml.XmlAttribute" /> 对象不属于架构目标命名空间。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="annotation" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>
              获取或设置字符串 id。
            </summary>
      <returns>
              字符串 id。
               默认值为 <see langword="String.Empty" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>
              获取 <see langword="Items" /> 集合，用于存储 <see langword="appinfo" /> 和 <see langword="documentation" /> 子元素。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 的 <see langword="appinfo" /> 和 <see langword="documentation" /> 子元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>
              获取或设置不属于架构目标命名空间的限定的属性。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.XmlAttribute" /> 对象不属于架构目标命名空间。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="any" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>
              获取或设置包含可以使用的元素的命名空间。
            </summary>
      <returns>
              可供使用的元素的命名空间。
               默认值为 <see langword="##any" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>
              获取或设置有关的应用程序或 XML 处理器应如何处理由指定的元素的 XML 文档的验证信息 <see langword="any" /> 元素。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值之一。
               如果没有 <see langword="processContents" /> 指定属性，则默认为 <see langword="Strict" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="anyAttribute" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>
              获取或设置包含可以使用的特性的命名空间。
            </summary>
      <returns>
              可供使用的属性的命名空间。
               默认值为 <see langword="##any" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>
              获取或设置有关的应用程序或 XML 处理器应如何处理 XML 文档，以指定的特性的验证信息 <see langword="anyAttribute" /> 元素。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值之一。
               如果没有 <see langword="processContents" /> 指定属性，则默认为 <see langword="Strict" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>
              表示 World Wide Web 联合会 (W3C) <see langword="appinfo" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>
              获取或设置一个数组 <see cref="T:System.Xml.XmlNode" /> 该对象表示 <see langword="appinfo" /> 子节点。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.XmlNode" /> 该对象表示 <see langword="appinfo" /> 子节点。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>
              获取或设置应用程序信息的源。
            </summary>
      <returns>
              统一资源标识符 (URI) 的引用。
               默认值为 <see langword="String.Empty" />。
            
              可选。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>
              表示 <see langword="attribute" /> 由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素。
               属性为其他文档元素提供额外信息。
               属性标记嵌套在架构的文档元素标记之间。
               XML 文档将属性显示为元素开始标记中的已命名项。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象，表示该特性的类型基于 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> 的属性。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>
              获取公共语言运行时 (CLR) 对象基于 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> 持有的编译后值的属性 <see langword="AttributeType" /> 属性。
            </summary>
      <returns>
              保存的编译后值的公共运行时库 (CLR) 对象 <see langword="AttributeType" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>
              获取或设置属性的默认值。
            </summary>
      <returns>
              属性的默认值。
               默认为空引用。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>
              获取或设置属性的固定值。
            </summary>
      <returns>
              属性的固定值。
               默认值为 null。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>
              获取或设置属性的窗体。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。
               默认的值为 <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> 包含该属性的架构元素。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>
              获取或设置属性的名称。
            </summary>
      <returns>
              属性名。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>
              获取属性的限定名称。
            </summary>
      <returns>
              编译后值的 <see langword="QualifiedName" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>
              获取或设置在此架构（或指定命名空间指示的另一个架构）中声明的属性的名称。
            </summary>
      <returns>
              所声明属性的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>
              获取属性类型或将其设置为简单类型。
            </summary>
      <returns>
              此架构中定义的简单类型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>
              获取或设置在此架构（或指定命名空间指示的另一个架构）中定义的简单类型的名称。
            </summary>
      <returns>
              简单类型的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>
              获取或设置如何使用该属性的相关信息。
            </summary>
      <returns>
              下列值之一：“None”、“Prohibited”、“Optional”或“Required”。
               默认为“Optional”。
            
              可选。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>
              表示 <see langword="attributeGroup" /> 由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素。
               AttributesGroups 提供将一组特性声明归为一组的机制，以便将它们作为一个组并入到复杂类型定义中。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件的属性组。
            </summary>
      <returns>
              World Wide Web 联合会 (W3C) <see langword="anyAttribute" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>
              获取属性组的属性的集合。
               包含 <see langword="XmlSchemaAttribute" /> 和 <see langword="XmlSchemaAttributeGroupRef" /> 元素。
            </summary>
      <returns>
              属性组的属性的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>
              获取或设置属性组的名称。
            </summary>
      <returns>
              属性组的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>
              获取属性组的限定名称。
            </summary>
      <returns>
              属性组的限定名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>
              从 XML 架构中获取重新定义的属性组属性。
            </summary>
      <returns>
              重新定义的属性组属性。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>
              表示 <see langword="attributeGroup" /> 具有元素 <see langword="ref" /> 由指定的 XML 架构的属性 World Wide Web Consortium (W3C)。
               AttributesGroupRef 属性组的引用，name 属性包含所引用的属性组。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>
              获取或设置引用的名称 <see langword="attributeGroup" /> 元素。
            </summary>
      <returns>
              引用的属性组的名称。
               值必须是 QName。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>
              表示 <see langword="choice" /> 由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素 （复合器）。
              <see langword="choice" /> 允许出现在实例其子级之一。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>
              获取包含排序器的元素的集合 (<see langword="choice" />): <see langword="XmlSchemaElement" />, ，<see langword="XmlSchemaGroupRef" />, ，<see langword="XmlSchemaChoice" />, ，<see langword="XmlSchemaSequence" />, ，或 <see langword="XmlSchemaAny" />。
            </summary>
      <returns>
              中包含的元素的集合 <see langword="XmlSchemaChoice" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>
              包含 XML 架构定义语言 (XSD) 和 XML 数据简化 (XDR) 架构的缓存。
              <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> 类已过时。
               请改用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>
              初始化 <see langword="XmlSchemaCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>
              使用指定的 <see langword="XmlSchemaCollection" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。
              <see langword="XmlNameTable" /> 加载架构时使用。
            </summary>
      <param name="nametable">
                要使用的 <see langword="XmlNameTable" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>
              添加 <see cref="T:System.Xml.Schema.XmlSchema" /> 到集合。
            </summary>
      <param name="schema">
                要添加到集合中的 <see langword="XmlSchema" />。
              </param>
      <returns>
        <see langword="XmlSchema" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>
              将在给定集合（包括其关联架构）中定义的所有命名空间添加到该集合。
            </summary>
      <param name="schema">
        <see langword="XmlSchemaCollection" /> 你想要添加到此集合。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>
              将由给定的 URL 定位的架构添加到架构集合中。
            </summary>
      <param name="ns">
                与架构关联的命名空间 URI。
                 对于 XML 架构，这通常是 <see langword="targetNamespace" />。
              </param>
      <param name="uri">
                指定要加载的架构的 URL。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到架构集合中; <see langword="null" /> 如果所添加的架构是 XDR 架构或架构中有编译错误。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  架构不是有效的架构。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>
              将包含在架构添加 <see cref="T:System.Xml.XmlReader" /> 到架构集合。
            </summary>
      <param name="ns">
                与架构关联的命名空间 URI。
                 对于 XML 架构，这通常是 <see langword="targetNamespace" />。
              </param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 包含要添加的架构。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到架构集合中; <see langword="null" /> 如果所添加的架构是 XDR 架构或架构中有编译错误。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  架构不是有效的架构。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>
              添加 <see cref="T:System.Xml.Schema.XmlSchema" /> 到集合。
               指定 <see cref="T:System.Xml.XmlResolver" /> 用于解析所有外部引用。
            </summary>
      <param name="schema">
                要添加到集合中的 <see langword="XmlSchema" />。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析命名空间中引用 <see langword="include" /> 和 <see langword="import" /> 元素。
                 如果这是 <see langword="null" />, ，则不解析外部引用。
              </param>
      <returns>
        <see langword="XmlSchema" /> 添加到架构集合。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  架构不是有效的架构。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
              将包含在架构添加 <see cref="T:System.Xml.XmlReader" /> 到架构集合。
               指定 <see cref="T:System.Xml.XmlResolver" /> 用于解析任何外部资源。
            </summary>
      <param name="ns">
                与架构关联的命名空间 URI。
                 对于 XML 架构，这通常是 <see langword="targetNamespace" />。
              </param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 包含要添加的架构。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于解析命名空间中引用 <see langword="include" /> 和 <see langword="import" /> 元素或 <see langword="x-schema" /> 属性 （XDR 架构）。
                 如果这是 <see langword="null" />, ，则不解析外部引用。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到架构集合中; <see langword="null" /> 如果所添加的架构是 XDR 架构或架构中有编译错误。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  架构不是有效的架构。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>
              获取一个值，该值指示具有指定命名空间的架构是否在集合中。
            </summary>
      <param name="ns">
                与架构关联的命名空间 URI。
                 对于 XML 架构，这通常是目标命名空间。
              </param>
      <returns>
        <see langword="true" /> 如果具有指定的命名空间的架构集合中的否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>
              获取一个值，该值指示是否 <see langword="targetNamespace" /> 指定 <see cref="T:System.Xml.Schema.XmlSchema" /> 在集合中。
            </summary>
      <param name="schema">
        <see langword="XmlSchema" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果集合中具有相同的架构 <see langword="targetNamespace" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
              将所有复制 <see langword="XmlSchema" /> 从给定索引处开始的给定数组到此集合的对象。
            </summary>
      <param name="array">
                要向其复制对象的数组。
              </param>
      <param name="index">
                中的索引 <paramref name="array" /> 开始复制的位置。
              </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>
              获取在该集合中定义的命名空间的数目。
            </summary>
      <returns>
              在该集合中定义的命名空间的数目。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>
              为通过架构集合的“用于每个”样式迭代提供支持。
            </summary>
      <returns>
              循环访问当前集合中所有架构的枚举。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchema" /> 与给定的命名空间 URI 相关联。
            </summary>
      <param name="ns">
                与要返回的架构关联的命名空间 URI。
                 这通常是 <see langword="targetNamespace" /> 的架构。
              </param>
      <returns>
        <see langword="XmlSchema" /> 与命名空间 URI; 关联 <see langword="null" /> 如果没有加载与给定的命名空间相关联的架构或命名空间是与 XDR 架构相关联。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>
              获取默认 <see langword="XmlNameTable" /> 使用 <see langword="XmlSchemaCollection" /> 加载新架构时。
            </summary>
      <returns>
              一个 <see langword="XmlNameTable" />。
            </returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>
              设置事件处理程序，以接收 XDR 和 XML 架构验证错误的相关信息。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />。
            </summary>
      <param name="array">
                要向其复制对象的数组。
              </param>
      <param name="index">
                中的索引 <paramref name="array" /> 开始复制的位置。
              </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />。
            </summary>
      <returns>
              返回集合中的项的计数。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" />。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果集合已同步，否则 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" />。
            </summary>
      <returns>
              返回 <see cref="P:System.Collections.ICollection.SyncRoot" /> 可用于同步对集合的访问的对象。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />。
            </summary>
      <returns>
              返回 <see cref="T:System.Collections.IEnumerator" /> 找不到。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>
              支持对集合执行简单迭代。
               此类不能被继承。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>
              获取当前 <see cref="T:System.Xml.Schema.XmlSchema" /> 集合中。
            </summary>
      <returns>
              当前 <see langword="XmlSchema" /> 集合中。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个架构。
            </summary>
      <returns>
        <see langword="true" /> 如果移动已成功; <see langword="false" /> 如果枚举器已通过集合的末尾。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />。
            </summary>
      <returns>
              返回当前节点。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />。
            </summary>
      <returns>
              返回下一个节点。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>
              提供有关的架构编译选项 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 此类不能被继承的类。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 应检查唯一粒子归属 (UPA) 冲突。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 应检查唯一粒子归属 (UPA) 冲突; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>
              表示 <see langword="complexContent" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类表示复杂类型的复杂内容模型。
               它包含对仅具有元素或混合内容的复杂类型的扩展或限制。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>
              获取或设置内容。
            </summary>
      <returns>
              一种︰ <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 类。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>
              获取或设置确定类型是否具有混合内容模型的信息。
            </summary>
      <returns>
              如果此属性为 <see langword="true" />, ，则允许字符数据出现在复杂类型 （混合内容模型） 的子元素之间。
               默认值为 <see langword="false" />。
            
              可选。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>
              表示 <see langword="extension" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类用于通过扩展而派生的具有复杂内容模型的复杂类型。
               它通过添加属性或元素扩展复杂类型。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件的复杂内容模型。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件的复杂内容模型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>
              获取复杂内容的属性集合。
               包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 元素。
            </summary>
      <returns>
              复杂内容的属性集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>
              获取或设置复杂类型（该类型由它进行扩展而派生）的名称。
            </summary>
      <returns>
              复杂类型（该类型由它进行扩展而派生）的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>
              获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </summary>
      <returns>
              其中一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>
              表示 <see langword="restriction" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类用于具有由限制派生出的复杂内容模型的复杂类型。
               它将复杂类型的内容限制为继承的复杂类型的子集。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件的复杂内容模型。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件的复杂内容模型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>
              获取复杂类型的属性集合。
               包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 元素。
            </summary>
      <returns>
              复杂类型的属性集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>
              获取或设置复杂类型（该类型通过它进行限制而派生）的名称。
            </summary>
      <returns>
              复杂类型（该类型通过它进行限制而派生）的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>
              获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </summary>
      <returns>
              其中一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>
              表示 <see langword="complexType" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类定义一个复杂类型，它确定属性集和元素的内容。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>
              获取或设置的值为 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 复杂类型的组件。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 复杂类型的组件。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>
              获取复杂类型的属性集合。
            </summary>
      <returns>
              包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 类。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>
              获取该复杂类型及其基类型的所有已编译属性的集合。
            </summary>
      <returns>
              来自该复杂类型及其基类型的所有属性的集合。
               编译后值的 <see langword="AttributeUses" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>
              获取有关的编译后值 <see langword="anyAttribute" /> 以及该复杂类型及其基类型。
            </summary>
      <returns>
              编译后值的 <see langword="anyAttribute" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>
              获取或设置 <see langword="block" /> 属性。
            </summary>
      <returns>
        <see langword="block" /> 特性阻止在指定的派生类型中使用复杂类型。
               默认值为 <see langword="XmlSchemaDerivationMethod.None" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>
              在已将类型编译为架构验证后信息集 (infoset) 之后获取值。
               此值指示如何强制类型时 <see langword="xsi:type" /> 实例文档中使用。
            </summary>
      <returns>
              架构验证后信息 infoset 值。
               默认值是 <see langword="BlockDefault" /> 值上 <see langword="schema" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>
              获取或设置编译后 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> 此复杂类型。
            </summary>
      <returns>
              内容模型类型之一的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 类。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>
              获取复杂类型的内容模型，它保存编译后值。
            </summary>
      <returns>
              复杂类型的内容模型的编译后值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>
              获取包含的编译后值的粒子 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 粒子。
            </summary>
      <returns>
              内容类型的微粒。
               编译后值的 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 粒子。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>
              获取或设置确定的信息 <see langword="complexType" /> 元素可在实例文档中。
            </summary>
      <returns>
              如果 <see langword="true" />, ，元素不能使用此 <see langword="complexType" /> 直接元素，并且必须使用派生自该复杂类型 <see langword="complexType" /> 元素。
               默认值为 <see langword="false" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>
              获取或设置确定复杂类型是否具有混合内容模型（内容中的标记）的相关信息。
            </summary>
      <returns>
        <see langword="true" />, 如果字符数据可能出现这种复杂类型; 的子元素之间否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>
              获取或设置作为之一的合成程序类型 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </summary>
      <returns>
              合成程序类型。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>
              架构内容一个抽象类。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaContent" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>
              指定的顺序和类型的子元素的结构。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>
              获取或设置类型的内容。
            </summary>
      <returns>
              提供内容的类型。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>
              提供有关的验证模式的信息 <see langword="any" /> 和 <see langword="anyAttribute" /> 元素替换。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>
              如果找到关联的架构，则将验证文档项。
               否则，将不引发任何错误。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>
              不验证文档项目。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>
              文档项必须包含格式正确的 XML 且未通过架构验证。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>
              架构处理器必须找到与要验证文档项的指定命名空间关联的架构。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>
              复杂类型的内容模型的枚举。
               此项表示的架构验证信息集 (infoset) 中的内容。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>
              仅限元素的内容。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>
              空的内容。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>
              混合的内容。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>
              纯文本内容。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 类是抽象类，用于将 XML 架构定义语言 (XSD) 类型映射到公共语言运行时 (CLR) 类型。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>
              将指定的值，其类型一种有效的公共语言运行时 (CLR) 表示形式的 XML 架构类型由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, ，为指定的 CLR 类型。
            </summary>
      <param name="value">
                要转换为指定类型的输入的值。
              </param>
      <param name="targetType">
                要转换的输入的值的目标类型。
              </param>
      <returns>
              已转换的输入的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  表示的类型 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />   不支持从指定为指定的类型的值类型的转换。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              将指定的值，其类型一种有效的公共语言运行时 (CLR) 表示形式的 XML 架构类型由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, ，使用指定的 CLR 类型到 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 如果 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> xs: qname 类型派生自它的表示。
            </summary>
      <param name="value">
                要转换为指定类型的输入的值。
              </param>
      <param name="targetType">
                要转换的输入的值的目标类型。
              </param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 用于解析命名空间前缀。
                 这仅时使用如果 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />  xs: qname 类型派生自它的表示。
              </param>
      <returns>
              已转换的输入的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  表示的类型 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />   不支持从指定为指定的类型的值类型的转换。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> 方法始终返回 <see langword="false" />。
            </summary>
      <param name="datatype">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。
              </param>
      <returns>
              始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>
              当在派生类中重写，便会验证 <see langword="string" /> 指定根据内置或用户定义的简单类型。
            </summary>
      <param name="s">
        <see langword="string" /> 来根据简单类型进行验证。
              </param>
      <param name="nameTable">
        <see cref="T:System.Xml.XmlNameTable" /> 用于进行分析时的原子化 <see langword="string" /> 如果此 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 对象都表示 xs: ncname 类型。
              </param>
      <param name="nsmgr">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象分析时要使用 <see langword="string" /> 如果此 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 对象都表示 xs: qname 类型。
              </param>
      <returns>
        <see cref="T:System.Object" /> ，可以将安全地强制转换为返回类型 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> 属性。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  输入的值不是这种 W3C XML 架构类型的有效实例。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  要分析的值不能为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>
              当在派生类中重写时获取的类型 <see langword="string" /> 指定在万维网联合会 (W3C) XML 1.0 规范。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlTokenizedType" /> 值 <see langword="string" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 简单类型值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlTypeCode" /> 简单类型值。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>
              当在派生类中重写时获取该项的公共语言运行时 (CLR) 类型。
            </summary>
      <returns>
              项的公共语言运行时 (CLR) 类型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 简单类型值。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 简单类型值。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>
              指定类型的 W3C XML 架构数据类型不同。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>
              W3C XML 架构原子类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>
              W3C XML 架构列表类型。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>
              W3C XML 架构联合类型。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>
              提供了阻止派生的不同方法。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <see langword="#all" />。
               是指所有派生方法。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>
              重写默认派生方法，以允许所有派生。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>
              指的是通过进行派生 <see langword="Extension" />。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>
              指的是通过进行派生 <see langword="List" />。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>
              接受默认派生方法。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>
              指的是通过进行派生 <see langword="Restriction" />。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>
              指的是通过进行派生 <see langword="Substitution" />。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>
              指的是通过进行派生 <see langword="Union" />。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>
              表示 <see langword="documentation" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类指定要读取或使用的中人们信息 <see langword="annotation" />。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>
              获取或设置 <see langword="xml:lang" /> 属性。
               这作为在内容中使用的语言的指示器。
            </summary>
      <returns>
        <see langword="xml:lang" /> 属性。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>
              获取或设置一个数组 <see langword="XmlNodes" /> ，它表示文档子节点。
            </summary>
      <returns>
              表示文档子节点的数组。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>
              获取或设置信息的统一资源标识符 (URI) 源。
            </summary>
      <returns>
              URI 引用。
               默认值为 <see langword="String.Empty" />。
            
              可选。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>
              表示 <see langword="element" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类是所有微粒类型的基类，用于描述 XML 文档中的元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>
              获取或设置 <see langword="Block" /> 派生。
            </summary>
      <returns>
              用于阻止类型派生的属性。
               默认值是 <see langword="XmlSchemaDerivationMethod.None" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>
              获取的编译后值 <see langword="Block" /> 属性。
            </summary>
      <returns>
              编译后值的 <see langword="Block" /> 属性。
               默认值是 <see langword="BlockDefault" /> 值上 <see langword="schema" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>
              获取对元素的约束的集合。
            </summary>
      <returns>
              约束的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>
              获取或设置元素的默认值，如果其内容是简单类型或元素的内容是 <see langword="textOnly" />。
            </summary>
      <returns>
              元素的默认值。
               默认为空引用。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象，表示该元素的类型基于 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> 元素的值。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>
              获取一个公共语言运行时 (CLR) 对象基于 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 的元素，它保存编译后值的 <see langword="ElementType" /> 属性。
            </summary>
      <returns>
              公共语言运行库对象。
               编译后值的 <see langword="ElementType" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>
              获取或设置 <see langword="Final" /> 属性以指示是否允许没有进一步派生。
            </summary>
      <returns>
        <see langword="Final" /> 属性。
               默认值为 <see langword="XmlSchemaDerivationMethod.None" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>
              获取的编译后值 <see langword="Final" /> 属性。
            </summary>
      <returns>
              编译后值的 <see langword="Final" /> 属性。
               默认值是 <see langword="FinalDefault" /> 值上 <see langword="schema" /> 元素。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>
              获取或设置固定值。
            </summary>
      <returns>
              预设的且不可更改的固定值。
               默认为空引用。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>
              获取或设置元素的窗体。
            </summary>
      <returns>
              该元素的形式。
               默认值是 <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> 值。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>
              获取或设置信息以指示是否可在实例文档中使用该元素。
            </summary>
      <returns>
              如果 <see langword="true" />, ，则元素不能出现在实例文档。
               默认值为 <see langword="false" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>
              获取或设置信息，该值指示如果 <see langword="xsi:nil" /> 实例数据中可能会发生。
               指示是否可以为元素赋予显式 Nil 值。
            </summary>
      <returns>
              如果 nillable 为 <see langword="true" />, ，这样，该元素具有实例 <see langword="nil" /> 属性设置为 <see langword="true" />。
              <see langword="nil" /> 属性定义的 XML 架构命名空间的一部分实例。
               默认值为 <see langword="false" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>
              获取或设置元素的名称。
            </summary>
      <returns>
              元素的名称。
               默认值为 <see langword="String.Empty" />。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>
              获取给定元素的实际限定名称。
            </summary>
      <returns>
              元素的限定名。
               编译后值的 <see langword="QualifiedName" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>
              获取或设置在该架构（或指定的命名空间指示的另一个架构）中声明的元素的引用名称。
            </summary>
      <returns>
              元素的引用名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>
              获取或设置元素类型。
               这可以是复杂类型，也可以是简单类型。
            </summary>
      <returns>
              元素的类型。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>
              获取或设置在该架构或由指定的命名空间指示的其他架构中定义的内置数据类型的名称。
            </summary>
      <returns>
              内置数据类型的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>
              获取或设置由该元素替换的元素的名称。
            </summary>
      <returns>
              由该元素替换的元素的限定名称。
            
              可选。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>
              表示 <see langword="enumeration" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构方面。
               此类指定 simpleType 元素的有效值列表。
               声明包含在 <see langword="restriction" /> 声明。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>
              返回架构异常有关的详细的信息。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 类，具有指定的异常消息。
            </summary>
      <param name="message">
                一个 <see langword="string" /> 错误条件的说明。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              构造一个新 <see langword="XmlSchemaException" /> 对象与给定 <see langword="SerializationInfo" /> 和 <see langword="StreamingContext" /> 包含的所有属性的信息 <see langword="XmlSchemaException" />。
            </summary>
      <param name="info">
                SerializationInfo。
              </param>
      <param name="context">
                StreamingContext。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 使用异常消息和原始 <see cref="T:System.Exception" /> 导致此异常指定的对象。
            </summary>
      <param name="message">
                一个 <see langword="string" /> 错误条件的说明。
              </param>
      <param name="innerException">
                导致此异常的原始 T:System.Exception 对象。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 用指定的异常消息和原始 <see cref="T:System.Exception" /> 对象、 行号和导致此异常指定的 xml 的行位置。
            </summary>
      <param name="message">
                一个 <see langword="string" /> 错误条件的说明。
              </param>
      <param name="innerException">
                导致此异常的原始 T:System.Exception 对象。
              </param>
      <param name="lineNumber">
                导致此异常的 XML 行号。
              </param>
      <param name="linePosition">
                导致此异常的 XML 行位置。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              流式处理所有 <see langword="XmlSchemaException" /> 属性存储到 <see langword="SerializationInfo" /> 类给定 <see langword="StreamingContext" />。
            </summary>
      <param name="info">
        <see langword="SerializationInfo" />。
              </param>
      <param name="context">
        <see langword="StreamingContext" /> 信息。
              </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>
              获取指示出现了错误的行号。
            </summary>
      <returns>
              指示发生错误的行号。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>
              获取指示出现了错误的行位置。
            </summary>
      <returns>
              指示发生错误的行位置。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>
              获取此异常的错误条件的说明。
            </summary>
      <returns>
              此异常的错误条件的说明。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>
        <see langword="XmlSchemaObject" /> 生成 <see langword="XmlSchemaException" />。
            </summary>
      <returns>
              有效的对象实例表示的结构验证错误在 XML 架构对象模型 (SOM)。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>
              获取导致异常的架构的统一资源标识符 (URI) 位置。
            </summary>
      <returns>
              导致异常的架构 URI 位置。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>
              一个抽象类。
               提供有关包含的架构信息。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>
              获取或设置字符串 id。
            </summary>
      <returns>
              字符串 id。
               默认值为 <see langword="String.Empty" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>
              获取或设置 <see langword="XmlSchema" /> 引用架构。
            </summary>
      <returns>
        <see langword="XmlSchema" /> 引用架构。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>
              获取或设置通知架构处理器架构以物理方式所在的架构的统一资源标识符 (URI) 位置。
            </summary>
      <returns>
              URI 的架构位置。
            
              对于导入的架构是可选的。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>
              获取和设置不属于架构目标命名空间的限定的属性。
            </summary>
      <returns>
              属于另一个目标命名空间的限定的属性。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>
              抽象类，用于在由限制派生简单类型时使用的所有方面。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>
              获取或设置用于指示此方面固定的信息。
            </summary>
      <returns>
              如果 <see langword="true" />, ，值是固定的; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            
              可选。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>
              获取或设置 <see langword="value" /> 方面的属性。
            </summary>
      <returns>
              值属性。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>
              指示是否需要用命名空间前缀限定特性或元素。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>
              在架构中未指定元素和属性的窗体。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>
              必须用命名空间前缀限定元素和属性。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>
              不需要用命名空间前缀限定元素和属性。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>
              指定可对 simpleType 元素的 fraction 值为输入的数字个数的限制条件。
               FractionDigits 的值必须是正整数。
               表示 World Wide Web 联合会 (W3C) <see langword="fractionDigits" /> 方面。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>
              表示 <see langword="group" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类定义上的组 <see langword="schema" /> 从复杂类型引用的级别。
               它将若干元素声明归为一组，以便将它们当作一个组并入复杂类型定义。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>
              获取或设置架构组的名称。
            </summary>
      <returns>
              架构组的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>
              获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </summary>
      <returns>
              其中一个 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>
              获取架构组的限定名称。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" /> 对象，表示架构组的限定的名称。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
              抽象类的 <see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupBase.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroupBase" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>
              此集合用于将新元素添加到复合器。
            </summary>
      <returns>
              一个 <see langword="XmlSchemaObjectCollection" />。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>
              表示 <see langword="group" /> 具有元素 <see langword="ref" /> 由 World Wide Web 联合会 (W3C) 指定的 XML 架构的属性。
               在引用的复杂类型内使用此类 <see langword="group" /> 在定义 <see langword="schema" /> 级别。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>
              获取其中一个 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类，它保存编译后值的 <see langword="Particle" /> 属性。
            </summary>
      <returns>
              编译后值的 <see langword="Particle" /> 属性，这是其中之一的 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />, ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>
              获取或设置在此架构（或指定命名空间指示的其他架构）中定义的组的名称。
            </summary>
      <returns>
              在此架构中定义的组的名称。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>
              标识约束的类︰ <see langword="key" />, ，<see langword="keyref" />, ，和 <see langword="unique" /> 元素。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>
              获取作为子级 XML 路径语言 (XPath) 表达式选择器应用于字段的集合。
            </summary>
      <returns>
              字段的集合。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>
              获取或设置标识约束的名称。
            </summary>
      <returns>
              标识约束的名称。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>
              获取标识约束，它保存编译后值的限定的名 <see langword="QualifiedName" /> 属性。
            </summary>
      <returns>
              编译后值的 <see langword="QualifiedName" /> 属性。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>
              获取或设置 XPath 表达式 <see langword="selector" /> 元素。
            </summary>
      <returns>
              XPath 表达式 <see langword="selector" /> 元素。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>
              表示 <see langword="import" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类用于从其他架构导入架构组件。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaImport" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>
              获取或设置 <see langword="annotation" /> 属性。
            </summary>
      <returns>
              批注。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>
              获取或设置作为统一资源标识符 (URI) 引用的已导入架构的目标命名空间。
            </summary>
      <returns>
              作为 URI 引用的已导入架构的目标命名空间。
            
              可选。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>
              表示 <see langword="include" /> 由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
               此类用于包括来自外部架构的声明和定义。
               然后，包括的声明和定义可用于包含架构中的处理。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>
              获取或设置 <see langword="annotation" /> 属性。
            </summary>
      <returns>
              批注。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>
              会影响由推断的匹配项和类型信息 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类中的 XML 文档元素和属性。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>
              指示应推导特定元素或属性的一个限制性较弱的架构声明。
            </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>
              指示应推导特定元素或属性的一个限制性更强的架构声明。
            </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>
              从 XML 文档中推理出 XML 架构定义语言 (XSD) 架构。
              <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类不能被继承。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>
              从推理出 XML 架构定义语言 (XSD) 架构中包含的 XML 文档 <see cref="T:System.Xml.XmlReader" /> 指定对象。
            </summary>
      <param name="instanceDocument">
        <see cref="T:System.Xml.XmlReader" /> 对象，其中包含 XML 文档推断的架构。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，其中包含推断出的架构。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  XML 文档格式不正确。
                </exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 对象不定位在根节点上或者在元素上。
                   在架构推断过程就会出错。
                </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>
              从推理出 XML 架构定义语言 (XSD) 架构中包含的 XML 文档 <see cref="T:System.Xml.XmlReader" /> 对象指定，并且精炼推理出的架构中的现有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 用相同目标命名空间指定的对象。
            </summary>
      <param name="instanceDocument">
        <see cref="T:System.Xml.XmlReader" /> 对象，其中包含 XML 文档推断的架构。
              </param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，其中包含用于精炼推理出的架构的现有架构。
              </param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，其中包含推断出的架构。
            </returns>
      <exception cref="T:System.Xml.XmlException">
                  XML 文档格式不正确。
                </exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 对象不定位在根节点上或者在元素上。
                   在架构推断过程就会出错。
                </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，该值影响从 XML 文档推断的架构匹配项声明。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>
              获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，该值影响从 XML 文档推理出的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。
            </returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>
              返回有关 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类在从 XML 文档推断架构时所遇错误的信息。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类，具有指定的错误消息。
            </summary>
      <param name="message">
                错误说明。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的指定对象，包含的所有属性 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 用指定的错误消息和原始 <see cref="T:System.Exception" /> 导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 指定。
            </summary>
      <param name="message">
                错误说明。
              </param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 对象，它包含导致原始异常 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 指定类，并显示错误消息，原始 <see cref="T:System.Exception" /> 导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 指定，和行号和行中的位置的错误指定的 XML 文档。
            </summary>
      <param name="message">
                错误说明。
              </param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 对象，它包含导致原始异常 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。
              </param>
      <param name="lineNumber">
                导致的 XML 文档中的行号 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。
              </param>
      <param name="linePosition">
                导致的 XML 文档中的行位置 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。
              </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              流式处理所有 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 对象属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象指定用于 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 指定对象。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。
              </param>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>
              表示提供快速、非缓存、只进方法的写入器，该方法生成包含 XML 数据（这些数据符合 W3C 可扩展标记语言 (XML) 1.0 和“XML 命名空间”建议）的流或文件。
            
              从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlWriter" /> 类。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
              创建的一个实例 <see langword="XmlTextWriter" /> 类使用指定 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="w">
                要向其中进行写入的 <see langword="TextWriter" />。
                 假定 <see langword="TextWriter" /> 已设置为正确的编码。
              </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
              创建的一个实例 <see langword="XmlTextWriter" /> 类使用指定的流和编码。
            </summary>
      <param name="w">
                要对其写入的流。
              </param>
      <param name="encoding">
                要生成的编码。
                 如果编码为 <see langword="null" /> 它写出为 utf-8 流并省略中的编码属性 <see langword="ProcessingInstruction" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  不支持的编码或不能写入的流。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>
              创建的一个实例 <see cref="T:System.Xml.XmlTextWriter" /> 类使用指定的文件。
            </summary>
      <param name="filename">
                要写入的文件名。
                 如果该文件存在，它将截断该文件并用新内容将其覆盖。
              </param>
      <param name="encoding">
                要生成的编码。
                 如果编码为 <see langword="null" /> 它写出为 utf-8，并忽略中的编码属性 <see langword="ProcessingInstruction" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  不支持的编码;文件名为空、 仅包含空白，或包含一个或多个无效字符。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  拒绝访问。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  文件名是 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  找不到要写入到的目录。
                </exception>
      <exception cref="T:System.IO.IOException">
                  文件名包含文件名、 目录名或卷标签语法不正确或无效的语法。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有所要求的权限。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>
              获取基础流对象。
            </summary>
      <returns>
              到的流 <see langword="XmlTextWriter" /> 是书写或 <see langword="null" /> 如果 <see langword="XmlTextWriter" /> 使用构造 <see cref="T:System.IO.TextWriter" /> 不会继承从 <see cref="T:System.IO.StreamWriter" /> 类。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>
              关闭此流和基础流。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>
              将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
            </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>
              指示如何对输出进行格式设置。
            </summary>
      <returns>
        <see cref="T:System.Xml.Formatting" /> 值之一。
               默认值是 <see langword="Formatting.None" /> （无特殊格式）。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>
              获取或设置要为层次结构中每个级别写入多少 Indentchar 时 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 设置为 <see langword="Formatting.Indented" />。
            </summary>
      <returns>
              数 <see langword="IndentChars" /> 为每个级别。
               默认值为 2。
            </returns>
      <exception cref="T:System.ArgumentException">
                  将此属性设置为负值。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>
              获取或设置用于缩进时用于转换的字符 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 设置为 <see langword="Formatting.Indented" />。
            </summary>
      <returns>
              用于缩进的字符。
               默认为空格。
            
                <see langword="XmlTextWriter" /> 允许您将此属性设置为任何字符。
                 为了确保 XML 有效，你必须指定有效的空格字符 0x9、0x10、0x13 或 0x20。
              </returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>
              返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。
            </summary>
      <param name="ns">
                要查找其前缀的命名空间 URI。
              </param>
      <returns>
              匹配的前缀。
               或者 <see langword="null" /> 如果没有匹配的命名空间在当前作用域中找到的 URI。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>
              获取或设置一个值，该值指示是否进行命名空间支持。
            </summary>
      <returns>
        <see langword="true" /> 若要支持的命名空间;否则为 <see langword="false" />。
            
              默认值为 <see langword="true" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  您可以只更改此属性在 <see langword="WriteState.Start" /> 状态。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>
              获取或设置要用于引用属性值的字符。
            </summary>
      <returns>
              用于引用属性值的字符。
               这必须是单引号 (&amp;#39;) 或双引号 (&amp;#34;)。
               默认为双引号。
            </returns>
      <exception cref="T:System.ArgumentException">
                  将此属性设置为以外的任何一个单引号或双引号的报价。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将指定的二进制字节编码为 Base64 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的开始位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将指定的二进制字节编码为 BinHex 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的起始位置的位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>
              写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。
            </summary>
      <param name="text">
                要放置在 CDATA 块中的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致格式不正确的 XML 文档。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>
              为指定的 Unicode 字符值强制生成字符实体。
            </summary>
      <param name="ch">
                为其生成字符实体的 Unicode 字符。
              </param>
      <exception cref="T:System.ArgumentException">
                  在代理项对字符范围的字符是 <see langword="0xd800" /> - <see langword="0xdfff" />; 或文本将导致格式不正确的 XML 文档。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
              以每次一个缓冲区的方式写入文本。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中指示要写入文本的起始位置的位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                
                  - 或 -
                
                  缓冲区长度减 <paramref name="index" /> 是小于 <paramref name="count" />; 代理项对字符中的调用结果被拆分或写入无效的代理项对。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>
              写出包含指定文本的注释 &lt;!--...--&gt;。
            </summary>
      <param name="text">
                要放在注释内的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致格式不正确的 XML 文档 
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
              写出具有指定名称和可选属性的 DOCTYPE 声明。
            </summary>
      <param name="name">
                DOCTYPE 的名称。
                 它必须是非空的。
              </param>
      <param name="pubid">
                如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" /> 和 <paramref name="sysid" /> 替换给定的参数的值。
              </param>
      <param name="sysid">
                如果 <paramref name="pubid" /> 为 null 和 <paramref name="sysid" /> 为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" /> 将替换为此参数的值。
              </param>
      <param name="subset">
                如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  Prolog 外部上 （在根元素中） 调用此方法。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />
                
                  - 或 - 
                
                  值为 <paramref name="name" /> 将导致无效的 XML。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>
              关闭前一个 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 调用。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>
              关闭任何打开的元素或特性并将写入器重新设置为起始状态。
            </summary>
      <exception cref="T:System.ArgumentException">
                  XML 文档是无效的。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>
              关闭一个元素并弹出相应的命名空间范围。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>
              写出实体引用作为 <see langword="&amp;name;" />。
            </summary>
      <param name="name">
                实体引用的名称。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致格式不正确的 XML 文档或 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>
              关闭一个元素并弹出相应的命名空间范围。
            </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>
              写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
            </summary>
      <param name="name">
                要写入的名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 XML 名称;或 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>
              写出指定的名称，确保它一个有效 <see langword="NmToken" /> 根据 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)。
            </summary>
      <param name="name">
                要写入的名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效 <see langword="NmToken" />; 或 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
              写出在名称和文本之间带有空格的处理指令，如下︰ &lt;？ 命名 text？ &gt;。
            </summary>
      <param name="name">
                处理指令的名称。
              </param>
      <param name="text">
                要包括在处理指令中的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致格式不正确的 XML 文档。
                
                  <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                
                  此方法用于创建 XML 声明后的 <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> 已调用。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
              写出命名空间限定的名称。
               此方法查找位于给定命名空间范围内的前缀。
            </summary>
      <param name="localName">
                要写入的本地名称。
              </param>
      <param name="ns">
                与该名称关联的命名空间 URI。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                
                  <paramref name="localName" /> 不是 W3C 命名空间规范的有效名称。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
              从字符缓冲区手动写入原始标记。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中的位置，指示要写入文本的起始位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                
                  - 或 -
                
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>
              从字符串手动写入原始标记。
            </summary>
      <param name="data">
                包含要写入的文本的字符串。
              </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
              写入属性的开头。
            </summary>
      <param name="prefix">
        <see langword="Namespace" /> 该属性的前缀。
              </param>
      <param name="localName">
        <see langword="LocalName" /> 属性。
              </param>
      <param name="ns">
        <see langword="NamespaceURI" /> 属性 
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>
              写入版本为“1.0”的 XML 声明。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  这不是调用构造函数之后的第一个写入方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>
              写入版本为“1.0”的 XML 声明和独立的属性。
            </summary>
      <param name="standalone">
                如果 <see langword="true" />, ，它将写入"独立 = yes"; 如果 <see langword="false" />, ，它将写入"独立 = no"。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  这不是调用构造函数之后的第一个写入方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
              写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
            </summary>
      <param name="prefix">
                元素的命名空间前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
                 如果此命名空间已在范围中并具有关联的前缀，则写入器还自动写入该前缀。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>
              获取写入器的状态。
            </summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>
              写入给定的文本内容。
            </summary>
      <param name="text">
                要写入的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  文本字符串包含无效的代理项对。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
              为代理项字符对生成并写入代理项字符实体。
            </summary>
      <param name="lowChar">
                低代理项。
                 这必须是介于 <see langword="0xDC00" /> 和 <see langword="0xDFFF" />。
              </param>
      <param name="highChar">
                高代理项。
                 这必须是介于 <see langword="0xD800" /> 和 <see langword="0xDBFF" />。
              </param>
      <exception cref="T:System.Exception">
                  传递了无效的代理项字符对。
                </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>
              写出给定的空白区域。
            </summary>
      <param name="ws">
                空格字符的字符串。
              </param>
      <exception cref="T:System.ArgumentException">
                  该字符串包含非空白字符。
                </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>
              获取当前 <see langword="xml:lang" /> 范围。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 或 <see langword="null" /> 是否存在任何 <see langword="xml:lang" /> 当前作用域中。
            </returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>
              获取 <see cref="T:System.Xml.XmlSpace" /> 表示当前 <see langword="xml:space" /> 作用域。
            </summary>
      <returns>
        <see langword="XmlSpace" /> 表示当前 <see langword="xml:space" /> 作用域。
            
                      值 
                    
                      含义 
                    
                      无 
                    
                      这是默认值，如果没有 <see langword="xml:space" /> 存在的作用域。
                    
                      默认 
                    
                      当前作用域是 <see langword="xml:space" />="default"。
                    
                      保留 
                    
                      当前作用域是 <see langword="xml:space" />="preserve"。
                    </returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>
              表示字符串的 XML 类型。
               这允许要被视为一个特定的 XML 类型，例如 CDATA 部分类型的字符串。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>
              CDATA 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>
              实体类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>
              实体类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>
              枚举类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>
              ID 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>
              IDREF 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>
              IDREFS 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>
              NCName 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>
              NMTOKEN 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>
              NMTOKENS 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>
              无类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>
              NOTATION 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>
              QName 类型。
            </summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>
              解析由统一资源标识符 (URI) 命名的外部 XML 资源。
            </summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlUrlResolver" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>
              获取或设置基础 <see cref="T:System.Net.WebRequest" /> 对象的缓存策略。
            </summary>
      <returns>
              基础 Web 请求的缓存策略。
            </returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>
              设置用于对 Web 请求进行身份验证的凭据。
            </summary>
      <returns>
              用于对 Web 请求进行身份验证的凭据。
               如果未设置该属性，则该值默认为 <see langword="null" />；即 <see langword="XmlUrlResolver" /> 没有用户凭据。
            </returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当前未使用。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                 当前实现只返回 <see cref="T:System.IO.Stream" /> 对象。
              </param>
      <returns>
              流对象；如果指定了流以外的类型，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see langword="Stream" /> 类型。
                </exception>
      <exception cref="T:System.UriFormatException">
                  指定的 URI 不是一个绝对 URI。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Exception">
                  没有运行时错误 （例如，中断的服务器连接）。
                </exception>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>
              将 URI 异步映射到包含实际资源的对象。
            </summary>
      <param name="absoluteUri">
                从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。
              </param>
      <param name="role">
                当前未使用。
              </param>
      <param name="ofObjectToReturn">
                要返回的对象的类型。
                 当前实现只返回 <see cref="T:System.IO.Stream" /> 对象。
              </param>
      <returns>
              流对象；如果指定了流以外的类型，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>
              获取或设置基础 <see cref="T:System.Net.WebRequest" /> 对象的网络代理。
            </summary>
      <returns>
              用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>
              从基 URI 和相对 URI 解析绝对 URI。
            </summary>
      <param name="baseUri">
                用于解析相对 URI 的基 URI。
              </param>
      <param name="relativeUri">
                要解析的 URI。
                 URI 可以是绝对的或相对的。
                 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。
                 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。
              </param>
      <returns>
              绝对 URI；如果不能解析相对 URI，则为 <see langword="null" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 <see langword="null" /> 或 <paramref name="relativeUri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>
              表示提供文档类型定义 (DTD)、XML 数据简化 (XDR) 架构和 XML 架构定义语言 (XSD) 验证的读取器。
            
              此类已过时。
               从 .NET Framework 2.0 开始，建议你使用 <see cref="T:System.Xml.XmlReaderSettings" /> 类和 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法创建一个验证的 XML 读取器。
            </summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>
              初始化 <see langword="XmlValidatingReader" /> 类的新实例，该类验证从给定的 <see cref="T:System.Xml.XmlReader" /> 返回的内容。
            </summary>
      <param name="reader">
                验证时要从中读取的 <see langword="XmlReader" />。
                 当前实现仅支持 <see cref="T:System.Xml.XmlTextReader" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的读取器不是 <see langword="XmlTextReader" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
              用指定的值初始化 <see langword="XmlValidatingReader" /> 类的新实例。
            </summary>
      <param name="xmlFragment">
                包含要分析的 XML 片段的流。
              </param>
      <param name="fragType">
                XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。
                 这确定片段可以包含的内容（请参见下表）。
              </param>
      <param name="context">
                要在其中分析 XML 片段的 <see cref="T:System.Xml.XmlParserContext" />。
                 这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 <see langword="xml:lang" /> 和 <see langword="xml:space" /> 范围。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是下表中列出的节点类型之一。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
              用指定的值初始化 <see langword="XmlValidatingReader" /> 类的新实例。
            </summary>
      <param name="xmlFragment">
                包含要分析的 XML 片段的字符串。
              </param>
      <param name="fragType">
                XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。
                 这还确定了片段字符串可以包含的内容（请参见下表）。
              </param>
      <param name="context">
                要在其中分析 XML 片段的 <see cref="T:System.Xml.XmlParserContext" />。
                 这包括要使用的 <see cref="T:System.Xml.NameTable" />、编码、命名空间范围、当前 xml:lang 和 xml:space 范围。
              </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是下表中列出的节点类型之一。
                </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>
              获取当前节点上的属性数目。
            </summary>
      <returns>
              当前节点上的属性数目。
               该数目包括默认属性。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>
              获取当前节点的基 URI。
            </summary>
      <returns>
              当前节点的基 URI。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XmlValidatingReader" /> 是否实现二进制内容读取方法。
            </summary>
      <returns>
              如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see cref="T:System.Xml.XmlValidatingReader" /> 类返回 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>
              获取一个值，该值指示此读取器是否可以分析和解析实体。
            </summary>
      <returns>
              如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。
              <see langword="XmlValidatingReader" /> 始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>
              将 <see cref="P:System.Xml.XmlReader.ReadState" /> 更改为“已关闭”。
            </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>
              获取 XML 文档中当前节点的深度。
            </summary>
      <returns>
              XML 文档中当前节点的深度。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>
              获取文档的编码属性。
            </summary>
      <returns>
              编码值。
               如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>
              获取或设置一个值，该值指定读取器处理实体的方式。
            </summary>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 值之一。
               如果未指定 <see langword="EntityHandling" />，则它将默认为 EntityHandling.ExpandEntities。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  指定的值无效。
                </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>
              获取一个值，该值指示读取器是否定位在流结尾。
            </summary>
      <returns>
              如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>
              获取具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性的值。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
               此方法不移动读取器。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>
              获取具有指定名称的属性的值。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>
              获取具有指定索引的属性的值。
            </summary>
      <param name="i">
                属性的索引。
                 索引是从零开始的。
                 （第一个属性的索引为 0。）
              </param>
      <returns>
              指定的属性的值。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>
              获取一个值，该值指示该类是否可返回行信息。
            </summary>
      <returns>
              如果该类可以返回行信息，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>
              获取一个值，该值指示当前节点是否可以具有 String.Empty 以外的 <see cref="P:System.Xml.XmlValidatingReader.Value" />。
            </summary>
      <returns>
              如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>
              获取一个值，该值指示当前节点是否是从文档类型定义 (DTD) 或架构中定义的默认值生成的属性。
            </summary>
      <returns>
              如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />；如果属性值为显式设置的，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>
              获取一个值，该值指示当前节点是否为空元素（例如，&lt;MyElement/&gt;）。
            </summary>
      <returns>
              如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" />），则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>
              获取当前行号。
            </summary>
      <returns>
              当前行号。
               此属性的起始值为 1。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>
              获取当前行位置。
            </summary>
      <returns>
              当前行位置。
               此属性的起始值为 1。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>
              获取当前节点的本地名称。
            </summary>
      <returns>
              移除了前缀的当前节点的名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" /> 为 <see langword="book" />。
            
              对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 String.Empty。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>
              解析当前元素的范围内的命名空间前缀。
            </summary>
      <param name="prefix">
                要解析其命名空间统一资源标识符 (URI) 的前缀。
                 若要匹配默认命名空间，请传递一个空字符串。
              </param>
      <returns>
              前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>
              移动到具有指定索引的属性。
            </summary>
      <param name="i">
                属性的索引。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>
              移动到具有指定名称的属性。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>
              移动到具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。
               如果为 <see langword="false" />，则读取器的位置未改变。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>
              移动到包含当前属性节点的元素。
            </summary>
      <returns>
              如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>
              移动到第一个属性。
            </summary>
      <returns>
              如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>
              移动到下一个属性。
            </summary>
      <returns>
              如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>
              获取当前节点的限定名称。
            </summary>
      <returns>
              当前节点的限定名称。
               例如，对于元素 &lt;bk:book&gt;，<see langword="Name" /> 为 <see langword="bk:book" />。
            
              返回的名称取决于节点的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />。
               下列节点类型返回所列的值。
               所有其他节点类型返回空字符串。
            
                      节点类型 
                    
                      名称 
                    
                      <see langword="Attribute" />
                    
                      属性名。
                    
                      <see langword="DocumentType" />
                    
                      文档类型名称。
                    
                      <see langword="Element" />
                    
                      标记名称。
                    
                      <see langword="EntityReference" />
                    
                      引用的实体的名称。
                    
                      <see langword="ProcessingInstruction" />
                    
                      处理指令的目标。
                    
                      <see langword="XmlDeclaration" />
                    
                      文字字符串 <see langword="xml" />。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>
              获取或设置一个值，该值指示是否进行命名空间支持。
            </summary>
      <returns>
              要进行命名空间支持，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>
              对于读取器定位到的节点，按照万维网联合会 (W3C) 命名空间规范的定义，获取该节点的命名空间统一资源标识符 (URI)。
            </summary>
      <returns>
              当前节点的命名空间 URI；否则为空字符串。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>
              获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取节点内字符串的原子化版本。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>
              获取与当前节点关联的命名空间前缀。
            </summary>
      <returns>
              与当前节点关联的命名空间前缀。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>
              获取用于括起属性节点的值的引号字符。
            </summary>
      <returns>
              用于括起属性节点的值的引号字符（" 或 '）。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>
              从流中读取下一个节点。
            </summary>
      <returns>
              如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>
              将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。
            </summary>
      <returns>
              如果有可返回的节点，则为 <see langword="true" />。
            
              如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。
            
              如果是空属性（如 misc=""），则返回 <see langword="true" />，同时返回值为 String.Empty 的单个节点。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 Base64 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 BinHex 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  不支持的当前节点上。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 实现不支持此方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 Base64 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取元素并对 BinHex 内容进行解码。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 <see langword="null" />。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
                 此方法返回复制的实际字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当前节点不是元素节点。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 实现不支持此方法。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  该元素包含混合内容。
                </exception>
      <exception cref="T:System.FormatException">
                  无法将内容转换为请求的类型。
                </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>
              获取用于构造此 <see langword="XmlValidatingReader" /> 的 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <returns>
              构造函数中指定的 <see langword="XmlReader" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>
              获取读取器的状态。
            </summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>
              将元素或文本节点的内容读取为一个字符串。
            </summary>
      <returns>
              该元素或文本节点的内容。
               如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。
            
                文本节点可以是元素或属性文本节点。
              </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>
              获取指定 XML 架构定义语言 (XSD) 类型的公共语言运行时类型。
            </summary>
      <returns>
              指定 XML 架构类型的公共语言运行时类型。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>
              解析 <see langword="EntityReference" /> 节点的实体引用。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  读取器未定位在 <see langword="EntityReference" /> 节点。
                </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>
              获取一个用于验证的 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />。
            </summary>
      <returns>
              用于验证的 <see langword="XmlSchemaCollection" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>
              获取架构类型对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，这取决于节点值是内置 XML 架构定义语言 (XSD) 类型还是用户定义的 simpleType 或 complexType；如果当前节点没有架构类型，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>
              设置事件处理程序以接收有关文档类型定义 (DTD)、XML 数据简化 (XDR) 架构和 XML 架构定义语言 (XSD) 架构验证错误的信息。
            </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>
              获取或设置一个值，该值指示要执行的验证的类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.ValidationType" /> 值之一。
               如果未设置此属性，则它默认为 ValidationType.Auto。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  在调用读取后设置的属性。
                </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>
              获取当前节点的文本值。
            </summary>
      <returns>
              返回的值取决于节点的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />。
               下表列出具有要返回的值的节点类型。
               所有其他节点类型返回 String.Empty。
            
                      节点类型 
                    
                      值 
                    
                      <see langword="Attribute" />
                    
                      属性的值。
                    
                      <see langword="CDATA" />
                    
                      CDATA 节的内容。
                    
                      <see langword="Comment" />
                    
                      注释的内容。
                    
                      <see langword="DocumentType" />
                    
                      内部子集。
                    
                      <see langword="ProcessingInstruction" />
                    
                      全部内容（不包括指令目标）。
                    
                      <see langword="SignificantWhitespace" />
                    
                      混合内容模型中标记之间的空白区域。
                    
                      <see langword="Text" />
                    
                      文本节点的内容。
                    
                      <see langword="Whitespace" />
                    
                      标记之间的空白。
                    
                      <see langword="XmlDeclaration" />
                    
                      声明的内容。
                    </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>
              获取当前 <see langword="xml:lang" /> 范围。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 范围。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>
              设置用于解析外部文档类型定义 (DTD) 和架构位置引用的 <see cref="T:System.Xml.XmlResolver" />。
              <see langword="XmlResolver" /> 用于处理 XML 架构定义语言 (XSD) 架构中找到的任何 import 或 include 元素。
            </summary>
      <returns>
              要使用的 <see langword="XmlResolver" />。
               如果设置为 <see langword="null" />，则不解析外部资源。
            
              在 .NET Framework 的 1.1 版本中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>
              获取当前 <see langword="xml:space" /> 范围。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。
               如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。
            </summary>
      <param name="scope">
                一个标识读取器范围的 <see cref="T:System.Xml.XmlNamespaceScope" /> 对象。
              </param>
      <returns>
              一个标识作用域汇总命名空间的 T:System.Collections.IDictionary 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。
            </summary>
      <param name="prefix">
                命名空间前缀。
              </param>
      <returns>
              一个字符串值，它包含与前缀关联的命名空间 URI。
            </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。
            </summary>
      <param name="namespaceName">
                与前缀关联的命名空间。
              </param>
      <returns>
              一个字符串值，它包含与 <paramref name="namespaceName" /> 关联的命名空间前缀。
            </returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>
              表示元素内容中的空白。
            </summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
              初始化 <see cref="T:System.Xml.XmlWhitespace" /> 类的新实例。
            </summary>
      <param name="strData">
                节点中的空白字符。
              </param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 对象。
              </param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>
              创建此节点的副本。
            </summary>
      <param name="deep">
                若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。
                 对于空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。
              </param>
      <returns>
              克隆的节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>
              获取节点的本地名称。
            </summary>
      <returns>
              有关 <see langword="XmlWhitespace" /> 节点，此属性返回 <see langword="#whitespace" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>
              获取节点的限定名称。
            </summary>
      <returns>
              有关 <see langword="XmlWhitespace" /> 节点，此属性返回 <see langword="#whitespace" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>
              获取节点的类型。
            </summary>
      <returns>
              有关 <see langword="XmlWhitespace" /> 节点，则这是 <see cref="F:System.Xml.XmlNodeType.Whitespace" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>
              获取当前节点的父节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 当前节点的父节点。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary>
              获取紧接在该节点之前的文本节点。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.XmlNode" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>
              获取或设置节点的值。
            </summary>
      <returns>
              在节点中找到空白字符。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置 <see cref="P:System.Xml.XmlWhitespace.Value" /> 到无效空白字符。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
              将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。
            </summary>
      <param name="w">
                要保存到其中的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>
              将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />。
            </summary>
      <param name="w">
                要保存到其中的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>
              表示一个写入器，该写入器提供一种快速、非缓存和只进方式以生成包含 XML 数据的流或文件。
            </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlWriter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>
              当在派生类中被重写时，将关闭此流和基础流。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  调用了来编写后的其他输出 <see langword="Close" /> 已调用或者此调用的结果是无效的 XML 文档。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用 <see cref="T:System.Text.StringBuilder" /> 和 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </summary>
      <param name="output">
        <see cref="T:System.Text.StringBuilder" /> 要向其写入到。
                 通过写入的内容 <see cref="T:System.Xml.XmlWriter" /> 追加到 <see cref="T:System.Text.StringBuilder" />。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.XmlWriterSettings" /> 对象，用于配置新 <see cref="T:System.Xml.XmlWriter" /> 实例。
                 如果这是 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 使用具有默认设置。
              
                如果 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性来获取 <see cref="T:System.Xml.XmlWriterSettings" /> 采用正确的设置的对象。
                 这样可确保创建 <see cref="T:System.Xml.XmlWriter" /> 对象都有正确的输出设置。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用的文件名和 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </summary>
      <param name="outputFileName">
                要对其写入的文件。
                <see cref="T:System.Xml.XmlWriter" /> 在指定的路径创建文件并向其写入 XML 1.0 文本语法中。
                <paramref name="outputFileName" /> 必须为文件系统路径。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.XmlWriterSettings" /> 对象，用于配置新 <see cref="T:System.Xml.XmlWriter" /> 实例。
                 如果这是 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 使用具有默认设置。
              
                如果 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性来获取 <see cref="T:System.Xml.XmlWriterSettings" /> 采用正确的设置的对象。
                 这样可确保创建 <see cref="T:System.Xml.XmlWriter" /> 对象都有正确的输出设置。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </summary>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 到想要编写。
                <see cref="T:System.Xml.XmlWriter" /> 写入 XML 1.0 文本语法并将其附加到指定 <see cref="T:System.IO.TextWriter" />。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.XmlWriterSettings" /> 对象，用于配置新 <see cref="T:System.Xml.XmlWriter" /> 实例。
                 如果这是 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 使用具有默认设置。
              
                如果 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性来获取 <see cref="T:System.Xml.XmlWriterSettings" /> 采用正确的设置的对象。
                 这样可确保创建 <see cref="T:System.Xml.XmlWriter" /> 对象都有正确的输出设置。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用的流和 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </summary>
      <param name="output">
                要对其写入的流。
                <see cref="T:System.Xml.XmlWriter" /> 写入 XML 1.0 文本语法并将其附加到指定的流。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.XmlWriterSettings" /> 对象，用于配置新 <see cref="T:System.Xml.XmlWriter" /> 实例。
                 如果这是 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 使用具有默认设置。
              
                如果 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性来获取 <see cref="T:System.Xml.XmlWriterSettings" /> 采用正确的设置的对象。
                 这样可确保创建 <see cref="T:System.Xml.XmlWriter" /> 对象都有正确的输出设置。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </summary>
      <param name="output">
        <see cref="T:System.Xml.XmlWriter" /> 你想要用作基础编写器的对象。
              </param>
      <param name="settings">
        <see cref="T:System.Xml.XmlWriterSettings" /> 对象，用于配置新 <see cref="T:System.Xml.XmlWriter" /> 实例。
                 如果这是 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 使用具有默认设置。
              
                如果 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性来获取 <see cref="T:System.Xml.XmlWriterSettings" /> 采用正确的设置的对象。
                 这样可确保创建 <see cref="T:System.Xml.XmlWriter" /> 对象都有正确的输出设置。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 对象，该对象封装指定 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用指定 <see cref="T:System.Text.StringBuilder" />。
            </summary>
      <param name="output">
        <see cref="T:System.Text.StringBuilder" /> 要向其写入到。
                 通过写入的内容 <see cref="T:System.Xml.XmlWriter" /> 追加到 <see cref="T:System.Text.StringBuilder" />。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用指定的文件名。
            </summary>
      <param name="outputFileName">
                要对其写入的文件。
                <see cref="T:System.Xml.XmlWriter" /> 在指定的路径创建文件并向其写入 XML 1.0 文本语法中。
                <paramref name="outputFileName" /> 必须为文件系统路径。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用指定 <see cref="T:System.IO.TextWriter" />。
            </summary>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 到想要编写。
                <see cref="T:System.Xml.XmlWriter" /> 写入 XML 1.0 文本语法并将其附加到指定 <see cref="T:System.IO.TextWriter" />。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用指定的流。
            </summary>
      <param name="output">
                要对其写入的流。
                <see cref="T:System.Xml.XmlWriter" /> 写入 XML 1.0 文本语法并将其附加到指定的流。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 值为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>
              创建一个新 <see cref="T:System.Xml.XmlWriter" /> 实例使用指定 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="output">
        <see cref="T:System.Xml.XmlWriter" /> 你想要用作基础编写器的对象。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 对象，该对象封装指定 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 值是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary>
              释放 <see cref="T:System.Xml.XmlWriter" /> 类的当前实例所使用的所有资源。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Xml.XmlWriter" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>
              当在派生类中被重写时，将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary>
              将缓冲区中的所有内容异步刷新到基础流，并同时刷新基础流。
            </summary>
      <returns>
              表示异步任务 <see langword="Flush" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>
              当在派生类中被重写时，返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。
            </summary>
      <param name="ns">
                要查找其前缀的命名空间 URI。
              </param>
      <returns>
              匹配的前缀或 <see langword="null" /> 如果没有匹配的命名空间在当前作用域中找到的 URI。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>
              获取用于创建此 <see cref="T:System.Xml.XmlWriter" /> 实例的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlWriterSettings" /> 对象，用于创建此编写器实例。
               如果此编写器不使用创建 <see cref="Overload:System.Xml.XmlWriter.Create" /> 方法，则此属性返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>
              当在派生类中重写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see langword="XmlReader" /> 要从其中复制属性。
              </param>
      <param name="defattr">
        <see langword="true" /> 若要复制默认特性从 <see langword="XmlReader" />; 否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  读取器未定位在 <see langword="element" />, ，<see langword="attribute" /> 或 <see langword="XmlDeclaration" /> 节点。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>
              异步写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />。
            </summary>
      <param name="reader">
        <see langword="XmlReader" /> 要从其中复制属性。
              </param>
      <param name="defattr">
        <see langword="true" /> 若要复制默认特性从 <see langword="XmlReader" />; 否则为 <see langword="false" />。
              </param>
      <returns>
              表示异步任务 <see langword="WriteAttributes" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>
              当在派生类中被重写时，写出具有指定的本地名称和值的属性。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="value">
                属性的值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器的状态不是 <see langword="WriteState.Element" /> 或编写器已关闭。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 属性值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>
              当在派生类中被重写时，写入具有指定的本地名称、命名空间 URI 和值的属性。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                与属性关联的命名空间 URI。
              </param>
      <param name="value">
                属性的值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器的状态不是 <see langword="WriteState.Element" /> 或编写器已关闭。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 属性值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>
              当在派生类中被重写时，写出具有指定的前缀、本地名称、命名空间 URI 和值的属性。
            </summary>
      <param name="prefix">
                属性的命名空间前缀。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <param name="value">
                属性的值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器的状态不是 <see langword="WriteState.Element" /> 或编写器已关闭。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 属性值无效。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="localName" /> 或 <paramref name="ns" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary>
              异步写出具有指定前缀、本地名称、命名空间 URI 和值的属性。
            </summary>
      <param name="prefix">
                属性的命名空间前缀。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <param name="value">
                属性的值。
              </param>
      <returns>
              表示异步任务 <see langword="WriteAttributeString" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中被重写时，将指定的二进制字节编码为 Base64 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的起始位置的位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                
                  - 或 -
                
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将指定的二进制字节异步编码为 Base64 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的起始位置的位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <returns>
              表示异步任务 <see langword="WriteBase64" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              当在派生类中重写，将编码为指定的二进制字节 <see langword="BinHex" /> 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的起始位置的位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭或处于错误状态。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                
                  - 或 -
                
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
              以异步方式将为指定的二进制字节编码 <see langword="BinHex" /> 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的起始位置的位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
      <returns>
              表示异步任务 <see langword="WriteBinHex" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>
              当在派生类中被重写时，写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。
            </summary>
      <param name="text">
                要放置在 CDATA 块中的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致格式不正确的 XML 文档。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary>
              异步写出一个包含指定文本的 &lt;![CDATA[...]]&gt; 块。
            </summary>
      <param name="text">
                要放置在 CDATA 块中的文本。
              </param>
      <returns>
              表示异步任务 <see langword="WriteCData" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>
              当在派生类中被重写时，为指定的 Unicode 字符值强制生成字符实体。
            </summary>
      <param name="ch">
                为其生成字符实体的 Unicode 字符。
              </param>
      <exception cref="T:System.ArgumentException">
                  在代理项对字符范围的字符是 <see langword="0xd800" /> - <see langword="0xdfff" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary>
              为指定的 Unicode 字符值异步强制生成字符实体。
            </summary>
      <param name="ch">
                为其生成字符实体的 Unicode 字符。
              </param>
      <returns>
              表示异步任务 <see langword="WriteCharEntity" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
              当在派生类中被重写时，以每次一个缓冲区的方式写入文本。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中指示要写入文本的起始位置的位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                
                  - 或 -
                
                  缓冲区长度减 <paramref name="index" /> 是小于 <paramref name="count" />; 代理项对字符中的调用结果被拆分或写入无效的代理项对。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 参数值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              以每次一个缓冲区的方式异步写入文本。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中指示要写入文本的起始位置的位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <returns>
              表示异步任务 <see langword="WriteChars" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>
              当在派生类中被重写时，写出包含指定文本的注释 &lt;!--...--&gt;。
            </summary>
      <param name="text">
                要放在注释内的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致一个格式正确的 XML 文档。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary>
              异步写出一个包含指定文本的注释 &lt;!--...--&gt;。
            </summary>
      <param name="text">
                要放在注释内的文本。
              </param>
      <returns>
              表示异步任务 <see langword="WriteComment" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
              当在派生类中被重写时，写出具有指定名称和可选属性的 DOCTYPE 声明。
            </summary>
      <param name="name">
                DOCTYPE 的名称。
                 它必须是非空的。
              </param>
      <param name="pubid">
                如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" /> 和 <paramref name="sysid" /> 替换给定的参数的值。
              </param>
      <param name="sysid">
                如果 <paramref name="pubid" /> 是 <see langword="null" /> 和 <paramref name="sysid" /> 为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" /> 将替换为此参数的值。
              </param>
      <param name="subset">
                如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  Prolog 外部上 （在根元素中） 调用此方法。
                </exception>
      <exception cref="T:System.ArgumentException">
                  值为 <paramref name="name" /> 将导致无效的 XML。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary>
              异步写入具有指定名称和可选属性的 DOCTYPE 声明。
            </summary>
      <param name="name">
                DOCTYPE 的名称。
                 它必须是非空的。
              </param>
      <param name="pubid">
                如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" /> 和 <paramref name="sysid" /> 替换给定的参数的值。
              </param>
      <param name="sysid">
                如果 <paramref name="pubid" /> 是 <see langword="null" /> 和 <paramref name="sysid" /> 为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" /> 将替换为此参数的值。
              </param>
      <param name="subset">
                如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
              </param>
      <returns>
              表示异步任务 <see langword="WriteDocType" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>
              写入具有指定的本地名称和值的元素。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="value">
                元素的值。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值是 <see langword="null" /> 或空字符串。
                
                  - 或 -
                
                  参数值不是有效的。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>
              写入具有指定的本地名称、命名空间 URI 和值的元素。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
              </param>
      <param name="value">
                元素的值。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值是 <see langword="null" /> 或空字符串。
                
                  - 或 -
                
                  参数值不是有效的。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>
              写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
            </summary>
      <param name="prefix">
                元素的前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                元素的命名空间 URI。
              </param>
      <param name="value">
                元素的值。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值是 <see langword="null" /> 或空字符串。
                
                  - 或 -
                
                  参数值不是有效的。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary>
              异步写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
            </summary>
      <param name="prefix">
                元素的前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                元素的命名空间 URI。
              </param>
      <param name="value">
                元素的值。
              </param>
      <returns>
              表示异步任务 <see langword="WriteElementString" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>
              当在派生类中重写时，关闭上一个 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 调用。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary>
              异步关闭前一个 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 调用。
            </summary>
      <returns>
              表示异步任务 <see langword="WriteEndAttribute" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>
              当在派生类中被重写时，关闭任何打开的元素或属性并将写入器重新设置为起始状态。
            </summary>
      <exception cref="T:System.ArgumentException">
                  XML 文档是无效的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary>
              异步关闭任何打开的元素或属性并将写入器重新设置为起始状态。
            </summary>
      <returns>
              表示异步任务 <see langword="WriteEndDocument" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>
              当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  这会导致无效的 XML 文档。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary>
              异步关闭一个元素并弹出相应的命名空间范围。
            </summary>
      <returns>
              表示异步任务 <see langword="WriteEndElement" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>
              当在派生类中重写出实体引用作为 <see langword="&amp;name;" />。
            </summary>
      <param name="name">
                实体引用的名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary>
              异步写出实体引用作为 <see langword="&amp;name;" />。
            </summary>
      <param name="name">
                实体引用的名称。
              </param>
      <returns>
              表示异步任务 <see langword="WriteEntityRef" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>
              当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary>
              异步关闭一个元素并弹出相应的命名空间范围。
            </summary>
      <returns>
              表示异步任务 <see langword="WriteFullEndElement" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>
              当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
            </summary>
      <param name="name">
                要写入的名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 XML 名称;或 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary>
              异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
            </summary>
      <param name="name">
                要写入的名称。
              </param>
      <returns>
              表示异步任务 <see langword="WriteName" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>
              当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
            </summary>
      <param name="name">
                要写入的名称。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 NmToken;或 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary>
              异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
            </summary>
      <param name="name">
                要写入的名称。
              </param>
      <returns>
              表示异步任务 <see langword="WriteNmToken" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>
              当在派生类中被重写时，将全部内容从读取器复制到写入器并将读取器移动到下一个同级的开始位置。
            </summary>
      <param name="reader">
                要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <param name="defattr">
        <see langword="true" /> 若要复制默认特性从 <see langword="XmlReader" />; 否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 包含无效字符。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>
              将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到编写器的对象。
               位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 保持不变。
            </summary>
      <param name="navigator">
                要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />。
              </param>
      <param name="defattr">
        <see langword="true" /> 若要复制默认特性;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>
              将所有内容从读取器异步复制到写入器并将读取器移动到下一个同级的开头。
            </summary>
      <param name="reader">
                要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <param name="defattr">
        <see langword="true" /> 若要复制默认特性从 <see langword="XmlReader" />; 否则为 <see langword="false" />。
              </param>
      <returns>
              表示异步任务 <see langword="WriteNode" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>
              以异步方式将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到编写器的对象。
               位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 保持不变。
            </summary>
      <param name="navigator">
                要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />。
              </param>
      <param name="defattr">
        <see langword="true" /> 若要复制默认特性;否则为 <see langword="false" />。
              </param>
      <returns>
              表示异步任务 <see langword="WriteNode" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
              当在派生类中重写，写出在名称和文本之间带有空格的处理指令，如下所示︰ &lt;？ 命名 text？ &gt;。
            </summary>
      <param name="name">
                处理指令的名称。
              </param>
      <param name="text">
                要包括在处理指令中的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  该文本会导致格式不正确的 XML 文档。
                
                  <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                
                  此方法用于创建 XML 声明后的 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> 已调用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary>
              异步写出在名称和文本之间带有空格的处理指令如下︰ &lt;？ 命名 text？ &gt;。
            </summary>
      <param name="name">
                处理指令的名称。
              </param>
      <param name="text">
                要包括在处理指令中的文本。
              </param>
      <returns>
              表示异步任务 <see langword="WriteProcessingInstruction" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
              当在派生类中被重写时，写出命名空间限定的名称。
               此方法查找位于给定命名空间范围内的前缀。
            </summary>
      <param name="localName">
                要写入的本地名称。
              </param>
      <param name="ns">
                名称的命名空间 URI。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                
                  <paramref name="localName" /> 不是有效的名称。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary>
              异步写出命名空间限定的名称。
               此方法查找位于给定命名空间范围内的前缀。
            </summary>
      <param name="localName">
                要写入的本地名称。
              </param>
      <param name="ns">
                名称的命名空间 URI。
              </param>
      <returns>
              表示异步任务 <see langword="WriteQualifiedName" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>
              当在派生类中被重写时，从字符串手动写入原始标记。
            </summary>
      <param name="data">
                包含要写入的文本的字符串。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
              当在派生类中被重写时，从字符缓冲区手动写入原始标记。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中的位置，指示要写入文本的起始位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                
                  - 或 -
                
                  缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary>
              从字符串手动异步写入原始标记。
            </summary>
      <param name="data">
                包含要写入的文本的字符串。
              </param>
      <returns>
              表示异步任务 <see langword="WriteRaw" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
              从字符缓冲区手动异步写入原始标记。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中的位置，指示要写入文本的起始位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
      <returns>
              表示异步任务 <see langword="WriteRaw" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>
              写入具有指定本地名称的属性的开头。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>
              写入具有指定本地名称和命名空间 URI 的属性的开头。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
              当在派生类中被重写时，写入具有指定的前缀、本地名称和命名空间 URI 的属性的开头。
            </summary>
      <param name="prefix">
                属性的命名空间前缀。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary>
              异步写入具有指定前缀、本地名称和命名空间 URI 的属性的开头。
            </summary>
      <param name="prefix">
                属性的命名空间前缀。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <returns>
              表示异步任务 <see langword="WriteStartAttribute" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>
              当在派生类中被重写时，写入版本为“1.0”的 XML 声明。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  这不是调用构造函数之后的第一个写入方法。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>
              当在派生类中被重写时，写入版本为“1.0”的 XML 声明和独立的属性。
            </summary>
      <param name="standalone">
                如果 <see langword="true" />, ，它将写入"独立 = yes"; 如果 <see langword="false" />, ，它将写入"独立 = no"。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  这不是调用构造函数之后的第一个写入方法。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary>
              异步写入版本为“1.0”的 XML 声明和独立的属性。
            </summary>
      <param name="standalone">
                如果 <see langword="true" />, ，它将写入"独立 = yes"; 如果 <see langword="false" />, ，它将写入"独立 = no"。
              </param>
      <returns>
              表示异步任务 <see langword="WriteStartDocument" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary>
              异步写入版本为“1.0”的 XML 声明。
            </summary>
      <returns>
              表示异步任务 <see langword="WriteStartDocument" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>
              当在派生类中被重写时，写出具有指定的本地名称的开始标记。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>
              当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间关联起来。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
                 如果此命名空间已在范围中并具有关联的前缀，则写入器也将自动写入该前缀。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
              当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
            </summary>
      <param name="prefix">
                元素的命名空间前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭。
                </exception>
      <exception cref="T:System.Text.EncoderFallbackException">
                  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
                   例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
                   无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
                   此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
                   但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary>
              异步写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
            </summary>
      <param name="prefix">
                元素的命名空间前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
              </param>
      <returns>
              表示异步任务 <see langword="WriteStartElement" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>
              当在派生类中被重写时，获取写入器的状态。
            </summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 值之一。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>
              当在派生类中被重写时，写入给定的文本内容。
            </summary>
      <param name="text">
                要写入的文本。
              </param>
      <exception cref="T:System.ArgumentException">
                  文本字符串包含无效的代理项对。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary>
              异步写入给定的文本内容。
            </summary>
      <param name="text">
                要写入的文本。
              </param>
      <returns>
              表示异步任务 <see langword="WriteString" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
              当在派生类中被重写时，为代理项字符对生成并写入代理项字符实体。
            </summary>
      <param name="lowChar">
                低代理项。
                 它必须是介于 0xDC00 和 0xDFFF 之间的值。
              </param>
      <param name="highChar">
                高代理项。
                 它必须是介于 0xD800 和 0xDBFF 之间的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  传递了无效的代理项字符对。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary>
              为代理项字符对异步生成并写入代理项字符实体。
            </summary>
      <param name="lowChar">
                低代理项。
                 它必须是介于 0xDC00 和 0xDFFF 之间的值。
              </param>
      <param name="highChar">
                高代理项。
                 它必须是介于 0xD800 和 0xDBFF 之间的值。
              </param>
      <returns>
              表示异步任务 <see langword="WriteSurrogateCharEntity" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>
              写入 <see cref="T:System.String" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.String" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>
              写入一个单精度浮点数。
            </summary>
      <param name="value">
                要写入的单精度浮点数。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>
              写入对象值。
            </summary>
      <param name="value">
                要写入的对象值。
              
                注意   随着.NET Framework 3.5 的发布，此方法接受 <see cref="T:System.DateTimeOffset" /> 作为参数。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  编写器已关闭或处于错误状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>
              写入 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.Int64" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>
              写入 <see cref="T:System.Int32" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.Int32" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary>
              写入 <see cref="T:System.DateTimeOffset" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.DateTimeOffset" /> 值。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>
              写入 <see cref="T:System.Decimal" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.Decimal" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>
              写入 <see cref="T:System.DateTime" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.DateTime" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>
              写入 <see cref="T:System.Boolean" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.Boolean" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>
              写入 <see cref="T:System.Double" /> 值。
            </summary>
      <param name="value">
                要写入的 <see cref="T:System.Double" /> 值。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的值无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>
              当在派生类中被重写时，写出给定的空白区域。
            </summary>
      <param name="ws">
                空格字符的字符串。
              </param>
      <exception cref="T:System.ArgumentException">
                  该字符串包含非空白字符。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary>
              异步写出给定的空白区域。
            </summary>
      <param name="ws">
                空格字符的字符串。
              </param>
      <returns>
              表示异步任务 <see langword="WriteWhitespace" /> 操作。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标记，用于 <see langword="true" />。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>
              当在派生类中重写，获取当前 <see langword="xml:lang" /> 作用域。
            </summary>
      <returns>
              当前 <see langword="xml:lang" /> 范围。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>
              当在派生类中重写时获取 <see cref="T:System.Xml.XmlSpace" /> 表示当前 <see langword="xml:space" /> 作用域。
            </summary>
      <returns>
        <see langword="XmlSpace" /> 表示当前 <see langword="xml:space" /> 作用域。
            
                      值 
                    
                      含义 
                    
                      <see langword="None" />
                    
                      这是默认值，如果没有 <see langword="xml:space" /> 存在的作用域。
                    
                      <see langword="Default" />
                    
                      当前作用域是 <see langword="xml:space" />="default"。
                    
                      <see langword="Preserve" />
                    
                      当前作用域是 <see langword="xml:space" />="preserve"。
                    </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlWriter" /> 上一个异步操作完成之前调用方法。
                   在这种情况下， <see cref="T:System.InvalidOperationException" /> 引发并显示消息"异步操作正在进行。"
                </exception>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>
              指定的功能以支持上的一组 <see cref="T:System.Xml.XmlWriter" /> 创建的对象 <see cref="Overload:System.Xml.XmlWriter.Create" /> 方法。
            </summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary>
              获取或设置一个值，该值指示是否异步 <see cref="T:System.Xml.XmlWriter" /> 方法可对特定 <see cref="T:System.Xml.XmlWriter" /> 实例。
            </summary>
      <returns>
        <see langword="true" /> 如果可以使用异步方法，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>
              获取或设置一个值，该值指示的 XML 编写器应检查以确保文档中的所有字符都符合 W3C 的"2.2 字符"一节 XML 1.0 Recommendation。
            </summary>
      <returns>
        <see langword="true" /> 若要进行字符检查;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>
              创建 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的副本。
            </summary>
      <returns>
              克隆 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" /> 也应该关闭基础流或 <see cref="T:System.IO.TextWriter" /> 时 <see cref="M:System.Xml.XmlWriter.Close" /> 调用方法。
            </summary>
      <returns>
        <see langword="true" /> 此外应该关闭基础流或 <see cref="T:System.IO.TextWriter" />; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>
              获取或设置的 XML 写入器检查 XML 输出的一致性级别。
            </summary>
      <returns>
              指定一致性级别（文档、片段或自动检测）的枚举值之一。
               默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" /> 未转义 URI 属性。
            </summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.XmlWriter" /> 未转义 URI 属性; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>
              获取或设置要使用的文本编码的类型。
            </summary>
      <returns>
              要使用的文本编码。
               默认值为 <see langword="Encoding.UTF8" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>
              获取或设置指示是否缩进元素的值。
            </summary>
      <returns>
        <see langword="true" /> 若要在新行和缩进; 上写入单独的元素否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>
              获取或设置缩进时要使用的字符串。
               使用此设置时 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性设置为 <see langword="true" />。
            </summary>
      <returns>
              缩进时要使用的字符串。
               它可以设置为任何字符串值。
               但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。
               默认值为两个空格。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  分配给值 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" /> 编写 XML 内容时应移除重复的命名空间声明。
               写入器的默认行为是输出写入器的命名空间解析程序中存在的所有命名空间声明。
            </summary>
      <returns>
        <see cref="T:System.Xml.NamespaceHandling" /> 枚举，用于指定是否删除重复的命名空间中的声明 <see cref="T:System.Xml.XmlWriter" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>
              获取或设置要用于换行符的字符串。
            </summary>
      <returns>
              要用于换行符的字符串。
               它可以设置为任何字符串值。
               但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。
               默认值是 \r\n （回车符、 换行符）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  分配给值 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>
              获取或设置一个值，该值指示是否将输出中的换行符规范化。
            </summary>
      <returns>
        <see cref="T:System.Xml.NewLineHandling" /> 值之一。
               默认值为 <see cref="F:System.Xml.NewLineHandling.Replace" />。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>
              获取或设置一个值，该值指示是否在新行上写入属性。
            </summary>
      <returns>
        <see langword="true" /> 若要在单独的行; 上编写属性否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            
                此设置没有时生效 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性值是 <see langword="false" />。
              
              当 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 设置为 <see langword="true" />, ，每个属性都会预先挂起一个新行和一层额外的缩进。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>
              获取或设置一个值，该值指示是否省略 XML 声明。
            </summary>
      <returns>
        <see langword="true" /> 若要忽略 XML 声明中;否则为 <see langword="false" />。
               默认值是 <see langword="false" />, ，即写入 XML 声明。
            </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>
              获取用于序列化的方法 <see cref="T:System.Xml.XmlWriter" /> 输出。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlOutputMethod" /> 值之一。
               默认值为 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。
            </returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>
              将设置类的成员重置为各自的默认值。
            </summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" /> 将添加结束标记对所有未关闭元素标记时 <see cref="M:System.Xml.XmlWriter.Close" /> 调用方法。
            </summary>
      <returns>
        <see langword="true" /> 如果所有未关闭的元素标记将关闭否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>
              提供对的访问器 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>
              返回新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>
              指定大写字母和小写字母的排序顺序。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>
              小写字母进行排序之前大写首字母。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>
              忽略大小写。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>
              大写字母排在小写字母之前。
            </summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>
              指定用于确定排序顺序的数据类型。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>
              值的按数字顺序排序。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>
              值的按字母顺序排序。
            </summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>
              指定排序顺序。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>
              节点按升序排序。
               例如，如果数字 1、 2、 3 和 4 按升序排序，它们显示为 1,2,3,4。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>
              节点按降序排序。
               例如，如果数字 1、 2、 3 和 4 按降序排序，它们显示为 4,3,2,1。
            </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>
              提供一个类型化的类，表示已编译的 XPath 表达式。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>
              当在派生类中重写时按照指定的 XPath 表达式选择的节点排序 <see cref="T:System.Collections.IComparer" /> 对象。
            </summary>
      <param name="expr">
                一个表示排序关键字的对象。
                 这可以是节点的 <see langword="string" /> 值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
              </param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 提供特定的数据类型比较用于比较两个对象是否相等的对象。
              </param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找到该前缀。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>
              当在派生类中被重写时，根据所提供的参数对 XPath 表达式所选的节点进行排序。
            </summary>
      <param name="expr">
                一个表示排序关键字的对象。
                 这可以是节点的 <see langword="string" /> 值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
              </param>
      <param name="order">
                一个 <see cref="T:System.Xml.XPath.XmlSortOrder" /> 值，它指示排序顺序。
              </param>
      <param name="caseOrder">
                一个 <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 值，它指示大写字母和小写字母的排序方式。
              </param>
      <param name="lang">
                要用于比较的语言。
                 使用 <see cref="T:System.Globalization.CultureInfo" /> 类，该类可传递到语言类型的 <see cref="Overload:System.String.Compare" /> 方法，美式英语的“us-en”。
                 如果指定了空的字符串，则使用系统环境来确定 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <param name="dataType">
                一个 <see cref="T:System.Xml.XPath.XmlDataType" /> 值，它指示数据类型的排序顺序。
              </param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找到该前缀。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>
              当在派生类中重写时返回此克隆 <see cref="T:System.Xml.XPath.XPathExpression" />。
            </summary>
      <returns>
              一个新 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>
              编译指定的 XPath 表达式并返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
            </summary>
      <param name="xpath">
                XPath 表达式。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式参数不是有效的 XPath 表达式。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>
              编译时指定的 XPath 表达式不包含 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 为命名空间解析，并返回指定对象 <see cref="T:System.Xml.XPath.XPathExpression" /> 表示 XPath 表达式的对象。
            </summary>
      <param name="xpath">
                XPath 表达式。
              </param>
      <param name="nsResolver">
                实现的对象 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 命名空间解析的接口。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式参数不是有效的 XPath 表达式。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>
              当在派生类中重写时获取 <see langword="string" /> 表示形式 <see cref="T:System.Xml.XPath.XPathExpression" />。
            </summary>
      <returns>
        <see langword="string" /> 的 <see cref="T:System.Xml.XPath.XPathExpression" /> 表示形式。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>
              当在派生类中重写时，获取 XPath 表达式的结果类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" /> 值，该值表示 XPath 表达式的结果类型。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>
              在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。
            </summary>
      <param name="nsResolver">
                实现 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 接口以用于命名空间解析的对象。
              </param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象参数不派生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>
              在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 对象。
            </summary>
      <param name="nsManager">
                要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 对象。
              </param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 对象参数不是从 <see cref="T:System.Xml.XmlNamespaceManager" /> 类派生的。
                </exception>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>
              表示在 XQuery 1.0 和 XPath 2.0 数据模型中的项。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XPath.XPathItem" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>
              当在派生类中重写，获取一个值，该值指示项是否表示一个 XPath 节点或一个原子值。
            </summary>
      <returns>
        <see langword="true" /> 如果此项表示一个 XPath 节点; <see langword="false" /> 如果此项表示一个原子值。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>
              当在派生类中重写，作为最合适的已装箱对象获取的当前项 .NET Framework&amp;2;.0 符合其架构类型的类型。
            </summary>
      <returns>
              作为最合适的已装箱对象的当前项 .NET Framework 类型。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>
              当在派生类中重写时获取 <see langword="string" /> 项的值。
            </summary>
      <returns>
        <see langword="string" /> 项的值。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>
              返回与指定的类型的项的值。
            </summary>
      <param name="returnType">
                要返回的项值的类型。
              </param>
      <returns>
              将项目作为请求的类型的值。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为目标类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              当在派生类中重写时, 返回的项的值为使用指定的类型 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 指定用来解析命名空间前缀的对象。
            </summary>
      <param name="returnType">
                要返回的项值的类型。
              </param>
      <param name="nsResolver">
                用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。
              </param>
      <returns>
              将项目作为请求的类型的值。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为目标类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>
              当在派生类中重写时获取项的值作为 <see cref="T:System.Boolean" />。
            </summary>
      <returns>
              项的值作为 <see cref="T:System.Boolean" />。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为 <see cref="T:System.Boolean" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Boolean" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>
              当在派生类中重写时获取项的值作为 <see cref="T:System.DateTime" />。
            </summary>
      <returns>
              项的值作为 <see cref="T:System.DateTime" />。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为 <see cref="T:System.DateTime" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.DateTime" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>
              当在派生类中重写时获取项的值作为 <see cref="T:System.Double" />。
            </summary>
      <returns>
              项的值作为 <see cref="T:System.Double" />。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为 <see cref="T:System.Double" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Double" /> 无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>
              当在派生类中重写时获取项的值作为 <see cref="T:System.Int32" />。
            </summary>
      <returns>
              项的值作为 <see cref="T:System.Int32" />。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为 <see cref="T:System.Int32" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Int32" /> 无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>
              当在派生类中重写时获取项的值作为 <see cref="T:System.Int64" />。
            </summary>
      <returns>
              项的值作为 <see cref="T:System.Int64" />。
            </returns>
      <exception cref="T:System.FormatException">
                  项的值不在的正确格式为 <see cref="T:System.Int64" /> 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Int64" /> 无效。
                </exception>
      <exception cref="T:System.OverflowException">
                  尝试强制转换导致溢出。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>
              当在派生类中重写时获取 .NET Framework&amp;2;.0 项的类型。
            </summary>
      <returns>
              
                .NET Framework 项的类型。
               默认值为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>
              当在派生类中重写时获取 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 项。
            </summary>
      <returns>
              项的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。
            </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>
              定义命名空间范围。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>
              返回当前节点的作用域中定义的所有命名空间。
               这包括 xmlns:xml 总是隐式声明的命名空间。
               未定义的顺序返回的命名空间。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>
              返回在当前节点范围内定义的所有命名空间不包括 xmlns:xml 命名空间。
              xmlns:xml 总是隐式声明命名空间。
               未定义的顺序返回的命名空间。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>
              返回在当前节点本地定义的所有命名空间。
            </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>
              为定位和编辑 XML 数据提供游标模型。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的末尾创建一个或多个新的子节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的末尾创建新的子节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>
              使用指定的 XML 数据字符串在当前节点的子节点列表的末尾创建一个新的子节点。
            </summary>
      <param name="newChild">
                新的子节点的 XML 数据字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  XML 数据字符串参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  XML 数据字符串参数的格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlReader" /> 对象的 XML 内容在当前节点的子节点列表的末尾创建一个新的子节点。
            </summary>
      <param name="newChild">
                一个 <see cref="T:System.Xml.XmlReader" /> 对象，该对象定位在新的子节点的 XML 数据上。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容的格式不标准。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的节点在当前节点的子节点列表的末尾创建一个新的子节点。
            </summary>
      <param name="newChild">
                一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的子节点添加的节点上。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>
              使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的末尾创建一个新的子元素节点。
            </summary>
      <param name="prefix">
                新的子元素节点（如果有）的命名空间前缀。
              </param>
      <param name="localName">
                新的子元素节点（如果有）的本地名称。
              </param>
      <param name="namespaceURI">
                新的子元素节点（如果有）的命名空间 URI。
                <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 等效。
              </param>
      <param name="value">
                新的子元素节点的值。
                 如果传递了 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，则将创建一个空元素。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>
              当在派生类中被重写时，获取当前节点的基 URI。
            </summary>
      <returns>
              从其加载节点，该位置或 <see cref="F:System.String.Empty" /> 如果没有值。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否可以编辑基础 XML 数据。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 可以编辑基础 XML 数据，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>
              验证中的 XML 数据 <see cref="T:System.Xml.XPath.XPathNavigator" /> 符合提供 XML 架构定义语言 (XSD) 架构。
            </summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 包含用来验证中包含的 XML 数据的架构 <see cref="T:System.Xml.XPath.XPathNavigator" />。
              </param>
      <param name="validationEventHandler">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 用于接收有关架构验证警告和错误的信息。
              </param>
      <returns>
        <see langword="true" /> 如果未发生任何架构验证错误;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
                  出现架构验证错误，并且不 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 指定要处理验证错误。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位在节点上，不是元素、 特性或根节点或者没有类型信息来执行验证。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> 调用方法时使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 参数时 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不定位在 XML 数据的根节点上。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>
              当在派生类中被重写时，创建一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位到的节点相同。
            </summary>
      <returns>
              一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位到的节点相同。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>
              将当前的位置进行比较 <see cref="T:System.Xml.XPath.XPathNavigator" /> 用的位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 指定。
            </summary>
      <param name="nav">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 要与其进行比较。
              </param>
      <returns>
        <see cref="T:System.Xml.XmlNodeOrder" /> 值，该值表示两个的相对位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>
              编译一个表示 XPath 表达式的字符串，并返回 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
            </summary>
      <param name="xpath">
                表示 XPath 表达式的字符串。
              </param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> 表示 XPath 表达式的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="xpath" /> 参数包含不是有效的 XPath 表达式。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>
              使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前元素节点上创建一个属性节点。
            </summary>
      <param name="prefix">
                新的属性节点（如果有）的命名空间前缀。
              </param>
      <param name="localName">
                新的属性节点的本地名称，该名称不能是 <see cref="F:System.String.Empty" /> 或 <see langword="null" />。
              </param>
      <param name="namespaceURI">
                新的属性节点（如果有）的命名空间 URI。
              </param>
      <param name="value">
                新的属性节点的值。
                 如果传递了 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，则将创建一个空属性节点。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未定位在元素节点上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>
              返回 <see cref="T:System.Xml.XmlWriter" /> 对象，用于在当前元素上创建新属性。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 对象，用于在当前元素上创建新属性。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 程序不位于某个元素节点上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>
              返回一份 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 这份 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>
              删除从当前节点到指定节点之间的一组同级节点。
            </summary>
      <param name="lastSiblingToDelete">
                一个 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位在要删除的范围内的最后一个同级节点上。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  指定的要删除的最后一个节点不是当前节点的有效同级节点。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>
              删除当前节点及其子节点。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位在不能删除的节点上，例如根节点或命名空间节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>
              计算指定的 XPath 表达式并返回类型化结果。
            </summary>
      <param name="xpath">
                表示可以计算的 XPath 表达式的字符串。
              </param>
      <returns>
              表达式结果（布尔值、数字、字符串或节点集）。
               这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式的返回类型是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>
              计算 <see cref="T:System.Xml.XPath.XPathExpression" /> 并返回类型化结果。
            </summary>
      <param name="expr">
                可计算的 <see cref="T:System.Xml.XPath.XPathExpression" />。
              </param>
      <returns>
              表达式结果（布尔值、数字、字符串或节点集）。
               这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式的返回类型是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>
              计算指定的 XPath 表达式并返回类型化结果，以使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象解析 XPath 表达式中的命名空间前缀。
            </summary>
      <param name="xpath">
                表示可以计算的 XPath 表达式的字符串。
              </param>
      <param name="resolver">
                用来解析 XPath 表达式中的命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。
              </param>
      <returns>
              表达式结果（布尔值、数字、字符串或节点集）。
               这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式的返回类型是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>
              使用提供的上下文计算 <see cref="T:System.Xml.XPath.XPathExpression" />，并返回类型化结果。
            </summary>
      <param name="expr">
                可以计算的 <see cref="T:System.Xml.XPath.XPathExpression" />。
              </param>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，指向要在其上执行计算的选定节点集。
              </param>
      <returns>
              表达式结果（布尔值、数字、字符串或节点集）。
               这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式的返回类型是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>
              获取具有指定本地名称和命名空间 URI 的属性的值。
            </summary>
      <param name="localName">
                属性的本地名称。
                <paramref name="localName" /> 是区分大小写。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含指定属性的值 <see cref="F:System.String.Empty" /> 如果未找到一个匹配的特性，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不定位在元素节点上。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>
              返回与所指定本地名称对应的命名空间节点的值。
            </summary>
      <param name="name">
                命名空间节点的本地名称。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 包含值的命名空间节点; <see cref="F:System.String.Empty" /> 如果未找到匹配的命名空间节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不定位在元素节点上。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
              返回当前节点的范围内命名空间。
            </summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，该值指定要返回的命名空间。
              </param>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 的前缀键控的命名空间名称的集合。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>
              获取一个值，该值指示当前节点是否有任何属性。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果当前节点具有属性，则将返回 <see langword="false" /> 如果当前节点不具有任何属性，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不定位在元素节点上。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>
              获取一个值，该值指示当前节点是否具有任何子节点。
            </summary>
      <returns>
        <see langword="true" /> 如果当前节点具有任何子节点，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>
              获取或设置表示当前节点的子节点标记。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，包含当前节点的子节点的标记。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  无法设置 <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> 属性。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象中的节点在当前选定的节点之后创建一个新的同级节点。
            </summary>
      <param name="newSibling">
                一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的同级节点添加的节点上。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlReader" /> 对象的 XML 内容，在当前所选节点之后创建一个新的同级节点。
            </summary>
      <param name="newSibling">
                一个 <see cref="T:System.Xml.XmlReader" /> 对象，它置于新同级节点的 XML 数据上。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容的格式不标准。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前所选节点的后面创建一个新的同级节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象，它用于在当前所选节点的后面创建一个新的同级节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>
              使用指定的 XML 字符串在当前选定的节点之后创建一个新的同级节点。
            </summary>
      <param name="newSibling">
                新的同级节点的 XML 数据字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  XML 字符串参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  XML 字符串参数的格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>
              返回 <see cref="T:System.Xml.XmlWriter" /> 对象，它用于在当前所选节点的前面创建一个新的同级节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象，它用于在当前所选节点的前面创建一个新的同级节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的前面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>
              使用指定的 XML 字符串在当前选定的节点之前创建一个新的同级节点。
            </summary>
      <param name="newSibling">
                新的同级节点的 XML 数据字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  XML 字符串参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的前面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  XML 字符串参数的格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>
              使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的 XML 内容在当前选定的节点之前创建一个新的同级节点。
            </summary>
      <param name="newSibling">
                在新的同级节点的 XML 数据上定位的 <see cref="T:System.Xml.XmlReader" /> 对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的前面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容的格式不标准。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的节点在当前选定的节点之前创建一个新的同级节点。
            </summary>
      <param name="newSibling">
                一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的同级节点添加的节点上。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的前面插入新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>
              使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之后创建一个新的同级元素。
            </summary>
      <param name="prefix">
                新的子元素（如果有）的命名空间前缀。
              </param>
      <param name="localName">
                新的子元素（如果有）的本地名称。
              </param>
      <param name="namespaceURI">
                新的子元素（如果有）的命名空间 URI。
                <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。
              </param>
      <param name="value">
                新的子元素的值。
                 如果传递 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，将创建一个空元素。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点之后插入一个新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>
              使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之前创建一个新的同级元素。
            </summary>
      <param name="prefix">
                新的子元素（如果有）的命名空间前缀。
              </param>
      <param name="localName">
                新的子元素（如果有）的本地名称。
              </param>
      <param name="namespaceURI">
                新的子元素（如果有）的命名空间 URI。
                <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。
              </param>
      <param name="value">
                新的子元素的值。
                 如果传递 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，将创建一个空元素。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不允许在当前节点之前插入一个新的同级节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>
              确定是否指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是当前的后代 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <param name="nav">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 要与此 <see cref="T:System.Xml.XPath.XPathNavigator" />。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是当前的后代 <see cref="T:System.Xml.XPath.XPathNavigator" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>
              当在派生类中被重写时，获取一个值，该值指示当前节点是否是一个没有结束元素标记的空元素。
            </summary>
      <returns>
        <see langword="true" /> 如果当前节点是一个空的元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>
              获取一个值，该值指示当前节点是否表示一个 XPath 节点。
            </summary>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>
              当在派生类中重写，确定是否当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 于与指定的相同位置 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 要与此 <see cref="T:System.Xml.XPath.XPathNavigator" />。
              </param>
      <returns>
        <see langword="true" /> 如果两个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象具有相同的位置; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>
              在派生类中被重写时，获取当前节点的 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />（不带任何命名空间前缀）。
            </summary>
      <returns>
              包含当前节点本地名称的 <see cref="T:System.String" />；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>
              获取指定前缀的命名空间 URI。
            </summary>
      <param name="prefix">
                要解析其命名空间 URI 的前缀。
                 若要匹配默认命名空间，传递 <see cref="F:System.String.Empty" />。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含的命名空间 URI 分配给指定; 的命名空间前缀 <see langword="null" /> 如果没有命名空间 URI 分配给指定的前缀。
              <see cref="T:System.String" /> 返回原子化的。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>
              获取为指定的命名空间 URI 声明的前缀。
            </summary>
      <param name="namespaceURI">
                要为前缀解析的命名空间 URI。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，其中包含命名空间前缀分配给命名空间 URI; 否则为 <see cref="F:System.String.Empty" /> 如果没有前缀分配给指定 URI 的命名空间。
              <see cref="T:System.String" /> 返回原子化的。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>
              确定当前节点是否与指定的 XPath 表达式匹配。
            </summary>
      <param name="xpath">
                XPath 表达式。
              </param>
      <returns>
        <see langword="true" /> 如果当前节点与指定的 XPath 表达式中;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  无法计算 XPath 表达式。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>
              确定当前节点是否匹配所指定的 <see cref="T:System.Xml.XPath.XPathExpression" />。
            </summary>
      <param name="expr">
                一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象，它包含已编译的 XPath 表达式。
              </param>
      <returns>
              如果当前节点匹配 <see cref="T:System.Xml.XPath.XPathExpression" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  无法计算 XPath 表达式。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>
              当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到与指定的同一位置 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <param name="other">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位你想要将移动到的节点上。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到与指定的位置相同 <see cref="T:System.Xml.XPath.XPathNavigator" />; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到具有匹配的本地名称和命名空间 URI 的属性。
            </summary>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                命名空间 URI 的属性; <see langword="null" /> 空命名空间。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到的属性; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到的子节点 <see cref="T:System.Xml.XPath.XPathNodeType" /> 指定。
            </summary>
      <param name="type">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> 要移动到的子节点。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到的子节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到具有本地名称和命名空间 URI 指定的子节点。
            </summary>
      <param name="localName">
                要移动到的子节点的本地名称。
              </param>
      <param name="namespaceURI">
                要移动到的子节点的命名空间 URI。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到的子节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>
              将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至当前节点的第一个同级节点。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的第一个同级节点 <see langword="false" /> 如果没有第一个同级或者 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在属性节点上。
               如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 已位于上的第一个同级 <see cref="T:System.Xml.XPath.XPathNavigator" /> 将返回 <see langword="true" /> 并不会移动其位置。
            
              如果 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" /> 返回 <see langword="false" /> 因为没有第一个同级，或如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在特性上的位置， <see cref="T:System.Xml.XPath.XPathNavigator" /> 保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>
              在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点的第一个属性。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动到了当前节点的第一个属性，则返回 <see langword="true" />；否则返回 <see langword="false" />。
               如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>
              当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到当前节点的第一个子节点。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的第一个子节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>
              当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到匹配的第一个命名空间节点 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 指定。
            </summary>
      <param name="namespaceScope">
        <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值，该值描述命名空间范围。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到第一个命名空间节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 至当前节点的第一个命名空间节点。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到第一个命名空间节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>
              按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到指定的边界内具有指定的本地名称和命名空间 URI 的元素。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <param name="end">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不会越过的元素边界上。
              </param>
      <returns>
              如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>
              按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到指定边界内的指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的下一个元素。
            </summary>
      <param name="type">
                元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />。
                <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。
              </param>
      <param name="end">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不会越过的元素边界上。
              </param>
      <returns>
              如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>
              将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到按文档顺序指定了其本地名称或命名空间 URI 的元素。
            </summary>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="namespaceURI">
                元素的命名空间 URI。
              </param>
      <returns>
              如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>
              将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到按文档顺序指定的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的以下元素。
            </summary>
      <param name="type">
                元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />。
                <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能为 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。
              </param>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>
              当在派生类中重写，将移动到具有类型的属性的节点 ID 其值匹配指定 <see cref="T:System.String" />。
            </summary>
      <param name="id">
                一个 <see cref="T:System.String" /> 表示 ID 想要移动的节点的值。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动; 否则为 <see langword="false" />。
               如果 <see langword="false" />, ，则导航器的位置保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到具有指定的命名空间前缀的命名空间节点。
            </summary>
      <param name="name">
                命名空间节点的命名空间前缀。
              </param>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到指定的命名空间; <see langword="false" /> 如果找不到匹配的命名空间节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不定位在元素节点上。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>
              当在派生类中重写时，会将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动至当前节点的下一个同级节点。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个同级节点，则为 <see langword="true" />；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前位于属性节点上，则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 至相匹配的当前节点的下一个同级节点 <see cref="T:System.Xml.XPath.XPathNodeType" /> 指定。
            </summary>
      <param name="type">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> 将移动到的同级节点。
              </param>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个同级节点，则为 <see langword="true" />；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前位于属性节点上，则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 具有本地名称和命名空间 URI 指定的下一个同级节点。
            </summary>
      <param name="localName">
                要移动到的下一个同级节点的本地名称。
              </param>
      <param name="namespaceURI">
                要移动到的下一个同级节点的命名空间 URI。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个同级节点; <see langword="false" /> 如果没有其他同级或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在属性节点上。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>
              当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到下一个属性。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个属性，则返回 <see langword="true" />；如果没有其他属性，则返回 <see langword="false" />。
               如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到下一步的命名空间节点。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个命名空间节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>
              当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 到下一个命名空间节点匹配 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 指定。
            </summary>
      <param name="namespaceScope">
        <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值，该值描述命名空间范围。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个命名空间节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>
              当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 至当前节点的父节点。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的父节点; 否则为 <see langword="false" />。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>
              当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 至当前节点的上一个同级节点。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到上一个同级节点; 否则为 <see langword="false" /> 是否没有上一个同级节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在属性节点上。
               如果 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置将保持不变。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>
              将移动 <see cref="T:System.Xml.XPath.XPathNavigator" /> 至当前节点所属的根节点。
            </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>
              当在派生类中被重写时，获取当前节点的限定名。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，包含当前节点的限定 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>
              当在派生类中被重写时，获取当前节点的命名空间 URI。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，它包含当前节点的命名空间 URI；如果当前节点没有命名空间 URI，则为 <see cref="F:System.String.Empty" />。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>
              当在派生类中重写时获取 <see cref="T:System.Xml.XmlNameTable" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" />。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" /> 对象，它使你能够获取的原子化的版本 <see cref="T:System.String" /> XML 文档中。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>
              获取 <see cref="T:System.Collections.IEqualityComparer" />，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的相等比较。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEqualityComparer" />，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的相等比较。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>
              当在派生类中重写时，获取当前节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。
            </summary>
      <returns>
              表示当前节点其中一个 <see cref="T:System.Xml.XPath.XPathNodeType" /> 值。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>
              获取或设置表示当前节点及其子节点的开始标记及结束标记的标记。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，包含表示当前节点及其子节点的开始标记及结束标记的标记。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>
              当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />它包含与当前节点关联的命名空间前缀。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>
              返回一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不允许在前面追加新的子节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>
              使用指定的 XML 字符串在当前节点的子节点列表的开始处创建一个新的子节点。
            </summary>
      <param name="newChild">
                新的子节点的 XML 数据字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  XML 字符串参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的当前节点不允许预置新的子节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  XML 字符串参数的格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XmlReader" /> 对象的 XML 内容，在当前节点的子节点列表的开始处创建一个新的子节点。
            </summary>
      <param name="newChild">
                一个 <see cref="T:System.Xml.XmlReader" /> 对象，它定位在新子节点的 XML 数据上。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所位于的当前节点不允许在其前面预置新的子节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容的格式不标准。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象中的节点在当前节点的子节点列表的开始处创建一个新的子节点。
            </summary>
      <param name="newChild">
                一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的子节点添加的节点上。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所位于的当前节点不允许在其前面预置新的子节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>
              使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的开始处创建一个新的子元素。
            </summary>
      <param name="prefix">
                新的子元素（如果有）的命名空间前缀。
              </param>
      <param name="localName">
                新的子元素（如果有）的本地名称。
              </param>
      <param name="namespaceURI">
                新的子元素（如果有）的命名空间 URI。
                <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。
              </param>
      <param name="value">
                新的子元素的值。
                 如果传递了 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，则将创建一个空元素。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不允许在前面追加新的子节点。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>
              返回 <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含当前节点及其子节点。
            </summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含当前节点及其子节点。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不会在元素节点或根节点上进行定位。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>
              替换从当前节点到指定节点之间的一组同级节点。
            </summary>
      <param name="lastSiblingToReplace">
                一个 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位在要替换的范围内的最后一个同级节点上。
              </param>
      <returns>
              一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于指定替换范围。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  指定的要替换的最后一个节点不是当前节点的有效同级节点。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>
              将当前节点替换为指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的内容。
            </summary>
      <param name="newNode">
                在新节点上定位的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不位于元素、文本、处理指令或注释节点上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数的 XML 内容的格式不标准。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>
              将当前节点替换为指定的字符串内容。
            </summary>
      <param name="newNode">
                新节点的 XML 数据字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  XML 字符串参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未定位于元素、文本、处理指令或注释节点上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  XML 字符串参数的格式不正确。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>
              将当前节点替换为指定的 <see cref="T:System.Xml.XmlReader" /> 对象的内容。
            </summary>
      <param name="newNode">
                位于新节点的 XML 数据上的 <see cref="T:System.Xml.XmlReader" /> 对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不位于元素、文本、处理指令或注释节点上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容的格式不标准。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>
              获取作为架构验证结果分配给当前节点的架构信息。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象，其中包含当前节点的架构信息。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>
              使用指定的 XPath 表达式选择节点集。
            </summary>
      <param name="xpath">
                表示 XPath 表达式的 <see cref="T:System.String" />。
              </param>
      <returns>
              指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式包含错误或其返回类型不是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 来选择节点集。
            </summary>
      <param name="expr">
                包含已编译的 XPath 查询的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。
              </param>
      <returns>
              指向选定节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式包含错误或其返回类型不是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>
              使用指定的 XPath 表达式与指定用来解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象选择节点集。
            </summary>
      <param name="xpath">
                表示 XPath 表达式的 <see cref="T:System.String" />。
              </param>
      <param name="resolver">
                用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。
              </param>
      <returns>
              指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  XPath 表达式包含错误或其返回类型不是节点集。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 表达式无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
              选择所有祖先节点的当前节点中具有匹配 <see cref="T:System.Xml.XPath.XPathNodeType" />。
            </summary>
      <param name="type">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> 祖先节点。
              </param>
      <param name="matchSelf">
                若要在所选内容上包含上下文节点，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
               返回的节点的顺序与文档顺序相反。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>
              选择当前节点中具有指定的本地名称和命名空间 URI 的所有祖先节点。
            </summary>
      <param name="name">
                祖先节点的本地名称。
              </param>
      <param name="namespaceURI">
                祖先节点的命名空间 URI。
              </param>
      <param name="matchSelf">
                若要在所选内容上包含上下文节点，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
               返回的节点的顺序与文档顺序相反。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  无法将 <see langword="null" /> 作为一个参数进行传递。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>
              选择当前节点的所有有相匹配的子节点 <see cref="T:System.Xml.XPath.XPathNodeType" />。
            </summary>
      <param name="type">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子节点。
              </param>
      <returns>
              一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>
              选择当前节点中具有指定的本地名称和命名空间 URI 的所有子节点。
            </summary>
      <param name="name">
                子节点的本地名称。
              </param>
      <param name="namespaceURI">
                子节点的命名空间 URI。
              </param>
      <returns>
              一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  无法将 <see langword="null" /> 作为一个参数进行传递。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
              选择当前节点的具有匹配的所有子代节点 <see cref="T:System.Xml.XPath.XPathNodeType" />。
            </summary>
      <param name="type">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> 子代节点。
              </param>
      <param name="matchSelf">
        <see langword="true" /> 若要在所选内容; 中包括上下文节点否则为 <see langword="false" />。
              </param>
      <returns>
              一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>
              选择当前节点中具有指定的本地名称和命名空间 URI 的所有子代节点。
            </summary>
      <param name="name">
                子代节点的本地名称。
              </param>
      <param name="namespaceURI">
                命名空间 URI 的子代节点。
              </param>
      <param name="matchSelf">
        <see langword="true" /> 若要在所选内容; 中包括上下文节点否则为 <see langword="false" />。
              </param>
      <returns>
              一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  无法将 <see langword="null" /> 作为一个参数进行传递。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>
              通过指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中选择单个节点，以解析命名空间前缀。
            </summary>
      <param name="xpath">
                表示 XPath 表达式的 <see cref="T:System.String" />。
              </param>
      <param name="resolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象用于解析 XPath 查询中的命名空间前缀。
              </param>
      <returns>
              一个包含指定 XPath 查询的第一个匹配节点的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象；如果没有查询结果，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 查询无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>
              使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中选择单个节点。
            </summary>
      <param name="xpath">
                表示 XPath 表达式的 <see cref="T:System.String" />。
              </param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 查询无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>
              使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中选择单个节点。
            </summary>
      <param name="expression">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 对象，其中包含已编译的 XPath 查询。
              </param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
                </exception>
      <exception cref="T:System.Xml.XPath.XPathException">
                  XPath 查询无效。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>
              设置当前节点的类型化值。
            </summary>
      <param name="typedValue">
                节点的新类型化值。
              </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持指定的对象类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  指定的值不能为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未定位在元素或属性节点上。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>
              设置当前节点的值。
            </summary>
      <param name="value">
                节点的新值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  值参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 位于根节点（即命名空间节点）上，或指定的值无效。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。
                </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>
              获取当前节点的文本值。
            </summary>
      <returns>
              一个 <see langword="string" /> ，其中包含当前节点的文本值。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>
              获取作为最合适的 .NET Framework 类型的已装箱对象的当前节点。
            </summary>
      <returns>
              作为最合适的 .NET Framework 类型的已装箱对象的当前节点。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>
              使用 <see cref="T:System.Xml.XPath.XPathNavigator" /> 实现提供"虚拟化"XML 查看在存储区，以提供对基础对象的访问。
            </summary>
      <returns>
              默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
              获取当前节点的值作为<see cref="T:System.Type" />指定，使用<see cref="T:System.Xml.IXmlNamespaceResolver" />指定用来解析命名空间前缀的对象。
            </summary>
      <param name="returnType">
        <see cref="T:System.Type" />返回为当前节点的值。
              </param>
      <param name="nsResolver">
                用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。
              </param>
      <returns>
              形式的当前节点的值<see cref="T:System.Type" />请求。
            </returns>
      <exception cref="T:System.FormatException">
                  当前节点的值不是目标类型的正确格式。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>
              获取当前节点的值作为 <see cref="T:System.Boolean" />。
            </summary>
      <returns>
              当前节点的值作为 <see cref="T:System.Boolean" />。
            </returns>
      <exception cref="T:System.FormatException">
                  当前节点的字符串值不能转换为 <see cref="T:System.Boolean" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Boolean" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>
              获取当前节点的值作为 <see cref="T:System.DateTime" />。
            </summary>
      <returns>
              当前节点的值作为 <see cref="T:System.DateTime" />。
            </returns>
      <exception cref="T:System.FormatException">
                  当前节点的字符串值不能转换为 <see cref="T:System.DateTime" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.DateTime" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>
              获取当前节点的值作为 <see cref="T:System.Double" />。
            </summary>
      <returns>
              当前节点的值作为 <see cref="T:System.Double" />。
            </returns>
      <exception cref="T:System.FormatException">
                  当前节点的字符串值不能转换为 <see cref="T:System.Double" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Double" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>
              获取当前节点的值作为 <see cref="T:System.Int32" />。
            </summary>
      <returns>
              当前节点的值作为 <see cref="T:System.Int32" />。
            </returns>
      <exception cref="T:System.FormatException">
                  当前节点的字符串值不能转换为 <see cref="T:System.Int32" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Int32" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>
              获取当前节点的值作为 <see cref="T:System.Int64" />。
            </summary>
      <returns>
              当前节点的值作为 <see cref="T:System.Int64" />。
            </returns>
      <exception cref="T:System.FormatException">
                  当前节点的字符串值不能转换为 <see cref="T:System.Int64" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  尝试强制转换为 <see cref="T:System.Int64" /> 无效。
                </exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>
              获取当前节点的 .NET Framework <see cref="T:System.Type" />。
            </summary>
      <returns>
              当前节点的 .NET Framework <see cref="T:System.Type" />。
               默认值为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>
              将当前节点及其子节点流式传输到指定的 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="writer">
                要流式传输至的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>
              获取 xml:lang 当前节点范围。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含值的 xml:lang 作用域，或 <see cref="F:System.String.Empty" /> 如果当前节点没有任何 xml:lang 作用域返回的值。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>
              获取 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 当前节点的信息。
            </summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象; 默认值是 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>
              创建一份新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。
            </summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的新副本。
            </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>
              在选定节点集上提供一个迭代器。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>
              初始化 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>
              当在派生类中重写时返回此克隆 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。
            </summary>
      <returns>
              一个新 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象克隆 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>
              获取最后一个节点的索引中所选节点集。
            </summary>
      <returns>
              所选节点，则为 0，如果没有选定的节点集中的最后一个节点的索引。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>
              在派生类中重写时，获取此 <see cref="T:System.Xml.XPath.XPathNodeIterator" />的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，它定位在当前上下文节点上。
            </summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，定位在从中选择节点集的上下文节点上。
               必须调用 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> 方法将 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 移至所选集中的第一个节点。
            </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>
              当在派生类中重写时获取所选组节点中的当前位置的索引。
            </summary>
      <returns>
              当前的位置的索引。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>
              返回 <see cref="T:System.Collections.IEnumerator" /> 要循环访问所选的节点集对象。
            </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 要循环访问所选的节点集对象。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>
              在派生类中重写时，将 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> 属性返回的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象移至选定节点集中的下一个节点。
            </summary>
      <returns>
              如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象已移至下一个节点，则为 <see langword="true" />；如果没有其他选定节点，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>
              创建作为当前实例副本的新对象。
            </summary>
      <returns>
              作为此实例副本的新对象。
            </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>
              定义可从返回的 XPath 节点类型 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>
              任一 <see cref="T:System.Xml.XPath.XPathNodeType" /> 节点类型。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>
              一个属性，如 id='123'。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>
              一个注释，如 &lt;!-- my comment --&gt;
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>
              一个元素，如 &lt;element&gt;。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>
              命名空间，如 xmlns="namespace"。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>
              一个处理指令，如 &lt;?pi test?&gt;。
               这不包括 XML 声明，看不到 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>
              XML 文档或节点树的根节点。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>
              具有空白字符的节点和 xml:space 设置为 preserve。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>
              节点的文本内容。
               等效于文档对象模型 (DOM) 的文本和 CDATA 节点类型。
               包含至少一个字符。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>
              与空白字符和任何有意义的空白节点。
               空白字符 #x20, ，#x9, ，#xD, ，或 #xA。
            </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>
              指定的 XPath 表达式的返回类型。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>
              任何 XPath 节点类型。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
              一个 <see cref="T:System.Boolean" /><see langword="true" /> 或 <see langword="false" /> 值。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>
              表达式计算结果不正确的 XPath 类型。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>
              一个树片段。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>
              一个节点集合。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>
              一个数值。
            </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>
              一个 <see cref="T:System.String" /> 值。
            </summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>
              提供在运行时执行期间在可扩展样式表语言转换 (XSLT) 样式表中定义的给定函数的接口。
            </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>
              获取函数的参数列表提供的 XML 路径语言 (XPath) 类型。
               此信息可以用于发现函数可用于区分重载函数的签名。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Xml.XPath.XPathResultType" /> 表示函数的参数列表的类型。
            </returns>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>
              提供了方法来调用该函数使用给定的上下文中给定的参数。
            </summary>
      <param name="xsltContext">
                函数调用的 XSLT 上下文。
              </param>
      <param name="args">
                函数调用的参数。
                 每个参数是数组中的元素。
              </param>
      <param name="docContext">
                函数调用的的上下文节点。
              </param>
      <returns>
        <see cref="T:System.Object" /> 表示该函数的返回值。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>
              获取函数的参数的最大数目。
               这使用户能够区分重载函数。
            </summary>
      <returns>
              函数的参数的最大数目。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>
              获取函数的参数的最小数目。
               这使用户能够区分重载函数。
            </summary>
      <returns>
              函数参数的最小数目。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>
              获取 <see cref="T:System.Xml.XPath.XPathResultType" /> 表示由该函数返回的 XPath 类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" /> 表示由该函数返回的 XPath 类型 
            </returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>
              提供在运行时执行期间定义样式表中的给定变量的接口。
            </summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>
              在运行时变量的计算结果并返回一个对象，表示该变量的值。
            </summary>
      <param name="xsltContext">
        <see cref="T:System.Xml.Xsl.XsltContext" /> 表示该变量的执行上下文。
              </param>
      <returns>
        <see cref="T:System.Object" /> 表示该变量的值。
               可能的返回类型包括数字、 字符串、 布尔值、 文档片段或节点集。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>
              获取一个值，该值指示变量是否本地的。
            </summary>
      <returns>
        <see langword="true" /> 如果变量是在当前上下文中; 中的本地变量否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>
              获取一个值，该值指示变量是否为可扩展样式表语言转换 (XSLT) 参数。
               这可以给样式表或一个模板参数。
            </summary>
      <returns>
        <see langword="true" /> 如果变量是 XSLT 参数;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>
              获取 <see cref="T:System.Xml.XPath.XPathResultType" /> 表示该变量的 XML 路径语言 (XPath) 类型。
            </summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" /> 表示 XPath 类型的变量。
            </returns>
    </member>
  </members>
</doc>