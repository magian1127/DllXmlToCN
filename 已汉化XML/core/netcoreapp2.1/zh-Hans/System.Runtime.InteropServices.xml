<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>
              指定用于搜索提供平台调用函数的 DLL 的路径。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 类，同时指定要搜索的目标平台时，将调用时使用的路径。
            </summary>
      <param name="paths">
                指定的路径的枚举值的按位组合， LoadLibraryEx 函数搜索期间平台时，将调用。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>
              获取指定的路径的枚举值的按位组合， LoadLibraryEx 函数搜索期间平台时，将调用。
            </summary>
      <returns>
              调用指定的平台搜索路径的枚举值的按位组合。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>
              设置当从支持默认参数的语言中调用参数时参数的默认值。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 类具有默认值的参数。
            </summary>
      <param name="value">
                一个表示参数的默认值的对象。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>
              获取参数的默认值。
            </summary>
      <returns>
              一个表示参数的默认值的对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>
              包装的对象应以封送拆收器 <see langword="VT_DISPATCH" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 正在包装的对象类。
            </summary>
      <param name="obj">
                对象包装并转换为 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是一个类或数组。
                
                  - 或 - 
                
                  <paramref name="obj" /> 不支持 <see langword="IDispatch" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="obj" /> 参数标记有 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />  属性的值传递给 <see langword="false" />。
                
                  - 或 -
                
                  <paramref name="obj" /> 参数从使用标记的类型继承 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />  属性的值传递给 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>
              获取包装的对象 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />。
            </summary>
      <returns>
              包装的对象 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>
              指定方法、字段或属性的 COM 调度标识符 (DISPID)。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see langword="DispIdAttribute" /> 指定 dispid 的类。
            </summary>
      <param name="dispId">
                该成员的 DISPID。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>
              获取该成员的 DISPID。
            </summary>
      <returns>
              该成员的 DISPID。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>
              指示由非托管动态链接库 (DLL) 公开为静态入口点的特性化方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 同名的方法所属的 dll，若要导入的类。
            </summary>
      <param name="dllName">
                包含非托管的方法的 DLL 的名称。
                 这可以包括程序集显示名称，如果该 DLL 包含在程序集中。
              </param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>
              启用或禁用最佳的映射行为，在将 Unicode 字符转换为 ANSI 字符。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>
              指示一个入口点的调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>
              指示如何封送字符串参数的方法和控件名称重整。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>
              指示名称或要调用的 DLL 入口点的第几个。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>
              控件是否 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段会导致公共语言运行时搜索入口点名称不是指定的非托管的 DLL。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>
              指示是否具有非托管的方法 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值被直接转换或是否 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值自动转换为异常。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>
              指示是否被调用方调用 <see langword="SetLastError" /> 从特性化的方法返回之前的 Win32 API 函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>
              启用或禁用引发的异常在转换为 ANSI"？"字符。
            </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>
              获取包含入口点的 DLL 文件的名称。
            </summary>
      <returns>
              包含入口点的 DLL 文件的名称。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>
              指定用于搜索提供平台调用函数的 DLL 的路径。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>
              DLL 搜索路径中包括应用程序目录。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>
              在搜索程序集依赖项，包括目录包含的程序集本身，并首先搜索该目录。
               此值由.NET Framework 中，在路径传递给 Win32 之前 LoadLibraryEx 函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>
              搜索应用程序目录，然后调用 Win32 LoadLibraryEx 起作用 LOAD_WITH_ALTERED_SEARCH_PATH 标志。
               如果指定了任何其他值，则忽略此值。
               不支持的操作系统 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 属性使用此值，并忽略其他值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>
              包括应用程序目录中， <see langword="%WinDir%\System32" /> 目录和 DLL 搜索路径中的用户目录。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>
              包括 <see langword="%WinDir%\System32" /> DLL 搜索路径中的目录。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>
              搜索 DLL 在搜索其他文件夹之前所处的位置的文件夹中的 DLL 的依赖关系。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>
              包括使用 Win32 显式添加到进程范围的搜索路径的任何路径 AddDllDirectory 函数。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>
              包装的对象应以封送拆收器 <see langword="VT_ERROR" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类提供的异常相对应的 HRESULT。
            </summary>
      <param name="e">
                要转换为错误代码的异常。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类相应的 HRESULT 错误。
            </summary>
      <param name="errorCode">
                该错误的 HRESULT。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类，具有一个包含错误的 HRESULT 的对象。
            </summary>
      <param name="errorCode">
                包含错误的 HRESULT 的对象。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="errorCode" /> 参数不是 <see cref="T:System.Int32" /> 类型。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>
              获取包装的错误代码。
            </summary>
      <returns>
              该错误的 HRESULT。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>
              提供用于从非托管内存访问托管对象的方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>
              检索中的某个对象的地址 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 处理。
            </summary>
      <returns>
              形式的固定对象的地址 <see cref="T:System.IntPtr" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该句柄是任何类型，而不 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>
              分配 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> 句柄指定的对象。
            </summary>
      <param name="value">
                使用该对象 <see cref="T:System.Runtime.InteropServices.GCHandle" />。
              </param>
      <returns>
              一个新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> ，防止垃圾回收的对象。
               这 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 必须随发布 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 不再需要时。
            </returns>
      <exception cref="T:System.ArgumentException">
                  具有非基元 （非本机结构中） 成员的实例无法固定数据提示。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>
              为指定的对象分配指定类型的句柄。
            </summary>
      <param name="value">
                使用该对象 <see cref="T:System.Runtime.InteropServices.GCHandle" />。
              </param>
      <param name="type">
                其中一个 <see cref="T:System.Runtime.InteropServices.GCHandleType" /> 值，指示的类型的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 来创建。
              </param>
      <returns>
              一个新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的指定类型。
               这 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 必须随发布 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 不再需要时。
            </returns>
      <exception cref="T:System.ArgumentException">
                  具有非基元 （非本机结构中） 成员的实例无法固定数据提示。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否等于当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
            </summary>
      <param name="o">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 要与当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否等于当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.GCHandle" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  该句柄是永远不会初始化或释放。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>
              返回一个新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 根据句柄创建某个托管对象的对象。
            </summary>
      <param name="value">
        <see cref="T:System.IntPtr" /> 创建某个托管对象的句柄 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
              </param>
      <returns>
              一个新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对应于值参数的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 参数的值为 <see cref="F:System.IntPtr.Zero" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>
              返回当前的标识符 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
            </summary>
      <returns>
              当前的标识符 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>
              获取一个值，该值指示是否分配了句柄。
            </summary>
      <returns>
        <see langword="true" /> 如果分配了句柄;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否相等。
            </summary>
      <param name="a">
                一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 要与 <paramref name="b" /> 参数。
              </param>
      <param name="b">
                一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 要与 <paramref name="a" /> 参数。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="a" /> 和 <paramref name="b" /> 参数不相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>
              一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 使用内部整数表示形式存储。
            </summary>
      <param name="value">
        <see cref="T:System.IntPtr" /> ，该值指示在转换为所需的句柄。
              </param>
      <returns>
              存储 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象使用内部整数表示形式。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
              一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 使用内部整数表示形式存储。
            </summary>
      <param name="value">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的整数是必需的。
              </param>
      <returns>
              整数值。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>
              返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否不相等。
            </summary>
      <param name="a">
                一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 要与 <paramref name="b" /> 参数。
              </param>
      <param name="b">
                一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 要与 <paramref name="a" /> 参数。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="a" /> 和 <paramref name="b" /> 参数不相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>
              获取或设置该句柄表示的对象。
            </summary>
      <returns>
              该句柄表示的对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  句柄已释放，或者永远不会初始化。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>
              返回的内部整数表示形式 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象来检索内部整数表示形式。
              </param>
      <returns>
        <see cref="T:System.IntPtr" /> 对象，表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>
              表示类型的句柄 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 类可以分配。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>
              此句柄类型表示一个不透明的句柄，这意味着您不能解决钉住的对象，通过该句柄的地址。
               此类型可用于跟踪对象，并防止其在垃圾回收器的集合。
               此枚举成员的非托管客户端保留唯一的引用，即从垃圾回收到托管对象无法检测到时很有帮助。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>
              此句柄类型是类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />, ，但允许要执行的固定对象的地址。
               这可阻止垃圾回收器移动对象，因此将降低垃圾回收器的效率。
               使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 方法来尽可能快地释放分配的句柄。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>
              此句柄类型用于跟踪对象，但使其可以成为收集。
               回收某个对象时，内容 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 均被清零。
              <see langword="Weak" /> 终结器运行之前，这样即使终结器复活该对象引用均被清零 <see langword="Weak" /> 引用仍归零。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>
              此句柄类型是类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />, ，但如果在终止期间复活对象句柄不归零。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>
              提供一个显式 <see cref="T:System.Guid" /> 出现自动 GUID 时不需要。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 带有指定 GUID 的类。
            </summary>
      <param name="guid">
        <see cref="T:System.Guid" /> 要分配。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>
              获取<see cref="T:System.Guid" />的类。
            </summary>
      <returns>
        <see cref="T:System.Guid" />的类。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>
              跟踪未完成的句柄并在达到指定阈值时强制实施垃圾回收。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类使用的名称和从此处开始句柄回收的阈值。
            </summary>
      <param name="name">
                收集器名称。
                 此参数允许您跟踪的名称收集器分别处理类型。
              </param>
      <param name="initialThreshold">
                一个值，指定应开始执行回收的点。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类使用的名称，从此处开始阈值处理集合，并且必须在该句柄进行回收的阈值。
            </summary>
      <param name="name">
                收集器名称。
                  此参数允许您跟踪的名称收集器分别处理类型。
              </param>
      <param name="initialThreshold">
                一个值，指定应开始执行回收的点。
              </param>
      <param name="maximumThreshold">
                一个值，指定必须进行回收的点。
                 这应设置为可用的句柄的最大数量。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。
                
                  - 或 -
                
                  <paramref name="maximumThreshold" /> 参数小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maximumThreshold" /> 参数是小于 <paramref name="initialThreshold" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>
              递增当前句柄计数。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>
              获取收集的句柄的数量。
            </summary>
      <returns>
              收集的句柄数。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>
              获取一个值，指定应开始执行回收的点。
            </summary>
      <returns>
              一个值，指定应开始执行回收的点。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>
              获取一个值，指定必须进行回收的点。
            </summary>
      <returns>
              一个值，指定必须进行回收的点。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>
              获取名称 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 对象。
            </summary>
      <returns>
              这 <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 属性使您能够分别跟踪句柄类型的名称收集器。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>
              递减当前句柄计数。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。
                </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>
              将包含句柄的托管对象包装到通过平台调用传递到非托管代码的资源中。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 类包装的对象和由非托管代码使用的资源的句柄。
            </summary>
      <param name="wrapper">
                平台 invoke 调用之前应不能被终结的托管的对象返回。
              </param>
      <param name="handle">
        <see cref="T:System.IntPtr" /> ，该值指示资源的句柄。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>
              获取资源的句柄。
            </summary>
      <returns>
              资源句柄。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>
              对指定资源返回的句柄 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。
            </summary>
      <param name="value">
                需要一个句柄的对象。
              </param>
      <returns>
              指定的资源的句柄 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>
              返回的内部整数表示形式 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象来检索内部整数表示形式。
              </param>
      <returns>
        <see cref="T:System.IntPtr" /> 对象，表示 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>
              获取持有对资源的句柄的对象。
            </summary>
      <returns>
              保存对资源的句柄的对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>
              为客户提供访问实际对象的方法，而不是访问自定义封送处理程序分发的适配器对象的方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>
              提供由自定义封送处理程序包装的基础对象的访问。
            </summary>
      <returns>
              该适配器对象所包含的对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>
              使用户能够编写扩展程序的托管对象的激活代码 <see cref="T:System.MarshalByRefObject" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>
              创建指定类型的新实例。
            </summary>
      <param name="serverType">
                要激活的类型。
              </param>
      <returns>
              一个 <see cref="T:System.MarshalByRefObject" /> 与指定的类型相关联。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>
              提供用于处理方法调用的自定义包装。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>
              当不再需要执行必要的托管数据的清理。
            </summary>
      <param name="ManagedObj">
                要销毁托管的对象。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>
              当不再需要执行必要的非托管数据的清理。
            </summary>
      <param name="pNativeData">
                指向要销毁的非托管数据的指针。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>
              返回要封送处理的本机数据的大小。
            </summary>
      <returns>
              大小 （以字节为单位的本机数据）。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>
              将托管的数据转换为非托管数据。
            </summary>
      <param name="ManagedObj">
                要转换的托管的对象。
              </param>
      <returns>
              指向托管对象的 COM 视图的指针。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>
              将非托管的数据转换为托管数据。
            </summary>
      <param name="pNativeData">
                指向要包装的非托管数据的指针。
              </param>
      <returns>
              表示 COM 数据的托管的视图的对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>
              使开发人员能够提供的自定义的托管实现 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>
              返回一个接口根据指定的接口 id。
            </summary>
      <param name="iid">
                所请求的接口的 GUID。
              </param>
      <param name="ppv">
                对所请求的接口，此方法返回时的引用。
              </param>
      <returns>
              一个枚举值，该值指示是否的自定义实现 IUnknown::QueryInterface 使用。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>
              指示程序集内定义的类型最初定义的类型库中。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 的原始类型库文件同名的类。
            </summary>
      <param name="tlbFile">
                原始类型库文件的位置。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>
              获取原始类型库文件的名称。
            </summary>
      <returns>
              原始类型库文件的名称。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>
              指示数据应从调用方封送到被调用方，而不是从被调用方封送回调用方。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.InAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>
              表示一个托管的接口是双重的、 仅支持调度或 <see langword="IUnknown" /> -仅在向 COM 公开时
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类与指定 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员。
            </summary>
      <param name="interfaceType">
                描述如何向 COM 客户端公开接口。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类与指定 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员。
            </summary>
      <param name="interfaceType">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 描述如何向 COM 客户端公开接口的值。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>
              获取 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述如何向 COM 公开接口
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述如何向 COM 公开接口
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>
              当使用无效的 COM 对象时引发的异常。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>
              初始化的实例 <see langword="InvalidComObjectException" /> 使用默认属性。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>
              初始化的实例 <see langword="InvalidComObjectException" /> 与一条消息。
            </summary>
      <param name="message">
                指示异常原因的消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="COMException" /> 从序列化数据的类。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>
              当封送处理程序遇到无法封送到托管代码的变量类型自变量时，由该封送处理程序引发的异常。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>
              使用默认值初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>
              新实例初始化 <see langword="InvalidOleVariantTypeException" /> 使用指定的消息的类。
            </summary>
      <param name="message">
                指示异常原因的消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="InvalidOleVariantTypeException" /> 从序列化数据的类。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>
              该值指示该方法的非托管的签名所需区域设置标识符 (LCID) 参数。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see langword="LCIDConversionAttribute" /> 用 LCID 的非托管签名中的位置。
            </summary>
      <param name="lcid">
                指示的位置 LCID 参数在非托管签名中，其中 0 是第一个参数。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>
              获取 LCID 参数的非托管签名中的位置。
            </summary>
      <returns>
              中的位置 LCID 参数的非托管签名中，其中 0 是第一个参数。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>
              为用户自定义互操作存根 （stub） 中托管为 COM 互操作方案提供支持。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> 初始化具有指定的类类型和方法名称。
            </summary>
      <param name="classType">
                包含所需的存根 （stub） 方法的类。
              </param>
      <param name="methodName">
                存根 （stub） 方法的名称。
              </param>
      <exception cref="T:System.ArgumentException">
                  存根 （stub） 方法不在同一程序集中作为包含托管互操作方法的接口。
                
                  - 或 -
                
                  <paramref name="classType" /> 是泛型类型。
                
                  - 或 -
                
                  <paramref name="classType" /> 是一个接口。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodName" /> 无法找到。
                
                  - 或 -
                
                  该方法不是静态或非泛型。
                
                  - 或 -
                
                  方法的参数列表与预期的参数列表中为存根 （stub） 不匹配。
                </exception>
      <exception cref="T:System.MethodAccessException">
                  包含托管互操作方法的接口不具有访问给存根 （stub） 方法中，由于该存根 （stub） 方法具有私有或受保护的辅助功能，或由于安全问题。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>
              获取包含所需的存根 （stub） 方法的类。
            </summary>
      <returns>
              包含自定义互操作的存根 （stub） 的类。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>
              获取该存根 （stub） 方法的名称。
            </summary>
      <returns>
              自定义互操作存根 （stub） 的名称。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>
              提供了一个方法集合，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>
              递增指定接口上的引用计数。
            </summary>
      <param name="pUnk">
                要递增的接口引用计数。
              </param>
      <returns>
              新值的引用计数 <paramref name="pUnk" /> 参数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>
              从 COM 任务内存分配器分配指定大小的内存块。
            </summary>
      <param name="cb">
                要分配的内存块的大小。
              </param>
      <returns>
              一个整数，表示分配的内存块的地址。
               与必须释放此内存 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来满足该请求。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>
              通过使用指定的字节数，从进程的非托管内存中分配内存。
            </summary>
      <param name="cb">
                内存中的所需字节数。
              </param>
      <returns>
              指向新分配的内存的指针。
               必须使用释放此内存 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来满足该请求。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>
              通过使用指向指定字节数的指针，从进程的非托管内存中分配内存。
            </summary>
      <param name="cb">
                内存中的所需字节数。
              </param>
      <returns>
              指向新分配的内存的指针。
               必须使用释放此内存 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来满足该请求。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>
              指示是否可以清除任何上下文中的运行时可调用包装器 (RCW)。
            </summary>
      <returns>
        <see langword="true" /> 如果清除; 任何 Rcw否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>
              获取由指定的名字对象标识的接口指针。
            </summary>
      <param name="monikerName">
                与所需接口指针相对应的名字对象。
              </param>
      <returns>
              一个对象，它包含对由 <paramref name="monikerName" /> 参数标识的接口指针的引用。
               名字对象是一个名称，在此情况下，名字对象由接口定义。
            </returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">
                  非托管的 <see langword="BindToMoniker" /> 方法返回无法识别的 HRESULT。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>
              更改对象的强度 COM 可调用包装 (CCW) 句柄。
            </summary>
      <param name="otp">
                一个对象，其 CCW 包含带有引用计数的句柄。
                 如果 CCW 上的引用计数大于零，则该句柄是强句柄；否则为弱句柄。
              </param>
      <param name="fIsWeak">
        <see langword="true" /> 若要更改的句柄强度在 <paramref name="otp" /> 到弱，而不考虑其引用计数; 参数 <see langword="false" /> 在重置的句柄强度 <paramref name="otp" /> 要进行引用计数。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>
              通知运行时清理当前上下文中分配的所有运行时可调用包装器 (RCW)。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管单精度浮点数数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管的 <see cref="T:System.IntPtr" /> 数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管单精度浮点数数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管 64 位带符号整数数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管 32 位带符号整数数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管 16 位带符号整数数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管双精度浮点数数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管的内存指针复制到托管的 <see cref="T:System.IntPtr" /> 数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管 8 位无符号整数数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管 64 位带符号整数数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管 32 位带符号整数数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管 16 位带符号整数数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>
              将数据从非托管内存指针复制到托管字符数组。
            </summary>
      <param name="source">
                从中进行复制的内存指针。
              </param>
      <param name="destination">
                要复制到的数组。
              </param>
      <param name="startIndex">
                目标数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管双精度浮点数数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管字符数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
              将数据从一维托管 8 位无符号整数数组复制到非托管内存指针。
            </summary>
      <param name="source">
                从中进行复制的一维数组。
              </param>
      <param name="startIndex">
                源数组中从零开始的索引，在此处开始复制。
              </param>
      <param name="destination">
                要复制到的内存指针。
              </param>
      <param name="length">
                要复制的数组元素的数目。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>
              聚合托管对象和指定的 COM 对象。
            </summary>
      <param name="pOuter">
                外部 <see langword="IUnknown" /> 指针。
              </param>
      <param name="o">
                要聚合的对象。
              </param>
      <returns>
              托管对象的内部 <see langword="IUnknown" /> 指针。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 是一个 Windows 运行时 对象。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              聚合托管的对象的指定类型和指定的 COM 对象。
            </summary>
      <param name="pOuter">
                外部 IUnknown 指针。
              </param>
      <param name="o">
                托管的对象进行合计。
              </param>
      <typeparam name="T">
                托管对象的类型为聚合。
              </typeparam>
      <returns>
              内部 IUnknown 托管对象的指针。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 是一个 Windows 运行时 对象。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>
              在指定类型的对象中包装指定的 COM 对象。
            </summary>
      <param name="o">
                要包装的对象。
              </param>
      <param name="t">
                要创建的包装器的类型。
              </param>
      <returns>
              新包装的对象，该对象是所需类型的实例。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 必须派生自 <see langword="__ComObject" />。
                
                  - 或 -
                
                  <paramref name="t" /> 是 Windows 运行时 类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 不支持所有必需的接口，因此无法转换为目标类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              在指定类型的对象中包装指定的 COM 对象。
            </summary>
      <param name="o">
                要包装的对象。
              </param>
      <typeparam name="T">
                要包装的对象类型。
              </typeparam>
      <typeparam name="TWrapper">
                要返回的对象的类型。
              </typeparam>
      <returns>
              新包装的对象。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 必须从中派生 <see langword="__ComObject" />。
                
                  - 或 -
                
                  <paramref name="T" /> 是 Windows 运行时 类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 不能转换为 <paramref name="TWrapper" /> 因为不支持所有所需的接口。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>
              释放指定的非托管内存块所指向的所有子结构。
            </summary>
      <param name="ptr">
                指向非托管内存块的指针。
              </param>
      <param name="structuretype">
                格式化类的类型。
                 这提供了删除中的缓冲区所需的布局信息 <paramref name="ptr" /> 参数。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 具有自动布局。
                   请改用顺序或显式。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              释放指定的非托管内存块所指向的所有指定类型的子结构。
            </summary>
      <param name="ptr">
                指向非托管内存块的指针。
              </param>
      <typeparam name="T">
                格式化结构的类型。
                 这提供了删除中的缓冲区所需的布局信息 <paramref name="ptr" /> 参数。
              </typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 具有自动布局。
                   请改用顺序或显式。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>
              释放对所有引用 运行时可调用包装 (RCW) 的引用计数设置为 0。
            </summary>
      <param name="o">
                要释放的 RCW。
              </param>
      <returns>
              与关联的 rcw 的引用计数的新值 <paramref name="o" />参数，如果释放成功，则为 0 （零）。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是有效的 COM 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>
              释放 <see langword="BSTR" /> 使用 COM SysFreeString 函数。
            </summary>
      <param name="ptr">
                要释放的 BSTR 的地址。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>
              释放由非托管 COM 任务内存分配器分配的内存块。
            </summary>
      <param name="ptr">
                要释放的内存的地址。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>
              释放以前从进程的非托管内存中分配的内存。
            </summary>
      <param name="hglobal">
                返回对原始匹配调用的句柄 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>
              返回指定类型的全局唯一标识符 (GUID)，或使用类型库导出程序 (Tlbexp.exe) 所用的算法生成 GUID。
            </summary>
      <param name="type">
                要为其生成 GUID 的类型。
              </param>
      <returns>
              指定类型的标识符。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>
              返回指定类型的编程标识符 (ProgID)。
            </summary>
      <param name="type">
                要获取其 ProgID 的类型。
              </param>
      <returns>
              指定类型的 ProgID。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数不是一个类，可以创建由 com 使用。
                   显示类别必须是公共的、 具有公共默认构造函数，以及为 COM 可见。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>
              返回一个指向 IUnknown 表示指定对象上的指定的接口的接口。
               默认情况下，启用自定义查询接口访问。
            </summary>
      <param name="o">
                提供接口的对象。
              </param>
      <param name="T">
                所请求接口的类型。
              </param>
      <returns>
              表示对象的指定接口的接口指针。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 参数不是一个接口。
                
                  - 或 -
                
                  类型不是对 COM 可见。
                
                  - 或 -
                
                  <paramref name="T" /> 参数是泛型类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 参数不支持所请求的接口。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="T" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>
              返回一个指向 IUnknown 表示指定对象上的指定的接口的接口。
               自定义查询接口访问由指定的自定义模式控制。
            </summary>
      <param name="o">
                提供接口的对象。
              </param>
      <param name="T">
                所请求接口的类型。
              </param>
      <param name="mode">
                一个枚举值，该值指示是否要应用 <see langword="IUnknown::QueryInterface" /> 由提供的自定义 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />。
              </param>
      <returns>
              表示对象的接口的接口指针。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 参数不是一个接口。
                
                  - 或 - 
                
                  类型不是对 COM 可见。
                
                  - 或 -
                
                  <paramref name="T" /> 参数是一个泛型类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  该对象 <paramref name="o" /> 不支持所请求的接口。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="T" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              返回一个指向 IUnknown 表示指定类型的对象上的指定的接口的接口。
               默认情况下，启用自定义查询接口访问。
            </summary>
      <param name="o">
                提供接口的对象。
              </param>
      <typeparam name="T">
        <paramref name="o" /> 的类型。
              </typeparam>
      <typeparam name="TInterface">
                要返回的接口类型。
              </typeparam>
      <returns>
              表示的接口指针 <paramref name="TInterface" /> 接口。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TInterface" /> 参数不是一个接口。
                
                  - 或 - 
                
                  类型不是对 COM 可见。
                
                  - 或 -
                
                  <paramref name="T" /> 参数是一个开放式泛型类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 参数不支持 <paramref name="TInterface" /> 接口。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>
              从指定的 COM 对象检索指定键所引用的数据。
            </summary>
      <param name="obj">
                包含所需数据的 COM 对象。
              </param>
      <param name="key">
                要从中检索数据的 <paramref name="obj" /> 的内部哈希表中的键。
              </param>
      <returns>
        <paramref name="obj" /> 参数的内部哈希表中 <paramref name="key" /> 参数所表示的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 COM 对象。
                
                  - 或 -
                
                  <paramref name="obj" /> 是一个 Windows 运行时 对象。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>
              将非托管函数指针转换为委托。
            </summary>
      <param name="ptr">
                要转换的非托管函数指针。
              </param>
      <param name="t">
                要返回的委托的类型。
              </param>
      <returns>
              可转换为适当的委托类型的委托实例。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数不是委托或泛型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 参数为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="t" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将非托管的函数指针转换为指定类型的委托。
            </summary>
      <param name="ptr">
                要转换的非托管函数指针。
              </param>
      <typeparam name="TDelegate">
                要返回的委托的类型。
              </typeparam>
      <returns>
              指定委托类型的实例。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 泛型参数不是一个委托，或它是一个开放式泛型类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>
              检索标识所发生异常的类型的代码。
            </summary>
      <returns>
              异常的类型。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>
              将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。
            </summary>
      <param name="errorCode">
                要转换的 HRESULT。
              </param>
      <returns>
              表示转换后的 HRESULT 的对象。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>
              将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象，其中包括通过此异常对象的 IErrorInfo 接口传递的其他错误信息。
            </summary>
      <param name="errorCode">
                要转换的 HRESULT。
              </param>
      <param name="errorInfo">
                指向 <see langword="IErrorInfo" /> 接口的指针，该接口提供有关错误的更多信息。
                 你可以指定 IntPtr(0) 以使用当前 <see langword="IErrorInfo" /> 接口，或者指定 IntPtr(-1) 以忽略当前 <see langword="IErrorInfo" /> 接口，仅从错误代码构造异常。
              </param>
      <returns>
              一个对象，表示转换后的 HRESULT 以及从 <paramref name="errorInfo" /> 获取的信息。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>
              将委托转换为可从非托管代码调用的函数指针。
            </summary>
      <param name="d">
                要传递给非托管代码的委托。
              </param>
      <returns>
              一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 参数是一个泛型类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将指定类型的委托转换为可从非托管代码调用的函数指针。
            </summary>
      <param name="d">
                要传递给非托管代码的委托。
              </param>
      <typeparam name="TDelegate">
                要转换的委托类型。
              </typeparam>
      <returns>
              一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>
              返回指定模块的实例句柄 (HINSTANCE)。
            </summary>
      <param name="m">
                具有所需 HINSTANCE 的模块。
              </param>
      <returns>
              HINSTANCE <paramref name="m" />; 否则为-1 模块没有 HINSTANCE。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>
              将指定异常转换为 HRESULT。
            </summary>
      <param name="e">
                要转换为 HRESULT 的异常。
              </param>
      <returns>
              映射到所提供的异常的 HRESULT。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>
              返回对应的最后一个使用执行 Win32 代码引起的错误的 HRESULT <see cref="T:System.Runtime.InteropServices.Marshal" />。
            </summary>
      <returns>
              对应于最后一个 Win32 错误代码的 HRESULT。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>
              返回 IDispatch 从托管对象的接口。
            </summary>
      <param name="o">
                该对象其 <see langword="IDispatch" /> 请求接口。
              </param>
      <returns>
        <see langword="IDispatch" /> 指针 <paramref name="o" /> 参数。
            </returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 不支持所请求的接口。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>
              返回 IUnknown 从托管对象的接口。
            </summary>
      <param name="o">
                该对象其 <see langword="IUnknown" /> 请求接口。
              </param>
      <returns>
        <see langword="IUnknown" /> 指针 <paramref name="o" /> 参数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>
              通过使用平台调用的最后一个非托管函数返回的错误代码返回调用具有 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 标志设置。
            </summary>
      <returns>
              最后一个错误代码设置通过调用 Win32 SetLastError 函数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>
              将对象转换为 COM VARIANT。
            </summary>
      <param name="obj">
                为其获取 COM VARIANT 的对象。
              </param>
      <param name="pDstNativeVariant">
                一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数是泛型类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将指定类型的对象转换为 COM VARIANT。
            </summary>
      <param name="obj">
                为其获取 COM VARIANT 的对象。
              </param>
      <param name="pDstNativeVariant">
                一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。
              </param>
      <typeparam name="T">
                要转换的对象的类型。
              </typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>
              返回表示 COM 对象通过指向的指针的类型的实例及其 IUnknown 接口。
            </summary>
      <param name="pUnk">
                一个指向 <see langword="IUnknown" /> 接口。
              </param>
      <returns>
              一个对象，表示指定的非托管 COM 对象。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>
              将 COM VARIANT 转换为对象。
            </summary>
      <param name="pSrcNativeVariant">
                指向 COM VARIANT 的指针。
              </param>
      <returns>
              对应于一个对象 <paramref name="pSrcNativeVariant" /> 参数。
            </returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> 不是有效的变体类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> 具有不受支持的类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              COM 将 VARIANT 转换为指定类型的对象。
            </summary>
      <param name="pSrcNativeVariant">
                指向 COM VARIANT 的指针。
              </param>
      <typeparam name="T">
                若要将 COM VARIANT 转换为的类型。
              </typeparam>
      <returns>
              对应于指定类型的对象 <paramref name="pSrcNativeVariant" /> 参数。
            </returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> 不是有效的变体类型。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> 具有不受支持的类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>
              将 COM 的数组转换 VARIANTs 到对象的数组。
            </summary>
      <param name="aSrcNativeVariant">
                指向 COM VARIANT 数组中第一个元素的指针。
              </param>
      <param name="cVars">
                中的 COM Variant 的计数 <paramref name="aSrcNativeVariant" />。
              </param>
      <returns>
              对应于一个对象数组 <paramref name="aSrcNativeVariant" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> 为负数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将 COM Variant 数组转换为指定类型的数组。
            </summary>
      <param name="aSrcNativeVariant">
                指向 COM VARIANT 数组中第一个元素的指针。
              </param>
      <param name="cVars">
                中的 COM Variant 的计数 <paramref name="aSrcNativeVariant" />。
              </param>
      <typeparam name="T">
                要返回的数组的类型。
              </typeparam>
      <returns>
              一个数组 <paramref name="T" /> 对象对应于 <paramref name="aSrcNativeVariant" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> 为负数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>
              获取虚拟功能表（v 表或 VTBL）中包含用户定义的方法的第一个槽。
            </summary>
      <param name="t">
                表示接口的类型。
              </param>
      <returns>
              包含用户定义的方法的第一个 VTBL 槽。
               第一个槽为 3，如果接口基于 IUnknown, ，和 7 如果接口基于 IDispatch。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 不是 COM 中可见。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>
              返回表示 COM 对象的指定类型的托管对象。
            </summary>
      <param name="pUnk">
                指向非托管对象的 <see langword="IUnknown" /> 接口的指针。
              </param>
      <param name="t">
                请求的托管类的类型。
              </param>
      <returns>
              类的实例，与表示所请求的非托管 COM 对象的 <see cref="T:System.Type" /> 对象相对应。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 并不具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 特性。
                
                  - 或 -
                
                  <paramref name="t" /> 是 Windows 运行时 类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>
              返回与指定的类标识符 (CLSID) 关联的类型。
            </summary>
      <param name="clsid">
                要返回的类型的 CLSID。
              </param>
      <returns>
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>
              检索表示的类型的名称 ITypeInfo 对象。
            </summary>
      <param name="typeInfo">
                一个对象，表示 <see langword="ITypeInfo" /> 指针。
              </param>
      <returns>
              类型的名称， <paramref name="typeInfo" /> 参数指向。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>
              创建一个唯一 运行时可调用包装 (RCW) 对象给定 IUnknown 接口。
            </summary>
      <param name="unknown">
                指向托管的指针 <see langword="IUnknown" /> 接口。
              </param>
      <returns>
              为指定的唯一 RCW <see langword="IUnknown" /> 接口。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>
              指示指定对象是否表示 COM 对象。
            </summary>
      <param name="o">
                要检查的对象。
              </param>
      <returns>
              如果 <paramref name="o" /> 参数是 COM 类型，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>
              返回托管类的非托管形式的字段偏移量。
            </summary>
      <param name="t">
                指定托管类的值类型或格式化引用类型。
                 您必须首先应用 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 到类。
              </param>
      <param name="fieldName">
                中的字段 <paramref name="t" /> 参数。
              </param>
      <returns>
              偏移量，以字节为单位，对于 <paramref name="fieldName" /> 平台所声明的指定类中的参数调用。
            </returns>
      <exception cref="T:System.ArgumentException">
                  此类不能导出为结构或非公共字段。
                   从.NET Framework 2.0 版开始，该字段可以是私有的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              返回指定托管类的非托管形式的字段偏移量。
            </summary>
      <param name="fieldName">
        <paramref name="T" /> 类型中字段的名称。
              </param>
      <typeparam name="T">
                托管值类型或格式化引用类型。
                 必须将 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性应用于该类。
              </typeparam>
      <returns>
              平台调用声明的指定类中 <paramref name="fieldName" /> 参数的偏移量（以字节为单位）。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>
              在不调用方法的情况下执行一次性方法设置任务。
            </summary>
      <param name="m">
                要检查的方法。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="m" /> 参数不是 <see cref="T:System.Reflection.MethodInfo" /> 对象。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>
              对类上的所有方法执行预链接检查。
            </summary>
      <param name="c">
                要检查其方法的类。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>
              为托管字符串的副本从非托管 ANSI 第一个空字符之前的所有字符 <see cref="T:System.String" />, ，并且每个将 ANSI 字符扩展为 Unicode。
            </summary>
      <param name="ptr">
                非托管字符串的第一个字符的地址。
              </param>
      <returns>
              包含非托管 ANSI 字符串的副本的托管字符串。
               如果 <paramref name="ptr" /> 是 <see langword="null" />, ，该方法返回一个空字符串。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>
              分配托管 <see cref="T:System.String" />, ，从非托管 ANSI 字符串将指定的数目的字符复制到其中，和每个将 ANSI 字符扩展为 Unicode。
            </summary>
      <param name="ptr">
                非托管字符串的第一个字符的地址。
              </param>
      <param name="len">
                要复制的输入字符串的字节数。
              </param>
      <returns>
              如果字符串包含本机 ANSI 的副本的托管的字符串的值 <paramref name="ptr" /> 参数不是 <see langword="null" />; 否则为此方法返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>
              分配托管 <see cref="T:System.String" /> 并复制从非托管内存中存储到其中的字符串的第一个空字符之前的所有字符。
            </summary>
      <param name="ptr">
                对于 Unicode 平台，表示第一个 Unicode 字符的地址。
              
                - 或 - 
              
                对于 ANSI 平台，表示第一个 ANSI 字符的地址。
              </param>
      <returns>
              如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />，则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>
              分配托管 <see cref="T:System.String" /> ，并将指定的数目的字符复制从非托管内存中存储到其中的字符串。
            </summary>
      <param name="ptr">
                对于 Unicode 平台，表示第一个 Unicode 字符的地址。
              
                - 或 - 
              
                对于 ANSI 平台，表示第一个 ANSI 字符的地址。
              </param>
      <param name="len">
                要复制的字符数。
              </param>
      <returns>
              如果包含的本机字符串副本的托管的字符串的值 <paramref name="ptr" /> 参数不是 <see langword="null" />; 否则为此方法返回 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>
              分配已托管<see cref="T:System.String" />，并将复制binary string (BSTR)非托管内存中存储到其中。
            </summary>
      <param name="ptr">
                非托管字符串的第一个字符的地址。
              </param>
      <returns>
              一个包含非托管字符串副本的托管字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 等于 <see cref="F:System.IntPtr.Zero" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>
              分配托管 <see cref="T:System.String" /> 并从非托管 Unicode 字符串向其复制第一个空字符之前的所有字符。
            </summary>
      <param name="ptr">
                非托管字符串的第一个字符的地址。
              </param>
      <returns>
              如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />，则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>
              分配托管 <see cref="T:System.String" /> 并从非托管 Unicode 字符串向其复制指定的数目的字符。
            </summary>
      <param name="ptr">
                非托管字符串的第一个字符的地址。
              </param>
      <param name="len">
                要复制的 Unicode 字符数。
              </param>
      <returns>
              如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />，则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr">
      </param>
      <param name="byteLen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>
              将数据从非托管内存块封送到托管对象。
            </summary>
      <param name="ptr">
                指向非托管内存块的指针。
              </param>
      <param name="structure">
                将数据复制到其中的对象。
                 这必须是格式化类的实例。
              </param>
      <exception cref="T:System.ArgumentException">
                  结构布局不连续或显式。
                
                  - 或 - 
                
                  结构是装箱的值类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>
              将数据从非托管内存块封送到新分配的指定类型的托管对象。
            </summary>
      <param name="ptr">
                指向非托管内存块的指针。
              </param>
      <param name="structureType">
                要创建的对象的类型。
                 此对象必须表示格式化类或结构。
              </param>
      <returns>
              指向一个包含数据的托管的对象 <paramref name="ptr" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 参数布局却不是连续或显式。
                
                  - 或 -
                
                  <paramref name="structureType" /> 参数是泛型类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定的类 <paramref name="structureType" /> 没有可访问的默认构造函数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将数据从非托管内存块封送到泛型类型参数指定的类型的新分配托管对象。
            </summary>
      <param name="ptr">
                指向非托管内存块的指针。
              </param>
      <typeparam name="T">
                要将数据复制到其中的对象的类型。
                 这必须是格式化类或结构。
              </typeparam>
      <returns>
              一个包含数据的托管的对象的 <paramref name="ptr" /> 参数指向。
            </returns>
      <exception cref="T:System.ArgumentException">
                  布局 <paramref name="T" /> 是不连续或显式。
                </exception>
      <exception cref="T:System.MissingMethodException">
                  指定的类 <paramref name="T" /> 没有可访问的默认构造函数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将数据从非托管内存块复制到指定类型的托管对象封送。
            </summary>
      <param name="ptr">
                指向非托管内存块的指针。
              </param>
      <param name="structure">
                将数据复制到其中的对象。
              </param>
      <typeparam name="T">
        <paramref name="structure" /> 的类型。
                 这必须是格式化的类。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  结构布局不连续或显式。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>
              从 COM 对象请求指向指定接口的指针。
            </summary>
      <param name="pUnk">
                要查询的接口。
              </param>
      <param name="iid">
                所请求的接口的接口标识符 (IID)。
              </param>
      <param name="ppv">
                此方法返回时，包含对返回接口的引用。
              </param>
      <returns>
              一个 HRESULT，指示调用成功还是失败。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量（或索引）读取单个字节。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的字节。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量（或索引）读取单个字节。
            </summary>
      <param name="ptr">
                非托管内存中源对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的字节。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>
              从非托管内存读取单个字节。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的地址。
              </param>
      <returns>
              从非托管内存读取的字节。
            </returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>
              从非托管内存中读取一个 16 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的地址。
              </param>
      <returns>
              从非托管内存中读取的 16 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取一个 16 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的 16 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取一个 16 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中源对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的 16 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>
              从非托管内存中读取一个 32 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的地址。
              </param>
      <returns>
              从非托管内存中读取的 32 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取一个 32 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存中读取的 32 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取一个 32 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中源对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的 32 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>
              从非托管内存中读取一个 64 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的地址。
              </param>
      <returns>
              从非托管内存中读取的 64 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取一个 64 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的 64 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取一个 64 位带符号整数。
            </summary>
      <param name="ptr">
                非托管内存中源对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的 64 位带符号整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>
              从非托管内存按给定的偏移量读取处理器本机大小的整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>
              从非托管内存读取处理器本机大小的整数。
            </summary>
      <param name="ptr">
                非托管内存中源对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在读取前的参数。
              </param>
      <returns>
              从非托管内存按给定的偏移量读取的整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>
              从非托管内存读取处理器本机大小的整数。
            </summary>
      <param name="ptr">
                非托管内存中开始读取的地址。
              </param>
      <returns>
              从非托管内存读取的整数。
               在 32 位计算机上返回 32 位整数，在 64 位计算机上返回 64 位整数。
            </returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>
              调整大小的以前分配的内存块 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />。
            </summary>
      <param name="pv">
                对与分配的内存的指针 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />。
              </param>
      <param name="cb">
                已分配块的新大小。
              </param>
      <returns>
              一个整数，表示重新分配的内存块的地址。
               与必须释放此内存 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来满足该请求。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>
              调整之前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存块的大小。
            </summary>
      <param name="pv">
                指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存的指针。
              </param>
      <param name="cb">
                已分配块的新大小。
                 这不是指针；它是你请求的字节计数，转换为类型 <see cref="T:System.IntPtr" />。
                 如果你传递指针，则将其视为大小。
              </param>
      <returns>
              指向重新分配的内存的指针。
               必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 释放该内存。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的内存来满足该请求。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>
              递减指定接口上的引用计数。
            </summary>
      <param name="pUnk">
                要释放的接口。
              </param>
      <returns>
              由指定的接口上的新值的引用计数 <paramref name="pUnk" /> 参数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>
              递减与指定的 COM 对象关联的 运行时可调用包装 (RCW) 的引用计数。
            </summary>
      <param name="o">
                要释放的 COM 对象。
              </param>
      <returns>
              与 <paramref name="o" /> 关联的 RCW 的新引用计数值。
               此值通常为零，因为无论调用包装 COM 对象的托管客户端有多少，RCW 仅保留对该对象的一次引用。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是有效的 COM 对象。
                </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>
              分配非托管 binary string (BSTR) ，并将复制的托管内容 <see cref="T:System.Security.SecureString" /> 到其中的对象。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>
              将托管的内容复制 <see cref="T:System.Security.SecureString" /> 对象到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>
              将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>
              将托管的内容复制 <see cref="T:System.Security.SecureString" /> 到非托管内存中，并在复制转换为 ANSI 格式。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              在非托管内存中，指向的位置的地址 <paramref name="s" /> 参数已被复制，如果提供了 null 对象则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>
              将托管的内容复制 <see cref="T:System.Security.SecureString" /> 到非托管内存的对象。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中的地址，其中 <paramref name="s" /> 已复制，则为 0 如果 <paramref name="s" /> 是 <see cref="T:System.Security.SecureString" /> 对象，其长度为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>
              设置由指定 COM 对象中的指定键引用的数据。
            </summary>
      <param name="obj">
                用于存储数据的 COM 对象。
              </param>
      <param name="key">
                用于存储数据的 COM 对象的内部哈希表中的键。
              </param>
      <param name="data">
                要设置的数据。
              </param>
      <returns>
              如果数据设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 COM 对象。
                
                  - 或 -
                
                  <paramref name="obj" /> 是一个 Windows 运行时 对象。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>
              返回对象的非托管大小（以字节为单位）。
            </summary>
      <param name="structure">
                要返回其大小的对象。
              </param>
      <returns>
              非托管代码中指定对象的大小。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>
              返回非托管类型的大小（以字节为单位）。
            </summary>
      <param name="t">
                要返回其大小的类型。
              </param>
      <returns>
              非托管代码中指定类型的大小。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数是泛型类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              返回非托管类型的大小（以字节为单位）。
            </summary>
      <typeparam name="T">
                要返回其大小的类型。
              </typeparam>
      <returns>
              大小 （字节） 由指定的类型 <paramref name="T" /> 泛型类型参数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              返回指定类型的对象的非托管的大小 （字节）。
            </summary>
      <param name="structure">
                要返回其大小的对象。
              </param>
      <typeparam name="T">
        <paramref name="structure" /> 参数的类型。
              </typeparam>
      <returns>
              非托管代码中指定对象的大小（以字节为单位）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>
              分配 BSTR ，并将复制的托管内容 <see cref="T:System.String" /> 到其中。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              指向 <see langword="BSTR" /> 的非托管指针；如果 <paramref name="s" /> 为 null，则为 0。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  长度为 <paramref name="s" /> 超出范围。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>
              将托管的内容复制 <see cref="T:System.String" /> 到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              一个整数，表示一个指针，指向内存块的情况下分配的字符串，则为 0 <paramref name="s" /> 是 <see langword="null" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过由操作系统允许的最大长度。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>
              将托管的内容复制 <see cref="T:System.String" /> 到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              分配的内存块，或者，如果 <paramref name="s" /> 是 <see langword="null" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  长度为 <paramref name="s" /> 超出范围。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>
              将托管的内容复制 <see cref="T:System.String" /> 到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              一个整数，表示如果 s 是为字符串，则为 0 分配的内存块的指针 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过由操作系统允许的最大长度。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>
              将托管的内容复制 <see cref="T:System.String" /> 到非托管内存中，并在复制转换为 ANSI 格式。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              在非托管内存中，指向的位置的地址 <paramref name="s" /> 已复制，则为 0 如果 <paramref name="s" /> 是 <see langword="null" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过由操作系统允许的最大长度。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>
              将托管的内容复制 <see cref="T:System.String" /> 到非托管内存中，如果需要转换为 ANSI 格式。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              该地址，在非托管内存中，为将字符串复制，或者，如果 <paramref name="s" /> 是 <see langword="null" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>
              将托管的内容复制 <see cref="T:System.String" /> 到非托管内存。
            </summary>
      <param name="s">
                要复制的托管字符串。
              </param>
      <returns>
              在非托管内存中，指向的位置的地址 <paramref name="s" /> 已复制，则为 0 如果 <paramref name="s" /> 是 <see langword="null" />。
            </returns>
      <exception cref="T:System.OutOfMemoryException">
                  该方法无法分配足够的本机堆内存。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过由操作系统允许的最大长度。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>
              将数据从托管对象封送到非托管内存块。
            </summary>
      <param name="structure">
                包含要封送的数据的托管对象。
                 该对象必须是格式化类的结构或实例。
              </param>
      <param name="ptr">
                指向非托管内存块的指针，必须在调用此方法之前分配该指针。
              </param>
      <param name="fDeleteOld">
                如果在此方法复制该数据前在 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> 参数上调用 <paramref name="ptr" />，则为 <see langword="true" />。
                 该块必须包含有效的数据。
                 请注意，在内存块已包含数据时传递 <see langword="false" /> 可能会导致内存泄漏。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> 为不是格式化类的引用类型。
                
                  - 或 -
                
                  <paramref name="structure" /> 是泛型类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              将数据从指定类型的托管对象复制到非托管内存块封送。
            </summary>
      <param name="structure">
                包含要封送的数据的托管对象。
                 该对象必须是格式化类的结构或实例。
              </param>
      <param name="ptr">
                指向非托管内存块的指针，必须在调用此方法之前分配该指针。
              </param>
      <param name="fDeleteOld">
        <see langword="true" /> 若要调用 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> 方法 <paramref name="ptr" /> 参数之前此方法将数据复制。
                 该块必须包含有效的数据。
                 请注意，传递 <see langword="false" /> 时的内存块已包含数据会导致内存泄漏。
              </param>
      <typeparam name="T">
                托管对象的类型。
              </typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> 是不是格式化的类的引用类型。
                </exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>
              表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。
               此字段为只读。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>
              表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。
               此字段为只读。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>
              用特定的失败 HRESULT 值引发异常。
            </summary>
      <param name="errorCode">
                与所需异常相对应的 HRESULT。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>
              引发异常用特定的失败 HRESULT，基于指定 IErrorInfo 接口。
            </summary>
      <param name="errorCode">
                与所需异常相对应的 HRESULT。
              </param>
      <param name="errorInfo">
                一个指向 IErrorInfo 提供了有关该错误的详细信息的接口。
                 您可以指定 IntPtr(0) 以使用当前 IErrorInfo 接口，或 IntPtr(-1) 以忽略当前 IErrorInfo 接口，并在构造只是中的错误代码的异常。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>
              获取指定数组中指定索引处的元素的地址。
            </summary>
      <param name="arr">
                包含所需元素的数组。
              </param>
      <param name="index">
                中的索引 <paramref name="arr" /> 所需元素的参数。
              </param>
      <returns>
              地址 <paramref name="index" /> 内 <paramref name="arr" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>
              [在 .NET Framework 4.5.1 和更高版本中受支持] 
            
              获取具有指定类型的数组中指定索引处的元素的地址。
            </summary>
      <param name="arr">
                包含所需元素的数组。
              </param>
      <param name="index">
                中的所需元素的索引 <paramref name="arr" /> 数组。
              </param>
      <typeparam name="T">
                数组的类型。
              </typeparam>
      <returns>
              地址 <paramref name="index" /> 中 <paramref name="arr" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>
              按指定偏移量将单字节值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中目标对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>
              按指定偏移量将单字节值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，从而添加到<paramref name="ptr" />之前编写的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了 null 或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>
              将单个字节值写入到非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的地址。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>
              将一个字符作为 16 位整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的地址。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>
              将 16 位整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的地址。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>
              按指定偏移量将 16 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                本机堆中要写入的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>
              按指定偏移量将 16 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>
              按指定偏移量将 16 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中目标对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>
              按指定偏移量将 16 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中目标对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>
              将 32 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的地址。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>
              按指定偏移量将 32 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>
              按指定偏移量将 32 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中目标对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>
              按指定偏移量将 64 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中目标对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>
              将 64 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的地址。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>
              按指定偏移量将 64 位带符号整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>
              将一个处理器本机大小的整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的地址。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不识别的格式。
                
                  - 或 -
                
                  <paramref name="ptr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="ptr" /> 无效。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>
              按指定的偏移量将一个处理器本机大小的整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中要写入的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>
              将一个处理器本机大小的整数值写入非托管内存。
            </summary>
      <param name="ptr">
                非托管内存中目标对象的基址。
              </param>
      <param name="ofs">
                额外的字节偏移量，将它添加到 <paramref name="ptr" /> 在写入前的参数。
              </param>
      <param name="val">
                要写入的值。
              </param>
      <exception cref="T:System.AccessViolationException">
                  基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 生成了空或无效的地址。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是一个 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
                   此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>
              释放BSTR使用已分配的指针<see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />方法。
            </summary>
      <param name="s">
                要释放的 <see langword="BSTR" /> 的地址。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>
              释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 方法分配的。
            </summary>
      <param name="s">
                要释放的非托管字符串的地址。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>
              释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 方法分配的。
            </summary>
      <param name="s">
                要释放的非托管字符串的地址。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s">
      </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>
              释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 方法分配的。
            </summary>
      <param name="s">
                要释放的非托管字符串的地址。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>
              释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 方法分配的。
            </summary>
      <param name="s">
                要释放的非托管字符串的地址。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>
              指示如何在托管代码与非托管代码之间封送数据。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。
            </summary>
      <param name="unmanagedType">
                值数据是进行封送。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类与指定 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 枚举成员。
            </summary>
      <param name="unmanagedType">
                值数据是进行封送。
              </param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>
              指定的元素类型的非托管 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>
              指定参数的索引的非托管 <see langword="iid_is" /> 使用 com 特性
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>
              向自定义封送处理程序提供其他信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>
              指定自定义封送处理程序的完全限定的名称。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>
              实现 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 作为类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>
              指示的元素类型 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>
              指示的用户定义的元素类型 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>
              表示固定长度的数组中的元素数或要导入的字符串中的字符 （非字节） 数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>
              指示包含的数组元素，类似于计数的从零开始参数 <see langword="size_is" /> COM 中
            </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>
              获取 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将作为封送处理。
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将作为封送处理。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>
              当封送拆收器遇到它不支持的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 时由该封送拆收器引发的异常。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>
              使用默认属性初始化 <see langword="MarshalDirectiveException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see langword="MarshalDirectiveException" /> 类的新实例。
            </summary>
      <param name="message">
                指定异常的原因的错误消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="MarshalDirectiveException" /> 从序列化数据的类。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>
              指示参数是可选的。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>
              使用默认值初始化 <see langword="OptionalAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>
              指示相应的 HRESULT 或<see langword="retval" />应取消 COM 互操作调用过程中发生的签名转换。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>
              指示特性化程序集是主互操作程序集。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> 类，此程序集是主互操作程序集的类型库的主版本号和次版本号。
            </summary>
      <param name="major">
                用于此程序集是主互操作程序集的类型库的主版本。
              </param>
      <param name="minor">
                类型库的此程序集是主互操作程序集的次版本。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>
              获取用于此程序集是主互操作程序集的类型库的主要版本号。
            </summary>
      <returns>
              主版本号，为其此程序集是主互操作程序集的类型库。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>
              获取用于此程序集是主互操作程序集的类型库的次要版本号。
            </summary>
      <returns>
              类型库的此程序集是主互操作程序集的次版本号。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>
              允许用户指定的 ProgID，一个类。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see langword="ProgIdAttribute" /> 为与指定 ProgID。
            </summary>
      <param name="progId">
                若要分配给类 ProgID。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>
              获取类的 ProgID。
            </summary>
      <returns>
              类的 ProgID。
            </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>
              指示特性化的字段或参数的默认值为的一个实例 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, ，其中 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> 是 <see langword="null" />。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>
              获取 <see langword="IUnknown" /> 存储此属性中的常量。
            </summary>
      <returns>
        <see langword="IUnknown" /> 存储此属性中的常量。
               仅 <see langword="null" /> 所允许的 <see langword="IUnknown" /> 常量值。
            </returns>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>
              提供从托管代码随机访问非托管内存块的能力。
            </summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>
              使用指定的缓冲区、偏移量和容量初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。
            </summary>
      <param name="buffer">
                要包含访问器的缓冲区。
              </param>
      <param name="offset">
                启动访问器的字节位置。
              </param>
      <param name="capacity">
                要分配的内存大小（以字节为单位）。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 大于 <paramref name="buffer" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 也不可小于零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 将环绕高端的地址空间。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>
              使用指定的缓冲区、偏移量、容量和访问权限初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。
            </summary>
      <param name="buffer">
                要包含访问器的缓冲区。
              </param>
      <param name="offset">
                启动访问器的字节位置。
              </param>
      <param name="capacity">
                要分配的内存大小（以字节为单位）。
              </param>
      <param name="access">
                内存允许的访问类型。
                 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 大于 <paramref name="buffer" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 也不可小于零。
                
                  - 或 -
                
                  <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 将环绕高端的地址空间。
                </exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>
              确定访问器是否可读。
            </summary>
      <returns>
              如果访问器可读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>
              确定访问器是否可写。
            </summary>
      <returns>
              如果访问器可写，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>
              获取访问器的容量。
            </summary>
      <returns>
              访问器的容量。
            </returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>
              释放由 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>
              设置访问器的初始值。
            </summary>
      <param name="buffer">
                要包含访问器的缓冲区。
              </param>
      <param name="offset">
                启动访问器的字节位置。
              </param>
      <param name="capacity">
                要分配的内存大小（以字节为单位）。
              </param>
      <param name="access">
                内存允许的访问类型。
                 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 大于 <paramref name="buffer" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 也不可小于零。
                
                  - 或 -
                
                  <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> 加上 <paramref name="capacity" /> 将环绕高端的地址空间。
                </exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>
              确定访问器当前是否由进程打开。
            </summary>
      <returns>
              如果访问器已打开，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>
              将 <paramref name="T" /> 类型的结构从访问器读取到提供的引用中。
            </summary>
      <param name="position">
                访问器中开始读取的位置。
              </param>
      <param name="structure">
                包含读取数据的结构。
              </param>
      <typeparam name="T">
                结构的类型。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 类型的结构中进行读取 <paramref name="T" />。
                
                  - 或 -
                
                  <see langword="T" /> 是一个包含一个或多个引用类型的值类型。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>
              将 <paramref name="T" /> 类型的结构从访问器读取到 <paramref name="T" /> 类型的数组中。
            </summary>
      <param name="position">
                访问器中的字节偏移量，从此处开始读取。
              </param>
      <param name="array">
                包含从访问器读取的结构的数组。
              </param>
      <param name="offset">
        <paramref name="array" /> 中要将第一个复制的结构放置到的索引。
              </param>
      <param name="count">
                要从访问器读取的 <paramref name="T" /> 类型的结构的数目。
              </param>
      <typeparam name="T">
                结构的类型。
              </typeparam>
      <returns>
              读入 <paramref name="array" /> 的结构数。
               如果可用结构较少，则此值可能小于 <paramref name="count" />；如果到达访问器末尾，则为零。
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是大到足以包含 <paramref name="count" /> 的结构 (从开始 <paramref name="position" />)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>
              从访问器读取一个布尔值。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>
              从访问器读取一个字节值。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>
              从访问器读取一个字符。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>
              从访问器读取一个小数值。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                
                  - 或 -
                
                  要读取的小数无效。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>
              从访问器读取一个双精度浮点值。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>
              从访问器读取一个 16 位整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>
              从访问器读取一个 32 位整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>
              从访问器读取一个 64 位整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>
              从访问器读取一个 8 位带符号整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>
              从访问器读取一个单精度浮点值。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>
              从访问器读取一个 16 位无符号整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>
              从访问器读取一个 32 位无符号整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>
              从访问器读取一个 64 位无符号整数。
            </summary>
      <param name="position">
                访问器中起始读取位置的字节偏移量。
              </param>
      <returns>
              读取的值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 中读取值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持读取。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>
              将一个 64 位无符号整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>
              将一个 32 位无符号整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>
              将一个 16 位无符号整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>
              将一个 <see langword="Single" /> 写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>
              将一个 8 位整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>
              将一个 64 位整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  要写入的值的位置后没有足够的字节数。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>
              将一个 <see langword="Double" /> 值写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>
              将一个 16 位整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>
              将一个小数值写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                
                  - 或 -
                
                  小数无效。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>
              将一个字符写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>
              将一个字节值写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>
              将一个布尔值写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>
              将一个 32 位整数写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <exception cref="T:System.ArgumentException">
                  没有足够的字节数之后 <paramref name="position" /> 来编写的值。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>
              将一个结构写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="structure">
                要写入的结构。
              </param>
      <typeparam name="T">
                结构的类型。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  之后的访问器中没有足够的字节数 <paramref name="position" /> 编写类型的结构 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>
              将结构从 <paramref name="T" /> 类型的数组写入访问器。
            </summary>
      <param name="position">
                访问器中起始写入位置的字节偏移量。
              </param>
      <param name="array">
                要写入访问器的数组。
              </param>
      <param name="offset">
                在 <paramref name="array" /> 中从其开始写入的索引。
              </param>
      <param name="count">
                要写入的 <paramref name="array" /> 中的结构数。
              </param>
      <typeparam name="T">
                结构的类型。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  之后的访问器中没有足够的字节数 <paramref name="position" /> 要写入的结构由指定的数目 <paramref name="count" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。
                
                  - 或 -
                
                  <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  访问器不支持写入。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  访问器已被释放。
                </exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>
              提供从托管代码访问非托管内存块的能力。
            </summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.SecurityException">
                  用户没有所需的权限。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>
              用指定的位置和内存长度初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <param name="pointer">
                指向非托管内存位置的指针。
              </param>
      <param name="length">
                要使用的内存的长度。
              </param>
      <exception cref="T:System.Security.SecurityException">
                  用户没有所需的权限。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 值小于零。
                
                  - 或 -
                
                  <paramref name="length" /> 足够大，导致溢出。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>
              在具有指定的偏移量和长度的安全缓冲区中初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <param name="buffer">
                要包含非托管内存流的缓冲区。
              </param>
      <param name="offset">
                启动非托管内存流的缓冲区字节位置。
              </param>
      <param name="length">
                非托管内存流的长度。
              </param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>
              使用指定的位置、内存长度、内存总量和文件访问值初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <param name="pointer">
                指向非托管内存位置的指针。
              </param>
      <param name="length">
                要使用的内存的长度。
              </param>
      <param name="capacity">
                分配给流的内存总量。
              </param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值之一。
              </param>
      <exception cref="T:System.Security.SecurityException">
                  用户没有所需的权限。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 值小于零。
                
                  - 或 - 
                
                  <paramref name="capacity" /> 值小于零。
                
                  - 或 -
                
                  <paramref name="length" /> 值是否大于 <paramref name="capacity" /> 值。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>
              在具有指定的偏移量、长度和文件访问的安全缓冲区中初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <param name="buffer">
                要包含非托管内存流的缓冲区。
              </param>
      <param name="offset">
                启动非托管内存流的缓冲区字节位置。
              </param>
      <param name="length">
                非托管内存流的长度。
              </param>
      <param name="access">
                非托管内存流的文件访问模式。
              </param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>
              获取一个值，该值指示流是否支持读取。
            </summary>
      <returns>
              如果对象是用一个构造函数创建的，而该构造函数的 <paramref name="access" /> 参数不包括读取流，或者如果流已关闭，则为 <see langword="false" />，否则为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>
              获取一个值，该值指示流是否支持查找。
            </summary>
      <returns>
              如果流已关闭，则为 <see langword="false" />；否则为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>
              获取一个值，该值指示流是否支持写入。
            </summary>
      <returns>
              如果对象是用一个构造函数创建的，而该构造函数的 <paramref name="access" /> 参数值支持写入，或者对象是用一个不带参数的构造函数创建的，或者如果流已关闭，则为 <see langword="false" />，否则为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>
              获取流的长度（大小）或分配给流的内存总量（容量）。
            </summary>
      <returns>
              流的大小或容量。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.UnmanagedMemoryStream" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>
              重写 <see cref="M:System.IO.Stream.Flush" /> 方法以便不执行任何操作。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>
              重写 <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> 方法，以便取消操作（如果已指定），但不执行其他任何操作。
            
              可以开始于 .NET Framework 4.6
            </summary>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步刷新操作的任务。
            </returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>
              在具有指定的偏移量、长度和文件访问的安全缓冲区中初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <param name="buffer">
                要包含非托管内存流的缓冲区。
              </param>
      <param name="offset">
                启动非托管内存流的缓冲区字节位置。
              </param>
      <param name="length">
                非托管内存流的长度。
              </param>
      <param name="access">
                非托管内存流的文件访问模式。
              </param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>
              使用指向非托管内存位置的指针初始化 <see cref="T:System.IO.UnmanagedMemoryStream" /> 类的新实例。
            </summary>
      <param name="pointer">
                指向非托管内存位置的指针。
              </param>
      <param name="length">
                要使用的内存的长度。
              </param>
      <param name="capacity">
                分配给流的内存总量。
              </param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值之一。
              </param>
      <exception cref="T:System.Security.SecurityException">
                  用户没有所需的权限。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 值为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 值小于零。
                
                  - 或 - 
                
                  <paramref name="capacity" /> 值小于零。
                
                  - 或 -
                
                  <paramref name="length" /> 值太大，导致溢出。
                </exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>
              获取流中数据的长度。
            </summary>
      <returns>
              流中数据的长度。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>
              获取或设置流中的当前位置。
            </summary>
      <returns>
              流中的当前新位置。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  该位置设置为一个值，也不可小于零，或者位置大于 <see cref="F:System.Int32.MaxValue" /> 或导致溢出时添加到当前的指针。
                </exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>
              获取或设置基于流中当前位置的指向流的字节指针。
            </summary>
      <returns>
              字节指针。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  超过容量的流的当前位置。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  正在位置集不是当前流中的有效位置。
                </exception>
      <exception cref="T:System.IO.IOException">
                  将指针设置为比流的起始位置较低的值。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  流已初始化，以用于 <see cref="T:System.Runtime.InteropServices.SafeBuffer" />。
                  <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> 属性是仅对使用初始化的流有效 <see cref="T:System.Byte" /> 指针。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将指定数量的字节读入指定的数组。
            </summary>
      <param name="buffer">
                此方法返回时包含指定的字节数组，数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字节替换。
                 此参数未经初始化即被传递。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。
              </param>
      <param name="count">
                要从当前流中读取的最大字节数。
              </param>
      <returns>
              读入缓冲区中的总字节数。
               如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  基础内存不支持读取。
                
                  - 或 - 
                
                  <see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> 属性设置为 <see langword="false" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数设置为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于零。
                
                  - 或 - 
                
                  <paramref name="count" /> 参数小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  负缓冲区数组的长度 <paramref name="offset" /> 参数是小于 <paramref name="count" /> 参数。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              将指定数量的字节异步读入指定的数组。
            
              可以开始于 .NET Framework 4.6
            </summary>
      <param name="buffer">
                数据写入的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。
              </param>
      <param name="count">
                最多读取的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步读取操作的任务。
              <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。
               如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。
            </returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>
              从流中读取一个字节，并将流内的位置前移一个字节，或者如果已到达流的末尾，则返回 -1。
            </summary>
      <returns>
              转换为 <see cref="T:System.Int32" /> 对象的无符号字节，或者如果到达流的末尾，则为 -1。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  基础内存不支持读取。
                
                  - 或 -
                
                  当前位置位于流结尾。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
              将当前流的当前位置设置为给定值。
            </summary>
      <param name="offset">
                相对于 <paramref name="origin" /> 的点，从此处开始查找。
              </param>
      <param name="loc">
                使用 <see cref="T:System.IO.SeekOrigin" /> 类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="origin" /> 的参考点。
              </param>
      <returns>
              流中的新位置。
            </returns>
      <exception cref="T:System.IO.IOException">
                  尝试在流开头之前寻找。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 值大于该流的最大大小。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> 无效。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>
              将流的长度设置为指定的值。
            </summary>
      <param name="value">
                流的长度。
              </param>
      <exception cref="T:System.IO.IOException">
                  发生了 I/O 错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  基础内存不支持写入。
                
                  - 或 -
                
                  尝试写入到流和 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 属性是 <see langword="false" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  指定 <paramref name="value" /> 超过了流的容量。
                
                  - 或 -
                
                  指定 <paramref name="value" /> 为负。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              使用缓冲区中的数据将字节块写入当前流。
            </summary>
      <param name="buffer">
                字节数组，从该字节数组将字节复制到当前流中。
              </param>
      <param name="offset">
                缓冲区中的偏移量，从此处开始将字节复制到当前流中。
              </param>
      <param name="count">
                要写入当前流的字节数。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  基础内存不支持写入。
                
                  - 或 -
                
                  尝试写入到流和 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 属性是 <see langword="false" />。
                
                  - 或 -
                
                  <paramref name="count" /> 值是否大于流的容量。
                
                  - 或 -
                
                  位置位于流容量的末尾。
                </exception>
      <exception cref="T:System.IO.IOException">
                  出现 I/O 错误。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  指定的参数之一也不可小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 减去的长度参数 <paramref name="buffer" /> 参数是小于 <paramref name="count" /> 参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
              将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
            
              可以开始于 .NET Framework 4.6
            </summary>
      <param name="buffer">
                从中写入数据的缓冲区。
              </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。
              </param>
      <param name="count">
                最多写入的字节数。
              </param>
      <param name="cancellationToken">
                要监视取消请求的标记。
                 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。
              </param>
      <returns>
              表示异步写入操作的任务。
            </returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>
              一个字节写入文件流中的当前位置。
            </summary>
      <param name="value">
                写入流的字节值。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  流已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  基础内存不支持写入。
                
                  - 或 -
                
                  尝试写入到流和 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 属性是 <see langword="false" />。
                
                  - 或 - 
                
                  当前位置位于流的容量的末尾处。
                </exception>
      <exception cref="T:System.IO.IOException">
                  提供 <paramref name="value" /> 导致流超出其最大容量。
                </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>
              允许非托管的方法来调用托管的方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>
              封装指定数组内的数组和偏移量。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 结构的新实例。
            </summary>
      <param name="array">
                托管的数组。
              </param>
      <param name="offset">
                调用以字节为单位，要通过平台传递的元素的偏移量。
              </param>
      <exception cref="T:System.ArgumentException">
                  该数组将大于 2 千兆字节 (GB)。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>
              指示指定的对象是否与当前匹配 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象。
              </param>
      <returns>
        <see langword="true" /> 如果对象与匹配这 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>
              指示是否指定 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象与当前实例相匹配。
            </summary>
      <param name="obj">
                要与此实例比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。
              </param>
      <returns>
        <see langword="true" /> 如果指定 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象与当前实例相匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>
              返回此引用的托管的数组 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />。
            </summary>
      <returns>
              此实例所引用的托管的数组。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>
              返回此值类型的哈希代码。
            </summary>
      <returns>
              此实例的哈希代码。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>
              返回时提供的偏移量这 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 构造。
            </summary>
      <returns>
              此实例的偏移量。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>
              确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有相同的值。
            </summary>
      <param name="a">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 要与 <paramref name="b" /> 参数。
              </param>
      <param name="b">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 要与 <paramref name="a" /> 参数。
              </param>
      <returns>
              如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>
              确定两个指定 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象不具有相同的值。
            </summary>
      <param name="a">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 要与 <paramref name="b" /> 参数。
              </param>
      <param name="b">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 要与 <paramref name="a" /> 参数。
              </param>
      <returns>
        <see langword="true" /> 如果值 <paramref name="a" /> 不相同的值 <paramref name="b" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>
              指定是否应将类型封送使用自动化封送处理程序或自定义代理和存根 （stub）。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 类的新实例。
            </summary>
      <param name="val">
        <see langword="true" /> 如果应使用自动化封送处理程序; 封送类 <see langword="false" /> 是否应使用代理存根 （stub） 封送处理程序。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>
              获取一个值，该值的封送处理程序要使用的类型。
            </summary>
      <returns>
        <see langword="true" /> 如果应使用自动化封送处理程序; 封送类 <see langword="false" /> 是否应使用代理存根 （stub） 封送处理程序。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>
              控制是否将 Unicode 字符转换为最接近的匹配 ANSI 字符。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 类设置的值为 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 属性。
            </summary>
      <param name="BestFitMapping">
        <see langword="true" /> 若要表明启用了最佳的映射;否则为 <see langword="false" />。
                 默认值为 <see langword="true" />。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>
              将 Unicode 字符转换为 ANSI 字符时，请获取最佳的映射行为。
            </summary>
      <returns>
        <see langword="true" /> 如果启用了最佳的映射;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>
              启用或禁用引发的异常在转换为 ANSI？ 字符。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>
              将数据类型的封送 <see langword="VT_BSTR" /> 从托管代码流向非托管代码。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类与指定 <see cref="T:System.Object" /> 对象。
            </summary>
      <param name="value">
                要包装，并以封送的对象 <see langword="VT_BSTR" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类与指定 <see cref="T:System.String" /> 对象。
            </summary>
      <param name="value">
                要包装，并以封送的对象 <see langword="VT_BSTR" />。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>
              获取已包装 <see cref="T:System.String" /> 对象进行封送处理类型作为 <see langword="VT_BSTR" />。
            </summary>
      <returns>
              由包装的对象 <see cref="T:System.Runtime.InteropServices.BStrWrapper" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>
              指定调用在非托管代码中实现的方法所需的调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>
              调用方将清理堆栈。
               这样，调用的函数 <see langword="varargs" />, ，使之可用于接受个数可变的参数，如方法 <see langword="Printf" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>
              不支持此调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>
              被调用方将清理堆栈。
               这是与平台调用非托管的函数调用的默认约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>
              第一个参数是 <see langword="this" /> 指针并存储在 ECX 寄存器。
               其他参数被推送到堆栈上。
               此调用约定用于调用从非托管 DLL 导出的类的方法。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>
              此成员不是实际的调用约定，而是使用默认平台调用约定。
               例如，在 Windows 上默认值是 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> 以及它是 Windows CE.NET <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>
              指示在完全生成某个接口后为要向 COM 公开的类生成的类接口类型。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类与指定 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举值。
            </summary>
      <param name="classInterfaceType">
                描述为类生成的接口的类型。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>
              初始化的新实例<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />使用指定的类<see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />枚举成员。
            </summary>
      <param name="classInterfaceType">
                之一<see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />描述为类生成的接口的类型的值。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>
              获取 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，该值描述应为该类生成哪种类型的接口。
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，该值描述应为该类生成哪种类型的接口。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>
              标识为类生成的类接口类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>
              表示，该类仅支持后期绑定 COM 客户端。
               一个 <see langword="dispinterface" /> 类自动向 COM 客户端在请求上公开。
               类型库生成的 Tlbexp.exe （类型库导出程序） 不包含类型信息 <see langword="dispinterface" /> 为了防止客户端缓存的 Dispid 的接口。
              <see langword="dispinterface" /> 没有展现中所述的版本控制问题 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 因为客户端可以仅后期绑定到该接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>
              指示双类接口自动生成的类并向 COM 公开。
               类型信息是生成类接口，类型库中发布。
               使用 <see langword="AutoDual" /> 由于中所述的版本控制限制是强烈建议您不要 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>
              指示没有类接口时生成的类。
               如果显式不实现任何接口，该类可以仅提供通过后期绑定访问 <see langword="IDispatch" /> 接口。
               这是推荐的设置 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />。
               使用 <see langword="ClassInterfaceType.None" /> 是通过由类显式实现的接口公开功能的唯一方法。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>
              指定从类型库导入的组件类的类标识符。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>
              初始化新实例 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 与原始组件类的类标识符。
            </summary>
      <param name="coClass">
                一个 <see cref="T:System.Type" /> ，其中包含原始组件类的类标识符。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>
              获取原始组件类的类标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 包含原始组件类的类标识符。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>
              指示参数或字段类型的 COM 别名。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 类特性化的字段或参数的别名。
            </summary>
      <param name="alias">
                如果已导入，在类型库找到字段或参数的别名。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>
              获取该别名的字段或参数都可以找到类型库中时已导入。
            </summary>
      <returns>
              如果已导入，在类型库找到字段或参数的别名。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>
              允许事件处理程序的后期绑定注册。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 类类型上使用指定的类型和事件的名称。
            </summary>
      <param name="type">
                对象的类型。
              </param>
      <param name="eventName">
                上的事件的名称 <paramref name="type" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>
              将事件处理程序附加到 COM 对象。
            </summary>
      <param name="target">
                应将事件委托绑定到目标对象。
              </param>
      <param name="handler">
                事件委托。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>
              获取此事件的属性。
            </summary>
      <returns>
              此事件的只读特性。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>
              获取声明此成员的类。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象为声明此成员的类。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>
              获取用于将事件处理程序委托添加到事件源的方法。
            </summary>
      <param name="nonPublic">
        <see langword="true" /> 若要返回非公共方法; 这些方法否则为 <see langword="false" />。
              </param>
      <returns>
              用于添加事件处理程序的方法委托添加到事件源。
            </returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 <see langword="true" /> 和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>
              当在派生类中重写，获取一个数组，包含应用于此成员的所有自定义属性。
            </summary>
      <param name="inherit">
        <see langword="true" /> 搜索此成员继承链，以查找这些属性;否则为 <see langword="false" />。
              </param>
      <returns>
              一个数组，包含所有自定义属性或如果未不定义任何特性不包含任何元素的数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  此成员所属加载到只反射上下文的类型。
                   请参阅 如何：将程序集加载到仅反射上下文中。
                </exception>
      <exception cref="T:System.TypeLoadException">
                  无法加载自定义特性类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              当在派生类中重写时获取包含指定类型的应用于此成员的所有自定义特性的数组。
            </summary>
      <param name="attributeType">
                要搜索的属性类型。
                 可分配给此类型的属性可能会返回。
              </param>
      <param name="inherit">
        <see langword="true" /> 搜索此成员继承链，以查找这些属性;否则为 <see langword="false" />。
              </param>
      <returns>
              一个数组，包含指定类型的所有自定义属性或如果未不定义任何特性不包含任何元素的数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此成员所属加载到只反射上下文的类型。
                   请参见如何：将程序集加载到仅反射上下文中
                </exception>
      <exception cref="T:System.TypeLoadException">
                  无法加载自定义特性类型。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>
              当在派生类中重写返回时引发该事件时，将调用的方法。
            </summary>
      <param name="nonPublic">
        <see langword="true" /> 若要返回非公共方法; 这些方法否则为 <see langword="false" />。
              </param>
      <returns>
              引发事件时，将调用该对象。
            </returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 <see langword="true" /> 和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>
              当在派生类中重写，将检索 <see cref="T:System.Reflection.MethodInfo" /> 用于移除事件的方法的对象。
            </summary>
      <param name="nonPublic">
        <see langword="true" /> 若要返回非公共方法; 这些方法否则为 <see langword="false" />。
              </param>
      <returns>
              从事件源委托用于移除事件处理程序的方法。
            </returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 <see langword="true" /> 和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
              指示指定的属性的一个或多个实例是否已应用于此成员。
            </summary>
      <param name="attributeType">
                要搜索的属性类型。
              </param>
      <param name="inherit">
        <see langword="true" /> 搜索此成员继承链，以查找这些属性;否则为 <see langword="false" />。
              </param>
      <returns>
        <see langword="true" /> 如果已将指定的特性应用于此成员;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>
              获取当前成员的名称。
            </summary>
      <returns>
              此成员的名称。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>
              获取用于初始化此实例的类对象。
            </summary>
      <returns>
        <see cref="T:System.Type" /> 用于初始化当前对象的对象。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
              将事件处理程序从 COM 对象分离。
            </summary>
      <param name="target">
                事件委托所绑定的目标对象。
              </param>
      <param name="handler">
                事件委托。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  该事件没有公共 <see langword="remove" /> 访问器。
                </exception>
      <exception cref="T:System.ArgumentException">
                  无法使用传入的处理程序。
                </exception>
      <exception cref="T:System.Reflection.TargetException">
                    在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。
                  
                  <paramref name="target" /> 参数为 <see langword="null" />，并且此事件不是静态事件。
                
                  - 或 - 
                
                  未在目标上声明 <see cref="T:System.Reflection.EventInfo" />。
                </exception>
      <exception cref="T:System.MethodAccessException">
                    在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。
                  
                  调用方没有对成员的访问权限。
                </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>
              向 COM 客户端指示程序集的当前版本中的所有类都是兼容的程序集的早期版本中的类。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 与主版本、 次版本、 生成和修订号的程序集的类。
            </summary>
      <param name="major">
                主版本号，该程序集。
              </param>
      <param name="minor">
                程序集的次版本号。
              </param>
      <param name="build">
                程序集的内部版本号。
              </param>
      <param name="revision">
                程序集的修订号。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>
              获取程序集的内部版本号。
            </summary>
      <returns>
              程序集的内部版本号。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>
              获取程序集的主版本号。
            </summary>
      <returns>
              主版本号，该程序集。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>
              获取程序集的次版本号。
            </summary>
      <returns>
              程序集的次版本号。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>
              获取程序集的修订号。
            </summary>
      <returns>
              程序集的修订号。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>
              指示当从类型库导入程序集信息丢失有关某个类或接口了。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>
              初始化 <see langword="ComConversionLossAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>
              指定要向 COM 公开的默认接口。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 类与指定 <see cref="T:System.Type" /> 对象作为向 COM 公开的默认接口。
            </summary>
      <param name="defaultInterface">
                一个 <see cref="T:System.Type" /> 值，该值指示要向 COM 公开的默认接口
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>
              获取 <see cref="T:System.Type" /> 对象，它指定要向 COM 公开的默认接口
            </summary>
      <returns>
        <see cref="T:System.Type" /> 对象，它指定要向 COM 公开的默认接口
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>
              标识源接口和实现事件接口方法的类，事件接口在从 COM 类型库中导入组件类时生成。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 与源接口和事件提供程序类。
            </summary>
      <param name="SourceInterface">
                一个 <see cref="T:System.Type" /> 包含类型库中的原始源接口。
                 COM 使用此接口来回调到托管类。
              </param>
      <param name="EventProvider">
                一个 <see cref="T:System.Type" /> ，其中包含实现事件接口的方法的类。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>
              获取实现事件接口的方法的类。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，其中包含实现事件接口的方法的类。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>
              从类型库中获取原始源接口。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 包含源的接口。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>
              提供允许 .NET Framework 委托的方法，这些委托处理将从 COM 对象添加和删除的事件。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>
              将一个委托添加到源自 COM 对象的事件的调用列表。
            </summary>
      <param name="rcw">
                触发的事件的 COM 对象调用方想要对做出响应。
              </param>
      <param name="iid">
                触发事件的 COM 对象使用的源接口的标识符。
              </param>
      <param name="dispid">
                源接口上的方法调度标识符。
              </param>
      <param name="d">
                COM 事件激发时调用的委托。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>
              从源自 COM 对象的事件的调用列表中删除委托。
            </summary>
      <param name="rcw">
                COM 对象委托附加到。
              </param>
      <param name="iid">
                触发事件的 COM 对象使用的源接口的标识符。
              </param>
      <param name="dispid">
                源接口上的方法调度标识符。
              </param>
      <param name="d">
                要移除的调用列表的委托。
              </param>
      <returns>
              从调用列表中移除了该委托。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>
              当 COM 方法调用返回一个无法识别的 HRESULT 时引发的异常。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>
              使用默认值初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 使用指定的消息的类。
            </summary>
      <param name="message">
                指示异常原因的消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 从序列化数据的类。
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，用于提供有关源或目标的上下文信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类替换指定的消息和错误代码。
            </summary>
      <param name="message">
                指示该异常的原因的消息时发生。
              </param>
      <param name="errorCode">
                与此异常关联的错误代码 (HRESULT) 值。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>
              将异常的内容转换为字符串。
            </summary>
      <returns>
              一个字符串，包含 <see cref="P:System.Exception.HResult" />, ，<see cref="P:System.Exception.Message" />, ，<see cref="P:System.Exception.InnerException" />, ，和 <see cref="P:System.Exception.StackTrace" /> 异常的属性。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>
              指示先前在 COM 中定义的特性化类型。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>
              标识如何向 COM 公开接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>
              指示接口将公开为 com双重接口，从而使绑定早期和后期绑定。
               默认值为 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>
              指示接口将公开为 com调度接口，其中仅启用后期绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>
              指示接口作为 Windows 运行时 接口对 COM 公开。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>
              指示接口作为派生自的接口公开给 COM IUnknown，这样仅早期绑定。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>
              描述 COM 成员的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>
              该成员是一般方法。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>
              该成员获取属性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>
              该成员设置属性。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>
              指定当您注册以供从 COM; 程序集时要调用的方法这样，在注册过程中的用户编写的代码执行。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>
              标识针对特性化类作为 COM 事件源公开的接口列表。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 同名的事件源接口的类。
            </summary>
      <param name="sourceInterfaces">
                Null 分隔的完全限定的事件源接口名称列表。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类要用作源接口的类型。
            </summary>
      <param name="sourceInterface">
        <see cref="T:System.Type" /> 源接口。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类要用作源接口的类型。
            </summary>
      <param name="sourceInterface1">
        <see cref="T:System.Type" /> 的默认源接口。
              </param>
      <param name="sourceInterface2">
        <see cref="T:System.Type" /> 源接口。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>
              新实例初始化 <see langword="ComSourceInterfacesAttribute" /> 类要用作源接口的类型。
            </summary>
      <param name="sourceInterface1">
        <see cref="T:System.Type" /> 的默认源接口。
              </param>
      <param name="sourceInterface2">
        <see cref="T:System.Type" /> 源接口。
              </param>
      <param name="sourceInterface3">
        <see cref="T:System.Type" /> 源接口。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类要用作源接口的类型。
            </summary>
      <param name="sourceInterface1">
        <see cref="T:System.Type" /> 的默认源接口。
              </param>
      <param name="sourceInterface2">
        <see cref="T:System.Type" /> 源接口。
              </param>
      <param name="sourceInterface3">
        <see cref="T:System.Type" /> 源接口。
              </param>
      <param name="sourceInterface4">
        <see cref="T:System.Type" /> 源接口。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>
              获取事件源接口的完全限定的名称。
            </summary>
      <returns>
              事件源接口的完全限定的名称。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>
              当设置建议接收器或缓存与对象的连接时，指定请求的行为。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>
              对于数据通知连接可确保对数据的可访问性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>
              对于数据通知连接 (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />)，此标志请求不希望将数据发送时，它调用的数据对象 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>
              请求的对象只进行一次更改通知或缓存 update，然后再删除连接。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>
              请求对象不等待数据或视图，以更改在进行初始调用前 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> （对于数据或视图的通知连接） 或更新缓存 （针对缓存的连接）。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>
              DLL 对象应用程序和执行其对象的绘制的对象处理程序使用此值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>
              同义词 <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, ，它更常用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>
              对于缓存连接，此标志仅在保存包含缓存的对象时，才更新缓存的表示形式。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>
              包含一个指向绑定到 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构，或 <see langword="ITypeComp" /> 接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>
              表示一个指向 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>
              表示一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>
              表示一个指向 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>
              存储名字对象绑定操作中使用的参数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>
              指定的大小，以字节为单位， <see langword="BIND_OPTS" /> 结构。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>
              指示的时间量 (以返回的时钟时间以毫秒为单位， <see langword="GetTickCount" /> 函数) 调用方指定为完成绑定操作。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>
              控制名字对象绑定操作的方面。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>
              表示打开文件，其中包含由名字对象标识的对象时应使用的标志。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>
              标识 METHODDATA 结构中描述的方法所使用的调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>
              指示对方法使用 C 声明 (CDECL) 调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>
              指示对方法使用 Macintosh Pascal (MACPASCAL) 调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>
              指示 <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 枚举的结尾。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>
              指示对方法使用 Macintosh Programmers' Workbench (MPW) CDECL 调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>
              指示对方法使用 Macintosh Programmers' Workbench (MPW) PASCAL 调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>
              指示对方法使用 MSC Pascal (MSCPASCAL) 调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>
              指示对方法使用 Pascal 调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>
              保留此值供将来使用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>
              指示对方法使用标准调用约定 (STDCALL)。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>
              指示对方法使用标准 SYSCALL 调用约定。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>
              描述与给定连接点存在的连接。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>
              表示一个连接令牌，则返回通过调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>
              表示一个指向 <see langword="IUnknown" /> 连接的通知接收器上的接口。
               调用方必须调用 <see langword="IUnknown::Release" /> this 指针上时 <see langword="CONNECTDATA" /> 不再需要结构。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>
              指定在数据流的方向 <paramref name="dwDirection" /> 参数 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 方法。
               这确定了生成的枚举器可枚举的格式。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>
              将请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 提供可以在中指定的格式的枚举数 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>
              将请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 提供可以在中指定的格式的枚举数 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>
              标识要绑定到的类型说明。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>
              指示 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 返回结构。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>
              指示 <see langword="IMPLICITAPPOBJ" /> 返回。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>
              指示枚举结束标记。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>
              指示已找到任何匹配项。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>
              指示 <see langword="TYPECOMP" /> 返回。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>
              指示 <see langword="VARDESC" /> 返回。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>
              包含由 <see langword="IDispatch::Invoke" /> 传递到方法或属性的参数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>
              表示参数的计数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>
              表示命名参数的计数 
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>
              表示调度 Id 命名的参数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>
              表示参数的数组的引用。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>
              在绘制或获取数据时，指定所需对象数据或对象视图方位。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>
              作为嵌入对象在容器内显示的对象，它使该对象表示形式。
               此值通常为复合文档对象指定。
               此演示文稿可提供用于屏幕或打印机。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>
              在屏幕上对象的表示形式，就好像它已打印到打印机使用 打印 命令 文件 菜单。
               描述的数据可以表示一系列页。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>
              一个对象的图标表示形式。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>
              对象，它使该对象的缩略图表示显示在浏览工具。
               缩略图是大约 120 x 120 像素，16 颜色 （建议），与设备无关位图可能包含在图元文件。
            </summary>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>
              表示应保密的文本，例如在不再需要时将其从计算机内存中删除。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此实例的值时出错。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  此平台上不支持此操作。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>
              用 <see cref="T:System.Char" /> 对象的子数组初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。
            
              此构造函数不符合 CLS。
               符合 CLS 的替代方法是 <see cref="M:System.Security.SecureString.#ctor" />。
            </summary>
      <param name="value">
                指向 <see cref="T:System.Char" /> 对象的数组的指针。
              </param>
      <param name="length">
                要包括到新实例中的 <paramref name="value" /> 的元素数。
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零或大于 65,536。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此安全字符串的值时出错。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  此平台上不支持此操作。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>
              在当前安全字符串的末尾追加一个字符。
            </summary>
      <param name="c">
                要追加到此安全字符串的字符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此安全字符串是只读的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  执行此操作将使此安全字符串的长度超过 65536 个字符。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此安全字符串的值时出错。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>
              删除当前安全字符串的值。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此安全字符串是只读的。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>
              创建当前安全字符串的副本。
            </summary>
      <returns>
              此安全字符串的副本。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此安全字符串的值时出错。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>
              释放由当前 <see cref="T:System.Security.SecureString" /> 对象使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>
              在此安全字符串中的指定索引位置插入一个字符。
            </summary>
      <param name="index">
                插入参数 <paramref name="c" /> 的索引位置。
              </param>
      <param name="c">
                要插入的字符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此安全字符串是只读的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此安全字符串的长度。
                
                  - 或 -
                
                  执行此操作将使此安全字符串的长度超过 65536 个字符。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此安全字符串的值时出错。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>
              指示此安全字符串是否标记为只读。
            </summary>
      <returns>
              如果此安全字符串标记为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>
              获取当前安全字符串中的字符数。
            </summary>
      <returns>
              此安全字符串中 <see cref="T:System.Char" /> 对象的数目。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  已处置此安全字符串。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>
              将此安全字符串的文本值设置为只读。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>
              从此安全字符串中的指定索引位置移除字符。
            </summary>
      <param name="index">
                此安全字符串中的字符的索引位置。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此安全字符串是只读的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此安全字符串的值时出错。
                </exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>
              将指定索引位置上的现有字符替换为其他字符。
            </summary>
      <param name="index">
                此安全字符串中的某个现有字符的索引位置。
              </param>
      <param name="c">
                替换现有字符的字符。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  此安全字符串已被释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  此安全字符串是只读的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  保护或取消保护此安全字符串的值时出错。
                </exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>
              提供用于分配非托管内存和复制非托管内存块的方法的集合。
            </summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>
              将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>
              将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>
              将托管 <see cref="T:System.Security.SecureString" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中将 <paramref name="s" /> 参数复制到的地址，或者，如果提供了 null 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>
              将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到非托管内存中。
            </summary>
      <param name="s">
                要复制的托管对象。
              </param>
      <returns>
              非托管内存中复制 <paramref name="s" /> 的地址，如果 <paramref name="s" /> 是长度为 0 的 <see cref="T:System.Security.SecureString" /> 对象，则为 0。
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  当前计算机运行的不是 Windows 2000 Service Pack 3 或更高版本。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                  没有足够的可用内存。
                </exception>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>
              当未找到在 DLL 导入中指定的 DLL 时所引发的异常。
            </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>
              使用默认属性初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。
            </summary>
      <param name="info">
                包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
              </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>
              包含有关元素的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>
              包含远程处理该元素的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>
              包含有关参数的信息。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>
              包含变量、函数或函数参数的类型说明和进程传输信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>
              包含有关元素的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>
              标识元素的类型。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>
              描述过程中出现的异常 <see langword="IDispatch::Invoke" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>
              描述适用于客户的错误。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>
              包含完全限定驱动器、 路径和包含有关错误的详细信息的帮助文件的文件名。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>
              指示该异常的源的名称。
               通常情况下，这是一个应用程序名称。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>
              指示该主题在帮助文件的帮助上下文 ID。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>
              表示指向采用的函数的指针 <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 结构作为参数并返回一个 HRESULT 值。
               如果不想推迟的填充，此字段设置为 <see langword="null" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>
              此字段为保留;必须将设置为 <see langword="null" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>
              一个描述该错误的返回值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>
              表示用于标识错误的错误代码。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>
              此字段为保留;它必须设置为 0。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>
              表示从 1601 年 1 月 1 日起 100 纳秒间隔的数量。
               此结构是 64 位值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>
              指定的高 32 位 <see langword="FILETIME" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>
              指定的低 32 位 <see langword="FILETIME" />。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>
              表示通用的剪贴板格式。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>
              指定感兴趣的特定剪贴板格式。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>
              指定的一种 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举常量，该值指示应在呈现中包含的多少细节。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>
              指定的方面的一部分时必须跨页边界拆分数据。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>
              指定一个指向 <see langword="DVTARGETDEVICE" /> 结构，它包含有关所构成的数据的目标设备的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>
              指定的一种 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举常量，指示用于传输对象的数据的存储介质的类型。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>
              定义函数说明。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>
              指定函数的调用约定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>
              计算参数的总数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>
              对计数的可选参数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>
              对允许的返回值进行计数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>
              包含该函数的返回类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>
              指定该函数是虚拟、 静态的或仅支持调度。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>
              指定属性函数的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>
              指示的大小 <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>
              存储函数可以返回 16 位系统的错误的计数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>
              标识函数成员 id。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>
              指定的偏移量为 VTBL <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>
              指示 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> 的函数。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>
              标识定义函数属性的常量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>
              用于支持数据绑定的函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>
              最佳的函数表示的对象。
               一种类型中的只有一个函数可以具有此特性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>
              允许一种优化方式编译器查找名为"xyz"的"abc"的类型的成员。
               如果此类成员发现，并标记为默认集合的一个元素的访问器函数，是对该成员函数生成的调用。
               允许在调度接口和接口; 中的成员上执行不允许对模块。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>
              作为可绑定向用户显示该函数。
              <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> 此外必须设置。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>
              该函数不应显示给用户，，尽管它存在并且为可绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>
              作为单独的可绑定属性映射。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>
              该属性将显示在对象浏览器，但不是在属性浏览器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>
              标记为具有默认行为的接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>
              设置时，任何调用的方法的第一次调用中设置的属性结果 <see langword="IPropertyNotifySink::OnRequestEdit" />。
               实现 <see langword="OnRequestEdit" /> 确定是否允许该调用设置的属性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>
              该函数不应从宏语言中访问。
               此标志适用于系统级别的功能或不应显示类型浏览器的函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>
              函数将返回一个对象，它的事件源。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>
              类型信息成员是在用户界面中显示的默认成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>
              该函数支持 <see langword="GetLastError" />。
               如果在函数期间出错时，调用方可以调用 <see langword="GetLastError" /> 以检索错误代码。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>
              定义如何访问函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>
              该函数可以只能通过访问 <see langword="IDispatch" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>
              函数可通过 <see langword="static" /> 解决，并采用隐式 <see langword="this" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>
              该函数通过虚拟功能表 (VTBL) 访问，并采用隐式 <see langword="this" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>
              函数可通过 <see langword="static" /> 解决，无需一种隐式 <see langword="this" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>
              该函数访问方式与 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, ，只是该函数有了一个实现。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>
              提供的托管的定义 <see langword="IAdviseSink" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>
              通知所有已注册的对象已从正在运行状态更改为加载状态的通知接收器。
                由服务器调用此方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>
              通知所有数据对象当前已都注册通知接收器对象中的数据已更改。
            </summary>
      <param name="format">
                一个 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, ，按引用传递，其中介绍了格式，目标设备、 呈现和存储的调用的数据对象的信息。
              </param>
      <param name="stgmedium">
                一个 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, ，按引用传递，其中定义的存储介质 （磁盘文件、 存储对象、 流对象、 图形设备接口 (GDI) 对象，或未定义的全局内存） 和该介质为调用的数据对象的所有权。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>
              通知所有已注册通知接收器重命名的对象。
               由服务器调用此方法。
            </summary>
      <param name="moniker">
                一个指向 <see langword="IMoniker" /> 上对象的新的完整名字对象的接口。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>
              通知所有已注册的保存对象的通知接收器。
               由服务器调用此方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>
              向对象的已注册其视图已更改的通知接收器。
               由服务器调用此方法。
            </summary>
      <param name="aspect">
                方面或对象视图。
                 包含值取自 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举。
              </param>
      <param name="index">
                该视图已更改的部分。
                 目前，仅为-1 是有效的。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>
              提供的托管的定义 <see langword="IBindCtx" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>
              枚举是在内部维护的上下文对象参数表的键的字符串。
            </summary>
      <param name="ppenum">
                此方法返回时，包含对对象参数枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>
              返回当前存储在当前的绑定上下文中的绑定选项。
            </summary>
      <param name="pbindopts">
                指向要接收的绑定选项的结构的指针。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>
              查找在内部维护的上下文对象参数表中给定的键并返回相应的对象，如果存在。
            </summary>
      <param name="pszKey">
                要搜索的对象的名称。
              </param>
      <param name="ppunk">
                此方法返回时，包含对象的接口指针。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>
              返回访问到运行对象表 (ROT) 与此绑定进程。
            </summary>
      <param name="pprot">
                此方法返回时，包含对运行对象表 (ROT) 的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>
              将传递的对象注册为其中一个名字对象操作期间已绑定，并且操作完成时，应释放的对象。
            </summary>
      <param name="punk">
                要注册，以便发布的对象。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>
              在内部维护的对象指针表中注册指定的对象指针指定名称。
            </summary>
      <param name="pszKey">
                要注册的名称 <paramref name="punk" /> 与。
              </param>
      <param name="punk">
                要注册的对象。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>
              释放目前已注册的绑定上下文使用的所有对象 <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>
              从已注册需要释放的对象的集合中删除的对象。
            </summary>
      <param name="punk">
                要注销发布的对象。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>
              如果该注册表项当前已注册，请撤消注册当前在内部维护的上下文对象参数表中找到指定键的下面的对象。
            </summary>
      <param name="pszKey">
                要注销的键。
              </param>
      <returns>
        <see langword="S_OK" />
        <see langword="HRESULT" /> 值指定的密钥已成功地从表中移除活动; 否则为如果 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>
              存储一个块中的绑定上下文的参数。
               这些参数将应用于稍后 <see langword="UCOMIMoniker" /> 使用此绑定上下文的操作。
            </summary>
      <param name="pbindopts">
                包含要设置的绑定选项的结构。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>
              提供的托管的定义 <see langword="IConnectionPoint" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>
              建立的连接点和调用方的接收器对象之间的通知连接。
            </summary>
      <param name="pUnkSink">
                对为此连接点所管理的传出接口接收调用接收器的引用。
              </param>
      <param name="pdwCookie">
                此方法返回时，包含连接 cookie。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>
              创建通过连接到此连接点存在的迭代的枚举器对象。
            </summary>
      <param name="ppEnum">
                此方法返回时，包含新创建的枚举数。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>
              返回此连接点所管理的传出接口的 IID。
            </summary>
      <param name="pIID">
                此参数返回时，包含管理此连接点的输出接口的 IID。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>
              检索 <see langword="IConnectionPointContainer" /> 从概念上讲拥有此连接点的可连接对象的接口指针。
            </summary>
      <param name="ppCPC">
                此参数返回时，包含可连接对象的 <see langword="IConnectionPointContainer" /> 接口。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>
              终止通过以前建立的通知连接 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法。
            </summary>
      <param name="dwCookie">
                连接 cookie 从以前返回 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>
              提供的托管的定义 <see langword="IConnectionPointContainer" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>
              创建一个枚举器可连接对象中所支持的所有连接点的每个 IID 的一个连接点。
            </summary>
      <param name="ppEnum">
                此方法返回时，包含枚举器的接口指针。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>
              要求可连接对象，如果它具有一个连接点的特定 IID，如果是这样，将返回 <see langword="IConnectionPoint" /> 接口指针，指向该连接点。
            </summary>
      <param name="riid">
                对输出接口 IID 正在请求其连接点的引用。
              </param>
      <param name="ppCP">
                此方法返回时，包含管理输出接口的连接点 <paramref name="riid" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>
              提供的托管的定义 <see langword="IDataObject" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>
              在数据对象和通知接收器之间创建连接。
               此方法由对象进行调用，该对象支持通知接收器并使通知接收器能收到有关对象数据中的更改的通知。
            </summary>
      <param name="pFormatetc">
                 一个 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，它定义的格式、 目标设备、 方面和将用于以后的通知的媒体。
              </param>
      <param name="advf">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 指定一组来控制通知连接的标志的值。
              </param>
      <param name="adviseSink">
                一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 将接收更改通知的通知接收器上的接口。
              </param>
      <param name="connection">
                此方法返回时，包含指向标识此连接的 DWORD 标记的指针。
                 您可以使用此令牌更高版本来删除通知连接，将其传递给 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />。
                 如果此值为零，则未建立连接。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
            
                      值
                    
                      描述
                    
                      S_OK
                    
                      已创建通知连接。
                    
                      E_NOTIMPL
                    
                      此方法未在数据对象上实现。
                    
                      DV_E_LINDEX
                    
                      还有一个无效值 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; 目前，支持仅为-1。
                    
                      DV_E_FORMATETC
                    
                      还有一个无效值 <paramref name="pFormatetc" /> 参数。
                    
                      OLE_E_ADVISENOTSUPPORTED
                    
                      该数据对象不支持更改通知。
                    </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>
              销毁以前建立的通知连接。
            </summary>
      <param name="connection">
                指定要移除的连接的 DWORD 标记。
                 使用返回的值 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 最初建立连接。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>
              创建可用于对当前的通知连接进行枚举的对象。
            </summary>
      <param name="enumAdvise">
                此方法返回时，包含 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> 接收新枚举数对象的接口指针。
                 如果该实现将设置 <paramref name="enumAdvise" /> 到 <see langword="null" />, ，此时没有任何连接到通知接收器。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              此方法支持标准返回值 E_OUTOFMEMORY 以及下面的值：
            
                      值
                    
                      描述
                    
                      S_OK
                    
                      枚举数对象已成功实例化或没有连接。
                    
                      OLE_E_ADVISENOTSUPPORTED
                    
                      此对象不支持通知。
                    </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>
              创建一个对象，用于枚举 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的数据对象。
               在调用中使用这些结构 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />。
            </summary>
      <param name="direction">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 值，该值指定数据的方向。
              </param>
      <returns>
              此方法支持 E_INVALIDARG 和 E_OUTOFMEMORY 等标准返回值，以及下面的值：
            
                      值
                    
                      描述
                    
                      S_OK
                    
                      已成功创建枚举数对象。
                    
                      E_NOTIMPL
                    
                      指定的方向 <paramref name="direction" /> 不支持参数。
                    
                      OLE_S_USEREG
                    
                      OLE 枚举注册表中的格式的请求。
                    </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>
              提供了一个标准 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，它是逻辑上等同于更复杂的结构。
               使用此方法以确定是否有两个不同 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构将返回相同的数据，从而无需重复呈现。
            </summary>
      <param name="formatIn">
                一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义格式、 medium 和调用方想要使用如检索数据的后续调用中的目标设备 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。
                <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员在这种情况下并不重要，应忽略。
              </param>
      <param name="formatOut">
                此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，其中包含用于特定呈现，使其规范地等效于可能的最常规信息 <paramref name="formatetIn" />。
                 调用方必须分配此结构与 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 方法必须填充数据中。
                 若要检索的后续调用中的数据，如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, ，调用方将使用所提供的值的 <paramref name="formatOut" />, ，除非提供的值为 <see langword="null" />。
                 此值是 <see langword="null" /> 如果该方法返回 <see langword="DATA_S_SAMEFORMATETC" />。
                <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员在这种情况下并不重要，应忽略。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
            
                      值
                    
                      描述
                    
                      S_OK
                    
                      返回 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构是不同于传递。
                    
                      DATA_S_SAMEFORMATETC
                    
                      <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 是相同的结构和 <see langword="null" /> 中返回 <paramref name="formatOut" /> 参数。
                    
                      DV_E_LINDEX
                    
                      还有一个无效值 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; 目前，支持仅为-1。
                    
                      DV_E_FORMATETC
                    
                      还有一个无效值 <paramref name="pFormatetc" /> 参数。
                    
                      OLE_E_NOTRUNNING
                    
                      应用程序未运行。
                    </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>
              从源数据对象中获取数据。
              <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法，它由数据使用者调用，会将数据中指定所述呈现 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，然后将其传输通过指定 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构。
               调用方则会假定负责释放 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构。
            </summary>
      <param name="format">
                一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义格式、 medium 和目标设备，以传递数据时使用。
                 使用布尔型 OR 运算符可以指定多个介质，从而允许方法在指定的介质中做出最佳选择。
              </param>
      <param name="medium">
                此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构，指示包含通过返回的数据的存储介质其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 成员，并负责释放介质的值通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员。
                 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 是 <see langword="null" />, ，介质的接收方负责释放; 否则为 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 指向 <see langword="IUnknown" /> 因此接口对相应对象其 <see langword="Release" /> 可以调用方法。
                 介质必须分配并由填写 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>
              从源数据对象中获取数据。
               此方法，它由数据使用者调用，不同于 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法中，调用方必须分配并释放指定的存储介质。
            </summary>
      <param name="format">
                一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义格式、 medium 和目标设备，以传递数据时使用。
                 可以在中指定一个介质 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, ，并且只有下列 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 值是有效的︰ <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, ，<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, ，<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />, ，或 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />。
              </param>
      <param name="medium">
                一个 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, ，按引用传递，用于定义包含正在传输的数据的存储介质。
                 介质必须由调用方分配并由填写 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。
                 调用方还必须释放介质。
                 此方法的实现必须始终提供的值 <see langword="null" /> 为 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 的成员 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 此参数指向的结构。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>
              确定数据对象是否能够呈现的数据中所述的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。
               对象在尝试执行粘贴或拖放操作可调用此方法之前调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 以了解是否该操作可能会成功。
            </summary>
      <param name="format">
                一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 通过定义的格式、 介质和目标设备，以用于查询的引用传递的结构。
              </param>
      <returns>
              此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
            
                      值
                    
                      描述
                    
                      S_OK
                    
                      后续调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 可能会成功。
                    
                      DV_E_LINDEX
                    
                      值无效 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; 目前，支持仅为-1。
                    
                      DV_E_FORMATETC
                    
                      值无效 <paramref name="pFormatetc" /> 参数。
                    
                      DV_E_TYMED
                    
                      一个无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 值。
                    
                      DV_E_DVASPECT
                    
                      一个无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 值。
                    
                      OLE_E_NOTRUNNING
                    
                      应用程序未运行。
                    </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>
              将数据传输至实现此方法的对象。
               此方法由包含数据源的对象调用。
            </summary>
      <param name="formatIn">
                一个 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义数据对象在解释存储介质中包含的数据时所使用的格式。
              </param>
      <param name="medium">
                一个 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 通过定义传递数据的存储介质的引用传递的结构。
              </param>
      <param name="release">
        <see langword="true" /> 若要指定数据对象调用，该类实现 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, ，在调用返回后拥有存储介质。
                 这意味着通过调用用完之后，数据对象必须释放介质 <see langword="ReleaseStgMedium" /> 函数。
                <see langword="false" /> 若要指定调用方保留存储介质的所有权和调用的数据对象只能在调用期间使用的存储介质。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>
              包含在进程间传输结构元素、参数或函数返回值所需的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>
              保留;设置为 <see langword="null" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>
              指示 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 描述的类型的值。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>
              说明如何在进程间传输结构元素、参数或函数返回值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>
              该参数将信息从调用方传递到被调用方。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>
              该参数是客户端应用程序的本地标识符。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>
              参数向调用方返回从被调用方的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>
              参数是该成员的返回值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>
              未指定该参数将传递还是接收的信息。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>
              管理的定义 <see langword="IEnumConnectionPoints" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>
              创建新的枚举器，其中包含与当前相同的枚举状态。
            </summary>
      <param name="ppenum">
                此方法返回时，包含对新创建的枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                数 <see langword="IConnectionPoint" /> 引用中返回 <paramref name="rgelt" />。
              </param>
      <param name="rgelt">
                此方法返回时，包含对枚举连接的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此方法返回时，包含对实际的枚举中的连接数的引用 <paramref name="rgelt" />。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>
              管理的定义 <see langword="IEnumConnections" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>
              创建新的枚举器，其中包含与当前相同的枚举状态。
            </summary>
      <param name="ppenum">
                此方法返回时，包含对新创建的枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                数 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 结构，以在中返回 <paramref name="rgelt" />。
              </param>
      <param name="rgelt">
                此方法返回时，包含对枚举连接的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此方法返回时，包含对实际的枚举中的连接数的引用 <paramref name="rgelt" />。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>
              提供的托管的定义 <see langword="IEnumFORMATETC" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>
              创建新的枚举器，其中包含与当前的枚举数相同的枚举状态。
            </summary>
      <param name="newEnum">
                此方法返回时，包含对新创建的枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                数 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用中返回 <paramref name="rgelt" />。
              </param>
      <param name="rgelt">
                此方法返回时，包含对枚举引用 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此方法返回时，包含枚举中的引用的实际数目的引用 <paramref name="rgelt" />。
                 此参数未经初始化即被传递。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
      <returns>
              HRESULT 值 <see langword="S_OK" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>
              管理的定义 <see langword="IEnumMoniker" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>
              创建新的枚举器，其中包含与当前相同的枚举状态。
            </summary>
      <param name="ppenum">
                此方法返回时，包含对新创建的枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                名字对象以返回数 <paramref name="rgelt" />。
              </param>
      <param name="rgelt">
                此方法返回时，包含对枚举的名字对象的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此方法返回时，包含的引用中枚举的名字对象的实际数目 <paramref name="rgelt" />。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>
              提供的托管的定义 <see langword="IEnumSTATDATA" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>
              创建新的枚举器，其中包含与当前的枚举数相同的枚举状态。
            </summary>
      <param name="newEnum">
                此方法返回时，包含对新创建的枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                数 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用中返回 <paramref name="rgelt" />。
              </param>
      <param name="rgelt">
                此方法返回时，包含对枚举引用 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此参数返回时，包含枚举中的引用的实际数目的引用 <paramref name="rgelt" />。
                 此参数未经初始化即被传递。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
      <returns>
              HRESULT 值 <see langword="S_OK" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>
              管理的定义 <see langword="IEnumString" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>
              创建新的枚举器，其中包含与当前相同的枚举状态。
            </summary>
      <param name="ppenum">
                此方法返回时，包含对新创建的枚举器的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要在中返回的字符串的数量 <paramref name="rgelt" />。
              </param>
      <param name="rgelt">
                此方法返回时，包含对枚举字符串的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此方法返回时，包含对字符串中枚举的实际数量的引用 <paramref name="rgelt" />。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>
              管理的定义 <see langword="IEnumVARIANT" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>
              创建新的枚举器，其中包含与当前相同的枚举状态。
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" />  为新创建的枚举器的引用。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>
              检索指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要在中返回的元素数 <paramref name="rgelt" />。
              </param>
      <param name="rgVar">
                此方法返回时，包含对枚举元素的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pceltFetched">
                此方法返回时，包含对实际中枚举的元素数的引用 <paramref name="rgelt" />。
              </param>
      <returns>
        <see langword="S_OK" /> 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>
              将枚举序列重置到开头。
            </summary>
      <returns>
              HRESULT 值 <see langword="S_OK" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>
              跳过指定的数目的枚举序列中的项。
            </summary>
      <param name="celt">
                要跳过枚举中的元素数。
              </param>
      <returns>
        <see langword="S_OK" /> 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 <see langword="S_FALSE" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>
              提供的托管的定义 <see langword="IMoniker" /> 接口，COM 功能 <see langword="IPersist" /> 和 <see langword="IPersistStream" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>
              使用名字对象绑定到其标识的对象。
            </summary>
      <param name="pbc">
                对引用 <see langword="IBindCtx" /> 该绑定操作中使用的绑定上下文对象上的接口。
              </param>
      <param name="pmkToLeft">
                如果标记格式不属于复合名字对象的当前名字左侧名字对象的引用。
              </param>
      <param name="riidResult">
                客户端想要用于通信的接口的接口标识符 (IID) 与名字对象标识的对象。
              </param>
      <param name="ppvResult">
                此方法返回时，包含对请求的接口的引用 <paramref name="riidResult" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>
              检索到的存储空间包含由名字对象标识的对象的接口指针。
            </summary>
      <param name="pbc">
                对引用 <see langword="IBindCtx" /> 此绑定操作过程中使用的绑定上下文对象上的接口。
              </param>
      <param name="pmkToLeft">
                如果标记格式不属于复合名字对象的当前名字左侧名字对象的引用。
              </param>
      <param name="riid">
                请求的存储接口接口标识符 (IID)。
              </param>
      <param name="ppvObj">
                此方法返回时，包含对请求的接口的引用 <paramref name="riid" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
              创建基于此名字对象与另一个名字对象共享公共前缀的新名字对象。
            </summary>
      <param name="pmkOther">
                对引用 <see langword="IMoniker" /> 对要与获得公共前缀的当前名字对象进行比较的另一个名字对象的接口。
              </param>
      <param name="ppmkPrefix">
                此方法返回时，包含当前名字对象的公共前缀的标记和 <paramref name="pmkOther" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
              将当前的名字对象与另一个标记时，创建一个新的复合名字对象的组合。
            </summary>
      <param name="pmkRight">
                对引用 <see langword="IMoniker" /> 名字对象要追加到末尾的当前名字对象上的接口。
              </param>
      <param name="fOnlyIfNotGeneric">
        <see langword="true" /> 若要指示调用方需要非泛型的组合。
                 继续操作，仅当 <paramref name="pmkRight" /> 是当前名字对象可以使用组合使用以某种方式不同于构成通用复合的名字对象类。
                <see langword="false" /> 若要指示如有必要，该方法可以创建一个一般复合。
              </param>
      <param name="ppmkComposite">
                此方法返回时，包含生成的复合名字对象的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>
              提供了指向可以枚举复合名字对象的组件的枚举数的指针。
            </summary>
      <param name="fForward">
        <see langword="true" /> 若要枚举从左到右的名字对象。
                <see langword="false" /> 若要从右到左的枚举。
              </param>
      <param name="ppenumMoniker">
                此方法返回时，包含名字对象的枚举数对象的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>
              检索对象的类标识符 (CLSID)。
            </summary>
      <param name="pClassID">
                此方法返回时，包含 CLSID。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>
              获取显示名称，它是用户可读表示形式的当前名字。
            </summary>
      <param name="pbc">
                对要在此操作中使用的绑定上下文的引用。
              </param>
      <param name="pmkToLeft">
                如果标记格式不属于复合名字对象的当前名字左侧名字对象的引用。
              </param>
      <param name="ppszDisplayName">
                此方法返回时，包含显示名称字符串。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>
              返回的大小，以字节为单位保存的对象所需的流。
            </summary>
      <param name="pcbSize">
                此方法返回时，包含 <see langword="long" /> 值，该值指示的大小，以字节为单位保存该对象所需的流。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>
              提供了许多表示由当前的名字对象标识的对象上次更改的时间。
            </summary>
      <param name="pbc">
                对要在此绑定操作中使用的绑定上下文的引用。
              </param>
      <param name="pmkToLeft">
                如果标记格式不属于复合名字对象的当前名字左侧名字对象的引用。
              </param>
      <param name="pFileTime">
                此方法返回时，包含的最后一个更改的时间。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>
              计算使用名字对象的内部状态的 32 位整数。
            </summary>
      <param name="pdwHash">
                此方法返回时，包含此名字对象的哈希值。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
              提供一个名字对象，复合到当前名字对象的右侧或相似的结构，之一时将不复合到执行任何操作。
            </summary>
      <param name="ppmk">
                此方法返回时，包含一个是当前名字对象的反向操作的名字对象。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>
              自上次保存后，请检查对象的更改。
            </summary>
      <returns>
        <see langword="S_OK" />
        <see langword="HRESULT" /> 值如果对象已更改; 否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>
              将当前的名字对象与指定的名字对象进行比较，并指示它们是否相同。
            </summary>
      <param name="pmkOtherMoniker">
                对要用于比较的名字对象的引用。
              </param>
      <returns>
        <see langword="S_OK" />
        <see langword="HRESULT" /> 名字对象是完全相同; 否则为如果值为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>
              确定是否由当前的名字对象标识的对象当前已加载并正在运行。
            </summary>
      <param name="pbc">
                对要在此绑定操作中使用的绑定上下文的引用。
              </param>
      <param name="pmkToLeft">
                如果当前名字对象是一个复合的一部分的当前名字左侧名字对象的引用。
              </param>
      <param name="pmkNewlyRunning">
                对最近添加到运行对象表 (ROT) 的名字对象的引用。
              </param>
      <returns>
        <see langword="S_OK" />
        <see langword="HRESULT" /> 运行名字对象; 如果值为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值未运行名字对象; 如果或 <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 值。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>
              指示此名字对象是否为系统提供的名字对象类之一。
            </summary>
      <param name="pdwMksys">
                此方法返回时，包含指向一个整数，表示从值中的一个 <see langword="MKSYS" /> 枚举，并将路由到 COM 名字对象类之一。
                 此参数未经初始化即被传递。
              </param>
      <returns>
        <see langword="S_OK" />
        <see langword="HRESULT" /> 值如果标记格式不系统名字对象; 否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>
              初始化从以前已保存的流对象。
            </summary>
      <param name="pStm">
                该对象加载从该流。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
              读取指定的显示同名的尽可能多的字符 <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> 了解并生成一个与读取部分相对应的名字对象。
            </summary>
      <param name="pbc">
                对要在此绑定操作中使用的绑定上下文的引用。
              </param>
      <param name="pmkToLeft">
                对已生成了与到目前为止显示名称的名字对象的引用。
              </param>
      <param name="pszDisplayName">
                对包含要分析的剩余的显示名称的字符串的引用。
              </param>
      <param name="pchEaten">
                此方法返回时，包含的分析中使用的字符数 <paramref name="pszDisplayName" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="ppmkOut">
                此方法返回时，包含由生成的名字对象的引用 <paramref name="pszDisplayName" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
              返回简化的名字对象，这是指与当前名字对象相同的对象，但可以绑定用相等或更高效率的另一个名字对象。
            </summary>
      <param name="pbc">
                对引用 <see langword="IBindCtx" /> 要在此绑定操作中使用的绑定上下文的接口。
              </param>
      <param name="dwReduceHowFar">
                一个值，指定应多久减少当前名字对象。
              </param>
      <param name="ppmkToLeft">
                对当前名字对象左侧的名字对象的引用。
              </param>
      <param name="ppmkReduced">
                此方法返回时，包含对的简化形式的当前名字，它可以是对象的引用 <see langword="null" /> 如果发生错误或当前名字对象被简化为无。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
              提供一个名字对象，追加到当前名字对象 （或其中一个带有相似结构），产生指定的名字对象。
            </summary>
      <param name="pmkOther">
                相对路径应采取的名字对象的引用。
              </param>
      <param name="ppmkRelPath">
                此方法返回时，包含相对名字对象的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>
              将对象保存到指定的流。
            </summary>
      <param name="pStm">
                该对象保存到流。
              </param>
      <param name="fClearDirty">
        <see langword="true" /> 在保存完成; 后清除已修改的标志否则 <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>
              定义类型的实现接口或继承接口的属性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>
              接口或调度接口表示源或接收器的默认值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>
              接收器接收通过虚函数表 (VTBL) 的事件。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>
              该成员不应显示或可编程性的用户。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>
              组件类的此成员是调用而不是实现。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>
              指定如何通过函数调用 <see langword="IDispatch::Invoke" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>
              使用常规函数调用语法调用该成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>
              使用常规属性访问语法来调用该函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>
              使用属性值赋值语法来调用该函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>
              使用属性引用赋值语法来调用该函数。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>
              提供的托管的定义 <see langword="IPersistFile" /> 接口中的功能 <see langword="IPersist" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>
              检索对象的类标识符 (CLSID)。
            </summary>
      <param name="pClassID">
                此方法返回时，包含对 CLSID 的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>
              检索当前的工作文件，该对象的任一的绝对路径; 如果没有当前的工作文件，该对象的默认文件名称提示。
            </summary>
      <param name="ppszFileName">
                此方法返回时，包含指向包含当前文件中或默认文件名称的提示 （例如 *.txt) 的路径以零结尾的字符串的指针的地址。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>
              检查对象所做更改，因为它上次保存到其当前的文件。
            </summary>
      <returns>
        <see langword="S_OK" /> 如果文件已更改自上次，保存; <see langword="S_FALSE" /> 如果自上次保存后尚未更改该文件。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>
              打开指定的文件，并从该文件的内容初始化某对象。
            </summary>
      <param name="pszFileName">
                以零结尾的字符串，其中包含要打开的文件的绝对路径。
              </param>
      <param name="dwMode">
                值的组合 <see langword="STGM" /> 枚举值，用于指示要在其中打开访问模式 <paramref name="pszFileName" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>
              将对象的副本保存到指定的文件。
            </summary>
      <param name="pszFileName">
                以零结尾的字符串，其中包含该对象保存该文件的绝对路径。
              </param>
      <param name="fRemember">
        <see langword="true" /> 为使用 <paramref name="pszFileName" /> 参数作为当前的工作文件; 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>
              通知的对象，它可以写入其文件。
            </summary>
      <param name="pszFileName">
                以前保存的对象文件的绝对路径。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>
              提供的托管的定义 <see langword="IRunningObjectTable" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>
              枚举当前已注册为正在运行的对象。
            </summary>
      <param name="ppenumMoniker">
                此方法返回时，包含运行对象表 (ROT) 的新枚举数。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>
              如果提供的对象名称注册为正在运行，则返回已注册的对象。
            </summary>
      <param name="pmkObjectName">
                对要搜索在运行对象表 (ROT) 的名字对象的引用。
              </param>
      <param name="ppunkObject">
                此方法返回时，包含请求的运行对象。
                 此参数未经初始化即被传递。
              </param>
      <returns>
        <see langword="HRESULT" /> 值，该值指示该操作成功与否。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>
              搜索此名字对象在运行对象表 (ROT) 并报告所记录的更改时间，如果存在。
            </summary>
      <param name="pmkObjectName">
                对要搜索在运行对象表 (ROT) 的名字对象的引用。
              </param>
      <param name="pfiletime">
                此对象返回时，包含对象上次更改时间。
                 此参数未经初始化即被传递。
              </param>
      <returns>
        <see langword="HRESULT" /> 值，该值指示该操作成功与否。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>
              确定指定的名字对象当前已注册中运行对象表 (ROT)。
            </summary>
      <param name="pmkObjectName">
                对要搜索在运行对象表 (ROT) 的名字对象的引用。
              </param>
      <returns>
        <see langword="HRESULT" /> 值，该值指示该操作成功与否。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>
              说明特定对象更改操作的时间 <see langword="IMoniker::GetTimeOfLastChange" /> 可以报告一个适当的更改的时间。
            </summary>
      <param name="dwRegister">
                已更改的对象运行对象表 (ROT) 条目。
              </param>
      <param name="pfiletime">
                对对象的上次更改时间的引用。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>
              注册所提供的对象已进入运行状态。
            </summary>
      <param name="grfFlags">
                指定是否运行对象表 (ROT) 引用到 <paramref name="punkObject" /> 是弱或强，并控制对通过其入口 ROT 中对象的访问。
              </param>
      <param name="punkObject">
                对注册为运行的对象的引用。
              </param>
      <param name="pmkObjectName">
                标识名字对象的引用 <paramref name="punkObject" />。
              </param>
      <returns>
              一个值，可用于标识在后续调用此 ROT 项 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>
              注销指定的对象从运行对象表 (ROT)。
            </summary>
      <param name="dwRegister">
                要撤消的运行对象表 (ROT) 项。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>
              提供具有 <see langword="ISequentialStream" /> 功能的 <see langword="IStream" /> 接口的托管定义。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>
              创建新的流对象具有其自己查找引用与原始流相同的字节的指针。
            </summary>
      <param name="ppstm">
                此方法返回时，包含新的流对象。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>
              确保在事务处理模式中打开的流对象所做任何更改都会反映在父存储中。
            </summary>
      <param name="grfCommitFlags">
                一个值，控制流对象所做的更改的提交方式。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>
              副本指定的数目的字节从当前搜索指针中的流与当前搜索另一个流中的指针。
            </summary>
      <param name="pstm">
                对目标流的引用。
              </param>
      <param name="cb">
                要从源流复制的字节数。
              </param>
      <param name="pcbRead">
                在成功返回时，包含实际从源中读取的字节数。
              </param>
      <param name="pcbWritten">
                在成功返回时，包含实际写入该目标的字节数。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>
              将访问限制为指定的流中的字节范围。
            </summary>
      <param name="libOffset">
                范围的起始位置的字节偏移量。
              </param>
      <param name="cb">
                范围，以字节为单位，以限制的长度。
              </param>
      <param name="dwLockType">
                对访问该范围的请求的限制。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>
              读取指定的数目的字节从流对象读入内存起价当前搜索指针。
            </summary>
      <param name="pv">
                此方法返回时，包含从流中读取的数据。
                 此参数未经初始化即被传递。
              </param>
      <param name="cb">
                要从流对象读取的字节数。
              </param>
      <param name="pcbRead">
                一个指向 <see langword="ULONG" /> 从流对象读取该变量接收的实际字节数。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>
              放弃自上一个对事务流做的所有更改 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 调用。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>
              将搜索指针更改到流的新位置相对于开头、 流的结尾或当前搜索指针。
            </summary>
      <param name="dlibMove">
                偏移量将添加到 <paramref name="dwOrigin" />。
              </param>
      <param name="dwOrigin">
                查找的起始地址。
                 原始位置可以是文件的开头、 当前查找指针或该文件的末尾。
              </param>
      <param name="plibNewPosition">
                在成功返回时，包含从流的开始位置的搜索指针的偏移量。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>
              流对象的大小更改。
            </summary>
      <param name="libNewSize">
                将流的字节数作为新大小。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 此流的结构。
            </summary>
      <param name="pstatstg">
                此方法返回时，包含 <see langword="STATSTG" /> 描述此流对象的结构。
                 此参数未经初始化即被传递。
              </param>
      <param name="grfStatFlag">
                中的成员 <see langword="STATSTG" /> 此方法不返回，从而节省一些内存分配操作的结构。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>
              删除某个范围的字节与以往限制的访问限制 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 方法。
            </summary>
      <param name="libOffset">
                范围的起始位置的字节偏移量。
              </param>
      <param name="cb">
                要限制的范围的长度，以字节为单位。
              </param>
      <param name="dwLockType">
                以前对范围施加的访问限制。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>
              将指定数量的字节写入流对象开始当前搜索指针。
            </summary>
      <param name="pv">
                要写入到此流的缓冲区。
              </param>
      <param name="cb">
                要写入流的字节数。
              </param>
      <param name="pcbWritten">
                在成功返回时，包含实际写入的流对象的字节数。
                 如果调用方将此指针设置为<see cref="F:System.IntPtr.Zero" />，此方法不提供实际写入的字节数。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>
              提供的托管的定义 <see langword="ITypeComp" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>
              字段名称映射到类型的成员或将全局变量和函数类型库中所包含的绑定。
            </summary>
      <param name="szName">
                要绑定的名称。
              </param>
      <param name="lHashVal">
                哈希值 <paramref name="szName" /> 由计算 <see langword="LHashValOfNameSys" />。
              </param>
      <param name="wFlags">
                标志字，包含一个或多个中定义的调用标志 <see langword="INVOKEKIND" /> 枚举。
              </param>
      <param name="ppTInfo">
                此方法返回时，包含对包含如果它绑定的项的类型说明的引用 <see langword="FUNCDESC" /> 或 <see langword="VARDESC" /> 返回。
                 此参数未经初始化即被传递。
              </param>
      <param name="pDescKind">
                此方法返回时，包含对引用 <see langword="DESCKIND" /> 枚举，该值指示是否名称绑定到 <see langword="VARDESC" />, ，<see langword="FUNCDESC" />, ，或 <see langword="TYPECOMP" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="pBindPtr">
                此方法返回时，包含对绑定到的引用 <see langword="VARDESC" />, ，<see langword="FUNCDESC" />, ，或 <see langword="ITypeComp" /> 接口。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>
              将绑定到类型库中包含的类型说明。
            </summary>
      <param name="szName">
                要绑定的名称。
              </param>
      <param name="lHashVal">
                哈希值 <paramref name="szName" /> 由 <see langword="LHashValOfNameSys" />。
              </param>
      <param name="ppTInfo">
                此方法返回时，包含对引用 <see langword="ITypeInfo" /> 为的类型的 <paramref name="szName" /> 被绑定。
                 此参数未经初始化即被传递。
              </param>
      <param name="ppTComp">
                此方法返回时，包含对引用 <see langword="ITypeComp" /> 变量。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>
              提供组件自动化的托管的定义 ITypeInfo 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>
              检索静态函数或变量，例如在 DLL 中定义的那些的地址。
            </summary>
      <param name="memid">
                成员 ID <see langword="static" /> 要检索的成员的地址。
              </param>
      <param name="invKind">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />  值，该值指定是否该成员是属性，以及如果是这样，哪种类型。
              </param>
      <param name="ppv">
                此方法返回时，包含对引用 <see langword="static" /> 成员。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>
              创建该类型描述 component 类 (coclass) 的新实例。
            </summary>
      <param name="pUnkOuter">
                对象，它充当控制 <see langword="IUnknown" />。
              </param>
      <param name="riid">
                调用方将使用与生成的对象进行通信的接口的 IID。
              </param>
      <param name="ppvObj">
                此方法返回时，包含对所创建的对象的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>
              检索类型库，其中包含此类型描述，并在该类型库中的索引。
            </summary>
      <param name="ppTLB">
                此方法返回时，包含对包含的类型库的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pIndex">
                此方法返回时，包含与索引中包含的类型库的类型说明的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
              检索对象的描述或规范的 DLL 中的函数的入口点。
            </summary>
      <param name="memid">
                成员函数的 DLL 入口说明是要返回的 ID。
              </param>
      <param name="invKind">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值，该值指定由标识成员的类型 <paramref name="memid" />。
              </param>
      <param name="pBstrDllName">
                如果不是 <see langword="null" />, ，该函数设置 <paramref name="pBstrDllName" /> 到 <see langword="BSTR" /> ，其中包含的 DLL 名称。
              </param>
      <param name="pBstrName">
                如果不是 <see langword="null" />, ，该函数设置 <paramref name="lpbstrName" /> 到 <see langword="BSTR" /> ，其中包含的入口点的名称。
              </param>
      <param name="pwOrdinal">
                如果不是 <see langword="null" />, ，并且函数定义按序号，然后 <paramref name="lpwOrdinal" /> 设置为指向该序号。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>
              检索文档字符串、 完整的帮助文件名称和路径和指定的类型说明的帮助主题的上下文 ID。
            </summary>
      <param name="index">
                要返回其文档的成员的 ID。
              </param>
      <param name="strName">
                此方法返回时，包含项方法的名称。
                 此参数未经初始化即被传递。
              </param>
      <param name="strDocString">
                此方法返回时，包含指定项的文档字符串。
                 此参数未经初始化即被传递。
              </param>
      <param name="dwHelpContext">
                此方法返回时，包含对与指定的项相关联的帮助上下文的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="strHelpFile">
                此方法返回时，包含帮助文件的完全限定的名称。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构，其中包含有关指定的函数的信息。
            </summary>
      <param name="index">
                要返回的函数说明的索引。
              </param>
      <param name="ppFuncDesc">
                此方法返回时，包含对引用 <see langword="FUNCDESC" /> 结构，它描述指定的函数。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>
              成员名称和成员 Id 和参数名称和参数 Id 之间的映射。
            </summary>
      <param name="rgszNames">
                要映射的名称数组。
              </param>
      <param name="cNames">
                要映射的名称的计数。
              </param>
      <param name="pMemId">
                此方法返回时，包含到放置名称映射的一个数组的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 一个实现的接口或基接口类型说明中的值。
            </summary>
      <param name="index">
                实现的接口或基接口的索引。
              </param>
      <param name="pImplTypeFlags">
                此方法返回时，包含对引用 <see langword="IMPLTYPEFLAGS" /> 枚举。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>
              封送处理信息的检索。
            </summary>
      <param name="memid">
                成员 ID，它指示需要哪些封送处理信息。
              </param>
      <param name="pBstrMops">
                此方法返回时，包含对引用 <see langword="opcode" /> 封送处理该结构的字段中使用字符串描述根据所引用的类型的说明，或返回 <see langword="null" /> 如果没有要返回的信息。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>
              检索与指定的成员 ID （或属性或方法及其参数的名称） 的变量。 对应于指定的函数 id。
            </summary>
      <param name="memid">
                其名称 （或名称） 是要返回的成员的 ID。
              </param>
      <param name="rgBstrNames">
                此方法返回时，包含与成员关联的名称 （或名称）。
                 此参数未经初始化即被传递。
              </param>
      <param name="cMaxNames">
                长度 <paramref name="rgBstrNames" /> 数组。
              </param>
      <param name="pcNames">
                此方法返回时，包含中的名称数目 <paramref name="rgBstrNames" /> 数组。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>
              如果类型说明引用其他类型说明，请检索引用的类型说明。
            </summary>
      <param name="hRef">
                指向要返回的引用的类型说明的句柄。
              </param>
      <param name="ppTI">
                此方法返回时，包含引用的类型说明。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>
              检索实现的接口类型的类型说明，如果类型说明描述 COM 类。
            </summary>
      <param name="index">
                返回其句柄实现类型的索引。
              </param>
      <param name="href">
                此方法返回时，包含对实现的接口的句柄的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构，其中包含的类型说明的属性。
            </summary>
      <param name="ppTypeAttr">
                此方法返回时，包含对结构，其中包含此类型说明的属性的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>
              检索 <see langword="ITypeComp" /> 接口类型的说明，从而使客户端编译器要绑定到类型说明的成员。
            </summary>
      <param name="ppTComp">
                此方法返回时，包含对引用 <see langword="ITypeComp" /> 接口包含的类型库。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>
              检索 <see langword="VARDESC" /> 描述指定的变量的结构。
            </summary>
      <param name="index">
                要返回的变量的说明的索引。
              </param>
      <param name="ppVarDesc">
                此方法返回时，包含对引用 <see langword="VARDESC" /> 描述指定的变量的结构。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>
              将调用一个方法或访问实现的类型说明描述的接口的对象的属性。
            </summary>
      <param name="pvInstance">
                对描述此类型描述的接口的引用。
              </param>
      <param name="memid">
                一个标识接口成员的值。
              </param>
      <param name="wFlags">
                描述 invoke 调用的上下文的标志。
              </param>
      <param name="pDispParams">
                对包含参数的数组，每个数组中的元素数的计数和命名参数的 Dispid 数组的结构的引用。
              </param>
      <param name="pVarResult">
                对在其结果是要存储的位置的引用。
                 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />, ，<paramref name="pVarResult" /> 将被忽略。
                 设置为 <see langword="null" /> 如果不需要任何结果。
              </param>
      <param name="pExcepInfo">
                指向填写仅当异常信息结构的指针 <see langword="DISP_E_EXCEPTION" /> 返回。
              </param>
      <param name="puArgErr">
                如果 <see langword="Invoke" /> 返回 <see langword="DISP_E_TYPEMISMATCH" />, ，<paramref name="puArgErr" /> 指示中的索引位置 <paramref name="rgvarg" /> 不正确的类型的参数。
                 如果多个参数返回一个错误， <paramref name="puArgErr" /> 指示仅具有错误的第一个参数。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 以前由返回结构 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 方法。
            </summary>
      <param name="pFuncDesc">
                对引用 <see langword="FUNCDESC" /> 结构释放。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 以前由返回结构 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 方法。
            </summary>
      <param name="pTypeAttr">
                对引用 <see langword="TYPEATTR" /> 结构释放。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>
              版本 <see langword="VARDESC" /> 以前由返回结构 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 方法。
            </summary>
      <param name="pVarDesc">
                对引用 <see langword="VARDESC" /> 结构释放。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>
              提供的托管的定义 <see langword="ITypeInfo2" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>
              检索静态函数或变量，例如在 DLL 中定义的那些的地址。
            </summary>
      <param name="memid">
                成员 ID <see langword="static" /> 要检索的成员的地址。
              </param>
      <param name="invKind">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />  值，该值指定是否该成员是属性，以及如果是这样，哪种类型。
              </param>
      <param name="ppv">
                此方法返回时，包含对引用 <see langword="static" /> 成员。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>
              创建该类型描述 component 类 (coclass) 的新实例。
            </summary>
      <param name="pUnkOuter">
                一个对象，作为控制 <see langword="IUnknown" />。
              </param>
      <param name="riid">
                调用方将使用与生成的对象进行通信的接口的 IID。
              </param>
      <param name="ppvObj">
                此方法返回时，包含对所创建的对象的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>
              获取库中所有自定义数据项。
            </summary>
      <param name="pCustData">
                指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>
              从指定的函数中获取所有自定义数据。
            </summary>
      <param name="index">
                要获取的自定义数据的函数的索引。
              </param>
      <param name="pCustData">
                一个指向 <see langword="CUSTDATA" />, ，它保存所有自定义数据项。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>
              获取指定实现类型的所有自定义数据。
            </summary>
      <param name="index">
                自定义数据的实现类型的索引。
              </param>
      <param name="pCustData">
                一个<see langword="CUSTDATA" /> 指针，它指向保留所有自定义数据项的 。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>
              获取指定的函数参数的所有自定义数据。
            </summary>
      <param name="indexFunc">
                要为其获取自定义数据的函数的索引。
              </param>
      <param name="indexParam">
                要获取自定义数据的此函数参数的索引。
              </param>
      <param name="pCustData">
                指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>
              获取自定义数据的变量。
            </summary>
      <param name="index">
                要获取自定义数据的变量的索引。
              </param>
      <param name="pCustData">
                指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>
              检索类型库，其中包含此类型描述，并在该类型库中的索引。
            </summary>
      <param name="ppTLB">
                此方法返回时，包含对包含的类型库的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="pIndex">
                此方法返回时，包含与索引中包含的类型库的类型说明的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>
              获取自定义数据。
            </summary>
      <param name="guid">
                使用 GUID 来标识的数据。
              </param>
      <param name="pVarVal">
                此方法返回时，包含 <see langword="Object" /> ，它指定在何处放置检索到的数据。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
              检索对象的描述或规范的 DLL 中的函数的入口点。
            </summary>
      <param name="memid">
                成员函数的 DLL 入口说明是要返回的 ID。
              </param>
      <param name="invKind">
                其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值，该值指定由标识成员的类型 <paramref name="memid" />。
              </param>
      <param name="pBstrDllName">
                如果不是 <see langword="null" />, ，该函数设置 <paramref name="pBstrDllName" /> 到 <see langword="BSTR" /> ，其中包含的 DLL 名称。
              </param>
      <param name="pBstrName">
                如果不是 <see langword="null" />, ，该函数设置 <paramref name="lpbstrName" /> 到 <see langword="BSTR" /> ，其中包含的入口点的名称。
              </param>
      <param name="pwOrdinal">
                如果不是 <see langword="null" />, ，并且函数定义按序号，然后 <paramref name="lpwOrdinal" /> 设置为指向该序号。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>
              检索文档字符串、 完整的帮助文件名称和路径和指定的类型说明的帮助主题的上下文 ID。
            </summary>
      <param name="index">
                要返回其文档的成员的 ID。
              </param>
      <param name="strName">
                此方法返回时，包含项方法的名称。
                 此参数未经初始化即被传递。
              </param>
      <param name="strDocString">
                此方法返回时，包含指定项的文档字符串。
                 此参数未经初始化即被传递。
              </param>
      <param name="dwHelpContext">
                此方法返回时，包含对与指定的项相关联的帮助上下文的引用。
                 此参数未经初始化即被传递。
              </param>
      <param name="strHelpFile">
                此方法返回时，包含帮助文件的完全限定的名称。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>
              检索文档字符串、完整的帮助文件名称和路径、要使用的本地化上下文以及帮助文件中库帮助主题的上下文 ID。
            </summary>
      <param name="memid">
                类型描述的成员标识符。
              </param>
      <param name="pbstrHelpString">
                此方法返回时，将包含一个含有指定项名称的 <see langword="BSTR" />。
                 如果调用方不需要项名称，则 <paramref name="pbstrHelpString" /> 可以是 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="pdwHelpStringContext">
                此方法返回时，将包含帮助文件的本地化上下文。
                 如果调用方不需要帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以是 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="pbstrHelpStringDll">
                此方法返回时，将包含 <see langword="BSTR" />，其中包含某个文件的完全限定名称，该文件包含用于帮助文件的 DLL。
                 如果调用方不需要文件名称，则 <paramref name="pbstrHelpStringDll" /> 可以是 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>
              从指定函数获取自定义数据。
            </summary>
      <param name="index">
                要为其获取自定义数据的函数的索引。
              </param>
      <param name="guid">
                用于标识数据的 GUID。
              </param>
      <param name="pVarVal">
                此方法返回时，会包含一个 <see langword="Object" />，指定放置数据的位置。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构，其中包含有关指定的函数的信息。
            </summary>
      <param name="index">
                要返回的函数说明的索引。
              </param>
      <param name="ppFuncDesc">
                此方法返回时，包含对引用 <see langword="FUNCDESC" /> 结构，它描述指定的函数。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>
              根据已知 DISPID 绑定到特定成员，其中成员名称未知（例如，绑定到默认成员时）。
            </summary>
      <param name="memid">
                成员标识符。
              </param>
      <param name="invKind">
        <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一，该值指定由 memid 标识的成员种类。
              </param>
      <param name="pFuncIndex">
                它在此方法返回时会将一个索引包含到函数中。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>
              成员名称和成员 Id 和参数名称和参数 Id 之间的映射。
            </summary>
      <param name="rgszNames">
                要映射的名称数组。
              </param>
      <param name="cNames">
                要映射的名称的计数。
              </param>
      <param name="pMemId">
                此方法返回时，包含到放置名称映射的一个数组的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>
              获取自定义数据的实现类型。
            </summary>
      <param name="index">
                自定义数据的实现类型的索引。
              </param>
      <param name="guid">
                使用 GUID 来标识的数据。
              </param>
      <param name="pVarVal">
                此方法返回时，包含 <see langword="Object" /> ，它指定在何处放置检索到的数据。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 一个实现的接口或基接口类型说明中的值。
            </summary>
      <param name="index">
                实现的接口或基接口的索引。
              </param>
      <param name="pImplTypeFlags">
                此方法返回时，包含对引用 <see langword="IMPLTYPEFLAGS" /> 枚举。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>
              封送处理信息的检索。
            </summary>
      <param name="memid">
                成员 ID，它指示需要哪些封送处理信息。
              </param>
      <param name="pBstrMops">
                此方法返回时，包含对引用 <see langword="opcode" /> 封送处理该结构的字段中使用字符串描述根据所引用的类型的说明，或返回 <see langword="null" /> 如果没有要返回的信息。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>
              检索与指定的成员 ID （或属性或方法及其参数的名称） 的变量。 对应于指定的函数 id。
            </summary>
      <param name="memid">
                其名称 （或名称） 是要返回的成员的 ID。
              </param>
      <param name="rgBstrNames">
                此方法返回时，包含与成员关联的名称 （或名称）。
                 此参数未经初始化即被传递。
              </param>
      <param name="cMaxNames">
                长度 <paramref name="rgBstrNames" /> 数组。
              </param>
      <param name="pcNames">
                此方法返回时，包含中的名称数目 <paramref name="rgBstrNames" /> 数组。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>
              获取指定的自定义数据参数。
            </summary>
      <param name="indexFunc">
                要为其获取自定义数据的函数的索引。
              </param>
      <param name="indexParam">
                要获取自定义数据的此函数参数的索引。
              </param>
      <param name="guid">
                用于标识数据的 GUID。
              </param>
      <param name="pVarVal">
                此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>
              检索的被引用的类型说明之后，如果类型说明引用其他类型说明。
            </summary>
      <param name="hRef">
                指向要返回的引用的类型说明的句柄。
              </param>
      <param name="ppTI">
                此方法返回时，包含引用的类型说明。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>
              检索实现的接口类型的类型说明，如果类型说明描述 COM 类。
            </summary>
      <param name="index">
                返回其句柄实现类型的索引。
              </param>
      <param name="href">
                此方法返回时，包含对实现的接口的句柄的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>
              检索 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构，其中包含的类型说明的属性。
            </summary>
      <param name="ppTypeAttr">
                此方法返回时，包含对结构，其中包含此类型说明的属性的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>
              检索 <see langword="ITypeComp" /> 接口类型的说明，从而使客户端编译器要绑定到类型说明的成员。
            </summary>
      <param name="ppTComp">
                此方法返回时，包含对引用 <see langword="ITypeComp" /> 的包含类型库。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>
              在没有任何分配的情况下，返回类型标志。
               此方法返回 <see langword="DWORD" /> 类型标志，其可在不增加 <see langword="TYPEATTR" />（类型属性）的情况下扩展类型标志。
            </summary>
      <param name="pTypeFlags">
                此方法返回时，包含对 <see langword="TYPEFLAG" /> 的 <see langword="DWORD" /> 引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>
              快速返回 <see langword="TYPEKIND" /> 枚举，无需执行任何分配。
            </summary>
      <param name="pTypeKind">
                此方法返回时，会包含对 <see langword="TYPEKIND" /> 枚举的引用。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>
              获取自定义的数据变量。
            </summary>
      <param name="index">
                要获取的自定义数据的变量的索引。
              </param>
      <param name="guid">
                使用 GUID 来标识的数据。
              </param>
      <param name="pVarVal">
                此方法返回时，包含 <see langword="Object" /> ，它指定在何处放置检索到的数据。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>
              检索 <see langword="VARDESC" /> 描述指定的变量的结构。
            </summary>
      <param name="index">
                要返回的变量的说明的索引。
              </param>
      <param name="ppVarDesc">
                此方法返回时，包含对引用 <see langword="VARDESC" /> 描述指定的变量的结构。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>
              根据已知 <see langword="DISPID" /> 绑定到特定成员，其中成员名称未知（例如，绑定到默认成员时）。
            </summary>
      <param name="memid">
                成员标识符。
              </param>
      <param name="pVarIndex">
                此方法返回时会包含一个 <paramref name="memid" /> 索引。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>
              将调用一个方法或访问实现的类型说明描述的接口的对象的属性。
            </summary>
      <param name="pvInstance">
                对描述此类型描述的接口的引用。
              </param>
      <param name="memid">
                接口成员的标识符。
              </param>
      <param name="wFlags">
                描述该 invoke 调用的上下文的标志。
              </param>
      <param name="pDispParams">
                对包含参数的数组，每个数组中的元素数的计数和命名参数的 Dispid 数组的结构的引用。
              </param>
      <param name="pVarResult">
                对在其结果是要存储的位置的引用。
                 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />, ，<paramref name="pVarResult" /> 将被忽略。
                 设置为 <see langword="null" /> 如果不需要任何结果。
              </param>
      <param name="pExcepInfo">
                指向填写仅当异常信息结构的指针 <see langword="DISP_E_EXCEPTION" /> 返回。
              </param>
      <param name="puArgErr">
                如果 <see langword="Invoke" /> 返回 <see langword="DISP_E_TYPEMISMATCH" />, ，<paramref name="puArgErr" /> 指示具有不正确的类型的参数的索引。
                 如果多个参数返回一个错误， <paramref name="puArgErr" /> 指示仅具有错误的第一个参数。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 以前由返回结构 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 方法。
            </summary>
      <param name="pFuncDesc">
                对引用 <see langword="FUNCDESC" /> 结构释放。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 以前由返回结构 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 方法。
            </summary>
      <param name="pTypeAttr">
                对引用 <see langword="TYPEATTR" /> 结构释放。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>
              版本 <see langword="VARDESC" /> 以前由返回结构 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 方法。
            </summary>
      <param name="pVarDesc">
                对引用 <see langword="VARDESC" /> 结构释放。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>
              提供的托管的定义 <see langword="ITypeLib" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>
              在类型库中查找匹配项的类型说明。
            </summary>
      <param name="szNameBuf">
                要搜索的名称。
                 这是一个输入/输出参数。
              </param>
      <param name="lHashVal">
                哈希值，以加快搜索，由计算 <see langword="LHashValOfNameSys" /> 函数。
                 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。
              </param>
      <param name="ppTInfo">
                此方法返回时，包含指向包含在指定的名称的类型说明的指针的数组 <paramref name="szNameBuf" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="rgMemId">
                一个数组 <see langword="MEMBERID" /> 的所找到的项; <paramref name="rgMemId" /> [i] 是 <see langword="MEMBERID" /> ，它由指定的类型说明到索引 <paramref name="ppTInfo" /> [i]。
                 不能为 <see langword="null" />。
              </param>
      <param name="pcFound">
                在进入时，指示要查找的实例数。
                 例如， <paramref name="pcFound" /> = 1 可以调用以查找第一个匹配项。
                 当找到一个实例时，将停止搜索。
              
                在退出时，指示未找到的实例数。
                 如果 <see langword="in" /> 和 <see langword="out" /> 值 <paramref name="pcFound" /> 是相同的可能有多个包含名称的类型说明。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>
              检索库的文档字符串、 完整的帮助文件名称和路径和帮助文件中的库帮助主题的上下文标识符。
            </summary>
      <param name="index">
                其文档是要返回的类型说明的索引。
              </param>
      <param name="strName">
                此方法返回时，包含表示指定项的名称的字符串。
                 此参数未经初始化即被传递。
              </param>
      <param name="strDocString">
                此方法返回时，包含一个字符串，表示指定项的文档字符串。
                 此参数未经初始化即被传递。
              </param>
      <param name="dwHelpContext">
                此方法返回时，包含与指定的项相关联的帮助上下文标识符。
                 此参数未经初始化即被传递。
              </param>
      <param name="strHelpFile">
                此方法返回时，包含表示帮助文件的完全限定的名称的字符串。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>
              检索包含库的属性的结构。
            </summary>
      <param name="ppTLibAttr">
                此方法返回时，包含一个结构，其中包含库的特性。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>
              使客户端编译器能够绑定到库的类型、 变量、 常量和全局函数。
            </summary>
      <param name="ppTComp">
                此方法返回时，包含的一个实例 <see langword="ITypeComp" /> 此实例 <see langword="ITypeLib" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>
              检索库中指定的类型说明。
            </summary>
      <param name="index">
                索引 <see langword="ITypeInfo" /> 接口以返回。
              </param>
      <param name="ppTI">
                此方法返回时，包含 <see langword="ITypeInfo" /> 描述所引用的类型 <paramref name="index" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>
              返回的类型库中的类型说明的数量。
            </summary>
      <returns>
              类型库中的类型说明的数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>
              检索与指定 GUID 相对应的类型说明。
            </summary>
      <param name="guid">
                请求的类型信息的类的 CLSID 的接口的 IID。
              </param>
      <param name="ppTInfo">
                此方法返回时，包含请求 <see langword="ITypeInfo" /> 接口。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>
              检索类型说明的类型。
            </summary>
      <param name="index">
                类型库中的类型说明的索引。
              </param>
      <param name="pTKind">
                此方法返回时，包含对引用 <see langword="TYPEKIND" /> 枚举为的类型说明。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>
              指示传入的字符串包含一种类型的名称，还是在库中描述的成员。
            </summary>
      <param name="szNameBuf">
                要测试的字符串。
                 这是一个输入/输出参数。
              </param>
      <param name="lHashVal">
                哈希值 <paramref name="szNameBuf" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="szNameBuf" /> 在类型库中找到; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 结构最初从获取 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 方法。
            </summary>
      <param name="pTLibAttr">
        <see langword="TLIBATTR" /> 结构释放。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>
              提供的托管的定义 <see langword="ITypeLib2" /> 接口。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>
              在类型库中查找匹配项的类型说明。
            </summary>
      <param name="szNameBuf">
                要搜索的名称。
              </param>
      <param name="lHashVal">
                哈希值，以加快搜索，由计算 <see langword="LHashValOfNameSys" /> 函数。
                 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。
              </param>
      <param name="ppTInfo">
                此方法返回时，包含指向包含在指定的名称的类型说明的指针的数组 <paramref name="szNameBuf" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="rgMemId">
                此方法返回时，包含的数组 <see langword="MEMBERID" />所找到的项; s <paramref name="rgMemId" /> [i] 是 <see langword="MEMBERID" /> ，它由指定的类型说明到索引 <paramref name="ppTInfo" /> [i]。
                 此参数不能为 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="pcFound">
                在进入时，一个值，通过引用传递，指示要查找的实例数。
                 例如， <paramref name="pcFound" /> = 1 可以调用以查找第一个匹配项。
                 当找到一个实例时，将停止搜索。
              
                在退出时，指示未找到的实例数。
                 如果 <see langword="in" /> 和 <see langword="out" /> 值 <paramref name="pcFound" /> 是相同的可能有多个包含名称的类型说明。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>
              获取库中所有自定义数据项。
            </summary>
      <param name="pCustData">
                指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>
              获取自定义数据。
            </summary>
      <param name="guid">
                由引用传递的用于标识该数据的 <see cref="T:System.Guid" />。
              </param>
      <param name="pVarVal">
                返回此方法时，会包含一个对象，可指定放置检索到的数据的位置。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>
              检索库的文档字符串、 完整的帮助文件名称和路径和帮助文件中的库帮助主题的上下文标识符。
            </summary>
      <param name="index">
                其文档是要返回的类型说明的索引。
              </param>
      <param name="strName">
                此方法返回时，包含一个字符串，指定指定的项的名称。
                 此参数未经初始化即被传递。
              </param>
      <param name="strDocString">
                此方法返回时，包含指定项的文档字符串。
                 此参数未经初始化即被传递。
              </param>
      <param name="dwHelpContext">
                此方法返回时，包含与指定的项相关联的帮助上下文标识符。
                 此参数未经初始化即被传递。
              </param>
      <param name="strHelpFile">
                此方法返回时，包含指定的帮助文件的完全限定的名称的字符串。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>
              检索库的文档字符串、完整的帮助文件名称和路径、要使用的本地化上下文以及帮助文件中库帮助主题的上下文 ID。
            </summary>
      <param name="index">
                要返回其文档的类型描述的索引；如果 <paramref name="index" /> 为 -1，则返回库的文档。
              </param>
      <param name="pbstrHelpString">
                此方法返回时，将包含用于指定特定项名称的 BSTR。
                 如果调用方不需要项名称，则 <paramref name="pbstrHelpString" /> 可以是 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="pdwHelpStringContext">
                此方法返回时，将包含帮助文件的本地化上下文。
                 如果调用方不需要帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以是 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
      <param name="pbstrHelpStringDll">
                此方法返回时，将包含 BSTR，其指定包含用于帮助文件的 DLL 的文件的完全限定名称。
                 如果调用方不需要文件名称，则 <paramref name="pbstrHelpStringDll" /> 可以是 <see langword="null" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>
              检索包含库的属性的结构。
            </summary>
      <param name="ppTLibAttr">
                此方法返回时，包含一个结构，其中包含库的特性。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>
              返回有关的类型库所需的有效地调整大小的哈希表的统计信息。
            </summary>
      <param name="pcUniqueNames">
                一个指向唯一名称的计数。
                 如果调用方不需要此信息，将设置为 <see langword="null" />。
              </param>
      <param name="pcchUniqueNames">
                此方法返回时，包含在计数中的唯一的名称更改为一个指针。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>
              使客户端编译器能够绑定到库的类型、 变量、 常量和全局函数。
            </summary>
      <param name="ppTComp">
                此方法返回时，包含 <see langword="ITypeComp" /> 此实例 <see langword="ITypeLib" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>
              检索库中指定的类型说明。
            </summary>
      <param name="index">
                索引 <see langword="ITypeInfo" /> 接口以返回。
              </param>
      <param name="ppTI">
                此方法返回时，包含 <see langword="ITypeInfo" /> 描述所引用的类型 <paramref name="index" />。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>
              返回的类型库中的类型说明的数量。
            </summary>
      <returns>
              类型库中的类型说明的数。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>
              检索与指定 GUID 相对应的类型说明。
            </summary>
      <param name="guid">
        <see cref="T:System.Guid" />, ，按引用传递，表示接口的 IID <see langword="CLSID" /> 请求的类型信息的类接口。
              </param>
      <param name="ppTInfo">
                此方法返回时，包含请求 <see langword="ITypeInfo" /> 接口。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>
              检索类型说明的类型。
            </summary>
      <param name="index">
                类型库中的类型说明的索引。
              </param>
      <param name="pTKind">
                此方法返回时，包含对引用 <see langword="TYPEKIND" /> 枚举为的类型说明。
                 此参数未经初始化即被传递。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>
              指示传入的字符串包含一种类型的名称，还是在库中描述的成员。
            </summary>
      <param name="szNameBuf">
                要测试的字符串。
              </param>
      <param name="lHashVal">
                哈希值 <paramref name="szNameBuf" />。
              </param>
      <returns>
        <see langword="true" /> 如果 <paramref name="szNameBuf" /> 在类型库中找到; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>
              版本 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 结构最初从获取 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 方法。
            </summary>
      <param name="pTLibAttr">
        <see langword="TLIBATTR" /> 结构释放。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>
              定义应用于类型库的标志。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>
              类型库描述控件，且不应显示在类型浏览器中适用于非可视对象。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>
              类型库中磁盘上持久形式存在。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>
              尽管它的使用不受限制，则不应给用户，显示的类型库。
               应由控件使用的类型库。
               主机应创建一个新的类型库中包装控件具有扩展属性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>
              类型库受到限制，且不应显示给用户。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>
              包含关于如何在进程间传输结构元素、参数或函数返回值的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>
              为进程间所传递的值表示的指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>
              表示位掩码值，用于描述结构元素、 参数或返回值。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>
              说明如何在进程间传输结构元素、参数或函数返回值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>
              此参数的自定义数据。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>
              该参数定义了默认行为。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>
              该参数将信息从调用方传递到被调用方。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>
              该参数是客户端应用程序的本地标识符。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>
              该参数是可选的。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>
              参数向调用方返回从被调用方的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>
              参数是该成员的返回值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>
              未指定该参数将传递还是接收的信息。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>
              提供的托管的定义 <see langword="STATDATA" /> 结构。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>
              表示 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 枚举值，该值确定何时通知接收器通知的数据中的更改。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>
              表示 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 将接收更改通知的接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>
              表示唯一地标识通知连接的令牌。
               通过设置通知连接的方法将返回此标记。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>
              表示 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 指向通知接收器的感兴趣的数据的结构。
               通知接收器将接收此指定的数据发生更改的通知 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>
              包含关于开源存储器、流或字节数组对象的统计信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>
              指定此存储、 流或字节数组的上次访问时间。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>
              指定大小，单位为字节流或字节数组。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>
              表示存储对象的类标识符。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>
              指示为此存储、 流或字节数组的创建时间。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>
              指示的区域锁定流或字节数组支持的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>
              指示对象处于打开状态时指定的访问模式。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>
              指示存储对象的当前状态位 (最新设置的值 <see langword="IStorage::SetStateBits" /> 方法)。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>
              指示为此存储、 流或字节数组的上次修改时间。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>
              以 null 结尾的字符串包含此结构所描述的对象的名称表示的指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>
              留待将来使用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>
              指示存储对象，它是一个值的类型从 <see langword="STGTY" /> 枚举。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>
              提供的托管的定义 <see langword="STGMEDIUM" /> 结构。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>
              表示指向允许发送进程来控制当接收进程调用释放存储的方法以界面实例的指针 <see langword="ReleaseStgMedium" /> 函数。
               如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 是 <see langword="null" />, ，<see langword="ReleaseStgMedium" /> ，则使用默认过程来释放存储; 否则为 <see langword="ReleaseStgMedium" /> 使用指定 <see langword="IUnknown" /> 接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>
              指定的存储介质的类型。
               封送处理和取消封送例程使用此值来确定使用的联合成员。
               此值必须是元素之一 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>
              表示句柄、 字符串或接收进程可用于访问正在传输的数据的接口指针。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>
              标识目标操作系统平台。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>
              目标操作系统为类型库是 Apple Macintosh。
               默认情况下，所有数据字段在甚至字节边界上都对齐。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>
              目标操作系统为类型库是 16 位 Windows 系统。
               默认情况下，数据字段被压缩。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>
              类型库的目标操作系统是 32 位 Windows 系统。
               默认情况下，自然对齐的数据字段 （例如，2 字节整数在偶字节边界对齐; 4 字节整数在四字边界上对齐，依此类推）。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>
              类型库的目标操作系统是 64 位 Windows 系统。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>
              提供的托管的定义 <see langword="TYMED" /> 结构。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>
              存储介质是增强型图元文件。
               如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 <see langword="null" />, ，则目标进程应使用 <see langword="DeleteEnhMetaFile" /> 删除位图。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>
              存储媒体是由路径标识的磁盘文件。
               如果 <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 <see langword="null" />, ，则目标进程应使用 <see langword="OpenFile" /> 删除该文件。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>
              存储媒体是一个图形设备接口 (GDI) 组件 (HBITMAP)。
               如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 <see langword="null" />, ，则目标进程应使用 <see langword="DeleteObject" /> 删除位图。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>
              存储介质是全局内存句柄 (HGLOBAL)。
               分配有 GMEM_SHARE 标志全局句柄。
               如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 <see langword="null" />, ，则目标进程应使用 <see langword="GlobalFree" /> 释放的内存。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>
              该存储介质是由标识存储组件 <see langword="IStorage" /> 指针。
               数据采用的流和包含由此存储 <see langword="IStorage" /> 实例。
               如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不是 <see langword="null" />, ，则目标进程应使用 <see langword="IStorage::Release" /> 释放存储组件。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>
              该存储介质是由标识的流对象 <see langword="IStream" /> 指针。
               使用 <see langword="ISequentialStream::Read" /> 读取数据。
               如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不是 <see langword="null" />, ，则目标进程应使用 <see langword="IStream::Release" /> 释放流组件。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>
              存储介质是图元文件 (HMETAFILE)。
               使用 Windows 或 WIN32 函数访问图元文件的数据。
               如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 <see langword="null" />, ，则目标进程应使用 <see langword="DeleteMetaFile" /> 删除位图。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>
              不传递的任何数据。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>
              包含属性的 <see langword="UCOMITypeInfo" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>
              指定此类型的实例的字节对齐。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>
              此类型的实例的大小。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>
              此类型的虚拟方法表 (VTBL) 的大小。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>
              指示此结构描述的接口上的函数数目。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>
              指示此结构描述的接口上实现的接口的数目。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>
              指示变量和此结构所描述的接口上的数据字段的数目。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>
              留待将来使用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>
              类型信息的 GUID。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>
              描述的类型的 IDL 特性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>
              成员名称和文档字符串的区域设置。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>
              留待将来使用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>
              与使用常量 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 和 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 字段。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>
              构造函数中，ID 或 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> 如果 none。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>
              析构函数中，ID 或 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> 如果 none。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>
              如果 <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> = = <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, ，指定此类程序别名的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>
              一个 <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 值，该值描述此信息描述的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>
              主版本号。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>
              次版本号。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>
              一个 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 值，该值描述此信息。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>
              描述变量的类型、函数的返回类型或函数参数的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>
              如果变量是 <see langword="VT_SAFEARRAY" /> 或 <see langword="VT_PTR" />, 、 <see langword="lpValue" /> 字段包含一个指向 <see langword="TYPEDESC" /> 指定的元素类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>
              指示此描述的选项的 variant 类型 <see langword="TYPEDESC" />。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>
              定义类型说明的属性和特性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>
              该类支持聚合。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>
              描述的类型说明 <see langword="Application" /> 对象。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>
              可以通过创建该类型的实例 <see langword="ITypeInfo::CreateInstance" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>
              类型为其他类型从其将派生以及不应该向用户显示的控件。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>
              指示该接口派生自 <see langword="IDispatch" />, ，直接或间接。
               计算此标志;没有此标志的对象描述语言。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>
              该接口提供 <see langword="IDispatch" /> 和 VTBL 绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>
              类型不应显示给浏览器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>
              该类型已授权。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>
              此接口不能在运行时添加成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>
              在界面中使用的类型都与自动化，包括 VTBL 绑定支持完全兼容。
               设置双重接口上的设置了这两个此标志和  <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />。
               在调度接口上不允许使用此标志。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>
              类型是预定义的。
               客户端应用程序应自动创建具有此属性的对象的单个实例。
               指向的对象的名称是变量的该对象的类名称相同。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>
              指示该接口将使用代理/存根动态链接库。
               此标志指定注销类型库时不应取消注册类型库代理。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>
              对象支持 <see langword="IConnectionPointWithDefault" />, ，而且具有默认行为。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>
              不应从宏语言中访问。
               此标志专供系统级别的类型或类型浏览器的类型不应显示。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>
              指示应检查基接口的名称解析之前检查子级，它是默认行为的相反值。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>
              指定各种类型的数据和函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>
              另一种类型的别名类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>
              一组实现的组件接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>
              一组方法和属性都可通过访问 <see langword="IDispatch::Invoke" />。
               默认情况下，双重接口返回 <see langword="TKIND_DISPATCH" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>
              一组枚举器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>
              具有虚函数，所有这些都是纯的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>
              枚举结束标记。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>
              模块，它可以包含静态函数和数据 (例如，一个 DLL)。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>
              一种结构不包含任何方法。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>
              偏移量为零的所有成员的联合。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>
              标识特定的类型库，并为成员名称提供本地化支持。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>
              表示类型库的全局唯一的库 ID。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>
              表示类型库的区域设置 ID。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>
              表示类型库的目标硬件平台。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>
              表示库的标志。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>
              表示类型库的主版本号。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>
              表示类型库的次版本号。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>
              包含有关变量的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>
              描述符号常量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>
              指示此实例内的变量的偏移量。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>
              描述变量、常量或数据成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>
              包含有关变量的信息。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>
              包含该变量的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>
              此字段保留供将来使用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>
              指示变量的成员 ID。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>
              定义如何封送变量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>
              定义一个变量的属性。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>
              标识定义变量属性的常量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>
              该变量支持数据绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>
              该变量是最能代表该对象的唯一属性。
               类型信息中的仅有一个变量可以具有此特性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>
              允许一种优化方式编译器查找名为"xyz"的"abc"的类型的成员。
               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
               允许在调度接口和接口; 中的成员上执行不允许对模块。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>
              作为可绑定向用户显示该变量。
              <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> 此外必须设置。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>
              尽管它存在并且为可绑定，则不应在浏览器中，向用户显示该变量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>
              该变量将作为单独的可绑定属性映射。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>
              该变量出现在对象浏览器，但不是在属性浏览器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>
              不应允许向变量赋值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>
              标记为具有默认行为的接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>
              任何设置时，试图直接更改对的调用中的属性结果 <see langword="IPropertyNotifySink::OnRequestEdit" />。
               实现 <see langword="OnRequestEdit" /> 决定是否接受此更改。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>
              不应从宏语言中访问该变量。
               此标志旨在用于系统级别的变量或不希望类型浏览器显示的变量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>
              该变量返回一个对象，它的事件源。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>
              该变量是在用户界面中的默认显示。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>
              定义变量的种类。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>
        <see langword="VARDESC" /> 结构介绍了符号常量。
               没有与之关联的内存。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>
              只能通过访问此变量 <see langword="IDispatch::Invoke" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>
              该变量是一个字段或成员的类型。
               它存在于类型的每个实例中的固定偏移量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>
              没有该变量的一个实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>
              指定当您注销从 COM; 中使用的程序集时要调用的方法这允许用户编写的代码在注销过程的执行。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>
              表示句柄资源的包装类。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>
              用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类的新实例。
            </summary>
      <param name="invalidHandleValue">
                无效句柄的值（通常为 0 或 -1）。
              </param>
      <exception cref="T:System.TypeLoadException">
                  派生类驻留在不具备非托管代码访问权限的程序集中。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>
              释放由 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类所使用的非托管资源，指定是否执行常规释放操作。
            </summary>
      <param name="disposing">
                如进行常规释放操作，则为 <see langword="true" />；如终结句柄，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>
              释放与句柄关联的所有资源。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>
              指定要包装的句柄。
            </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>
              获取一个值，该值指示句柄是否已关闭。
            </summary>
      <returns>
              如果句柄已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>
              在派生类中重写时，获取一个值，该值指示句柄值是否无效。
            </summary>
      <returns>
              如果句柄无效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>
              在派生类中重写时，执行释放句柄所需的代码。
            </summary>
      <returns>
              如果句柄释放成功，则为 <see langword="true" />；如果出现灾难性故障，则为 <see langword=" false" />。
               这种情况下，它生成一个 releaseHandleFailed MDA 托管调试助手。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>
              将句柄设置为预先存在的指定句柄。
            </summary>
      <param name="handle">
                要使用的预先存在的句柄。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>
              将句柄标记为无效。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>
              包装的对象应以封送拆收器 <see langword="VT_CY" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类 <see langword="Decimal" /> 包装并作为类型封送 <see langword="VT_CY" />。
            </summary>
      <param name="obj">
        <see langword="Decimal" /> 包装并作为封送 <see langword="VT_CY" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类对象，其中包含 <see langword="Decimal" /> 包装并作为类型封送 <see langword="VT_CY" />。
            </summary>
      <param name="obj">
                对象，其中包含 <see langword="Decimal" /> 包装并作为封送 <see langword="VT_CY" />。
              </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数不是 <see cref="T:System.Decimal" /> 类型。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>
              获取作为类型封送的包装的对象 <see langword="VT_CY" />。
            </summary>
      <returns>
              作为类型封送的包装的对象 <see langword="VT_CY" />。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>
              指示是否 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法的 IUnknown::QueryInterface 调用可使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>
              IUnknown::QueryInterface 方法调用都可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。
               当您使用此值， <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法重载的功能类似 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 重载。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>
              IUnknown::QueryInterface 方法调用都应忽略 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>
              提供有关返回值 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>
              特定的接口 ID 的接口不可用。
               在这种情况下，返回的接口是 <see langword="null" />。
               E_NOINTERFACE 返回给调用方 IUnknown::QueryInterface。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>
              从返回的接口指针 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法可以用作的结果 IUnknown::QueryInterface。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>
              自定义 <see langword="QueryInterface" /> 未使用。
               相反的默认实现 IUnknown::QueryInterface 应使用。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>
              指定的值的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 枚举。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 类的新实例。
            </summary>
      <param name="charSet">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 值之一。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>
              获取默认值为 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />。
            </summary>
      <returns>
              默认值为 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />。
            </returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>
              表示缺少的 <see cref="T:System.Object" />。
               无法继承此类。
            </summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>
              表示的唯一实例 <see cref="T:System.Reflection.Missing" /> 类。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>
              提供了一套 <see langword="static" /> 返回有关公共语言运行时环境的信息的方法。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>
              测试是否在全局程序集缓存中加载指定的程序集。
            </summary>
      <param name="a">
                要测试的程序集。
              </param>
      <returns>
        <see langword="true" /> 如果在全局程序集缓存中; 加载程序集否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>
              返回公共语言运行时所在的目录。
            </summary>
      <returns>
              一个字符串，包含指向安装公共语言运行库的目录的路径。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>
              返回指定的接口上指定的类。
            </summary>
      <param name="clsid">
                所需的类的标识符。
              </param>
      <param name="riid">
                所需的接口的标识符。
              </param>
      <returns>
              指向所请求的接口的非托管的指针。
            </returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">
                  IUnknown::QueryInterface 发生故障。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>
              返回表示 COM 对象通过指向的指针的类型的实例及其 <see langword="IUnknown" /> 接口。
            </summary>
      <param name="clsid">
                所需的类的标识符。
              </param>
      <param name="riid">
                所需的接口的标识符。
              </param>
      <returns>
              一个对象，表示指定的非托管 COM 对象。
            </returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">
                  IUnknown::QueryInterface 发生故障。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>
              获取当前进程中运行公共语言运行时的版本号。
            </summary>
      <returns>
              包含公共语言运行时的版本号的字符串。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>
              获取系统配置文件的路径。
            </summary>
      <returns>
              系统配置文件的路径。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>
              时引发的异常的传入秩 <see langword="SAFEARRAY" /> 与托管签名中指定的秩不匹配。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>
              使用默认值初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see langword="SafeArrayRankMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                指示异常原因的消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="SafeArrayTypeMismatchException" /> 从序列化数据的类。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>
              时引发的异常的类型传入 <see langword="SAFEARRAY" /> 与托管签名中指定的类型不匹配。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>
              使用默认值初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                指示异常原因的消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see langword="SafeArrayTypeMismatchException" /> 从序列化数据的类。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>
              提供可用于读取和写入的受控内存缓冲区。
               尝试访问受控缓冲区（不足和溢出）以外的内存会引发异常。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>
              创建的新实例 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 类，并指定是否可靠地释放缓冲区句柄。
            </summary>
      <param name="ownsHandle">
                若要在终止阶段可靠地释放此句柄，则为 <see langword="true" />；若要阻止可靠释放（不建议使用），则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>
              获取从对象的指针 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 的内存块的对象。
            </summary>
      <param name="pointer">
                一个字节的指针，通过引用传递，以从接收指针 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 对象。
                 必须将该指针设置为 <see langword="null" /> 之前调用此方法。
              </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>
              获取用字节表示的缓冲区的大小。
            </summary>
      <returns>
              中的内存缓冲区的字节数。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>
              以字节为单位定义的内存区域的分配大小。
               在使用之前，必须调用此方法 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 实例。
            </summary>
      <param name="numBytes">
                缓冲区中的字节数。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> 小于零。
                
                  - 或 -
                
                  <paramref name="numBytes" /> 已超过可用地址空间。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>
              通过使用指定的元素和元素大小数指定的内存缓冲区的分配大小。
               在使用之前，必须调用此方法 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 实例。
            </summary>
      <param name="numElements">
                缓冲区中的元素数目。
              </param>
      <param name="sizeOfEachElement">
                缓冲区中的每个元素的大小。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> 小于零。
                
                  - 或 -
                
                  <paramref name="sizeOfEachElement" /> 小于零。
                
                  - 或 -
                
                  <paramref name="numElements" /> 乘以 <paramref name="sizeOfEachElement" /> 大于可用的地址空间。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>
              通过指定的值类型的数量来定义内存区域的分配大小。
               在使用之前，必须调用此方法 <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 实例。
            </summary>
      <param name="numElements">
                要分配的内存的值类型的元素数。
              </param>
      <typeparam name="T">
                要分配的内存的值类型。
              </typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> 小于零。
                
                  - 或 -
                
                  <paramref name="numElements" /> 乘以每个大小元素大于可用地址空间。
                </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.IsInvalid">
      <returns>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>
              从指定偏移量处的内存中读取值类型。
            </summary>
      <param name="byteOffset">
                从其读取值类型的位置。
                 您可能需要考虑对齐问题。
              </param>
      <typeparam name="T">
                要读取的值类型。
              </typeparam>
      <returns>
              从内存中读取值类型。
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>
              从内存的偏移位置开始读取指定的数目的值类型，并将其写入到数组的索引处开始。
            </summary>
      <param name="byteOffset">
                从其开始读取的位置。
              </param>
      <param name="array">
                要写入的输出数组。
              </param>
      <param name="index">
                在输出数组中开始写入的位置。
              </param>
      <param name="count">
                若要从输入数组中读取和写入输出数组中的值类型的数量。
              </param>
      <typeparam name="T">
                要读取的值类型。
              </typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                  - 或 -
                
                  <paramref name="count" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  减去索引数组的长度小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>
              释放一个指针，它通过获得 <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> 方法。
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>
              写入内存中的给定位置的值类型。
            </summary>
      <param name="byteOffset">
                在开始写入的位置。
                 您可能需要考虑对齐问题。
              </param>
      <param name="value">
                要写入的值。
              </param>
      <typeparam name="T">
                要写入的值类型。
              </typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>
              通过读取输入数组中的指定位置开始的字节写入到的内存位置的值类型的指定的数目。
            </summary>
      <param name="byteOffset">
                要写入的内存中的位置。
              </param>
      <param name="array">
                输入的数组中。
              </param>
      <param name="index">
                从其开始读取的数组中的偏移量。
              </param>
      <param name="count">
                值类型设置为写入数。
              </param>
      <typeparam name="T">
                要写入的值类型。
              </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 也不可小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                  减去输入数组的长度 <paramref name="index" /> 是小于 <paramref name="count" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 不调用方法。
                </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>
              表示操作系统句柄的包装类。
               必须继承此类。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>
              用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类的新实例。
            </summary>
      <param name="invalidHandleValue">
                无效句柄的值（通常为 0 或 -1）。
                <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 的实现应对此值返回 <see langword="true" />。
              </param>
      <param name="ownsHandle">
                在终止阶段使 <see langword="true" /> 可靠地释放句柄，则为 <see cref="T:System.Runtime.InteropServices.SafeHandle" />；否则为 <see langword="false" />（不建议使用）。
              </param>
      <exception cref="T:System.TypeLoadException">
                  派生类驻留在不具备非托管代码访问权限的程序集中。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>
              手动递增 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 实例中的引用计数器。
            </summary>
      <param name="success">
                如果成功递增引用计数器，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>
              返回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 字段的值。
            </summary>
      <returns>
        <see langword="IntPtr" />，表示 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 字段的值。
               如果句柄已使用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> 标记为无效，此方法仍返回原来的句柄值，该值可能已失效。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>
              手动递减 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 实例中的引用计数器。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>
              释放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类所使用的非托管资源，指定是否执行常规释放操作。
            </summary>
      <param name="disposing">
                如进行常规释放操作，则为 <see langword="true" />；如终结句柄，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>
              释放与句柄关联的所有资源。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>
              指定要包装的句柄。
            </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>
              获取一个值，该值指示句柄是否已关闭。
            </summary>
      <returns>
              如果句柄已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>
              在派生类中重写时，获取一个值，该值指示句柄值是否无效。
            </summary>
      <returns>
              如果句柄值无效，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>
              在派生类中重写时，执行释放句柄所需的代码。
            </summary>
      <returns>
              如果句柄释放成功，则为 <see langword="true" />；如果出现灾难性故障，则为 <see langword=" false" />。
               这种情况下，它生成一个 releaseHandleFailed MDA 托管调试助手。
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>
              将句柄设置为预先存在的指定句柄。
            </summary>
      <param name="handle">
                要使用的预先存在的句柄。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>
              将句柄标记为不再使用。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>
              表示结构化异常处理 (SEH) 错误。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>
              初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 使用指定的消息的类。
            </summary>
      <param name="message">
                指示异常原因的消息。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 从序列化数据的类。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                导致当前异常的异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>
              指示是否可以将异常恢复，并且从引发异常的点，代码可以继续是否。
            </summary>
      <returns>
              始终 <see langword="false" />, ，这是因为未实现可恢复的异常。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>
              为类型等效提供支持。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>
              创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>
              创建的新实例 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类具有指定的作用域和标识符。
            </summary>
      <param name="scope">
                第一个类型等效性字符串。
              </param>
      <param name="identifier">
                第二个类型等效性字符串。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>
              获取的值 <paramref name="identifier" /> 参数传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数。
            </summary>
      <returns>
              构造函数的值 <paramref name="identifier" /> 参数。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>
              获取的值 <paramref name="scope" /> 参数传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数。
            </summary>
      <returns>
              构造函数的值 <paramref name="scope" /> 参数。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>
              包含 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> ，最初为此方法从 COM 类型库导入。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值初始化 <see langword="TypeLibFuncAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 特性化的方法都可以找到已从导入的类型库中的值。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值初始化 <see langword="TypeLibFuncAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 特性化的方法都可以找到已从导入的类型库中的值。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>
              获取 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 此方法的值。
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 此方法的值。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>
              描述的原始设置 <see langword="FUNCFLAGS" /> 导入此方法从 COM 类型库中。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>
              用于支持数据绑定的函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>
              最佳的函数表示的对象。
               类型信息中的只有一个函数可以具有此特性。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>
              允许一种优化方式编译器查找名为"xyz"类型"abc"的成员。
               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>
              作为可绑定向用户显示该函数。
              <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> 此外必须设置。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>
              该函数不应显示给用户，，尽管它存在并且为可绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>
              该函数是作为单独的可绑定属性映射。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>
              该属性将显示在对象浏览器，但不是在属性浏览器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>
              标记为具有默认行为的接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>
              设置时，任何调用的方法的第一次调用中设置的属性结果 <see langword="IPropertyNotifySink::OnRequestEdit" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>
              此标志适用于系统级别的功能或不应显示类型浏览器的函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>
              函数将返回一个对象，它的事件源。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>
              类型信息成员是在用户界面中显示的默认成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>
              该函数支持 <see langword="GetLastError" />。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>
              指定使用哪些 <see cref="T:System.Type" /> 以独占方式使用的接口。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> 类指定 <see cref="T:System.Type" /> ，以独占方式使用的接口。
            </summary>
      <param name="importClass">
        <see cref="T:System.Type" /> 独占使用接口的对象。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>
              获取名称 <see cref="T:System.Type" /> 独占使用接口的对象。
            </summary>
      <returns>
              名称 <see cref="T:System.Type" /> 独占使用接口的对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>
              包含 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 最初为此类型从 COM 类型库导入。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值初始化 <see langword="TypeLibTypeAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 从中导入的类型库中的属性化类型都可以找到的值。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值初始化 <see langword="TypeLibTypeAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 从中导入的类型库中的属性化类型都可以找到的值。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>
              获取 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 这种类型的值。
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 这种类型的值。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>
              描述的原始设置 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 从中导入该类型的 COM 类型库中。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>
              该类支持聚合。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>
              描述的类型说明 <see langword="Application" /> 对象。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>
              可以通过创建该类型的实例 <see langword="ITypeInfo::CreateInstance" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>
              类型为其他类型从其将派生以及不应该向用户显示的控件。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>
              指示该接口派生自 <see langword="IDispatch" />, ，直接或间接。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>
              该接口提供 <see langword="IDispatch" /> 和 V-表绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>
              类型不应显示给浏览器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>
              该类型已授权。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>
              此接口不能在运行时添加成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>
              在界面中使用的类型都与自动化，包括 vtable 绑定支持完全兼容。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>
              类型是预定义的。
               客户端应用程序应自动创建具有此属性的对象的单个实例。
               指向的对象的名称是变量的该对象的类名称相同。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>
              对象支持 <see langword="IConnectionPointWithDefault" />, ，而且具有默认行为。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>
              此标志专供系统级别的类型或类型浏览器的类型不应显示。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>
              指示基接口应该检查子接口前检查来进行名称解析。
               这是默认行为的相反值。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>
              包含 <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> 最初为此字段从 COM 类型库导入。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 可从中导入的类型库中的特性化字段值。
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>
              使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 类的新实例。
            </summary>
      <param name="flags">
        <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 可从中导入的类型库中的特性化字段值。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>
              获取 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 此字段的值。
            </summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 此字段的值。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>
              描述的原始设置 <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> 从中导入该变量的 COM 类型库中。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>
              该变量支持数据绑定。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>
              该变量是最能代表该对象的唯一属性。
               类型信息中的仅有一个变量可以具有此值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>
              允许一种优化方式编译器查找名为"xyz"类型"abc"的成员。
               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>
              该变量将显示为可绑定。
              <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> 此外必须设置。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>
              尽管它存在并且为可绑定，则不应在浏览器中，显示该变量。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>
              该变量将作为单独的可绑定属性映射。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>
              该变量出现在对象浏览器，但不是在属性浏览器。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>
              不应允许向变量赋值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>
              标记为具有默认行为的接口。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>
              指示该属性支持 COM <see langword="OnRequestEdit" /> 通知。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>
              此标志适用于系统级别的功能或不应显示类型浏览器的函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>
              该变量返回一个对象，它的事件源。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>
              用户界面中的默认显示。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>
              指定导出的类型库的版本号。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> 类与类型库的主版本号和次版本号。
            </summary>
      <param name="major">
                类型库的主版本号。
              </param>
      <param name="minor">
                次版本号，类型库。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>
              获取类型库的主版本号。
            </summary>
      <returns>
              类型库的主版本号。
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>
              获取类型库的次版本号。
            </summary>
      <returns>
              次版本号，类型库。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>
              包装的对象应以封送拆收器 <see langword="VT_UNKNOWN" />。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 与要包装的对象的类。
            </summary>
      <param name="obj">
                正在包装的对象。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>
              获取包含此包装的对象。
            </summary>
      <returns>
              包装的对象。
            </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>
              控制作为非托管函数指针传递到非托管代码（或从非托管代码中传递）的委托签名的封送处理行为。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 类，具有指定的调用约定。
            </summary>
      <param name="callingConvention">
                指定调用约定。
              </param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>
              启用或禁用最佳的映射行为，在将 Unicode 字符转换为 ANSI 字符。
            </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>
              获取调用约定的值。
            </summary>
      <returns>
              指定调用约定的值 <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 构造函数。
            </returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>
              指示如何封送到该方法的字符串参数和控件名称重整。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>
              指示是否被调用方调用 <see langword="SetLastError" /> 从特性化的方法返回之前的 Win32 API 函数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>
              启用或禁用引发的异常在转换为 ANSI"？"字符。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>
              指定如何将参数或字段封送到非托管代码。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>
              ANSI 字符串是一个带有长度前缀的单字节字符串。
               可以在 <see cref="T:System.String" /> 数据类型上使用此成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>
              一个动态类型，将在运行时确定对象的类型，并将该对象作为所确定的类型进行封送处理。
               该成员仅对平台调用方法有效。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>
              4 字节布尔值 (<see langword="true" /> != 0, <see langword="false" /> = 0)。
               这是 Win32 BOOL 类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>
              长度前缀为双字节的 Unicode 字符串。
               可以在 <see cref="T:System.String" /> 数据类型上使用此成员（它是 COM 中的默认字符串）。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>
              当 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 属性被设置为 <see langword="ByValArray" /> 时，必须设置 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段以指示该数组中的元素数。
               当需要区分字符串类型时，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 字段可以选择包含数组元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。
               此 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 只可用于结构中其元素作为字段出现的数组。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>
              用于在结构中出现的内联定长字符数组。
               与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr" /> 一起使用的字符类型由应用于包含结构的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 参数确定。
               应始终使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段来指示数组的大小。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>
              货币类型。
               在 <see cref="T:System.Decimal" /> 上使用，以将十进制数值作为 COM 货币类型而不是 <see langword="Decimal" /> 封送。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>
              当与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 字段一起使用时，指定自定义封送拆收器类。
              <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 字段可用于将附加信息传递给自定义封送拆收器。
               可以在任何引用类型上使用此成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>
              一个本机类型，此类型与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> 关联且将导致参数作为导出类型库中的 HRESULT 导出。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>
              一个可用作 C 样式函数指针的整数。
               可将此成员用于 <see cref="T:System.Delegate" /> 数据类型或从 <see cref="T:System.Delegate" /> 继承的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>
              
                Windows 运行时 字符串。
               可以在 <see cref="T:System.String" /> 数据类型上使用此成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>
              1 字节有符号整数。
               可使用此成员将布尔值转换为 1 字节、C 样式的 <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0)。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>
              2 字节有符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>
              4 字节有符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>
              8 字节有符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>
              COM <see langword="IDispatch" /> 指针（Microsoft Visual Basic 6.0 中的 <see langword="Object" />）。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>
              
                Windows 运行时 接口指针。
               可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>
              COM 接口指针。
               接口的 <see cref="T:System.Guid" /> 可从类元数据获得。
               如果将此成员应用于类，则可以使用该成员指定确切的接口类型或默认的接口类型。
               应用于 <see cref="T:System.Object" /> 数据类型时，此成员将产生与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> 相同的行为。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>
              COM <see langword="IUnknown" /> 指针。
               可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>
              指向 C 样式数组的第一个元素的指针。
               当从托管到非托管代码进行封送处理时，该数组的长度由托管数组的长度确定。
               从非托管到托管代码进行封送处理时，将根据 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 字段确定该数组的长度，当需要区分字符串类型时，还可以后跟数组中元素的非托管类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>
              单字节、以 null 结尾的 ANSI 字符串。
               可以在 <see cref="T:System.String" /> 和 <see cref="T:System.Text.StringBuilder" /> 数据类型上使用此成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>
              一个指针，它指向用于封送托管格式化类的 C 样式结构。
               该成员仅对平台调用方法有效。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>
              与平台相关的字符串：在 Windows 98 上为 ANSI，在 Windows NT 和 Windows XP 上为 Unicode。
               该值仅支持平台调用而不支持 COM 互操作，因为不支持导出 <see langword="LPTStr" /> 类型的字符串。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>
              指向 UTF-8 编码字符串的指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>
              一个 2 字节、以 null 结尾的 Unicode 字符串。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>
              4 字节浮点数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>
              8 字节浮点数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <see langword="SafeArray" /> 是自我描述的数组，它带有关联数组数据的类型、秩和界限。
               可将此成员与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 字段一起使用，以替代默认元素类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>
              一个用于封送托管格式化类和值类型的 VARIANT。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>
              与平台相关的有符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>
              与平台相关的无符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>
              一个有长度前缀的与平台相关的 <see langword="char" /> 字符串：在 Windows 98 上为 ANSI，在 Windows NT 上为 Unicode。
               很少用到这个类似于 BSTR 的成员。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>
              1 字节无符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>
              2 字节无符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>
              4 字节无符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>
              8 字节无符号整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>
              2 字节、OLE 定义的 VARIANT_BOOL 类型 (<see langword="true" /> = -1, <see langword="false" /> = 0)。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>
              一个值，该值使 Visual Basic 能够更改非托管代码中的字符串，并使结果在托管代码中反映出来。
               该值仅支持平台调用。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>
              指示如何封送数组元素数组封送时从托管代码流向非托管代码作为 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>
              指示 <see langword="SAFEARRAY" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>
              指示长度为前缀字节。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>
              指示 blob 包含对象。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>
              指示一个布尔值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>
              指示 BSTR 字符串。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>
              指示一个值，是的引用。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>
              指示 C 样式数组。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>
              指示剪贴板格式。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>
              指示类 id。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>
              指示货币值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>
              指示日期值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>
              指示 <see langword="decimal" /> 值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>
              指示 <see langword="IDispatch" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>
              指示未指定的值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>
              指示 SCODE。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>
              指示 FILETIME 值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>
              指示一个 HRESULT。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>
              指示 <see langword="char" /> 值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>
              指示 <see langword="short" /> 整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>
              指示 <see langword="long" /> 整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>
              指示 64 位整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>
              表示一个整数值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>
              指示以 null 结尾的字符串。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>
              指示被终止的宽字符串 <see langword="null" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>
              指示 null 值，类似于 SQL 中的 null 值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>
              指示指针类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>
              指示 <see langword="float" /> 值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>
              指示 <see langword="double" /> 值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>
              指示用户定义的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>
              指示 SAFEARRAY。
               不在一个变量中有效。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>
              指示后跟是存储的名称。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>
              指示存储包含一个对象。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>
              指示后跟一个流的名称。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>
              指示流包含一个对象。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>
              指示 <see langword="byte" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>
              指示 <see langword="unsigned" /><see langword="short" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>
              指示 <see langword="unsigned" /><see langword="long" />。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>
              指示 64 位无符号的整数。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>
              指示 <see langword="unsigned" /> 整数值。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>
              指示 <see langword="IUnknown" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>
              指示用户定义的类型。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>
              指示 VARIANT <see langword="far" /> 指针。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>
              指示简单、 计数数组。
            </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>
              指示 C 样式 <see langword="void" />。
            </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>
              将数据类型的封送 <see langword="VT_VARIANT | VT_BYREF" /> 从托管代码流向非托管代码。
               此类不能被继承。
            </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 为指定的类 <see cref="T:System.Object" /> 参数。
            </summary>
      <param name="obj">
                要封送的对象。
              </param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>
              获取包装的对象 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象。
            </summary>
      <returns>
              包装的对象 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象。
            </returns>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>
              当在某个地址读取或写入一个单元的数据，但该地址的数据大小不是该数据单元的整数倍时引发的异常。
               无法继承此类。
            </summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>
              初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> 描述错误的对象。
                <paramref name="message" /> 的内容设计为易于理解。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.DataMisalignedException" /> 类使用指定的错误消息和基础异常。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> 描述错误的对象。
                <paramref name="message" /> 的内容设计为易于理解。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常 <see cref="T:System.DataMisalignedException" />。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
  </members>
</doc>